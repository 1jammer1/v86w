{
"version":3,
"file":"build/v86_all.js",
"lineCount":605,
"mappings":"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V7B,CClJJ,CDgKI,IAAAD,EChKJ,CDgK0B,IAAAlD,EChK1B,CDgK8C,IAAAoD,EChK9C,CDgKgE,IAAAD,EChKhE,CDkKO,IAAAD,EClKP,IDkKgC,IAAAA,EClKhC,CDkKsD,CClKtD,IDqKQ,IAAAA,ECrKR,CDqK8B5vB,IAAAC,MAAA,CAAW,IAAA2vB,EAAX,CCrK9B,EDgLQxQ,CChLR,CDgLc9I,CAAA4I,EAAAE,GChLd,CDmLIA,CCnLJ2Q,GAAA,CA/TwCC,EA+TxC,CAAA,EDoLiD,CCpLjD,EDoLgE,CCpLhE,CDoLsD,IAAA3F,GCpLtD,CDqLIjL,CCrLJ2Q,GAAA,CA/U+BE,EA+U/B,CAAA,CDqLmC7Q,CChM5B2Q,GAAA,CApUwBE,EAoUxB,CAWP,CDqLmE,ECrLnE,CDqL0E,GCrL1E,CDwLI7Q,CCxLJ2Q,GAAA,CDwLmBrwB,ECxLnB,CAAA,CDwL4B,IAAAkwB,ECxL5B,CDwLkD,GCxLlD,CDyLIxQ,CCzLJ2Q,GAAA,CDyLmBrwB,ECzLnB,CAAA,CDyL4B,IAAAkwB,ECzL5B,EDyLmD,CCzLnD,CDyLuD,GCzLvD,CD0LIxQ,CC1LJ2Q,GAAA,CD0LmBrwB,EC1LnB,CAAA,CD0L4B,IAAAowB,EC1L5B,CD0L8C,GC1L9C,CD2LI1Q,CC3LJ2Q,GAAA,CD2LmBrwB,EC3LnB,CAAA,CD2L4BwS,GC3L5B,CD4LIkN,CC5LJ2Q,GAAA,CD4LmBrwB,EC5LnB,CAAA,CD4L4BwS,GC5L5B,CD6LIkN,CC7LJ2Q,GAAA,CD6LmBrwB,EC7LnB,CAAA;AD6L4BwS,GC7L5B,CD8LIkN,CC9LJ2Q,GAAA,CD8LmBrwB,EC9LnB,CAAA,CD8L4B,IAAAkwB,EC9L5B,CD8LkD,GC9LlD,CD+LIxQ,CC/LJ2Q,GAAA,CD+LmBrwB,EC/LnB,CAAA,CD+L4B,IAAAkwB,EC/L5B,ED+LmD,CC/LnD,CD+LuD,GC/LvD,CDgMIxQ,CChMJ2Q,GAAA,CDgMmBrwB,EChMnB,CAAA,CDgM4B,IAAAmwB,EChM5B,CDgMqD,GAxDrD,CA+DA,KAAAK,GAAA,CAAa,CACTC,GAAc,CADL,CAETC,GAAiB,CAFR,CAGTC,GAAY,CAHH,CA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GXn0D,CD6GW,CAAuB,CAAvB,CAA5B,CACAmqD,GAAA,CC9GiBnqD,CD8GjB,CAA4Bm0D,CAAA,CC9GXn0D,CD8GW,CAAuB,EAAvB,CAA5B,CC9GiBA,EDgHjByiD,EAAA,C1B7LmBoc,E0B6LnB,CAAA,CAAqB6N,EAAA,CChHJ1sE,CDgHI,CChHJA,EDiHjByiD,EAAA,C1B/LmBmc,E0B+LnB,CAAA,CAAqB8N,EAAA,CCjHJ1sE,CDiHI,CCjHJA,EDkHjByiD,EAAA,C1BjMmBsc,E0BiMnB,CAAA,CAAqB2N,EAAA,CClHJ1sE,CDkHI,CACrBs0D,GAAA,CCnHiBt0D,CDmHjB,CAAsB,CAAtB,CCnHiBA,EDoHjByiD,EAAA,C1BrMmBkc,C0BqMnB,CAAA,CAAqB+N,EAAA,CCpHJ1sE,CDoHI,CCpHJA,EDqHjByiD,EAAA,C1BvMmB+pB,C0BuMnB,CAAA,CAAqBE,EAAA,CCrHJ1sE,CDqHI,CCrHJA,EDsHjByiD,EAAA,C1BzMmBub,C0ByMnB,CAAA,CAAqB0O,EAAA,CCtHJ1sE,CDsHI,CCtHJA,EDuHjByiD,EAAA,C1B3MmB2mB,C0B2MnB,CAAA,CAAqBsD,EAAA,CCvHJ1sE,CDuHI,CCvHN,CACnB6pE;CAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAA7pE,CAAA,CAAO,CD2HfmqD,EAAA,CC3HiBnqD,CD2HjB,CAA4Bm0D,CAAA,CC3HXn0D,CD2HW,CAAuB,CAAvB,CAA5B,CACAmqD,GAAA,CC5HiBnqD,CD4HjB,CAA4Bm0D,CAAA,CC5HXn0D,CD4HW,CAAuB,EAAvB,CAA5B,CC5HiBA,ED8HjBsiD,EAAA,C1BrNoB6O,C0BqNpB,CAAA,CAAuBwb,EAAA,CC9HN3sE,CD8HM,CC9HNA,ED+HjBsiD,EAAA,C1BvNoB2O,C0BuNpB,CAAA,CAAuB0b,EAAA,CC/HN3sE,CD+HM,CC/HNA,EDgIjBsiD,EAAA,C1BzNoByO,C0ByNpB,CAAA,CAAuB4b,EAAA,CChIN3sE,CDgIM,CACvBs0D,GAAA,CCjIiBt0D,CDiIjB,CAAsB,CAAtB,CCjIiBA,EDkIjBsiD,EAAA,C1B7NoBiE,C0B6NpB,CAAA,CAAuBomB,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",
"sources":["lib/closure-base.js"," [synthetic:es6/util/arrayiterator] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/checkstringargs] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:util/polyfill] "," [synthetic:es6/string/repeat] "," [synthetic:es6/string/endswith] "," [synthetic:es6/math/trunc] "," [synthetic:es6/symbol] "," [synthetic:es6/util/iteratorfromarray] "," [synthetic:es6/array/entries] "," [synthetic:es6/array/fill] "," [synthetic:util/owns] "," [synthetic:es6/weakmap] "," [synthetic:es6/map] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/construct] "," [synthetic:es6/reflect/construct] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/reflect/setprototypeof] ","lib/9p.js","lib/filesystem.js","src/browser/screen.js","src/browser/main.js","src/browser/starter.js","src/io.js","src/const.js","src/main.js","src/cpu.js","src/config.js","src/lib.js","src/sb16.js","src/fpu.js","src/ide.js","src/rtc.js","src/memory.js","src/pci.js","src/floppy.js","src/dma.js","src/pit.js","src/vga.js","src/ps2.js","src/pic.js","src/uart.js","src/state.js","src/ne2k.js","src/virtio.js","lib/jor1k.js","src/bus.js","src/modrm.js","src/string.js","src/arith.js","src/misc_instr.js","src/instructions.js","src/debug.js","src/elf.js","lib/marshall.js","lib/utf8.js","src/browser/keyboard.js","src/browser/mouse.js","src/browser/speaker.js","src/browser/serial.js","src/browser/network.js","src/browser/lib.js","src/browser/dummy_screen.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n//      http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n\r\n/**\r\n * @fileoverview Bootstrap for the Google JS Library (Closure).\r\n *\r\n * In uncompiled mode base.js will write out Closure's deps file, unless the\r\n * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to\r\n * include their own deps file(s) from different locations.\r\n *\r\n * @author arv@google.com (Erik Arvidsson)\r\n *\r\n * @provideGoog\r\n */\r\n\r\n\r\n/**\r\n * @define {boolean} Overridden to true by the compiler when --closure_pass\r\n *     or --mark_as_compiled is specified.\r\n */\r\nvar COMPILED = false;\r\n\r\n\r\n/**\r\n * Base namespace for the Closure library.  Checks to see goog is already\r\n * defined in the current scope before assigning to prevent clobbering if\r\n * base.js is loaded more than once.\r\n *\r\n * @const\r\n */\r\nvar goog = goog || {};\r\n\r\n\r\n/**\r\n * Reference to the global context.  In most cases this will be 'window'.\r\n */\r\ngoog.global = this;\r\n\r\n\r\n/**\r\n * A hook for overriding the define values in uncompiled mode.\r\n *\r\n * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before\r\n * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},\r\n * {@code goog.define} will use the value instead of the default value.  This\r\n * allows flags to be overwritten without compilation (this is normally\r\n * accomplished with the compiler's \"define\" flag).\r\n *\r\n * Example:\r\n * <pre>\r\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\r\n * </pre>\r\n *\r\n * @type {Object<string, (string|number|boolean)>|undefined}\r\n */\r\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\r\n\r\n\r\n/**\r\n * A hook for overriding the define values in uncompiled or compiled mode,\r\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\r\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\r\n *\r\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\r\n * string literals or the compiler will emit an error.\r\n *\r\n * While any @define value may be set, only those set with goog.define will be\r\n * effective for uncompiled code.\r\n *\r\n * Example:\r\n * <pre>\r\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\r\n * </pre>\r\n *\r\n * @type {Object<string, (string|number|boolean)>|undefined}\r\n */\r\ngoog.global.CLOSURE_DEFINES;\r\n\r\n\r\n/**\r\n * Returns true if the specified value is not undefined.\r\n * WARNING: Do not use this to test if an object has a property. Use the in\r\n * operator instead.\r\n *\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is defined.\r\n */\r\ngoog.isDef = function(val) {\r\n  // void 0 always evaluates to undefined and hence we do not need to depend on\r\n  // the definition of the global variable named 'undefined'.\r\n  return val !== void 0;\r\n};\r\n\r\n\r\n/**\r\n * Builds an object structure for the provided namespace path, ensuring that\r\n * names that already exist are not overwritten. For example:\r\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\r\n * Used by goog.provide and goog.exportSymbol.\r\n * @param {string} name name of the object that this file defines.\r\n * @param {*=} opt_object the object to expose at the end of the path.\r\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\r\n *     is |goog.global|.\r\n * @private\r\n */\r\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\r\n  var parts = name.split('.');\r\n  var cur = opt_objectToExportTo || goog.global;\r\n\r\n  // Internet Explorer exhibits strange behavior when throwing errors from\r\n  // methods externed in this manner.  See the testExportSymbolExceptions in\r\n  // base_test.html for an example.\r\n  if (!(parts[0] in cur) && cur.execScript) {\r\n    cur.execScript('var ' + parts[0]);\r\n  }\r\n\r\n  // Certain browsers cannot parse code in the form for((a in b); c;);\r\n  // This pattern is produced by the JSCompiler when it collapses the\r\n  // statement above into the conditional loop below. To prevent this from\r\n  // happening, use a for-loop and reserve the init logic as below.\r\n\r\n  // Parentheses added to eliminate strict JS warning in Firefox.\r\n  for (var part; parts.length && (part = parts.shift());) {\r\n    if (!parts.length && goog.isDef(opt_object)) {\r\n      // last part and we have an object; use it\r\n      cur[part] = opt_object;\r\n    } else if (cur[part]) {\r\n      cur = cur[part];\r\n    } else {\r\n      cur = cur[part] = {};\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Defines a named value. In uncompiled mode, the value is retrieved from\r\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\r\n * has the property specified, and otherwise used the defined defaultValue.\r\n * When compiled the default can be overridden using the compiler\r\n * options or the value set in the CLOSURE_DEFINES object.\r\n *\r\n * @param {string} name The distinguished name to provide.\r\n * @param {string|number|boolean} defaultValue\r\n */\r\ngoog.define = function(name, defaultValue) {\r\n  var value = defaultValue;\r\n  if (!COMPILED) {\r\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&\r\n        Object.prototype.hasOwnProperty.call(\r\n            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\r\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\r\n    } else if (goog.global.CLOSURE_DEFINES &&\r\n        Object.prototype.hasOwnProperty.call(\r\n            goog.global.CLOSURE_DEFINES, name)) {\r\n      value = goog.global.CLOSURE_DEFINES[name];\r\n    }\r\n  }\r\n  goog.exportPath_(name, value);\r\n};\r\n\r\n\r\n/**\r\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\r\n * that should not be included in a production js_binary can be easily stripped\r\n * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most\r\n * toString() methods should be declared inside an \"if (goog.DEBUG)\" conditional\r\n * because they are generally used for debugging purposes and it is difficult\r\n * for the JSCompiler to statically determine whether they are used.\r\n */\r\ngoog.define('goog.DEBUG', true);\r\n\r\n\r\n/**\r\n * @define {string} LOCALE defines the locale being used for compilation. It is\r\n * used to select locale specific data to be compiled in js binary. BUILD rule\r\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as JSCompiler\r\n * option.\r\n *\r\n * Take into account that the locale code format is important. You should use\r\n * the canonical Unicode format with hyphen as a delimiter. Language must be\r\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\r\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\r\n *\r\n * See more info about locale codes here:\r\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\r\n *\r\n * For language codes you should use values defined by ISO 693-1. See it here\r\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\r\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\r\n * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.\r\n */\r\ngoog.define('goog.LOCALE', 'en');  // default to en\r\n\r\n\r\n/**\r\n * @define {boolean} Whether this code is running on trusted sites.\r\n *\r\n * On untrusted sites, several native functions can be defined or overridden by\r\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\r\n * to false forces closure to use its own implementations when possible.\r\n *\r\n * If your JavaScript can be loaded by a third party site and you are wary about\r\n * relying on non-standard implementations, specify\r\n * \"--define goog.TRUSTED_SITE=false\" to the JSCompiler.\r\n */\r\ngoog.define('goog.TRUSTED_SITE', true);\r\n\r\n\r\n/**\r\n * @define {boolean} Whether a project is expected to be running in strict mode.\r\n *\r\n * This define can be used to trigger alternate implementations compatible with\r\n * running in EcmaScript Strict mode or warn about unavailable functionality.\r\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\r\n *\r\n */\r\ngoog.define('goog.STRICT_MODE_COMPATIBLE', false);\r\n\r\n\r\n/**\r\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\r\n *     be disallowed in the compilation unit.\r\n */\r\ngoog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\r\n\r\n\r\n/**\r\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\r\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\r\n */\r\ngoog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\r\n\r\n\r\n/**\r\n * Defines a namespace in Closure.\r\n *\r\n * A namespace may only be defined once in a codebase. It may be defined using\r\n * goog.provide() or goog.module().\r\n *\r\n * The presence of one or more goog.provide() calls in a file indicates\r\n * that the file defines the given objects/namespaces.\r\n * Provided symbols must not be null or undefined.\r\n *\r\n * In addition, goog.provide() creates the object stubs for a namespace\r\n * (for example, goog.provide(\"goog.foo.bar\") will create the object\r\n * goog.foo.bar if it does not already exist).\r\n *\r\n * Build tools also scan for provide/require/module statements\r\n * to discern dependencies, build dependency files (see deps.js), etc.\r\n *\r\n * @see goog.require\r\n * @see goog.module\r\n * @param {string} name Namespace provided by this file in the form\r\n *     \"goog.package.part\".\r\n */\r\ngoog.provide = function(name) {\r\n  if (!COMPILED) {\r\n    // Ensure that the same namespace isn't provided twice.\r\n    // A goog.module/goog.provide maps a goog.require to a specific file\r\n    if (goog.isProvided_(name)) {\r\n      throw Error('Namespace \"' + name + '\" already declared.');\r\n    }\r\n  }\r\n\r\n  goog.constructNamespace_(name);\r\n};\r\n\r\n\r\n/**\r\n * @param {string} name Namespace provided by this file in the form\r\n *     \"goog.package.part\".\r\n * @param {Object=} opt_obj The object to embed in the namespace.\r\n * @private\r\n */\r\ngoog.constructNamespace_ = function(name, opt_obj) {\r\n  if (!COMPILED) {\r\n    delete goog.implicitNamespaces_[name];\r\n\r\n    var namespace = name;\r\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\r\n      if (goog.getObjectByName(namespace)) {\r\n        break;\r\n      }\r\n      goog.implicitNamespaces_[namespace] = true;\r\n    }\r\n  }\r\n\r\n  goog.exportPath_(name, opt_obj);\r\n};\r\n\r\n\r\n/**\r\n * Module identifier validation regexp.\r\n * Note: This is a conservative check, it is very possible to be more lenient,\r\n *   the primary exclusion here is \"/\" and \"\\\" and a leading \".\", these\r\n *   restrictions are intended to leave the door open for using goog.require\r\n *   with relative file paths rather than module identifiers.\r\n * @private\r\n */\r\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\r\n\r\n\r\n/**\r\n * Defines a module in Closure.\r\n *\r\n * Marks that this file must be loaded as a module and claims the namespace.\r\n *\r\n * A namespace may only be defined once in a codebase. It may be defined using\r\n * goog.provide() or goog.module().\r\n *\r\n * goog.module() has three requirements:\r\n * - goog.module may not be used in the same file as goog.provide.\r\n * - goog.module must be the first statement in the file.\r\n * - only one goog.module is allowed per file.\r\n *\r\n * When a goog.module annotated file is loaded, it is enclosed in\r\n * a strict function closure. This means that:\r\n * - any variables declared in a goog.module file are private to the file\r\n * (not global), though the compiler is expected to inline the module.\r\n * - The code must obey all the rules of \"strict\" JavaScript.\r\n * - the file will be marked as \"use strict\"\r\n *\r\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\r\n * itself. If declared symbols are desired, use\r\n * goog.module.declareLegacyNamespace().\r\n *\r\n *\r\n * See the public goog.module proposal: http://goo.gl/Va1hin\r\n *\r\n * @param {string} name Namespace provided by this file in the form\r\n *     \"goog.package.part\", is expected but not required.\r\n */\r\ngoog.module = function(name) {\r\n  if (!goog.isString(name) ||\r\n      !name ||\r\n      name.search(goog.VALID_MODULE_RE_) == -1) {\r\n    throw Error('Invalid module identifier');\r\n  }\r\n  if (!goog.isInModuleLoader_()) {\r\n    throw Error('Module ' + name + ' has been loaded incorrectly.');\r\n  }\r\n  if (goog.moduleLoaderState_.moduleName) {\r\n    throw Error('goog.module may only be called once per module.');\r\n  }\r\n\r\n  // Store the module name for the loader.\r\n  goog.moduleLoaderState_.moduleName = name;\r\n  if (!COMPILED) {\r\n    // Ensure that the same namespace isn't provided twice.\r\n    // A goog.module/goog.provide maps a goog.require to a specific file\r\n    if (goog.isProvided_(name)) {\r\n      throw Error('Namespace \"' + name + '\" already declared.');\r\n    }\r\n    delete goog.implicitNamespaces_[name];\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @param {string} name The module identifier.\r\n * @return {?} The module exports for an already loaded module or null.\r\n *\r\n * Note: This is not an alternative to goog.require, it does not\r\n * indicate a hard dependency, instead it is used to indicate\r\n * an optional dependency or to access the exports of a module\r\n * that has already been loaded.\r\n * @suppress {missingProvide}\r\n */\r\ngoog.module.get = function(name) {\r\n  return goog.module.getInternal_(name);\r\n};\r\n\r\n\r\n/**\r\n * @param {string} name The module identifier.\r\n * @return {?} The module exports for an already loaded module or null.\r\n * @private\r\n */\r\ngoog.module.getInternal_ = function(name) {\r\n  if (!COMPILED) {\r\n    if (goog.isProvided_(name)) {\r\n      // goog.require only return a value with-in goog.module files.\r\n      return name in goog.loadedModules_ ?\r\n          goog.loadedModules_[name] :\r\n          goog.getObjectByName(name);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * @private {?{\r\n *   moduleName: (string|undefined),\r\n *   declareTestMethods: boolean\r\n * }}\r\n */\r\ngoog.moduleLoaderState_ = null;\r\n\r\n\r\n/**\r\n * @private\r\n * @return {boolean} Whether a goog.module is currently being initialized.\r\n */\r\ngoog.isInModuleLoader_ = function() {\r\n  return goog.moduleLoaderState_ != null;\r\n};\r\n\r\n\r\n/**\r\n * Indicate that a module's exports that are known test methods should\r\n * be copied to the global object.  This makes the test methods visible to\r\n * test runners that inspect the global object.\r\n *\r\n * TODO(johnlenz): Make the test framework aware of goog.module so\r\n * that this isn't necessary. Alternately combine this with goog.setTestOnly\r\n * to minimize boiler plate.\r\n * @suppress {missingProvide}\r\n * @deprecated This approach does not translate to ES6 module syntax, instead\r\n *    use goog.testing.testSuite to declare the test methods.\r\n */\r\ngoog.module.declareTestMethods = function() {\r\n  if (!goog.isInModuleLoader_()) {\r\n    throw new Error('goog.module.declareTestMethods must be called from ' +\r\n        'within a goog.module');\r\n  }\r\n  goog.moduleLoaderState_.declareTestMethods = true;\r\n};\r\n\r\n\r\n/**\r\n * Provide the module's exports as a globally accessible object under the\r\n * module's declared name.  This is intended to ease migration to goog.module\r\n * for files that have existing usages.\r\n * @suppress {missingProvide}\r\n */\r\ngoog.module.declareLegacyNamespace = function() {\r\n  if (!COMPILED && !goog.isInModuleLoader_()) {\r\n    throw new Error('goog.module.declareLegacyNamespace must be called from ' +\r\n        'within a goog.module');\r\n  }\r\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\r\n    throw Error('goog.module must be called prior to ' +\r\n        'goog.module.declareLegacyNamespace.');\r\n  }\r\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\r\n};\r\n\r\n\r\n/**\r\n * Marks that the current file should only be used for testing, and never for\r\n * live code in production.\r\n *\r\n * In the case of unit tests, the message may optionally be an exact namespace\r\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\r\n * provide (if not explicitly defined in the code).\r\n *\r\n * @param {string=} opt_message Optional message to add to the error that's\r\n *     raised when used in production code.\r\n */\r\ngoog.setTestOnly = function(opt_message) {\r\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\r\n    opt_message = opt_message || '';\r\n    throw Error('Importing test-only code into non-debug environment' +\r\n                (opt_message ? ': ' + opt_message : '.'));\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Forward declares a symbol. This is an indication to the compiler that the\r\n * symbol may be used in the source yet is not required and may not be provided\r\n * in compilation.\r\n *\r\n * The most common usage of forward declaration is code that takes a type as a\r\n * function parameter but does not need to require it. By forward declaring\r\n * instead of requiring, no hard dependency is made, and (if not required\r\n * elsewhere) the namespace may never be required and thus, not be pulled\r\n * into the JavaScript binary. If it is required elsewhere, it will be type\r\n * checked as normal.\r\n *\r\n *\r\n * @param {string} name The namespace to forward declare in the form of\r\n *     \"goog.package.part\".\r\n */\r\ngoog.forwardDeclare = function(name) {};\r\n\r\n\r\nif (!COMPILED) {\r\n\r\n  /**\r\n   * Check if the given name has been goog.provided. This will return false for\r\n   * names that are available only as implicit namespaces.\r\n   * @param {string} name name of the object to look for.\r\n   * @return {boolean} Whether the name has been provided.\r\n   * @private\r\n   */\r\n  goog.isProvided_ = function(name) {\r\n    return (name in goog.loadedModules_) ||\r\n        (!goog.implicitNamespaces_[name] &&\r\n            goog.isDefAndNotNull(goog.getObjectByName(name)));\r\n  };\r\n\r\n  /**\r\n   * Namespaces implicitly defined by goog.provide. For example,\r\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\r\n   * 'goog.events' must be namespaces.\r\n   *\r\n   * @type {!Object<string, (boolean|undefined)>}\r\n   * @private\r\n   */\r\n  goog.implicitNamespaces_ = {'goog.module': true};\r\n\r\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\r\n  // here and because the existing module package has not been moved yet out of\r\n  // the goog.module namespace. This satisifies both the debug loader and\r\n  // ahead-of-time dependency management.\r\n}\r\n\r\n\r\n/**\r\n * Returns an object based on its fully qualified external name.  The object\r\n * is not found if null or undefined.  If you are using a compilation pass that\r\n * renames property names beware that using this function will not find renamed\r\n * properties.\r\n *\r\n * @param {string} name The fully qualified name.\r\n * @param {Object=} opt_obj The object within which to look; default is\r\n *     |goog.global|.\r\n * @return {?} The value (object or primitive) or, if not found, null.\r\n */\r\ngoog.getObjectByName = function(name, opt_obj) {\r\n  var parts = name.split('.');\r\n  var cur = opt_obj || goog.global;\r\n  for (var part; part = parts.shift(); ) {\r\n    if (goog.isDefAndNotNull(cur[part])) {\r\n      cur = cur[part];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  return cur;\r\n};\r\n\r\n\r\n/**\r\n * Globalizes a whole namespace, such as goog or goog.lang.\r\n *\r\n * @param {!Object} obj The namespace to globalize.\r\n * @param {Object=} opt_global The object to add the properties to.\r\n * @deprecated Properties may be explicitly exported to the global scope, but\r\n *     this should no longer be done in bulk.\r\n */\r\ngoog.globalize = function(obj, opt_global) {\r\n  var global = opt_global || goog.global;\r\n  for (var x in obj) {\r\n    global[x] = obj[x];\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Adds a dependency from a file to the files it requires.\r\n * @param {string} relPath The path to the js file.\r\n * @param {!Array<string>} provides An array of strings with\r\n *     the names of the objects this file provides.\r\n * @param {!Array<string>} requires An array of strings with\r\n *     the names of the objects this file requires.\r\n * @param {boolean=} opt_isModule Whether this dependency must be loaded as\r\n *     a module as declared by goog.module.\r\n */\r\ngoog.addDependency = function(relPath, provides, requires, opt_isModule) {\r\n  if (goog.DEPENDENCIES_ENABLED) {\r\n    var provide, require;\r\n    var path = relPath.replace(/\\\\/g, '/');\r\n    var deps = goog.dependencies_;\r\n    for (var i = 0; provide = provides[i]; i++) {\r\n      deps.nameToPath[provide] = path;\r\n      deps.pathIsModule[path] = !!opt_isModule;\r\n    }\r\n    for (var j = 0; require = requires[j]; j++) {\r\n      if (!(path in deps.requires)) {\r\n        deps.requires[path] = {};\r\n      }\r\n      deps.requires[path][require] = true;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\r\n// to do \"debug-mode\" development.  The dependency system can sometimes be\r\n// confusing, as can the debug DOM loader's asynchronous nature.\r\n//\r\n// With the DOM loader, a call to goog.require() is not blocking -- the script\r\n// will not load until some point after the current script.  If a namespace is\r\n// needed at runtime, it needs to be defined in a previous script, or loaded via\r\n// require() with its registered dependencies.\r\n// User-defined namespaces may need their own deps file.  See http://go/js_deps,\r\n// http://go/genjsdeps, or, externally, DepsWriter.\r\n// https://developers.google.com/closure/library/docs/depswriter\r\n//\r\n// Because of legacy clients, the DOM loader can't be easily removed from\r\n// base.js.  Work is being done to make it disableable or replaceable for\r\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\r\n// for example). See bootstrap/ for more information.\r\n\r\n\r\n/**\r\n * @define {boolean} Whether to enable the debug loader.\r\n *\r\n * If enabled, a call to goog.require() will attempt to load the namespace by\r\n * appending a script tag to the DOM (if the namespace has been registered).\r\n *\r\n * If disabled, goog.require() will simply assert that the namespace has been\r\n * provided (and depend on the fact that some outside tool correctly ordered\r\n * the script).\r\n */\r\ngoog.define('goog.ENABLE_DEBUG_LOADER', true);\r\n\r\n\r\n/**\r\n * @param {string} msg\r\n * @private\r\n */\r\ngoog.logToConsole_ = function(msg) {\r\n  if (goog.global.console) {\r\n    goog.global.console['error'](msg);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Implements a system for the dynamic resolution of dependencies that works in\r\n * parallel with the BUILD system. Note that all calls to goog.require will be\r\n * stripped by the JSCompiler when the --closure_pass option is used.\r\n * @see goog.provide\r\n * @param {string} name Namespace to include (as was given in goog.provide()) in\r\n *     the form \"goog.package.part\".\r\n * @return {?} If called within a goog.module file, the associated namespace or\r\n *     module otherwise null.\r\n */\r\ngoog.require = function(name) {\r\n\r\n  // If the object already exists we do not need do do anything.\r\n  if (!COMPILED) {\r\n    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {\r\n      goog.maybeProcessDeferredDep_(name);\r\n    }\r\n\r\n    if (goog.isProvided_(name)) {\r\n      if (goog.isInModuleLoader_()) {\r\n        return goog.module.getInternal_(name);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (goog.ENABLE_DEBUG_LOADER) {\r\n      var path = goog.getPathFromDeps_(name);\r\n      if (path) {\r\n        goog.included_[path] = true;\r\n        goog.writeScripts_();\r\n        return null;\r\n      }\r\n    }\r\n\r\n    var errorMessage = 'goog.require could not find: ' + name;\r\n    goog.logToConsole_(errorMessage);\r\n\r\n    throw Error(errorMessage);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Path for included scripts.\r\n * @type {string}\r\n */\r\ngoog.basePath = '';\r\n\r\n\r\n/**\r\n * A hook for overriding the base path.\r\n * @type {string|undefined}\r\n */\r\ngoog.global.CLOSURE_BASE_PATH;\r\n\r\n\r\n/**\r\n * Whether to write out Closure's deps file. By default, the deps are written.\r\n * @type {boolean|undefined}\r\n */\r\ngoog.global.CLOSURE_NO_DEPS;\r\n\r\n\r\n/**\r\n * A function to import a single script. This is meant to be overridden when\r\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\r\n * in the global scope so that it can be set before base.js is loaded, which\r\n * allows deps.js to be imported properly.\r\n *\r\n * The function is passed the script source, which is a relative URI. It should\r\n * return true if the script was imported, false otherwise.\r\n * @type {(function(string): boolean)|undefined}\r\n */\r\ngoog.global.CLOSURE_IMPORT_SCRIPT;\r\n\r\n\r\n/**\r\n * Null function used for default values of callbacks, etc.\r\n * @return {void} Nothing.\r\n */\r\ngoog.nullFunction = function() {};\r\n\r\n\r\n\r\n/**\r\n * When defining a class Foo with an abstract method bar(), you can do:\r\n * Foo.prototype.bar = goog.abstractMethod\r\n *\r\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\r\n * when bar() is invoked.\r\n *\r\n * Note: This does not take the name of the function to override as an argument\r\n * because that would make it more difficult to obfuscate our JavaScript code.\r\n *\r\n * @type {!Function}\r\n * @throws {Error} when invoked to indicate the method should be overridden.\r\n */\r\ngoog.abstractMethod = function() {\r\n  throw Error('unimplemented abstract method');\r\n};\r\n\r\n\r\n/**\r\n * Adds a {@code getInstance} static method that always returns the same\r\n * instance object.\r\n * @param {!Function} ctor The constructor for the class to add the static\r\n *     method to.\r\n */\r\ngoog.addSingletonGetter = function(ctor) {\r\n  ctor.getInstance = function() {\r\n    if (ctor.instance_) {\r\n      return ctor.instance_;\r\n    }\r\n    if (goog.DEBUG) {\r\n      // NOTE: JSCompiler can't optimize away Array#push.\r\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\r\n    }\r\n    return ctor.instance_ = new ctor;\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * All singleton classes that have been instantiated, for testing. Don't read\r\n * it directly, use the {@code goog.testing.singleton} module. The compiler\r\n * removes this variable if unused.\r\n * @type {!Array<!Function>}\r\n * @private\r\n */\r\ngoog.instantiatedSingletons_ = [];\r\n\r\n\r\n/**\r\n * @define {boolean} Whether to load goog.modules using {@code eval} when using\r\n * the debug loader.  This provides a better debugging experience as the\r\n * source is unmodified and can be edited using Chrome Workspaces or similar.\r\n * However in some environments the use of {@code eval} is banned\r\n * so we provide an alternative.\r\n */\r\ngoog.define('goog.LOAD_MODULE_USING_EVAL', true);\r\n\r\n\r\n/**\r\n * @define {boolean} Whether the exports of goog.modules should be sealed when\r\n * possible.\r\n */\r\ngoog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\r\n\r\n\r\n/**\r\n * The registry of initialized modules:\r\n * the module identifier to module exports map.\r\n * @private @const {!Object<string, ?>}\r\n */\r\ngoog.loadedModules_ = {};\r\n\r\n\r\n/**\r\n * True if goog.dependencies_ is available.\r\n * @const {boolean}\r\n */\r\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\r\n\r\n\r\nif (goog.DEPENDENCIES_ENABLED) {\r\n  /**\r\n   * Object used to keep track of urls that have already been added. This record\r\n   * allows the prevention of circular dependencies.\r\n   * @private {!Object<string, boolean>}\r\n   */\r\n  goog.included_ = {};\r\n\r\n\r\n  /**\r\n   * This object is used to keep track of dependencies and other data that is\r\n   * used for loading scripts.\r\n   * @private\r\n   * @type {{\r\n   *   pathIsModule: !Object<string, boolean>,\r\n   *   nameToPath: !Object<string, string>,\r\n   *   requires: !Object<string, !Object<string, boolean>>,\r\n   *   visited: !Object<string, boolean>,\r\n   *   written: !Object<string, boolean>,\r\n   *   deferred: !Object<string, string>\r\n   * }}\r\n   */\r\n  goog.dependencies_ = {\r\n    pathIsModule: {}, // 1 to 1\r\n\r\n    nameToPath: {}, // 1 to 1\r\n\r\n    requires: {}, // 1 to many\r\n\r\n    // Used when resolving dependencies to prevent us from visiting file twice.\r\n    visited: {},\r\n\r\n    written: {}, // Used to keep track of script files we have written.\r\n\r\n    deferred: {} // Used to track deferred module evaluations in old IEs\r\n  };\r\n\r\n\r\n  /**\r\n   * Tries to detect whether is in the context of an HTML document.\r\n   * @return {boolean} True if it looks like HTML document.\r\n   * @private\r\n   */\r\n  goog.inHtmlDocument_ = function() {\r\n    var doc = goog.global.document;\r\n    return typeof doc != 'undefined' &&\r\n           'write' in doc;  // XULDocument misses write.\r\n  };\r\n\r\n\r\n  /**\r\n   * Tries to detect the base path of base.js script that bootstraps Closure.\r\n   * @private\r\n   */\r\n  goog.findBasePath_ = function() {\r\n    if (goog.global.CLOSURE_BASE_PATH) {\r\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\r\n      return;\r\n    } else if (!goog.inHtmlDocument_()) {\r\n      return;\r\n    }\r\n    var doc = goog.global.document;\r\n    var scripts = doc.getElementsByTagName('SCRIPT');\r\n    // Search backwards since the current script is in almost all cases the one\r\n    // that has base.js.\r\n    for (var i = scripts.length - 1; i >= 0; --i) {\r\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\r\n      var src = script.src;\r\n      var qmark = src.lastIndexOf('?');\r\n      var l = qmark == -1 ? src.length : qmark;\r\n      if (src.substr(l - 7, 7) == 'base.js') {\r\n        goog.basePath = src.substr(0, l - 7);\r\n        return;\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Imports a script if, and only if, that script hasn't already been imported.\r\n   * (Must be called at execution time)\r\n   * @param {string} src Script source.\r\n   * @param {string=} opt_sourceText The optionally source text to evaluate\r\n   * @private\r\n   */\r\n  goog.importScript_ = function(src, opt_sourceText) {\r\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\r\n        goog.writeScriptTag_;\r\n    if (importScript(src, opt_sourceText)) {\r\n      goog.dependencies_.written[src] = true;\r\n    }\r\n  };\r\n\r\n\r\n  /** @const @private {boolean} */\r\n  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document &&\r\n      goog.global.document.all;\r\n\r\n\r\n  /**\r\n   * Given a URL initiate retrieval and execution of the module.\r\n   * @param {string} src Script source URL.\r\n   * @private\r\n   */\r\n  goog.importModule_ = function(src) {\r\n    // In an attempt to keep browsers from timing out loading scripts using\r\n    // synchronous XHRs, put each load in its own script block.\r\n    var bootstrap = 'goog.retrieveAndExecModule_(\"' + src + '\");';\r\n\r\n    if (goog.importScript_('', bootstrap)) {\r\n      goog.dependencies_.written[src] = true;\r\n    }\r\n  };\r\n\r\n\r\n  /** @private {!Array<string>} */\r\n  goog.queuedModules_ = [];\r\n\r\n\r\n  /**\r\n   * Return an appropriate module text. Suitable to insert into\r\n   * a script tag (that is unescaped).\r\n   * @param {string} srcUrl\r\n   * @param {string} scriptText\r\n   * @return {string}\r\n   * @private\r\n   */\r\n  goog.wrapModule_ = function(srcUrl, scriptText) {\r\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\r\n      return '' +\r\n          'goog.loadModule(function(exports) {' +\r\n          '\"use strict\";' +\r\n          scriptText +\r\n          '\\n' + // terminate any trailing single line comment.\r\n          ';return exports' +\r\n          '});' +\r\n          '\\n//# sourceURL=' + srcUrl + '\\n';\r\n    } else {\r\n      return '' +\r\n          'goog.loadModule(' +\r\n          goog.global.JSON.stringify(\r\n              scriptText + '\\n//# sourceURL=' + srcUrl + '\\n') +\r\n          ');';\r\n    }\r\n  };\r\n\r\n  // On IE9 and earlier, it is necessary to handle\r\n  // deferred module loads. In later browsers, the\r\n  // code to be evaluated is simply inserted as a script\r\n  // block in the correct order. To eval deferred\r\n  // code at the right time, we piggy back on goog.require to call\r\n  // goog.maybeProcessDeferredDep_.\r\n  //\r\n  // The goog.requires are used both to bootstrap\r\n  // the loading process (when no deps are available) and\r\n  // declare that they should be available.\r\n  //\r\n  // Here we eval the sources, if all the deps are available\r\n  // either already eval'd or goog.require'd.  This will\r\n  // be the case when all the dependencies have already\r\n  // been loaded, and the dependent module is loaded.\r\n  //\r\n  // But this alone isn't sufficient because it is also\r\n  // necessary to handle the case where there is no root\r\n  // that is not deferred.  For that there we register for an event\r\n  // and trigger goog.loadQueuedModules_ handle any remaining deferred\r\n  // evaluations.\r\n\r\n  /**\r\n   * Handle any remaining deferred goog.module evals.\r\n   * @private\r\n   */\r\n  goog.loadQueuedModules_ = function() {\r\n    var count = goog.queuedModules_.length;\r\n    if (count > 0) {\r\n      var queue = goog.queuedModules_;\r\n      goog.queuedModules_ = [];\r\n      for (var i = 0; i < count; i++) {\r\n        var path = queue[i];\r\n        goog.maybeProcessDeferredPath_(path);\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * Eval the named module if its dependencies are\r\n   * available.\r\n   * @param {string} name The module to load.\r\n   * @private\r\n   */\r\n  goog.maybeProcessDeferredDep_ = function(name) {\r\n    if (goog.isDeferredModule_(name) &&\r\n        goog.allDepsAreAvailable_(name)) {\r\n      var path = goog.getPathFromDeps_(name);\r\n      goog.maybeProcessDeferredPath_(goog.basePath + path);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @param {string} name The module to check.\r\n   * @return {boolean} Whether the name represents a\r\n   *     module whose evaluation has been deferred.\r\n   * @private\r\n   */\r\n  goog.isDeferredModule_ = function(name) {\r\n    var path = goog.getPathFromDeps_(name);\r\n    if (path && goog.dependencies_.pathIsModule[path]) {\r\n      var abspath = goog.basePath + path;\r\n      return (abspath) in goog.dependencies_.deferred;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * @param {string} name The module to check.\r\n   * @return {boolean} Whether the name represents a\r\n   *     module whose declared dependencies have all been loaded\r\n   *     (eval'd or a deferred module load)\r\n   * @private\r\n   */\r\n  goog.allDepsAreAvailable_ = function(name) {\r\n    var path = goog.getPathFromDeps_(name);\r\n    if (path && (path in goog.dependencies_.requires)) {\r\n      for (var requireName in goog.dependencies_.requires[path]) {\r\n        if (!goog.isProvided_(requireName) &&\r\n            !goog.isDeferredModule_(requireName)) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n\r\n  /**\r\n   * @param {string} abspath\r\n   * @private\r\n   */\r\n  goog.maybeProcessDeferredPath_ = function(abspath) {\r\n    if (abspath in goog.dependencies_.deferred) {\r\n      var src = goog.dependencies_.deferred[abspath];\r\n      delete goog.dependencies_.deferred[abspath];\r\n      goog.globalEval(src);\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @param {function(?):?|string} moduleDef The module definition.\r\n   */\r\n  goog.loadModule = function(moduleDef) {\r\n    // NOTE: we allow function definitions to be either in the from\r\n    // of a string to eval (which keeps the original source intact) or\r\n    // in a eval forbidden environment (CSP) we allow a function definition\r\n    // which in its body must call {@code goog.module}, and return the exports\r\n    // of the module.\r\n    var previousState = goog.moduleLoaderState_;\r\n    try {\r\n      goog.moduleLoaderState_ = {\r\n        moduleName: undefined, declareTestMethods: false};\r\n      var exports;\r\n      if (goog.isFunction(moduleDef)) {\r\n        exports = moduleDef.call(goog.global, {});\r\n      } else if (goog.isString(moduleDef)) {\r\n        exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);\r\n      } else {\r\n        throw Error('Invalid module definition');\r\n      }\r\n\r\n      var moduleName = goog.moduleLoaderState_.moduleName;\r\n      if (!goog.isString(moduleName) || !moduleName) {\r\n        throw Error('Invalid module name \\\"' + moduleName + '\\\"');\r\n      }\r\n\r\n      // Don't seal legacy namespaces as they may be uses as a parent of\r\n      // another namespace\r\n      if (goog.moduleLoaderState_.declareLegacyNamespace) {\r\n        goog.constructNamespace_(moduleName, exports);\r\n      } else if (goog.SEAL_MODULE_EXPORTS && Object.seal) {\r\n        Object.seal(exports);\r\n      }\r\n\r\n      goog.loadedModules_[moduleName] = exports;\r\n      if (goog.moduleLoaderState_.declareTestMethods) {\r\n        for (var entry in exports) {\r\n          if (entry.indexOf('test', 0) === 0 ||\r\n              entry == 'tearDown' ||\r\n              entry == 'setUp' ||\r\n              entry == 'setUpPage' ||\r\n              entry == 'tearDownPage') {\r\n            goog.global[entry] = exports[entry];\r\n          }\r\n        }\r\n      }\r\n    } finally {\r\n      goog.moduleLoaderState_ = previousState;\r\n    }\r\n  };\r\n\r\n\r\n  /**\r\n   * @param {string} source\r\n   * @return {!Object}\r\n   * @private\r\n   */\r\n  goog.loadModuleFromSource_ = function(source) {\r\n    // NOTE: we avoid declaring parameters or local variables here to avoid\r\n    // masking globals or leaking values into the module definition.\r\n    'use strict';\r\n    var exports = {};\r\n    eval(arguments[0]);\r\n    return exports;\r\n  };\r\n\r\n\r\n  /**\r\n   * Writes a new script pointing to {@code src} directly into the DOM.\r\n   *\r\n   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for\r\n   * the fallback mechanism.\r\n   *\r\n   * @param {string} src The script URL.\r\n   * @private\r\n   */\r\n  goog.writeScriptSrcNode_ = function(src) {\r\n    goog.global.document.write(\r\n        '<script type=\"text/javascript\" src=\"' + src + '\"></' + 'script>');\r\n  };\r\n\r\n\r\n  /**\r\n   * Appends a new script node to the DOM using a CSP-compliant mechanism. This\r\n   * method exists as a fallback for document.write (which is not allowed in a\r\n   * strict CSP context, e.g., Chrome apps).\r\n   *\r\n   * NOTE: This method is not analogous to using document.write to insert a\r\n   * <script> tag; specifically, the user agent will execute a script added by\r\n   * document.write immediately after the current script block finishes\r\n   * executing, whereas the DOM-appended script node will not be executed until\r\n   * the entire document is parsed and executed. That is to say, this script is\r\n   * added to the end of the script execution queue.\r\n   *\r\n   * The page must not attempt to call goog.required entities until after the\r\n   * document has loaded, e.g., in or after the window.onload callback.\r\n   *\r\n   * @param {string} src The script URL.\r\n   * @private\r\n   */\r\n  goog.appendScriptSrcNode_ = function(src) {\r\n    var doc = goog.global.document;\r\n    var scriptEl = doc.createElement('script');\r\n    scriptEl.type = 'text/javascript';\r\n    scriptEl.src = src;\r\n    scriptEl.defer = false;\r\n    scriptEl.async = false;\r\n    doc.head.appendChild(scriptEl);\r\n  };\r\n\r\n\r\n  /**\r\n   * The default implementation of the import function. Writes a script tag to\r\n   * import the script.\r\n   *\r\n   * @param {string} src The script url.\r\n   * @param {string=} opt_sourceText The optionally source text to evaluate\r\n   * @return {boolean} True if the script was imported, false otherwise.\r\n   * @private\r\n   */\r\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\r\n    if (goog.inHtmlDocument_()) {\r\n      var doc = goog.global.document;\r\n\r\n      // If the user tries to require a new symbol after document load,\r\n      // something has gone terribly wrong. Doing a document.write would\r\n      // wipe out the page. This does not apply to the CSP-compliant method\r\n      // of writing script tags.\r\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\r\n          doc.readyState == 'complete') {\r\n        // Certain test frameworks load base.js multiple times, which tries\r\n        // to write deps.js each time. If that happens, just fail silently.\r\n        // These frameworks wipe the page between each load of base.js, so this\r\n        // is OK.\r\n        var isDeps = /\\bdeps.js$/.test(src);\r\n        if (isDeps) {\r\n          return false;\r\n        } else {\r\n          throw Error('Cannot write \"' + src + '\" after document load');\r\n        }\r\n      }\r\n\r\n      var isOldIE = goog.IS_OLD_IE_;\r\n\r\n      if (opt_sourceText === undefined) {\r\n        if (!isOldIE) {\r\n          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\r\n            goog.appendScriptSrcNode_(src);\r\n          } else {\r\n            goog.writeScriptSrcNode_(src);\r\n          }\r\n        } else {\r\n          var state = \" onreadystatechange='goog.onScriptLoad_(this, \" +\r\n              ++goog.lastNonModuleScriptIndex_ + \")' \";\r\n          doc.write(\r\n              '<script type=\"text/javascript\" src=\"' +\r\n                  src + '\"' + state + '></' + 'script>');\r\n        }\r\n      } else {\r\n        doc.write(\r\n            '<script type=\"text/javascript\">' +\r\n            opt_sourceText +\r\n            '</' + 'script>');\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  };\r\n\r\n\r\n  /** @private {number} */\r\n  goog.lastNonModuleScriptIndex_ = 0;\r\n\r\n\r\n  /**\r\n   * A readystatechange handler for legacy IE\r\n   * @param {!HTMLScriptElement} script\r\n   * @param {number} scriptIndex\r\n   * @return {boolean}\r\n   * @private\r\n   */\r\n  goog.onScriptLoad_ = function(script, scriptIndex) {\r\n    // for now load the modules when we reach the last script,\r\n    // later allow more inter-mingling.\r\n    if (script.readyState == 'complete' &&\r\n        goog.lastNonModuleScriptIndex_ == scriptIndex) {\r\n      goog.loadQueuedModules_();\r\n    }\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Resolves dependencies based on the dependencies added using addDependency\r\n   * and calls importScript_ in the correct order.\r\n   * @private\r\n   */\r\n  goog.writeScripts_ = function() {\r\n    /** @type {!Array<string>} The scripts we need to write this time. */\r\n    var scripts = [];\r\n    var seenScript = {};\r\n    var deps = goog.dependencies_;\r\n\r\n    /** @param {string} path */\r\n    function visitNode(path) {\r\n      if (path in deps.written) {\r\n        return;\r\n      }\r\n\r\n      // We have already visited this one. We can get here if we have cyclic\r\n      // dependencies.\r\n      if (path in deps.visited) {\r\n        if (!(path in seenScript)) {\r\n          seenScript[path] = true;\r\n          scripts.push(path);\r\n        }\r\n        return;\r\n      }\r\n\r\n      deps.visited[path] = true;\r\n\r\n      if (path in deps.requires) {\r\n        for (var requireName in deps.requires[path]) {\r\n          // If the required name is defined, we assume that it was already\r\n          // bootstrapped by other means.\r\n          if (!goog.isProvided_(requireName)) {\r\n            if (requireName in deps.nameToPath) {\r\n              visitNode(deps.nameToPath[requireName]);\r\n            } else {\r\n              throw Error('Undefined nameToPath for ' + requireName);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (!(path in seenScript)) {\r\n        seenScript[path] = true;\r\n        scripts.push(path);\r\n      }\r\n    }\r\n\r\n    for (var path in goog.included_) {\r\n      if (!deps.written[path]) {\r\n        visitNode(path);\r\n      }\r\n    }\r\n\r\n    // record that we are going to load all these scripts.\r\n    for (var i = 0; i < scripts.length; i++) {\r\n      var path = scripts[i];\r\n      goog.dependencies_.written[path] = true;\r\n    }\r\n\r\n    // If a module is loaded synchronously then we need to\r\n    // clear the current inModuleLoader value, and restore it when we are\r\n    // done loading the current \"requires\".\r\n    var moduleState = goog.moduleLoaderState_;\r\n    goog.moduleLoaderState_ = null;\r\n\r\n    var loadingModule = false;\r\n    for (var i = 0; i < scripts.length; i++) {\r\n      var path = scripts[i];\r\n      if (path) {\r\n        if (!deps.pathIsModule[path]) {\r\n          goog.importScript_(goog.basePath + path);\r\n        } else {\r\n          loadingModule = true;\r\n          goog.importModule_(goog.basePath + path);\r\n        }\r\n      } else {\r\n        goog.moduleLoaderState_ = moduleState;\r\n        throw Error('Undefined script input');\r\n      }\r\n    }\r\n\r\n    // restore the current \"module loading state\"\r\n    goog.moduleLoaderState_ = moduleState;\r\n  };\r\n\r\n\r\n  /**\r\n   * Looks at the dependency rules and tries to determine the script file that\r\n   * fulfills a particular rule.\r\n   * @param {string} rule In the form goog.namespace.Class or project.script.\r\n   * @return {?string} Url corresponding to the rule, or null.\r\n   * @private\r\n   */\r\n  goog.getPathFromDeps_ = function(rule) {\r\n    if (rule in goog.dependencies_.nameToPath) {\r\n      return goog.dependencies_.nameToPath[rule];\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  goog.findBasePath_();\r\n\r\n  // Allow projects to manage the deps files themselves.\r\n  if (!goog.global.CLOSURE_NO_DEPS) {\r\n    goog.importScript_(goog.basePath + 'deps.js');\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\r\n * path components.\r\n * @param {string} path\r\n * @return {string}\r\n * @private\r\n */\r\ngoog.normalizePath_ = function(path) {\r\n  var components = path.split('/');\r\n  var i = 0;\r\n  while (i < components.length) {\r\n    if (components[i] == '.') {\r\n      components.splice(i, 1);\r\n    } else if (i && components[i] == '..' &&\r\n        components[i - 1] && components[i - 1] != '..') {\r\n      components.splice(--i, 2);\r\n    } else {\r\n      i++;\r\n    }\r\n  }\r\n  return components.join('/');\r\n};\r\n\r\n\r\n/**\r\n * Loads file by synchronous XHR. Should not be used in production environments.\r\n * @param {string} src Source URL.\r\n * @return {string} File contents.\r\n * @private\r\n */\r\ngoog.loadFileSync_ = function(src) {\r\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\r\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\r\n  } else {\r\n    var xhr = new goog.global['XMLHttpRequest']();\r\n    xhr.open('get', src, false);\r\n    xhr.send();\r\n    return xhr.responseText;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Retrieve and execute a module.\r\n * @param {string} src Script source URL.\r\n * @private\r\n */\r\ngoog.retrieveAndExecModule_ = function(src) {\r\n  if (!COMPILED) {\r\n    // The full but non-canonicalized URL for later use.\r\n    var originalPath = src;\r\n    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging\r\n    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.\r\n    src = goog.normalizePath_(src);\r\n\r\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\r\n        goog.writeScriptTag_;\r\n\r\n    var scriptText = goog.loadFileSync_(src);\r\n\r\n    if (scriptText != null) {\r\n      var execModuleScript = goog.wrapModule_(src, scriptText);\r\n      var isOldIE = goog.IS_OLD_IE_;\r\n      if (isOldIE) {\r\n        goog.dependencies_.deferred[originalPath] = execModuleScript;\r\n        goog.queuedModules_.push(originalPath);\r\n      } else {\r\n        importScript(src, execModuleScript);\r\n      }\r\n    } else {\r\n      throw new Error('load of ' + src + 'failed');\r\n    }\r\n  }\r\n};\r\n\r\n\r\n//==============================================================================\r\n// Language Enhancements\r\n//==============================================================================\r\n\r\n\r\n/**\r\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\r\n * operator in such a way that null returns 'null' and arrays return 'array'.\r\n * @param {*} value The value to get the type of.\r\n * @return {string} The name of the type.\r\n */\r\ngoog.typeOf = function(value) {\r\n  var s = typeof value;\r\n  if (s == 'object') {\r\n    if (value) {\r\n      // Check these first, so we can avoid calling Object.prototype.toString if\r\n      // possible.\r\n      //\r\n      // IE improperly marshals tyepof across execution contexts, but a\r\n      // cross-context object will still return false for \"instanceof Object\".\r\n      if (value instanceof Array) {\r\n        return 'array';\r\n      } else if (value instanceof Object) {\r\n        return s;\r\n      }\r\n\r\n      // HACK: In order to use an Object prototype method on the arbitrary\r\n      //   value, the compiler requires the value be cast to type Object,\r\n      //   even though the ECMA spec explicitly allows it.\r\n      var className = Object.prototype.toString.call(\r\n          /** @type {Object} */ (value));\r\n      // In Firefox 3.6, attempting to access iframe window objects' length\r\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\r\n      // here.\r\n      if (className == '[object Window]') {\r\n        return 'object';\r\n      }\r\n\r\n      // We cannot always use constructor == Array or instanceof Array because\r\n      // different frames have different Array objects. In IE6, if the iframe\r\n      // where the array was created is destroyed, the array loses its\r\n      // prototype. Then dereferencing val.splice here throws an exception, so\r\n      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'\r\n      // so that will work. In this case, this function will return false and\r\n      // most array functions will still work because the array is still\r\n      // array-like (supports length and []) even though it has lost its\r\n      // prototype.\r\n      // Mark Miller noticed that Object.prototype.toString\r\n      // allows access to the unforgeable [[Class]] property.\r\n      //  15.2.4.2 Object.prototype.toString ( )\r\n      //  When the toString method is called, the following steps are taken:\r\n      //      1. Get the [[Class]] property of this object.\r\n      //      2. Compute a string value by concatenating the three strings\r\n      //         \"[object \", Result(1), and \"]\".\r\n      //      3. Return Result(2).\r\n      // and this behavior survives the destruction of the execution context.\r\n      if ((className == '[object Array]' ||\r\n           // In IE all non value types are wrapped as objects across window\r\n           // boundaries (not iframe though) so we have to do object detection\r\n           // for this edge case.\r\n           typeof value.length == 'number' &&\r\n           typeof value.splice != 'undefined' &&\r\n           typeof value.propertyIsEnumerable != 'undefined' &&\r\n           !value.propertyIsEnumerable('splice')\r\n\r\n          )) {\r\n        return 'array';\r\n      }\r\n      // HACK: There is still an array case that fails.\r\n      //     function ArrayImpostor() {}\r\n      //     ArrayImpostor.prototype = [];\r\n      //     var impostor = new ArrayImpostor;\r\n      // this can be fixed by getting rid of the fast path\r\n      // (value instanceof Array) and solely relying on\r\n      // (value && Object.prototype.toString.vall(value) === '[object Array]')\r\n      // but that would require many more function calls and is not warranted\r\n      // unless closure code is receiving objects from untrusted sources.\r\n\r\n      // IE in cross-window calls does not correctly marshal the function type\r\n      // (it appears just as an object) so we cannot use just typeof val ==\r\n      // 'function'. However, if the object has a call property, it is a\r\n      // function.\r\n      if ((className == '[object Function]' ||\r\n          typeof value.call != 'undefined' &&\r\n          typeof value.propertyIsEnumerable != 'undefined' &&\r\n          !value.propertyIsEnumerable('call'))) {\r\n        return 'function';\r\n      }\r\n\r\n    } else {\r\n      return 'null';\r\n    }\r\n\r\n  } else if (s == 'function' && typeof value.call == 'undefined') {\r\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\r\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\r\n    // would like to return object for those and we can detect an invalid\r\n    // function by making sure that the function object has a call method.\r\n    return 'object';\r\n  }\r\n  return s;\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is null.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is null.\r\n */\r\ngoog.isNull = function(val) {\r\n  return val === null;\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is defined and not null.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is defined and not null.\r\n */\r\ngoog.isDefAndNotNull = function(val) {\r\n  // Note that undefined == null.\r\n  return val != null;\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is an array.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is an array.\r\n */\r\ngoog.isArray = function(val) {\r\n  return goog.typeOf(val) == 'array';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the object looks like an array. To qualify as array like\r\n * the value needs to be either a NodeList or an object with a Number length\r\n * property. As a special case, a function value is not array like, because its\r\n * length property is fixed to correspond to the number of expected arguments.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is an array.\r\n */\r\ngoog.isArrayLike = function(val) {\r\n  var type = goog.typeOf(val);\r\n  // We do not use goog.isObject here in order to exclude function values.\r\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the object looks like a Date. To qualify as Date-like the\r\n * value needs to be an object and have a getFullYear() function.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is a like a Date.\r\n */\r\ngoog.isDateLike = function(val) {\r\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is a string.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is a string.\r\n */\r\ngoog.isString = function(val) {\r\n  return typeof val == 'string';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is a boolean.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is boolean.\r\n */\r\ngoog.isBoolean = function(val) {\r\n  return typeof val == 'boolean';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is a number.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is a number.\r\n */\r\ngoog.isNumber = function(val) {\r\n  return typeof val == 'number';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is a function.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is a function.\r\n */\r\ngoog.isFunction = function(val) {\r\n  return goog.typeOf(val) == 'function';\r\n};\r\n\r\n\r\n/**\r\n * Returns true if the specified value is an object.  This includes arrays and\r\n * functions.\r\n * @param {?} val Variable to test.\r\n * @return {boolean} Whether variable is an object.\r\n */\r\ngoog.isObject = function(val) {\r\n  var type = typeof val;\r\n  return type == 'object' && val != null || type == 'function';\r\n  // return Object(val) === val also works, but is slower, especially if val is\r\n  // not an object.\r\n};\r\n\r\n\r\n/**\r\n * Gets a unique ID for an object. This mutates the object so that further calls\r\n * with the same object as a parameter returns the same value. The unique ID is\r\n * guaranteed to be unique across the current session amongst objects that are\r\n * passed into {@code getUid}. There is no guarantee that the ID is unique or\r\n * consistent across sessions. It is unsafe to generate unique ID for function\r\n * prototypes.\r\n *\r\n * @param {Object} obj The object to get the unique ID for.\r\n * @return {number} The unique ID for the object.\r\n */\r\ngoog.getUid = function(obj) {\r\n  // TODO(arv): Make the type stricter, do not accept null.\r\n\r\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\r\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\r\n  // and SubClass.prototype will be the same.\r\n  return obj[goog.UID_PROPERTY_] ||\r\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\r\n};\r\n\r\n\r\n/**\r\n * Whether the given object is already assigned a unique ID.\r\n *\r\n * This does not modify the object.\r\n *\r\n * @param {!Object} obj The object to check.\r\n * @return {boolean} Whether there is an assigned unique id for the object.\r\n */\r\ngoog.hasUid = function(obj) {\r\n  return !!obj[goog.UID_PROPERTY_];\r\n};\r\n\r\n\r\n/**\r\n * Removes the unique ID from an object. This is useful if the object was\r\n * previously mutated using {@code goog.getUid} in which case the mutation is\r\n * undone.\r\n * @param {Object} obj The object to remove the unique ID field from.\r\n */\r\ngoog.removeUid = function(obj) {\r\n  // TODO(arv): Make the type stricter, do not accept null.\r\n\r\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\r\n  // try to delete.  Instead we try to use removeAttribute.\r\n  if ('removeAttribute' in obj) {\r\n    obj.removeAttribute(goog.UID_PROPERTY_);\r\n  }\r\n  /** @preserveTry */\r\n  try {\r\n    delete obj[goog.UID_PROPERTY_];\r\n  } catch (ex) {\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Name for unique ID property. Initialized in a way to help avoid collisions\r\n * with other closure JavaScript on the same page.\r\n * @type {string}\r\n * @private\r\n */\r\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\r\n\r\n\r\n/**\r\n * Counter for UID.\r\n * @type {number}\r\n * @private\r\n */\r\ngoog.uidCounter_ = 0;\r\n\r\n\r\n/**\r\n * Adds a hash code field to an object. The hash code is unique for the\r\n * given object.\r\n * @param {Object} obj The object to get the hash code for.\r\n * @return {number} The hash code for the object.\r\n * @deprecated Use goog.getUid instead.\r\n */\r\ngoog.getHashCode = goog.getUid;\r\n\r\n\r\n/**\r\n * Removes the hash code field from an object.\r\n * @param {Object} obj The object to remove the field from.\r\n * @deprecated Use goog.removeUid instead.\r\n */\r\ngoog.removeHashCode = goog.removeUid;\r\n\r\n\r\n/**\r\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\r\n * arrays will be cloned recursively.\r\n *\r\n * WARNINGS:\r\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\r\n * refer to themselves will cause infinite recursion.\r\n *\r\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\r\n * UIDs created by <code>getUid</code> into cloned results.\r\n *\r\n * @param {*} obj The value to clone.\r\n * @return {*} A clone of the input value.\r\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\r\n */\r\ngoog.cloneObject = function(obj) {\r\n  var type = goog.typeOf(obj);\r\n  if (type == 'object' || type == 'array') {\r\n    if (obj.clone) {\r\n      return obj.clone();\r\n    }\r\n    var clone = type == 'array' ? [] : {};\r\n    for (var key in obj) {\r\n      clone[key] = goog.cloneObject(obj[key]);\r\n    }\r\n    return clone;\r\n  }\r\n\r\n  return obj;\r\n};\r\n\r\n\r\n/**\r\n * A native implementation of goog.bind.\r\n * @param {Function} fn A function to partially apply.\r\n * @param {Object|undefined} selfObj Specifies the object which this should\r\n *     point to when the function is run.\r\n * @param {...*} var_args Additional arguments that are partially applied to the\r\n *     function.\r\n * @return {!Function} A partially-applied form of the function bind() was\r\n *     invoked as a method of.\r\n * @private\r\n * @suppress {deprecated} The compiler thinks that Function.prototype.bind is\r\n *     deprecated because some people have declared a pure-JS version.\r\n *     Only the pure-JS version is truly deprecated.\r\n */\r\ngoog.bindNative_ = function(fn, selfObj, var_args) {\r\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\r\n};\r\n\r\n\r\n/**\r\n * A pure-JS implementation of goog.bind.\r\n * @param {Function} fn A function to partially apply.\r\n * @param {Object|undefined} selfObj Specifies the object which this should\r\n *     point to when the function is run.\r\n * @param {...*} var_args Additional arguments that are partially applied to the\r\n *     function.\r\n * @return {!Function} A partially-applied form of the function bind() was\r\n *     invoked as a method of.\r\n * @private\r\n */\r\ngoog.bindJs_ = function(fn, selfObj, var_args) {\r\n  if (!fn) {\r\n    throw new Error();\r\n  }\r\n\r\n  if (arguments.length > 2) {\r\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\r\n    return function() {\r\n      // Prepend the bound arguments to the current arguments.\r\n      var newArgs = Array.prototype.slice.call(arguments);\r\n      Array.prototype.unshift.apply(newArgs, boundArgs);\r\n      return fn.apply(selfObj, newArgs);\r\n    };\r\n\r\n  } else {\r\n    return function() {\r\n      return fn.apply(selfObj, arguments);\r\n    };\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Partially applies this function to a particular 'this object' and zero or\r\n * more arguments. The result is a new function with some arguments of the first\r\n * function pre-filled and the value of this 'pre-specified'.\r\n *\r\n * Remaining arguments specified at call-time are appended to the pre-specified\r\n * ones.\r\n *\r\n * Also see: {@link #partial}.\r\n *\r\n * Usage:\r\n * <pre>var barMethBound = bind(myFunction, myObj, 'arg1', 'arg2');\r\n * barMethBound('arg3', 'arg4');</pre>\r\n *\r\n * @param {?function(this:T, ...)} fn A function to partially apply.\r\n * @param {T} selfObj Specifies the object which this should point to when the\r\n *     function is run.\r\n * @param {...*} var_args Additional arguments that are partially applied to the\r\n *     function.\r\n * @return {!Function} A partially-applied form of the function bind() was\r\n *     invoked as a method of.\r\n * @template T\r\n * @suppress {deprecated} See above.\r\n */\r\ngoog.bind = function(fn, selfObj, var_args) {\r\n  // TODO(nicksantos): narrow the type signature.\r\n  if (Function.prototype.bind &&\r\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\r\n      // extension environment. This means that for Chrome extensions, they get\r\n      // the implementation of Function.prototype.bind that calls goog.bind\r\n      // instead of the native one. Even worse, we don't want to introduce a\r\n      // circular dependency between goog.bind and Function.prototype.bind, so\r\n      // we have to hack this to make sure it works correctly.\r\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\r\n    goog.bind = goog.bindNative_;\r\n  } else {\r\n    goog.bind = goog.bindJs_;\r\n  }\r\n  return goog.bind.apply(null, arguments);\r\n};\r\n\r\n\r\n/**\r\n * Like bind(), except that a 'this object' is not required. Useful when the\r\n * target function is already bound.\r\n *\r\n * Usage:\r\n * var g = partial(f, arg1, arg2);\r\n * g(arg3, arg4);\r\n *\r\n * @param {Function} fn A function to partially apply.\r\n * @param {...*} var_args Additional arguments that are partially applied to fn.\r\n * @return {!Function} A partially-applied form of the function bind() was\r\n *     invoked as a method of.\r\n */\r\ngoog.partial = function(fn, var_args) {\r\n  var args = Array.prototype.slice.call(arguments, 1);\r\n  return function() {\r\n    // Clone the array (with slice()) and append additional arguments\r\n    // to the existing arguments.\r\n    var newArgs = args.slice();\r\n    newArgs.push.apply(newArgs, arguments);\r\n    return fn.apply(this, newArgs);\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * Copies all the members of a source object to a target object. This method\r\n * does not work on all browsers for all objects that contain keys such as\r\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\r\n * @param {Object} target Target.\r\n * @param {Object} source Source.\r\n */\r\ngoog.mixin = function(target, source) {\r\n  for (var x in source) {\r\n    target[x] = source[x];\r\n  }\r\n\r\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\r\n  // not enumerable on the prototype object (for example, isPrototypeOf from\r\n  // Object.prototype) but also it will not include 'replace' on objects that\r\n  // extend String and change 'replace' (not that it is common for anyone to\r\n  // extend anything except Object).\r\n};\r\n\r\n\r\n/**\r\n * @return {number} An integer value representing the number of milliseconds\r\n *     between midnight, January 1, 1970 and the current time.\r\n */\r\ngoog.now = (goog.TRUSTED_SITE && Date.now) || (function() {\r\n  // Unary plus operator converts its operand to a number which in the case of\r\n  // a date is done by calling getTime().\r\n  return +new Date();\r\n});\r\n\r\n\r\n/**\r\n * Evals JavaScript in the global scope.  In IE this uses execScript, other\r\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\r\n * global scope (for example, in Safari), appends a script tag instead.\r\n * Throws an exception if neither execScript or eval is defined.\r\n * @param {string} script JavaScript string.\r\n */\r\ngoog.globalEval = function(script) {\r\n  if (goog.global.execScript) {\r\n    goog.global.execScript(script, 'JavaScript');\r\n  } else if (goog.global.eval) {\r\n    // Test to see if eval works\r\n    if (goog.evalWorksForGlobals_ == null) {\r\n      goog.global.eval('var _et_ = 1;');\r\n      if (typeof goog.global['_et_'] != 'undefined') {\r\n        delete goog.global['_et_'];\r\n        goog.evalWorksForGlobals_ = true;\r\n      } else {\r\n        goog.evalWorksForGlobals_ = false;\r\n      }\r\n    }\r\n\r\n    if (goog.evalWorksForGlobals_) {\r\n      goog.global.eval(script);\r\n    } else {\r\n      var doc = goog.global.document;\r\n      var scriptElt = doc.createElement('SCRIPT');\r\n      scriptElt.type = 'text/javascript';\r\n      scriptElt.defer = false;\r\n      // Note(user): can't use .innerHTML since \"t('<test>')\" will fail and\r\n      // .text doesn't work in Safari 2.  Therefore we append a text node.\r\n      scriptElt.appendChild(doc.createTextNode(script));\r\n      doc.body.appendChild(scriptElt);\r\n      doc.body.removeChild(scriptElt);\r\n    }\r\n  } else {\r\n    throw Error('goog.globalEval not available');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Indicates whether or not we can call 'eval' directly to eval code in the\r\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\r\n * empirically tests whether eval works for globals). @see goog.globalEval\r\n * @type {?boolean}\r\n * @private\r\n */\r\ngoog.evalWorksForGlobals_ = null;\r\n\r\n\r\n/**\r\n * Optional map of CSS class names to obfuscated names used with\r\n * goog.getCssName().\r\n * @private {!Object<string, string>|undefined}\r\n * @see goog.setCssNameMapping\r\n */\r\ngoog.cssNameMapping_;\r\n\r\n\r\n/**\r\n * Optional obfuscation style for CSS class names. Should be set to either\r\n * 'BY_WHOLE' or 'BY_PART' if defined.\r\n * @type {string|undefined}\r\n * @private\r\n * @see goog.setCssNameMapping\r\n */\r\ngoog.cssNameMappingStyle_;\r\n\r\n\r\n/**\r\n * Handles strings that are intended to be used as CSS class names.\r\n *\r\n * This function works in tandem with @see goog.setCssNameMapping.\r\n *\r\n * Without any mapping set, the arguments are simple joined with a hyphen and\r\n * passed through unaltered.\r\n *\r\n * When there is a mapping, there are two possible styles in which these\r\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\r\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\r\n * style, the full css name is looked up in the map directly. If a rewrite is\r\n * not specified by the map, the compiler will output a warning.\r\n *\r\n * When the mapping is passed to the compiler, it will replace calls to\r\n * goog.getCssName with the strings from the mapping, e.g.\r\n *     var x = goog.getCssName('foo');\r\n *     var y = goog.getCssName(this.baseClass, 'active');\r\n *  becomes:\r\n *     var x= 'foo';\r\n *     var y = this.baseClass + '-active';\r\n *\r\n * If one argument is passed it will be processed, if two are passed only the\r\n * modifier will be processed, as it is assumed the first argument was generated\r\n * as a result of calling goog.getCssName.\r\n *\r\n * @param {string} className The class name.\r\n * @param {string=} opt_modifier A modifier to be appended to the class name.\r\n * @return {string} The class name or the concatenation of the class name and\r\n *     the modifier.\r\n */\r\ngoog.getCssName = function(className, opt_modifier) {\r\n  var getMapping = function(cssName) {\r\n    return goog.cssNameMapping_[cssName] || cssName;\r\n  };\r\n\r\n  var renameByParts = function(cssName) {\r\n    // Remap all the parts individually.\r\n    var parts = cssName.split('-');\r\n    var mapped = [];\r\n    for (var i = 0; i < parts.length; i++) {\r\n      mapped.push(getMapping(parts[i]));\r\n    }\r\n    return mapped.join('-');\r\n  };\r\n\r\n  var rename;\r\n  if (goog.cssNameMapping_) {\r\n    rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ?\r\n        getMapping : renameByParts;\r\n  } else {\r\n    rename = function(a) {\r\n      return a;\r\n    };\r\n  }\r\n\r\n  if (opt_modifier) {\r\n    return className + '-' + rename(opt_modifier);\r\n  } else {\r\n    return rename(className);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Sets the map to check when returning a value from goog.getCssName(). Example:\r\n * <pre>\r\n * goog.setCssNameMapping({\r\n *   \"goog\": \"a\",\r\n *   \"disabled\": \"b\",\r\n * });\r\n *\r\n * var x = goog.getCssName('goog');\r\n * // The following evaluates to: \"a a-b\".\r\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\r\n * </pre>\r\n * When declared as a map of string literals to string literals, the JSCompiler\r\n * will replace all calls to goog.getCssName() using the supplied map if the\r\n * --closure_pass flag is set.\r\n *\r\n * @param {!Object} mapping A map of strings to strings where keys are possible\r\n *     arguments to goog.getCssName() and values are the corresponding values\r\n *     that should be returned.\r\n * @param {string=} opt_style The style of css name mapping. There are two valid\r\n *     options: 'BY_PART', and 'BY_WHOLE'.\r\n * @see goog.getCssName for a description.\r\n */\r\ngoog.setCssNameMapping = function(mapping, opt_style) {\r\n  goog.cssNameMapping_ = mapping;\r\n  goog.cssNameMappingStyle_ = opt_style;\r\n};\r\n\r\n\r\n/**\r\n * To use CSS renaming in compiled mode, one of the input files should have a\r\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\r\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\r\n * mode, JavaScript code should be loaded before this base.js file that declares\r\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\r\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\r\n * are made in uncompiled mode.\r\n *\r\n * A hook for overriding the CSS name mapping.\r\n * @type {!Object<string, string>|undefined}\r\n */\r\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\r\n\r\n\r\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\r\n  // This does not call goog.setCssNameMapping() because the JSCompiler\r\n  // requires that goog.setCssNameMapping() be called with an object literal.\r\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\r\n}\r\n\r\n\r\n/**\r\n * Gets a localized message.\r\n *\r\n * This function is a compiler primitive. If you give the compiler a localized\r\n * message bundle, it will replace the string at compile-time with a localized\r\n * version, and expand goog.getMsg call to a concatenated string.\r\n *\r\n * Messages must be initialized in the form:\r\n * <code>\r\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\r\n * </code>\r\n *\r\n * @param {string} str Translatable string, places holders in the form {$foo}.\r\n * @param {Object<string, string>=} opt_values Maps place holder name to value.\r\n * @return {string} message with placeholders filled.\r\n */\r\ngoog.getMsg = function(str, opt_values) {\r\n  if (opt_values) {\r\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\r\n      return key in opt_values ? opt_values[key] : match;\r\n    });\r\n  }\r\n  return str;\r\n};\r\n\r\n\r\n/**\r\n * Gets a localized message. If the message does not have a translation, gives a\r\n * fallback message.\r\n *\r\n * This is useful when introducing a new message that has not yet been\r\n * translated into all languages.\r\n *\r\n * This function is a compiler primitive. Must be used in the form:\r\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\r\n * where MSG_A and MSG_B were initialized with goog.getMsg.\r\n *\r\n * @param {string} a The preferred message.\r\n * @param {string} b The fallback message.\r\n * @return {string} The best translated message.\r\n */\r\ngoog.getMsgWithFallback = function(a, b) {\r\n  return a;\r\n};\r\n\r\n\r\n/**\r\n * Exposes an unobfuscated global namespace path for the given object.\r\n * Note that fields of the exported object *will* be obfuscated, unless they are\r\n * exported in turn via this function or goog.exportProperty.\r\n *\r\n * Also handy for making public items that are defined in anonymous closures.\r\n *\r\n * ex. goog.exportSymbol('public.path.Foo', Foo);\r\n *\r\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\r\n *     public.path.Foo.staticFunction();\r\n *\r\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\r\n *                       Foo.prototype.myMethod);\r\n *     new public.path.Foo().myMethod();\r\n *\r\n * @param {string} publicPath Unobfuscated name to export.\r\n * @param {*} object Object the name should point to.\r\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\r\n *     is goog.global.\r\n */\r\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\r\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\r\n};\r\n\r\n\r\n/**\r\n * Exports a property unobfuscated into the object's namespace.\r\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\r\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\r\n * @param {Object} object Object whose static property is being exported.\r\n * @param {string} publicName Unobfuscated name to export.\r\n * @param {*} symbol Object the name should point to.\r\n */\r\ngoog.exportProperty = function(object, publicName, symbol) {\r\n  object[publicName] = symbol;\r\n};\r\n\r\n\r\n/**\r\n * Inherit the prototype methods from one constructor into another.\r\n *\r\n * Usage:\r\n * <pre>\r\n * function ParentClass(a, b) { }\r\n * ParentClass.prototype.foo = function(a) { };\r\n *\r\n * function ChildClass(a, b, c) {\r\n *   ChildClass.base(this, 'constructor', a, b);\r\n * }\r\n * goog.inherits(ChildClass, ParentClass);\r\n *\r\n * var child = new ChildClass('a', 'b', 'see');\r\n * child.foo(); // This works.\r\n * </pre>\r\n *\r\n * @param {Function} childCtor Child class.\r\n * @param {Function} parentCtor Parent class.\r\n */\r\ngoog.inherits = function(childCtor, parentCtor) {\r\n  /** @constructor */\r\n  function tempCtor() {};\r\n  tempCtor.prototype = parentCtor.prototype;\r\n  childCtor.superClass_ = parentCtor.prototype;\r\n  childCtor.prototype = new tempCtor();\r\n  /** @override */\r\n  childCtor.prototype.constructor = childCtor;\r\n\r\n  /**\r\n   * Calls superclass constructor/method.\r\n   *\r\n   * This function is only available if you use goog.inherits to\r\n   * express inheritance relationships between classes.\r\n   *\r\n   * NOTE: This is a replacement for goog.base and for superClass_\r\n   * property defined in childCtor.\r\n   *\r\n   * @param {!Object} me Should always be \"this\".\r\n   * @param {string} methodName The method name to call. Calling\r\n   *     superclass constructor can be done with the special string\r\n   *     'constructor'.\r\n   * @param {...*} var_args The arguments to pass to superclass\r\n   *     method/constructor.\r\n   * @return {*} The return value of the superclass method/constructor.\r\n   */\r\n  childCtor.base = function(me, methodName, var_args) {\r\n    // Copying using loop to avoid deop due to passing arguments object to\r\n    // function. This is faster in many JS engines as of late 2014.\r\n    var args = new Array(arguments.length - 2);\r\n    for (var i = 2; i < arguments.length; i++) {\r\n      args[i - 2] = arguments[i];\r\n    }\r\n    return parentCtor.prototype[methodName].apply(me, args);\r\n  };\r\n};\r\n\r\n\r\n/**\r\n * Call up to the superclass.\r\n *\r\n * If this is called from a constructor, then this calls the superclass\r\n * constructor with arguments 1-N.\r\n *\r\n * If this is called from a prototype method, then you must pass the name of the\r\n * method as the second argument to this function. If you do not, you will get a\r\n * runtime error. This calls the superclass' method with arguments 2-N.\r\n *\r\n * This function only works if you use goog.inherits to express inheritance\r\n * relationships between your classes.\r\n *\r\n * This function is a compiler primitive. At compile-time, the compiler will do\r\n * macro expansion to remove a lot of the extra overhead that this function\r\n * introduces. The compiler will also enforce a lot of the assumptions that this\r\n * function makes, and treat it as a compiler error if you break them.\r\n *\r\n * @param {!Object} me Should always be \"this\".\r\n * @param {*=} opt_methodName The method name if calling a super method.\r\n * @param {...*} var_args The rest of the arguments.\r\n * @return {*} The return value of the superclass method.\r\n * @suppress {es5Strict} This method can not be used in strict mode, but\r\n *     all Closure Library consumers must depend on this file.\r\n */\r\ngoog.base = function(me, opt_methodName, var_args) {\r\n  var caller = arguments.callee.caller;\r\n\r\n  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {\r\n    throw Error('arguments.caller not defined.  goog.base() cannot be used ' +\r\n                'with strict mode code. See ' +\r\n                'http://www.ecma-international.org/ecma-262/5.1/#sec-C');\r\n  }\r\n\r\n  if (caller.superClass_) {\r\n    // Copying using loop to avoid deop due to passing arguments object to\r\n    // function. This is faster in many JS engines as of late 2014.\r\n    var ctorArgs = new Array(arguments.length - 1);\r\n    for (var i = 1; i < arguments.length; i++) {\r\n      ctorArgs[i - 1] = arguments[i];\r\n    }\r\n    // This is a constructor. Call the superclass constructor.\r\n    return caller.superClass_.constructor.apply(me, ctorArgs);\r\n  }\r\n\r\n  // Copying using loop to avoid deop due to passing arguments object to\r\n  // function. This is faster in many JS engines as of late 2014.\r\n  var args = new Array(arguments.length - 2);\r\n  for (var i = 2; i < arguments.length; i++) {\r\n    args[i - 2] = arguments[i];\r\n  }\r\n  var foundCaller = false;\r\n  for (var ctor = me.constructor;\r\n       ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {\r\n    if (ctor.prototype[opt_methodName] === caller) {\r\n      foundCaller = true;\r\n    } else if (foundCaller) {\r\n      return ctor.prototype[opt_methodName].apply(me, args);\r\n    }\r\n  }\r\n\r\n  // If we did not find the caller in the prototype chain, then one of two\r\n  // things happened:\r\n  // 1) The caller is an instance method.\r\n  // 2) This method was not called by the right caller.\r\n  if (me[opt_methodName] === caller) {\r\n    return me.constructor.prototype[opt_methodName].apply(me, args);\r\n  } else {\r\n    throw Error(\r\n        'goog.base called from a method of one name ' +\r\n        'to a method of a different name');\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Allow for aliasing within scope functions.  This function exists for\r\n * uncompiled code - in compiled code the calls will be inlined and the aliases\r\n * applied.  In uncompiled code the function is simply run since the aliases as\r\n * written are valid JavaScript.\r\n *\r\n *\r\n * @param {function()} fn Function to call.  This function can contain aliases\r\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\r\n *     (e.g. \"var Timer = goog.Timer\").\r\n */\r\ngoog.scope = function(fn) {\r\n  fn.call(goog.global);\r\n};\r\n\r\n\r\n/*\r\n * To support uncompiled, strict mode bundles that use eval to divide source\r\n * like so:\r\n *    eval('someSource;//# sourceUrl sourcefile.js');\r\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\r\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\r\n * be defined externally.\r\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\r\n * extern generation when that compiler option is enabled.\r\n */\r\nif (!COMPILED) {\r\n  goog.global['COMPILED'] = COMPILED;\r\n}\r\n\r\n\r\n\r\n//==============================================================================\r\n// goog.defineClass implementation\r\n//==============================================================================\r\n\r\n\r\n/**\r\n * Creates a restricted form of a Closure \"class\":\r\n *   - from the compiler's perspective, the instance returned from the\r\n *     constructor is sealed (no new properties may be added).  This enables\r\n *     better checks.\r\n *   - the compiler will rewrite this definition to a form that is optimal\r\n *     for type checking and optimization (initially this will be a more\r\n *     traditional form).\r\n *\r\n * @param {Function} superClass The superclass, Object or null.\r\n * @param {goog.defineClass.ClassDescriptor} def\r\n *     An object literal describing\r\n *     the class.  It may have the following properties:\r\n *     \"constructor\": the constructor function\r\n *     \"statics\": an object literal containing methods to add to the constructor\r\n *        as \"static\" methods or a function that will receive the constructor\r\n *        function as its only parameter to which static properties can\r\n *        be added.\r\n *     all other properties are added to the prototype.\r\n * @return {!Function} The class constructor.\r\n */\r\ngoog.defineClass = function(superClass, def) {\r\n  // TODO(johnlenz): consider making the superClass an optional parameter.\r\n  var constructor = def.constructor;\r\n  var statics = def.statics;\r\n  // Wrap the constructor prior to setting up the prototype and static methods.\r\n  if (!constructor || constructor == Object.prototype.constructor) {\r\n    constructor = function() {\r\n      throw Error('cannot instantiate an interface (no constructor defined).');\r\n    };\r\n  }\r\n\r\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\r\n  if (superClass) {\r\n    goog.inherits(cls, superClass);\r\n  }\r\n\r\n  // Remove all the properties that should not be copied to the prototype.\r\n  delete def.constructor;\r\n  delete def.statics;\r\n\r\n  goog.defineClass.applyProperties_(cls.prototype, def);\r\n  if (statics != null) {\r\n    if (statics instanceof Function) {\r\n      statics(cls);\r\n    } else {\r\n      goog.defineClass.applyProperties_(cls, statics);\r\n    }\r\n  }\r\n\r\n  return cls;\r\n};\r\n\r\n\r\n/**\r\n * @typedef {\r\n *     !Object|\r\n *     {constructor:!Function}|\r\n *     {constructor:!Function, statics:(Object|function(Function):void)}}\r\n * @suppress {missingProvide}\r\n */\r\ngoog.defineClass.ClassDescriptor;\r\n\r\n\r\n/**\r\n * @define {boolean} Whether the instances returned by\r\n * goog.defineClass should be sealed when possible.\r\n */\r\ngoog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\r\n\r\n\r\n/**\r\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\r\n * defined, this function will wrap the constructor in a function that seals the\r\n * results of the provided constructor function.\r\n *\r\n * @param {!Function} ctr The constructor whose results maybe be sealed.\r\n * @param {Function} superClass The superclass constructor.\r\n * @return {!Function} The replacement constructor.\r\n * @private\r\n */\r\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\r\n  if (goog.defineClass.SEAL_CLASS_INSTANCES &&\r\n      Object.seal instanceof Function) {\r\n    // Don't seal subclasses of unsealable-tagged legacy classes.\r\n    if (superClass && superClass.prototype &&\r\n        superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {\r\n      return ctr;\r\n    }\r\n    /**\r\n     * @this {Object}\r\n     * @return {?}\r\n     */\r\n    var wrappedCtr = function() {\r\n      // Don't seal an instance of a subclass when it calls the constructor of\r\n      // its super class as there is most likely still setup to do.\r\n      var instance = ctr.apply(this, arguments) || this;\r\n      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\r\n      if (this.constructor === wrappedCtr) {\r\n        Object.seal(instance);\r\n      }\r\n      return instance;\r\n    };\r\n    return wrappedCtr;\r\n  }\r\n  return ctr;\r\n};\r\n\r\n\r\n// TODO(johnlenz): share these values with the goog.object\r\n/**\r\n * The names of the fields that are defined on Object.prototype.\r\n * @type {!Array<string>}\r\n * @private\r\n * @const\r\n */\r\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\r\n  'constructor',\r\n  'hasOwnProperty',\r\n  'isPrototypeOf',\r\n  'propertyIsEnumerable',\r\n  'toLocaleString',\r\n  'toString',\r\n  'valueOf'\r\n];\r\n\r\n\r\n// TODO(johnlenz): share this function with the goog.object\r\n/**\r\n * @param {!Object} target The object to add properties to.\r\n * @param {!Object} source The object to copy properties from.\r\n * @private\r\n */\r\ngoog.defineClass.applyProperties_ = function(target, source) {\r\n  // TODO(johnlenz): update this to support ES5 getters/setters\r\n\r\n  var key;\r\n  for (key in source) {\r\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n      target[key] = source[key];\r\n    }\r\n  }\r\n\r\n  // For IE the for-in-loop does not contain any properties that are not\r\n  // enumerable on the prototype object (for example isPrototypeOf from\r\n  // Object.prototype) and it will also not include 'replace' on objects that\r\n  // extend String and change 'replace' (not that it is common for anyone to\r\n  // extend anything except Object).\r\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\r\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\r\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n      target[key] = source[key];\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Sealing classes breaks the older idiom of assigning properties on the\r\n * prototype rather than in the constructor.  As such, goog.defineClass\r\n * must not seal subclasses of these old-style classes until they are fixed.\r\n * Until then, this marks a class as \"broken\", instructing defineClass\r\n * not to seal subclasses.\r\n * @param {!Function} ctr The legacy constructor to tag as unsealable.\r\n */\r\ngoog.tagUnsealableClass = function(ctr) {\r\n  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {\r\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Name for unsealable tag property.\r\n * @const @private {string}\r\n */\r\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';\r\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utility method for creating an iterator for Arrays.\n */\n'require base';\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {function():!IIterableResult<T>}\n * @template T\n */\n$jscomp.arrayIteratorImpl = function(array) {\n  var index = 0;\n  return function() {\n    if (index < array.length) {\n      return {\n        done: false,\n        value: array[index++],\n      };\n    } else {\n      return {done: true};\n    }\n  };\n};\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {!Iterator<T>}\n * @template T\n */\n$jscomp.arrayIterator = function(array) {\n  return /** @type {!Iterator<T>} */ ({next: $jscomp.arrayIteratorImpl(array)});\n};\n\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/util/arrayiterator';\n\n/**\n * Creates an iterator for the given iterable.  This iterator should never\n * be exposed to user code.\n *\n * @param {string|!Iterable<T>|!Iterator<T>|!Arguments<T>} iterable\n * @return {!Iterator<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeIterator = function(iterable) {\n  // NOTE: Disabling typechecking because [] not allowed on @struct.\n  var iteratorFunction = typeof Symbol != 'undefined' && Symbol.iterator &&\n      (/** @type {?} */ (iterable)[Symbol.iterator]);\n  return iteratorFunction ? iteratorFunction.call(iterable) :\n      $jscomp.arrayIterator(/** @type {!Array} */ (iterable));\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n\n/**\n * Throws if the argument is a RegExp, or if thisArg is undefined.\n * @param {?} thisArg The 'this' arg, which must be defined.\n * @param {*} arg The first argument of the function, which mustn't be a RegExp.\n * @param {string} func Name of the function, for reporting.\n * @return {string} The thisArg, coerced to a string.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.checkStringArgs = function(thisArg, arg, func) {\n  if (thisArg == null) {\n    throw new TypeError(\n        \"The 'this' value for String.prototype.\" + func +\n        ' must not be null or undefined');\n  }\n  if (arg instanceof RegExp) {\n    throw new TypeError(\n        'First argument to String.prototype.' + func +\n        ' must not be a regular expression');\n  }\n  return thisArg + '';\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {reportUnknownTypes}\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.defineProperty() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * Refuses to define properties on Array.prototype and Object.prototype,\n * since we can't make them non-enumerable and this messes up peoples' for\n * loops.  Beyond this, we simply assign values and not worry\n * about enumerability or writeability.\n * @param {?} target\n * @param {string} property\n * @param {?} descriptor\n * @suppress {reportUnknownTypes}\n */\n$jscomp.defineProperty =\n    $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ?\n    Object.defineProperty :\n    function(target, property, descriptor) {\n      descriptor = /** @type {!ObjectPropertyDescriptor} */ (descriptor);\n      // NOTE: This is currently never called with a descriptor outside\n      // the control of the compiler.  If we ever decide to polyfill either\n      // Object.defineProperty or Reflect.defineProperty for ES3, we should\n      // explicitly check for `get` or `set` on the descriptor and throw a\n      // TypeError, since it's impossible to properly polyfill it.\n      if (target == Array.prototype || target == Object.prototype) return;\n      target[property] = descriptor.value;\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime code to store the global object.\n */\n'require base';\n\n\n/**\n * @param {!Object} maybeGlobal\n * @return {!Object} The global object.\n * @suppress {undefinedVars|reportUnknownTypes}\n */\n$jscomp.getGlobal = function(maybeGlobal) {\n  // This logic can be simplified to be made more optimizable.\n  return (typeof window != 'undefined' && window === maybeGlobal) ?\n      maybeGlobal :\n      (typeof global != 'undefined' && global != null) ?\n      /** @type {!Object} */ (global) :\n      maybeGlobal;\n};\n\n\n// TODO(sdh): This should be typed as \"the global object\" now that the type\n// of \"Global\" has landed in the type system.\n/**\n * The global object. For browsers we could just use `this` but in Node that\n * doesn't work.\n * @const {?}\n */\n$jscomp.global = $jscomp.getGlobal(this);\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n */\n'require util/defineproperty';\n'require util/global';\n\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n *     e.g. 'Array.prototype.includes' or 'Map'.\n * @param {?function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.  If null is returned, then no polyfill will be added.  A\n *     null argument for this parameter indicates that the function will not be\n *     polyfilled, and is only useful for `build_polyfill_table.js` bookkeeping.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.  The compiler requires that\n *     `languageOut < fromLang` before injecting a polyfill (i.e. if the\n *     specified output language already includes the feature then there's no\n *     need to polyfill it).\n * @param {string} toLang The language level required by the polyfill\n *     implementation.  The compiler will issue an error if a polyfill is\n *     required, but `languageOut < toLang`.  Additionally, the\n *     `build_polyfill_table.js` script audits the polyfill dependency tree to\n *     ensure that no polyfill with a lower `toLang` depends on one with a\n *     higher `toLang`.\n * @suppress {reportUnknownTypes}\n * @noinline\n * NOTE: We prevent inlining so RemoveUnusedPolyfills can always recognize this\n * call.\n */\n$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {\n  if (!polyfill) return;\n  var obj = $jscomp.global;\n  var split = target.split('.');\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in obj)) obj[key] = {};  // Might want to be defineProperty.\n    obj = obj[key];\n  }\n  var property = split[split.length - 1];\n  var orig = obj[property];\n  var impl = polyfill(orig);\n  if (impl == orig || impl == null) return;\n  $jscomp.defineProperty(\n      obj, property, {configurable: true, writable: true, value: impl});\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.repeat', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns a new string repeated the given number of times.\n   *\n   * <p>Polyfills the instance method String.prototype.repeat().\n   *\n   * @this {string}\n   * @param {number} copies\n   * @return {string}\n   */\n  var polyfill = function(copies) {\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, null, 'repeat');\n    if (copies < 0 || copies > 0x4FFFFFFF) { // impose a 1GB limit\n      throw new RangeError('Invalid count value');\n    }\n    copies = copies | 0; // cast to a signed integer.\n    var result = '';\n    while (copies) {\n      if (copies & 1) result += string;\n      if ((copies >>>= 1)) string += string;\n    }\n    return result;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.endsWith', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Tests whether the string ends with a given substring.\n   *\n   * <p>Polyfills the instance method String.prototype.endsWith().\n   *\n   * @this {string}\n   * @param {string} searchString\n   * @param {number=} opt_position\n   * @return {boolean}\n   */\n  var polyfill = function(searchString, opt_position) {\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, searchString, 'endsWith');\n    searchString = searchString + '';\n    if (opt_position === void 0) opt_position = string.length;\n    var i = Math.max(0, Math.min(opt_position | 0, string.length));\n    var j = searchString.length;\n    while (j > 0 && i > 0) {\n      if (string[--i] != searchString[--j]) return false;\n    }\n    return j <= 0;\n  };\nreturn polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.trunc', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Truncates any fractional digits from its argument (towards zero).\n   *\n   * <p>Polyfills the static function Math.trunc().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number}\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (isNaN(x) || x === Infinity || x === -Infinity || x === 0) return x;\n    var y = Math.floor(Math.abs(x));\n    return x < 0 ? -y : y;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Symbol polyfill.\n * @suppress {uselessCode}\n */\n\n'require es6/util/arrayiterator';\n'require util/defineproperty';\n'require util/global';\n\n/** @const {string} */\n$jscomp.SYMBOL_PREFIX = 'jscomp_symbol_';\n\n/**\n * Initializes the Symbol function.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbol = function() {\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbol = function() {};\n\n  if (!$jscomp.global['Symbol']) {\n    $jscomp.global['Symbol'] = $jscomp.Symbol;\n  }\n};\n\n\n/**\n * @struct @constructor\n * @param {string} id\n * @param {string=} opt_description\n */\n$jscomp.SymbolClass = function(id, opt_description) {\n  /** @private @const {string} */\n  this.$jscomp$symbol$id_ = id;\n\n  /** @const {string|undefined} */\n  this.description;\n\n  // description is read-only.\n  $jscomp.defineProperty(\n      this, 'description',\n      {configurable: true, writable: true, value: opt_description});\n};\n\n\n/** @override */\n$jscomp.SymbolClass.prototype.toString = function() {\n  return this.$jscomp$symbol$id_;\n};\n\n\n/**\n * Produces \"symbols\" (actually just unique strings).\n * @param {string=} opt_description\n * @return {symbol}\n */\n$jscomp.Symbol = /** @type {function(): !Function} */ (function() {\n  var counter = 0;\n\n  /**\n   * @param {string=} opt_description\n   * @return {symbol}\n   * @suppress {reportUnknownTypes}\n   */\n  function Symbol(opt_description) {\n    if (/** @type {?} */ (this) instanceof Symbol) {\n      throw new TypeError('Symbol is not a constructor');\n    }\n    return /** @type {?} */ (new $jscomp.SymbolClass(\n        $jscomp.SYMBOL_PREFIX + (opt_description || '') + '_' + (counter++),\n        opt_description));\n  }\n\n  return Symbol;\n})();\n\n/**\n * Initializes Symbol.iterator (if it's not already defined) and adds a\n * Symbol.iterator property to the Array prototype.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolIterator = function() {\n  $jscomp.initSymbol();\n  var symbolIterator = $jscomp.global['Symbol'].iterator;\n  if (!symbolIterator) {\n    symbolIterator = $jscomp.global['Symbol'].iterator =\n        $jscomp.global['Symbol']('Symbol.iterator');\n  }\n\n  if (typeof Array.prototype[symbolIterator] != 'function') {\n    $jscomp.defineProperty(\n        Array.prototype, symbolIterator, {\n          configurable: true,\n          writable: true,\n          /**\n           * @this {Array}\n           * @return {!IteratorIterable}\n           */\n          value: function() {\n            return $jscomp.iteratorPrototype(\n                $jscomp.arrayIteratorImpl(this));\n          }\n        });\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolIterator = function() {};\n};\n\n\n/**\n * Initializes Symbol.asyncIterator (if it's not already defined)\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolAsyncIterator = function() {\n  $jscomp.initSymbol();\n  var symbolAsyncIterator = $jscomp.global['Symbol'].asyncIterator;\n  if (!symbolAsyncIterator) {\n    symbolAsyncIterator = $jscomp.global['Symbol'].asyncIterator =\n        $jscomp.global['Symbol']('Symbol.asyncIterator');\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolAsyncIterator = function() {};\n};\n\n/**\n * Returns an iterator with the given `next` method.  Passing\n * all iterators through this function allows easily extending\n * the definition of `%IteratorPrototype%` if methods are ever\n * added to it in the future.\n *\n * @param {function(this: Iterator<T>): T} next\n * @return {!IteratorIterable<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.iteratorPrototype = function(next) {\n  $jscomp.initSymbolIterator();\n\n  var iterator = {next: next};\n  /**\n   * @this {IteratorIterable}\n   * @return {!IteratorIterable}\n   */\n  iterator[$jscomp.global['Symbol'].iterator] = function() {\n    return this;\n  };\n  return /** @type {!IteratorIterable} */ (iterator);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utilities for iterator-returning methods.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator from an array-like, with a transformation function.\n * @param {!IArrayLike<INPUT>} array\n * @param {function(number, INPUT): OUTPUT} transform\n * @return {!IteratorIterable<OUTPUT>}\n * @template INPUT, OUTPUT\n * @suppress {checkTypes|reportUnknownTypes}\n */\n$jscomp.iteratorFromArray = function(array, transform) {\n  $jscomp.initSymbolIterator();\n  // NOTE: IE8 doesn't support indexing from boxed Strings.\n  if (array instanceof String) array = array + '';\n  var i = 0;\n  var iter = {\n    next: function() {\n      if (i < array.length) {\n        var index = i++;\n        return {value: transform(index, array[index]), done: false};\n      }\n      iter.next = function() { return {done: true, value: void 0}; };\n      return iter.next();\n    }\n  };\n  iter[Symbol.iterator] = function() { return iter; };\n  return iter;\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/util/iteratorfromarray';\n\n$jscomp.polyfill('Array.prototype.entries', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of [key, value] arrays, one for each entry\n   * in the given array.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @return {!IteratorIterable<!Array<number|VALUE>>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(\n        this, function(i, v) { return [i, v]; });\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.fill', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Fills elements of an array with a constant value.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @param {VALUE} value Value to fill.\n   * @param {number=} opt_start Start index, or zero if omitted.\n   * @param {number=} opt_end End index, or length if omitted.\n   * @return {!IArrayLike<VALUE>} The array, with the fill performed in-place.\n   * @template VALUE\n   * @suppress {reportUnknownTypes, strictPrimitiveOperators}\n   */\n  var polyfill = function(value, opt_start, opt_end) {\n    var length = this.length || 0;\n    if (opt_start < 0) {\n      opt_start = Math.max(0, length + /** @type {number} */ (opt_start));\n    }\n    if (opt_end == null || opt_end > length) opt_end = length;\n    opt_end = Number(opt_end);\n    if (opt_end < 0) opt_end = Math.max(0, length + opt_end);\n    for (var i = Number(opt_start || 0); i < opt_end; i++) {\n      this[i] = value;\n    }\n    return this;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n/**\n * Synonym for Object.prototype.hasOwnProperty.call(obj, prop).\n * @param {!Object} obj\n * @param {string} prop\n * @return {boolean}\n */\n$jscomp.owns = function(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/util/makeiterator';\n'require util/defineproperty';\n'require util/owns';\n'require util/polyfill';\n\n$jscomp.polyfill('WeakMap',\n    /**\n     * @param {*} NativeWeakMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeWeakMap) {\n  /**\n   * Checks conformance of the existing WeakMap.\n   * @return {boolean} True if the browser's implementation conforms.\n   */\n  function isConformant() {\n    if (!NativeWeakMap || !Object.seal) return false;\n    try {\n      var x = Object.seal({});\n      var y = Object.seal({});\n      var map = new /** @type {function(new: WeakMap, !Array)} */ (\n          NativeWeakMap)([[x, 2], [y, 3]]);\n      if (map.get(x) != 2 || map.get(y) != 3) return false;\n      map.delete(x);\n      map.set(y, 4);\n      return !map.has(x) && map.get(y) == 4;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeWeakMap && $jscomp.ES6_CONFORMANCE) return NativeWeakMap;\n  } else {\n    if (isConformant()) return NativeWeakMap;\n  }\n\n  var prop = '$jscomp_hidden_' + Math.random();\n\n  /** @constructor */\n  function WeakMapMembership() {}\n\n  /**\n   * Inserts the hidden property into the target.\n   * @param {!Object} target\n   */\n  function insert(target) {\n    if (!$jscomp.owns(target, prop)) {\n      var obj = new WeakMapMembership();\n      // TODO(sdh): This property will be enumerated in IE8.  If this becomes\n      // a problem, we could avoid it by copying an infrequently-used non-enum\n      // method (like toLocaleString) onto the object itself and encoding the\n      // property on the copy instead.  This codepath must be easily removable\n      // if IE8 support is not needed.\n      $jscomp.defineProperty(target, prop, {value: obj});\n    }\n  }\n\n  /**\n   * Monkey-patches the freezing methods to ensure that the hidden\n   * property is added before any freezing happens.\n   * @param {string} name\n   */\n  function patch(name) {\n    var prev = Object[name];\n    if (prev) {\n      Object[name] = function(target) {\n        if (target instanceof WeakMapMembership) {\n          return target;\n        } else {\n          insert(target);\n          return prev(target);\n        }\n      };\n    }\n  }\n  patch('freeze');\n  patch('preventExtensions');\n  patch('seal');\n  // Note: no need to patch Reflect.preventExtensions since the polyfill\n  // just calls Object.preventExtensions anyway (and if it's not polyfilled\n  // then neither is WeakMap).\n\n  var index = 0;\n\n  /**\n   * Polyfill for WeakMap:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n   *\n   * This implementation is as non-leaky as possible, due to patching\n   * the freezing and sealing operations.  It does not include any logic\n   * to handle cases where a key was somehow made non-extensible without\n   * the special hidden property being added.  It takes some care to ensure\n   * the hidden property is not enumerated over nor discoverable, though\n   * it's not completely secure (particularly in IE8).\n   *\n   * @constructor\n   * @extends {WeakMap<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @param {!Iterator<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional initial data.\n   */\n  var PolyfillWeakMap = function(opt_iterable) {\n    /** @private @const {string} */\n    this.id_ = (index += (Math.random() + 1)).toString();\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item = entry.value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.set = function(key, value) {\n    insert(key);\n    if (!$jscomp.owns(key, prop)) {\n      // NOTE: If the insert() call fails on the key, but the property\n      // has previously successfully been added higher up the prototype\n      // chain, then we'll silently misbehave.  Instead, throw immediately\n      // before doing something bad.  If this becomes a problem (e.g. due\n      // to some rogue frozen objects) then we may need to add a slow and\n      // leaky fallback array to each WeakMap instance, as well as extra\n      // logic in each accessor to use it (*only*) when necessary.\n      throw new Error('WeakMap key fail: ' + key);\n    }\n    key[prop][this.id_] = value;\n    return this;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.get = function(key) {\n    return $jscomp.owns(key, prop) ? key[prop][this.id_] : undefined;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.has = function(key) {\n    return $jscomp.owns(key, prop) && $jscomp.owns(key[prop], this.id_);\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.delete = function(key) {\n    if (!$jscomp.owns(key, prop) ||\n        !$jscomp.owns(key[prop], this.id_)) {\n      return false;\n    }\n    return delete key[prop][this.id_];\n  };\n\n  return PolyfillWeakMap;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/symbol';\n'require es6/util/makeiterator';\n'require es6/weakmap';\n'require util/defines';\n'require util/owns';\n'require util/polyfill';\n\n\n/**\n * Internal record type for entries.\n * @record\n * @template KEY, VALUE\n * @suppress {reportUnknownTypes}\n */\n$jscomp.MapEntry = function() {\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.previous;\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.next;\n  /** @type {?Object} */\n  this.head;\n  /** @type {KEY} */\n  this.key;\n  /** @type {VALUE} */\n  this.value;\n};\n\n\n$jscomp.polyfill('Map',\n    /**\n     * @param {*} NativeMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeMap) {\n\n  /**\n   * Checks conformance of the existing Map.\n   * @return {boolean} True if the browser's implementation conforms.\n   * @suppress {missingProperties} \"entries\" unknown prototype\n   */\n  function isConformant() {\n    if ($jscomp.ASSUME_NO_NATIVE_MAP ||\n        !NativeMap ||\n        typeof NativeMap != \"function\" ||\n        !NativeMap.prototype.entries ||\n        typeof Object.seal != 'function') {\n      return false;\n    }\n    // Some implementations don't support constructor arguments.\n    try {\n      NativeMap = /** @type {function(new: Map, !Iterator=)} */ (NativeMap);\n      var key = Object.seal({x: 4});\n      var map = new NativeMap($jscomp.makeIterator([[key, 's']]));\n      if (map.get(key) != 's' || map.size != 1 || map.get({x: 4}) ||\n          map.set({x: 4}, 't') != map || map.size != 2) {\n        return false;\n      }\n      var /** !Iterator<!Array> */ iter = map.entries();\n      var item = iter.next();\n      if (item.done || item.value[0] != key || item.value[1] != 's') {\n        return false;\n      }\n      item = iter.next();\n      if (item.done || item.value[0].x != 4 ||\n          item.value[1] != 't' || !iter.next().done) {\n        return false;\n      }\n      return true;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeMap && $jscomp.ES6_CONFORMANCE) return NativeMap;\n  } else {\n    if (isConformant()) return NativeMap;\n  }\n\n  // We depend on Symbol.iterator, so ensure it's loaded.\n  $jscomp.initSymbolIterator();\n\n\n  /** @const {!WeakMap<!Object, string>} */\n  var idMap = new WeakMap();\n\n\n  /**\n   * Polyfill for the global Map data type.\n   * @constructor\n   * @struct\n   * @extends {Map<KEY, VALUE>}\n   * @implements {Iterable<!Array<KEY|VALUE>>}\n   * @template KEY, VALUE\n   * @param {!Iterable<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional data to populate the map.\n   */\n  // TODO(sdh): fix param type if heterogeneous arrays ever supported.\n  var PolyfillMap = function(opt_iterable) {\n    /** @private {!Object<!Array<!$jscomp.MapEntry<KEY, VALUE>>>} */\n    this.data_ = {};\n\n    /** @private {!$jscomp.MapEntry<KEY, VALUE>} */\n    this.head_ = createHead();\n\n    // Note: this property should not be changed.  If we're willing to give up\n    // ES3 support, we could define it as a property directly.  It should be\n    // marked readonly if such an annotation ever comes into existence.\n    /** @type {number} */\n    this.size = 0;\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item =\n            /** @type {!IIterableResult<!Array<KEY|VALUE>>} */ (entry).value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.set = function(key, value) {\n    // normalize -0/+0 to +0\n    key = key === 0 ? 0 : key;\n    var r = maybeGetEntry(this, key);\n    if (!r.list) {\n      r.list = (this.data_[r.id] = []);\n    }\n    if (!r.entry) {\n      r.entry = {\n        next: this.head_,\n        previous: this.head_.previous,\n        head: this.head_,\n        key: key,\n        value: value,\n      };\n      r.list.push(r.entry);\n      this.head_.previous.next = r.entry;\n      this.head_.previous = r.entry;\n      this.size++;\n    } else {\n      r.entry.value = value;\n    }\n    return this;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.delete = function(key) {\n    var r = maybeGetEntry(this, key);\n    if (r.entry && r.list) {\n      r.list.splice(r.index, 1);\n      if (!r.list.length) delete this.data_[r.id];\n      r.entry.previous.next = r.entry.next;\n      r.entry.next.previous = r.entry.previous;\n      r.entry.head = null;\n      this.size--;\n      return true;\n    }\n    return false;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.clear = function() {\n    this.data_ = {};\n    this.head_ = this.head_.previous = createHead();\n    this.size = 0;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.has = function(key) {\n    return !!(maybeGetEntry(this, key).entry);\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.get = function(key) {\n    var entry = maybeGetEntry(this, key).entry;\n    // NOTE: this cast is a lie, but so is the extern.\n    return /** @type {VALUE} */ (entry &&\n      /** @type {VALUE} */ (entry.value));\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.entries = function() {\n    return makeIterator(this, /** @return {!Array<(KEY|VALUE)>} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return ([entry.key, entry.value]);\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.keys = function() {\n    return makeIterator(this, /** @return {KEY} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.key;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.values = function() {\n    return makeIterator(this, /** @return {VALUE} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.value;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.forEach = function(callback, opt_thisArg) {\n    var iter = this.entries();\n    var item;\n    while (!(item = iter.next()).done) {\n      var entry = item.value;\n      callback.call(\n          /** @type {?} */ (opt_thisArg),\n          /** @type {VALUE} */ (entry[1]),\n          /** @type {KEY} */ (entry[0]),\n          this);\n    }\n  };\n\n\n  /** @type {?} */ (PolyfillMap.prototype)[Symbol.iterator] =\n      PolyfillMap.prototype.entries;\n\n\n  /**\n   * Returns an entry or undefined.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {KEY} key\n   * @return {{id: string,\n   *           list: (!Array<!$jscomp.MapEntry<KEY, VALUE>>|undefined),\n   *           index: number,\n   *           entry: (!$jscomp.MapEntry<KEY, VALUE>|undefined)}}\n   * @template KEY, VALUE\n   */\n  var maybeGetEntry = function(map, key) {\n    var id = getId(key);\n    var list = map.data_[id];\n    if (list && $jscomp.owns(map.data_, id)) {\n      for (var index = 0; index < list.length; index++) {\n        var entry = list[index];\n        if ((key !== key && entry.key !== entry.key) || key === entry.key) {\n          return {id: id, list: list, index: index, entry: entry};\n        }\n      }\n    }\n    return {id: id, list: list, index: -1, entry: undefined};\n  };\n\n\n  /**\n   * Maps over the entries with the given function.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {function(!$jscomp.MapEntry<KEY, VALUE>): T} func\n   * @return {!IteratorIterable<T>}\n   * @template KEY, VALUE, T\n   * @private\n   */\n  var makeIterator = function(map, func) {\n    var entry = map.head_;\n    return $jscomp.iteratorPrototype(function() {\n      if (entry) {\n        while (entry.head != map.head_) {\n          entry = entry.previous;\n        }\n        while (entry.next != entry.head) {\n          entry = entry.next;\n          return {done: false, value: func(entry)};\n        }\n        entry = null; // make sure depletion is permanent\n      }\n      return {done: true, value: void 0};\n    });\n  };\n\n\n  /**\n   * Makes a new \"head\" element.\n   * @return {!$jscomp.MapEntry<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @suppress {checkTypes} ignore missing key/value for head only\n   */\n  var createHead = function() {\n    var head = /** type {!$jscomp.MapEntry<KEY, VALUE>} */ ({});\n    head.previous = head.next = head.head = head;\n    return head;\n  };\n\n\n  /**\n   * Counter for generating IDs.\n   * @private {number}\n   */\n  var mapIndex = 0;\n\n\n  /**\n   * @param {*} obj An extensible object.\n   * @return {string} A unique ID.\n   */\n  var getId = function(obj) {\n    var type = obj && typeof obj;\n    if (type == 'object' || type == 'function') {\n      obj = /** @type {!Object} */ (obj);\n      if (!idMap.has(obj)) {\n        var id = '' + (++mapIndex);\n        idMap.set(obj, id);\n        return id;\n      }\n      return idMap.get(obj);\n    }\n    // Add a prefix since obj could be '__proto__';\n    return 'p_' + obj;\n  };\n\n\n  return PolyfillMap;\n}, 'es6', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a partial internal polyfill for Object.create.\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.create() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n *\n * Does not implement the second argument.\n * @param {!Object} prototype\n * @return {!Object}\n */\n$jscomp.objectCreate =\n    ($jscomp.ASSUME_ES5 || typeof Object.create == 'function') ?\n    Object.create :\n    function(prototype) {\n      /** @constructor */\n      var ctor = function() {};\n      ctor.prototype = prototype;\n      return new ctor();\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require util/objectcreate';\n\n/**\n * Polyfill for Reflect.construct() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\n *\n * Calls a constructor as with the 'new' operator.\n * TODO(sdh): how to type 'target' with (new: TARGET) if opt_newTarget missing?\n *\n * @param {function(new: ?, ...?)} target The constructor to call.\n * @param {!Array} argList The arguments as a list.\n * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n * @return {TARGET} The result of the function call.\n * @template TARGET\n */\n$jscomp.construct = /** @type {function(): !Function} */ (function() {\n\n  // Check for https://github.com/Microsoft/ChakraCore/issues/3217\n  /** @return {boolean} */\n  function reflectConstructWorks() {\n    /** @constructor */ function Base() {}\n    /** @constructor */ function Derived() {}\n    new Base();\n    Reflect.construct(Base, [], Derived);\n    return new Base() instanceof Base;\n  }\n\n  if (typeof Reflect != 'undefined' && Reflect.construct) {\n    if (reflectConstructWorks()) return Reflect.construct;\n    var brokenConstruct = Reflect.construct;\n    /**\n     * @param {function(new: ?, ...?)} target The constructor to call.\n     * @param {!Array} argList The arguments as a list.\n     * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n     * @return {TARGET} The result of the function call.\n     * @template TARGET\n     * @suppress {reportUnknownTypes}\n     */\n    var patchedConstruct = function(target, argList, opt_newTarget) {\n      var out = brokenConstruct(target, argList);\n      if (opt_newTarget) Reflect.setPrototypeOf(out, opt_newTarget.prototype);\n      return out;\n    };\n    return patchedConstruct;\n  }\n\n  /**\n   * @param {function(new: ?, ...?)} target The constructor to call.\n   * @param {!Array} argList The arguments as a list.\n   * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n   * @return {TARGET} The result of the function call.\n   * @template TARGET\n   * @suppress {reportUnknownTypes}\n   */\n  function construct(target, argList, opt_newTarget) {\n    if (opt_newTarget === undefined) opt_newTarget = target;\n    var proto = opt_newTarget.prototype || Object.prototype;\n    var obj = $jscomp.objectCreate(proto);\n    var apply = Function.prototype.apply;\n    var out = apply.call(target, obj, argList);\n    return out || obj;\n  }\n  return construct;\n})();\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require es6/util/construct';\n'require util/polyfill';\n\n$jscomp.polyfill('Reflect.construct', function(orig) {\n  // NOTE: This is just Reflect.construct if it's present and functional.\n  return $jscomp.construct;\n}, 'es6', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n/**\n * @suppress {missingProperties,reportUnknownTypes}\n * @return {boolean}\n */\n$jscomp.underscoreProtoCanBeSet = function() {\n  var x = {a: true};\n  var y = {};\n  try {\n    y.__proto__ = x;\n    return y.a;\n  } catch (e) {\n    // __proto__ property is readonly (possibly IE 10?)\n  }\n  return false;\n};\n\n/**\n * If we can implement it, this will be a function that attempts to set the\n * prototype of an object, otherwise it will be `null`.\n *\n * It returns the first argument if successful. Throws a `TypeError` if the\n * object is not extensible.\n *\n * @type {null|function(!Object, ?Object): !Object}\n */\n$jscomp.setPrototypeOf = (typeof Object.setPrototypeOf == 'function') ?\n    Object.setPrototypeOf :\n    $jscomp.underscoreProtoCanBeSet() ?\n    function(target, proto) {\n      target.__proto__ = proto;\n      if (target.__proto__ !== proto) {\n        throw new TypeError(target + ' is not extensible');\n      }\n      return target;\n    } :\n    null;\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n'require es6/util/setprototypeof';\n\n\n$jscomp.polyfill(\n    'Reflect.setPrototypeOf',\n    /**\n     * These annotations are intended to match the signature of\n     * $jscomp.polyfill(). Being more specific makes the compiler unhappy.\n     * @suppress {reportUnknownTypes}\n     * @param {?*} orig\n     * @return {*}\n     */\n    function(orig) {\n      if (orig) {\n        return orig;\n      } else if ($jscomp.setPrototypeOf) {\n        /** @const {!function(!Object,?Object):!Object} */\n        var setPrototypeOf = $jscomp.setPrototypeOf;\n        /**\n         * @param {!Object} target\n         * @param {?Object} proto\n         * @return {boolean}\n         */\n        var polyfill = function(target, proto) {\n          try {\n            setPrototypeOf(target, proto);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        };\n        return polyfill;\n      } else {\n        // it isn't possible to implement this method\n        return null;\n      }\n    },\n    'es6', 'es5');\n","// -------------------------------------------------\r\n// --------------------- 9P ------------------------\r\n// -------------------------------------------------\r\n// Implementation of the 9p filesystem device following the \r\n// 9P2000.L protocol ( https://code.google.com/p/diod/wiki/protocol )\r\n\r\n\"use strict\";\r\n\r\n// TODO\r\n// flush\r\n// lock?\r\n// correct hard links\r\n\r\nvar EPERM = 1;       /* Operation not permitted */\r\nvar ENOENT = 2;      /* No such file or directory */\r\nvar EINVAL = 22;     /* Invalid argument */\r\nvar ENOTSUPP = 524;  /* Operation is not supported */\r\nvar ENOTEMPTY = 39;  /* Directory not empty */\r\nvar EPROTO    = 71   /* Protocol error */\r\n\r\nvar P9_SETATTR_MODE = 0x00000001;\r\nvar P9_SETATTR_UID = 0x00000002;\r\nvar P9_SETATTR_GID = 0x00000004;\r\nvar P9_SETATTR_SIZE = 0x00000008;\r\nvar P9_SETATTR_ATIME = 0x00000010;\r\nvar P9_SETATTR_MTIME = 0x00000020;\r\nvar P9_SETATTR_CTIME = 0x00000040;\r\nvar P9_SETATTR_ATIME_SET = 0x00000080;\r\nvar P9_SETATTR_MTIME_SET = 0x00000100;\r\n\r\nvar P9_STAT_MODE_DIR = 0x80000000;\r\nvar P9_STAT_MODE_APPEND = 0x40000000;\r\nvar P9_STAT_MODE_EXCL = 0x20000000;\r\nvar P9_STAT_MODE_MOUNT = 0x10000000;\r\nvar P9_STAT_MODE_AUTH = 0x08000000;\r\nvar P9_STAT_MODE_TMP = 0x04000000;\r\nvar P9_STAT_MODE_SYMLINK = 0x02000000;\r\nvar P9_STAT_MODE_LINK = 0x01000000;\r\nvar P9_STAT_MODE_DEVICE = 0x00800000;\r\nvar P9_STAT_MODE_NAMED_PIPE = 0x00200000;\r\nvar P9_STAT_MODE_SOCKET = 0x00100000;\r\nvar P9_STAT_MODE_SETUID = 0x00080000;\r\nvar P9_STAT_MODE_SETGID = 0x00040000;\r\nvar P9_STAT_MODE_SETVTX = 0x00010000;\r\n\r\nvar FID_NONE = -1;\r\nvar FID_INODE = 1;\r\nvar FID_XATTR = 2;\r\n\r\n/** \r\n * @constructor \r\n *\r\n * @param {FS} filesystem\r\n */\r\nfunction Virtio9p(filesystem, bus) {\r\n    /** @const @type {FS} */\r\n    this.fs = filesystem;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    this.SendReply = function(x, y) {};\r\n    this.deviceid = 0x9; // 9p filesystem\r\n    this.hostfeature = 0x1; // mountpoint\r\n    //this.configspace = [0x0, 0x4, 0x68, 0x6F, 0x73, 0x74]; // length of string and \"host\" string\r\n    //this.configspace = [0x0, 0x9, 0x2F, 0x64, 0x65, 0x76, 0x2F, 0x72, 0x6F, 0x6F, 0x74 ]; // length of string and \"/dev/root\" string\r\n\r\n    this.configspace = new Uint8Array([0x6, 0x0, 0x68, 0x6F, 0x73, 0x74, 0x39, 0x70]); // length of string and \"host9p\" string\r\n    this.VERSION = \"9P2000.L\";\r\n    this.BLOCKSIZE = 8192; // Let's define one page.\r\n    this.msize = 8192; // maximum message size\r\n    this.replybuffer = new Uint8Array(this.msize*2); // Twice the msize to stay on the safe site\r\n    this.replybuffersize = 0;\r\n\r\n    this.fids = [];\r\n}\r\n\r\nVirtio9p.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.deviceid;\r\n    state[1] = this.hostfeature;\r\n    state[2] = this.configspace;\r\n    state[3] = this.VERSION;\r\n    state[4] = this.BLOCKSIZE;\r\n    state[5] = this.msize;\r\n    state[6] = this.replybuffer;\r\n    state[7] = this.replybuffersize;\r\n    state[8] = this.fids.map(function(f) { return [f.inodeid, f.type, f.uid] });\r\n\r\n    return state;\r\n};\r\n\r\nVirtio9p.prototype.set_state = function(state)\r\n{\r\n    this.deviceid = state[0];\r\n    this.hostfeature = state[1];\r\n    this.configspace = state[2];\r\n    this.VERSION = state[3];\r\n    this.BLOCKSIZE = state[4];\r\n    this.msize = state[5];\r\n    this.replybuffer = state[6];\r\n    this.replybuffersize = state[7];\r\n    this.fids = state[8].map(function(f) { return { inodeid: f[0], type: f[1], uid: f[2] } });\r\n};\r\n\r\nVirtio9p.prototype.Createfid = function(inode, type, uid) {\r\n    return {inodeid: inode, type: type, uid: uid};\r\n}\r\n\r\nVirtio9p.prototype.Reset = function() {\r\n    this.fids = [];\r\n}\r\n\r\n\r\nVirtio9p.prototype.BuildReply = function(id, tag, payloadsize) {\r\n    marshall.Marshall([\"w\", \"b\", \"h\"], [payloadsize+7, id+1, tag], this.replybuffer, 0);\r\n    if ((payloadsize+7) >= this.replybuffer.length) {\r\n        message.Debug(\"Error in 9p: payloadsize exceeds maximum length\");\r\n    }\r\n    //for(var i=0; i<payload.length; i++)\r\n    //    this.replybuffer[7+i] = payload[i];\r\n    this.replybuffersize = payloadsize+7;\r\n    return;\r\n}\r\n\r\nVirtio9p.prototype.SendError = function (tag, errormsg, errorcode) {\r\n    //var size = marshall.Marshall([\"s\", \"w\"], [errormsg, errorcode], this.replybuffer, 7);\r\n    var size = marshall.Marshall([\"w\"], [errorcode], this.replybuffer, 7);\r\n    this.BuildReply(6, tag, size);\r\n}\r\n\r\nVirtio9p.prototype.ReceiveRequest = function (index, GetByte) {\r\n    var header = marshall.Unmarshall2([\"w\", \"b\", \"h\"], GetByte);\r\n    var size = header[0];\r\n    var id = header[1];\r\n    var tag = header[2];\r\n    //message.Debug(\"size:\" + size + \" id:\" + id + \" tag:\" + tag);\r\n\r\n    switch(id)\r\n    {\r\n        case 8: // statfs\r\n            size = this.fs.GetTotalSize(); // size used by all files\r\n            var space = this.fs.GetSpace();\r\n            var req = [];\r\n            req[0] = 0x01021997;\r\n            req[1] = this.BLOCKSIZE; // optimal transfer block size\r\n            req[2] = Math.floor(space/req[1]); // free blocks\r\n            req[3] = req[2] - Math.floor(size/req[1]); // free blocks in fs\r\n            req[4] = req[2] - Math.floor(size/req[1]); // free blocks avail to non-superuser\r\n            req[5] = this.fs.inodes.length; // total number of inodes\r\n            req[6] = 1024*1024;\r\n            req[7] = 0; // file system id?\r\n            req[8] = 256; // maximum length of filenames\r\n\r\n            size = marshall.Marshall([\"w\", \"w\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\", \"w\"], req, this.replybuffer, 7);\r\n            this.BuildReply(id, tag, size);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 112: // topen\r\n        case 12: // tlopen\r\n            var req = marshall.Unmarshall2([\"w\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var mode = req[1];\r\n            message.Debug(\"[open] fid=\" + fid + \", mode=\" + mode);\r\n            var idx = this.fids[fid].inodeid;\r\n            var inode = this.fs.GetInode(idx);\r\n            message.Debug(\"file open \" + inode.name);\r\n            //if (inode.status == STATUS_LOADING) return;\r\n            var ret = this.fs.OpenInode(idx, mode);\r\n\r\n            this.fs.AddEvent(this.fids[fid].inodeid,\r\n                function() {\r\n                    message.Debug(\"file opened \" + inode.name + \" tag:\"+tag);\r\n                    req[0] = inode.qid;\r\n                    req[1] = this.msize - 24;\r\n                    marshall.Marshall([\"Q\", \"w\"], req, this.replybuffer, 7);\r\n                    this.BuildReply(id, tag, 13+4);\r\n                    this.SendReply(0, index);\r\n                }.bind(this)\r\n            );\r\n            break;\r\n\r\n        case 70: // link (just copying)\r\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\r\n            var dfid = req[0];\r\n            var fid = req[1];\r\n            var name = req[2];\r\n            message.Debug(\"[link] dfid=\" + dfid + \", name=\" + name);\r\n            var inode = this.fs.CreateInode();\r\n            var inodetarget = this.fs.GetInode(this.fids[fid].inodeid);\r\n            var targetdata = this.fs.inodedata[this.fids[fid].inodeid];\r\n            //inode = inodetarget;\r\n            inode.mode = inodetarget.mode;\r\n            inode.size = inodetarget.size;\r\n            inode.symlink = inodetarget.symlink;\r\n            var data = this.fs.inodedata[this.fs.inodes.length] = new Uint8Array(inode.size);\r\n            for(var i=0; i<inode.size; i++) {\r\n                data[i] = targetdata[i];\r\n            }\r\n            inode.name = name;\r\n            inode.parentid = this.fids[dfid].inodeid;\r\n            this.fs.PushInode(inode);\r\n            \r\n            //inode.uid = inodetarget.uid;\r\n            //inode.gid = inodetarget.gid;\r\n            //inode.mode = inodetarget.mode | S_IFLNK;\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);       \r\n            break;\r\n\r\n        case 16: // symlink\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"s\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var name = req[1];\r\n            var symgt = req[2];\r\n            var gid = req[3];\r\n            message.Debug(\"[symlink] fid=\" + fid + \", name=\" + name + \", symgt=\" + symgt + \", gid=\" + gid); \r\n            var idx = this.fs.CreateSymlink(name, this.fids[fid].inodeid, symgt);\r\n            var inode = this.fs.GetInode(idx);\r\n            inode.uid = this.fids[fid].uid;\r\n            inode.gid = gid;\r\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 13);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 18: // mknod\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var name = req[1];\r\n            var mode = req[2];\r\n            var major = req[3];\r\n            var minor = req[4];\r\n            var gid = req[5];\r\n            message.Debug(\"[mknod] fid=\" + fid + \", name=\" + name + \", major=\" + major + \", minor=\" + minor+ \"\");\r\n            var idx = this.fs.CreateNode(name, this.fids[fid].inodeid, major, minor);\r\n            var inode = this.fs.GetInode(idx);\r\n            inode.mode = mode;\r\n            inode.uid = this.fids[fid].uid;\r\n            inode.gid = gid;\r\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 13);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n\r\n        case 22: // TREADLINK\r\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\r\n            var fid = req[0];\r\n            message.Debug(\"[readlink] fid=\" + fid);\r\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\r\n            size = marshall.Marshall([\"s\"], [inode.symlink], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, size);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n\r\n        case 72: // tmkdir\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var name = req[1];\r\n            var mode = req[2];\r\n            var gid = req[3];\r\n            message.Debug(\"[mkdir] fid=\" + fid + \", name=\" + name + \", mode=\" + mode + \", gid=\" + gid); \r\n            var idx = this.fs.CreateDirectory(name, this.fids[fid].inodeid);\r\n            var inode = this.fs.GetInode(idx);\r\n            inode.mode = mode | S_IFDIR;\r\n            inode.uid = this.fids[fid].uid;\r\n            inode.gid = gid;\r\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 13);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 14: // tlcreate\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var name = req[1];\r\n            var flags = req[2];\r\n            var mode = req[3];\r\n            var gid = req[4];\r\n            message.Debug(\"[create] fid=\" + fid + \", name=\" + name + \", flags=\" + flags + \", mode=\" + mode + \", gid=\" + gid); \r\n            var idx = this.fs.CreateFile(name, this.fids[fid].inodeid);\r\n            this.fids[fid].inodeid = idx;\r\n            this.fids[fid].type = FID_INODE;\r\n            var inode = this.fs.GetInode(idx);\r\n            inode.uid = this.fids[fid].uid;\r\n            inode.gid = gid;\r\n            inode.mode = mode;\r\n            marshall.Marshall([\"Q\", \"w\"], [inode.qid, this.msize - 24], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 13+4);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 52: // lock always suceed\r\n            message.Debug(\"lock file\\n\");\r\n            marshall.Marshall([\"w\"], [0], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 1);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        /*\r\n        case 54: // getlock\r\n            break;        \r\n        */\r\n\r\n        case 24: // getattr\r\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\r\n            var fid = req[0];\r\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\r\n            message.Debug(\"[getattr]: fid=\" + fid + \" name=\" + inode.name + \" request mask=\" + req[1]);\r\n            if(!inode || inode.status === STATUS_UNLINKED)\r\n            {\r\n                message.Debug(\"getattr: unlinked\");\r\n                this.SendError(tag, \"No such file or directory\", ENOENT);\r\n                this.SendReply(0, index);\r\n                break;\r\n            }\r\n            req[0] |= 0x1000; // P9_STATS_GEN\r\n\r\n            req[0] = req[1]; // request mask\r\n            req[1] = inode.qid;\r\n\r\n            req[2] = inode.mode; \r\n            req[3] = inode.uid; // user id\r\n            req[4] = inode.gid; // group id\r\n            \r\n            req[5] = inode.nlinks; // number of hard links\r\n            req[6] = (inode.major<<8) | (inode.minor); // device id low\r\n            req[7] = inode.size; // size low\r\n            req[8] = this.BLOCKSIZE;\r\n            req[9] = Math.floor(inode.size/512+1);; // blk size low\r\n            req[10] = inode.atime; // atime\r\n            req[11] = 0x0;\r\n            req[12] = inode.mtime; // mtime\r\n            req[13] = 0x0;\r\n            req[14] = inode.ctime; // ctime\r\n            req[15] = 0x0;\r\n            req[16] = 0x0; // btime\r\n            req[17] = 0x0; \r\n            req[18] = 0x0; // st_gen\r\n            req[19] = 0x0; // data_version\r\n            marshall.Marshall([\r\n            \"d\", \"Q\", \r\n            \"w\",  \r\n            \"w\", \"w\", \r\n            \"d\", \"d\", \r\n            \"d\", \"d\", \"d\",\r\n            \"d\", \"d\", // atime\r\n            \"d\", \"d\", // mtime\r\n            \"d\", \"d\", // ctime\r\n            \"d\", \"d\", // btime\r\n            \"d\", \"d\",\r\n            ], req, this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 8 + 13 + 4 + 4+ 4 + 8*15);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 26: // setattr\r\n            var req = marshall.Unmarshall2([\"w\", \"w\", \r\n                \"w\", // mode \r\n                \"w\", \"w\", // uid, gid\r\n                \"d\", // size\r\n                \"d\", \"d\", // atime\r\n                \"d\", \"d\"] // mtime\r\n            , GetByte);\r\n            var fid = req[0];\r\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\r\n            message.Debug(\"[setattr]: fid=\" + fid + \" request mask=\" + req[1] + \" name=\" +inode.name);\r\n            if (req[1] & P9_SETATTR_MODE) {\r\n                inode.mode = req[2];\r\n            }\r\n            if (req[1] & P9_SETATTR_UID) {\r\n                inode.uid = req[3];\r\n            }\r\n            if (req[1] & P9_SETATTR_GID) {\r\n                inode.gid = req[4];\r\n            }\r\n            if (req[1] & P9_SETATTR_ATIME) {\r\n                inode.atime = Math.floor((new Date()).getTime()/1000);\r\n            }\r\n            if (req[1] & P9_SETATTR_MTIME) {\r\n                inode.mtime = Math.floor((new Date()).getTime()/1000);\r\n            }\r\n            if (req[1] & P9_SETATTR_CTIME) {\r\n                inode.ctime = Math.floor((new Date()).getTime()/1000);\r\n            }\r\n            if (req[1] & P9_SETATTR_ATIME_SET) {\r\n                inode.atime = req[6];\r\n            }\r\n            if (req[1] & P9_SETATTR_MTIME_SET) {\r\n                inode.mtime = req[8];\r\n            }\r\n            if (req[1] & P9_SETATTR_SIZE) {\r\n                this.fs.ChangeSize(this.fids[fid].inodeid, req[5]);\r\n            }\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 50: // fsync\r\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\r\n            var fid = req[0];\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 40: // TREADDIR\r\n        case 116: // read\r\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var offset = req[1];\r\n            var count = req[2];\r\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\r\n            if (id == 40) message.Debug(\"[treaddir]: fid=\" + fid + \" offset=\" + offset + \" count=\" + count);\r\n            if (id == 116) message.Debug(\"[read]: fid=\" + fid + \" (\" + inode.name + \") offset=\" + offset + \" count=\" + count + \" fidtype=\" + this.fids[fid].type);\r\n            if(!inode || inode.status === STATUS_UNLINKED)\r\n            {\r\n                message.Debug(\"read/treaddir: unlinked\");\r\n                this.SendError(tag, \"No such file or directory\", ENOENT);\r\n                this.SendReply(0, index);\r\n                break;\r\n            }\r\n            if (this.fids[fid].type == FID_XATTR) {\r\n                if (inode.caps.length < offset+count) count = inode.caps.length - offset;\r\n                for(var i=0; i<count; i++)\r\n                    this.replybuffer[7+4+i] = inode.caps[offset+i];\r\n                marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\r\n                this.BuildReply(id, tag, 4 + count);\r\n                this.SendReply(0, index);\r\n            } else {\r\n                var file = this.fs.inodes[this.fids[fid].inodeid];\r\n                this.bus.send(\"9p-read-start\");\r\n\r\n                this.fs.OpenInode(this.fids[fid].inodeid, undefined);\r\n                this.fs.AddEvent(this.fids[fid].inodeid,\r\n                    function() {\r\n                        this.bus.send(\"9p-read-end\", [file.name, count]);\r\n\r\n                        if (inode.size < offset+count) count = inode.size - offset;\r\n                        var data = this.fs.inodedata[this.fids[fid].inodeid];\r\n                        if(data) {\r\n                            for(var i=0; i<count; i++)\r\n                                this.replybuffer[7+4+i] = data[offset+i];\r\n                        }\r\n                        marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\r\n                        this.BuildReply(id, tag, 4 + count);\r\n                        this.SendReply(0, index);\r\n                    }.bind(this)\r\n                );\r\n            }\r\n            break;\r\n\r\n        case 118: // write\r\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var offset = req[1];\r\n            var count = req[2];\r\n            message.Debug(\"[write]: fid=\" + fid + \" (\" + this.fs.inodes[this.fids[fid].inodeid].name + \") offset=\" + offset + \" count=\" + count);\r\n            this.fs.Write(this.fids[fid].inodeid, offset, count, GetByte);\r\n\r\n            var file = this.fs.inodes[this.fids[fid].inodeid];\r\n            this.bus.send(\"9p-write-end\", [file.name, count]);\r\n\r\n            marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 4);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 74: // RENAMEAT\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"s\"], GetByte);\r\n            var olddirfid = req[0];\r\n            var oldname = req[1];\r\n            var newdirfid = req[2];\r\n            var newname = req[3];\r\n            message.Debug(\"[renameat]: oldname=\" + oldname + \" newname=\" + newname);\r\n            var ret = this.fs.Rename(this.fids[olddirfid].inodeid, oldname, this.fids[newdirfid].inodeid, newname);\r\n            if (ret == false) {\r\n                this.SendError(tag, \"No such file or directory\", ENOENT);                   \r\n                this.SendReply(0, index);\r\n                break;\r\n            }\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 76: // TUNLINKAT\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\"], GetByte);\r\n            var dirfd = req[0];\r\n            var name = req[1];\r\n            var flags = req[2];\r\n            message.Debug(\"[unlink]: dirfd=\" + dirfd + \" name=\" + name + \" flags=\" + flags);\r\n            var fid = this.fs.Search(this.fids[dirfd].inodeid, name);\r\n            if (fid == -1) {\r\n                   this.SendError(tag, \"No such file or directory\", ENOENT);\r\n                   this.SendReply(0, index);\r\n                   break;\r\n            }\r\n            var ret = this.fs.Unlink(fid);\r\n            if (!ret) {\r\n                this.SendError(tag, \"Directory not empty\", ENOTEMPTY);\r\n                this.SendReply(0, index);\r\n                break;\r\n            }\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 100: // version\r\n            var version = marshall.Unmarshall2([\"w\", \"s\"], GetByte);\r\n            message.Debug(\"[version]: msize=\" + version[0] + \" version=\" + version[1]);\r\n            this.msize = version[0];\r\n            size = marshall.Marshall([\"w\", \"s\"], [this.msize, this.VERSION], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, size);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 104: // attach\r\n            // return root directorie's QID\r\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\", \"s\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var uid = req[4];\r\n            message.Debug(\"[attach]: fid=\" + fid + \" afid=\" + hex8(req[1]) + \" uname=\" + req[2] + \" aname=\" + req[3]);\r\n            this.fids[fid] = this.Createfid(0, FID_INODE, uid);\r\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\r\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 13);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 108: // tflush\r\n            var req = marshall.Unmarshall2([\"h\"], GetByte);\r\n            var oldtag = req[0];\r\n            message.Debug(\"[flush] \" + tag);\r\n            //marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n\r\n        case 110: // walk\r\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"h\"], GetByte);\r\n            var fid = req[0];\r\n            var nwfid = req[1];\r\n            var nwname = req[2];\r\n            message.Debug(\"[walk]: fid=\" + req[0] + \" nwfid=\" + req[1] + \" nwname=\" + nwname);\r\n            if (nwname == 0) {\r\n                this.fids[nwfid] = this.Createfid(this.fids[fid].inodeid, FID_INODE, this.fids[fid].uid);\r\n                //this.fids[nwfid].inodeid = this.fids[fid].inodeid;\r\n                marshall.Marshall([\"h\"], [0], this.replybuffer, 7);\r\n                this.BuildReply(id, tag, 2);\r\n                this.SendReply(0, index);\r\n                break;\r\n            }\r\n            var wnames = [];\r\n            for(var i=0; i<nwname; i++) {\r\n                wnames.push(\"s\");\r\n            }\r\n            var walk = marshall.Unmarshall2(wnames, GetByte);\r\n            var idx = this.fids[fid].inodeid;\r\n            var offset = 7+2;\r\n            var nwidx = 0;\r\n            //console.log(idx, this.fs.inodes[idx]);\r\n            message.Debug(\"walk in dir \" + this.fs.inodes[idx].name  + \" to: \" + walk.toString());\r\n            for(var i=0; i<nwname; i++) {\r\n                idx = this.fs.Search(idx, walk[i]);\r\n\r\n                if (idx == -1) {\r\n                   message.Debug(\"Could not find: \" + walk[i]);\r\n                   break;\r\n                }\r\n                offset += marshall.Marshall([\"Q\"], [this.fs.inodes[idx].qid], this.replybuffer, offset);\r\n                nwidx++;\r\n                //message.Debug(this.fids[nwfid].inodeid);\r\n                //this.fids[nwfid].inodeid = idx;\r\n                //this.fids[nwfid].type = FID_INODE;\r\n                this.fids[nwfid] = this.Createfid(idx, FID_INODE, this.fids[fid].uid);\r\n            }\r\n            marshall.Marshall([\"h\"], [nwidx], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, offset-7);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 120: // clunk\r\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\r\n            message.Debug(\"[clunk]: fid=\" + req[0]);\r\n            if (this.fids[req[0]] && this.fids[req[0]].inodeid >=  0) {\r\n                this.fs.CloseInode(this.fids[req[0]].inodeid);\r\n                this.fids[req[0]].inodeid = -1;\r\n                this.fids[req[0]].type = FID_NONE;\r\n            }\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        case 32: // txattrcreate\r\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"d\", \"w\"], GetByte);\r\n            var fid = req[0];\r\n            var name = req[1];\r\n            var attr_size = req[2];\r\n            var flags = req[3];\r\n            message.Debug(\"[txattrcreate]: fid=\" + fid + \" name=\" + name + \" attr_size=\" + attr_size + \" flags=\" + flags);\r\n            this.BuildReply(id, tag, 0);\r\n            this.SendReply(0, index);\r\n            //this.SendError(tag, \"Operation i not supported\",  EINVAL);\r\n            //this.SendReply(0, index);\r\n            break;\r\n\r\n        case 30: // xattrwalk\r\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\r\n            var fid = req[0];\r\n            var newfid = req[1];\r\n            var name = req[2];\r\n            message.Debug(\"[xattrwalk]: fid=\" + req[0] + \" newfid=\" + req[1] + \" name=\" + req[2]);\r\n            this.fids[newfid] = this.Createfid(this.fids[fid].inodeid, FID_NONE, this.fids[fid].uid);\r\n            //this.fids[newfid].inodeid = this.fids[fid].inodeid;\r\n            //this.fids[newfid].type = FID_NONE;\r\n            var length = 0;\r\n            if (name == \"security.capability\") {\r\n                length = this.fs.PrepareCAPs(this.fids[fid].inodeid);\r\n                this.fids[newfid].type = FID_XATTR;\r\n            }\r\n            marshall.Marshall([\"d\"], [length], this.replybuffer, 7);\r\n            this.BuildReply(id, tag, 8);\r\n            this.SendReply(0, index);\r\n            break;\r\n\r\n        default:\r\n            message.Debug(\"Error in Virtio9p: Unknown id \" + id + \" received\");\r\n            message.Abort();\r\n            //this.SendError(tag, \"Operation i not supported\",  ENOTSUPP);\r\n            //this.SendReply(0, index);\r\n            break;\r\n    }\r\n\r\n    //consistency checks if there are problems with the filesystem\r\n    //this.fs.Check();\r\n}\r\n","// -------------------------------------------------\r\n// ----------------- FILESYSTEM---------------------\r\n// -------------------------------------------------\r\n// Implementation of a unix filesystem in memory.\r\n\r\n\"use strict\";\r\n\r\nvar S_IRWXUGO = 0x1FF;\r\nvar S_IFMT = 0xF000;\r\nvar S_IFSOCK = 0xC000;\r\nvar S_IFLNK = 0xA000;\r\nvar S_IFREG = 0x8000;\r\nvar S_IFBLK = 0x6000;\r\nvar S_IFDIR = 0x4000;\r\nvar S_IFCHR = 0x2000;\r\n\r\n//var S_IFIFO  0010000\r\n//var S_ISUID  0004000\r\n//var S_ISGID  0002000\r\n//var S_ISVTX  0001000\r\n\r\nvar O_RDONLY = 0x0000; // open for reading only \r\nvar O_WRONLY = 0x0001; // open for writing only\r\nvar O_RDWR = 0x0002; // open for reading and writing\r\nvar O_ACCMODE = 0x0003; // mask for above modes\r\n\r\nvar STATUS_INVALID = -0x1;\r\nvar STATUS_OK = 0x0;\r\nvar STATUS_OPEN = 0x1;\r\nvar STATUS_ON_SERVER = 0x2;\r\nvar STATUS_LOADING = 0x3;\r\nvar STATUS_UNLINKED = 0x4;\r\n\r\n\r\n/** @const */ var JSONFS_VERSION = 2;\r\n\r\n\r\n/** @const */ var JSONFS_IDX_NAME = 0\r\n/** @const */ var JSONFS_IDX_SIZE = 1\r\n/** @const */ var JSONFS_IDX_MTIME = 2\r\n/** @const */ var JSONFS_IDX_MODE = 3\r\n/** @const */ var JSONFS_IDX_UID = 4\r\n/** @const */ var JSONFS_IDX_GID = 5\r\n/** @const */ var JSONFS_IDX_TARGET = 6\r\n\r\n\r\n/** @constructor */\r\nfunction FS(baseurl) {\r\n    /** @type {Array.<Inode>} */\r\n    this.inodes = [];\r\n    this.events = [];\r\n\r\n    this.baseurl = baseurl;\r\n\r\n    this.qidnumber = 0x0;\r\n    this.filesinloadingqueue = 0;\r\n    this.OnLoaded = function() {};\r\n\r\n    //this.tar = new TAR(this);\r\n\r\n    this.inodedata = {};\r\n\r\n    this.total_size = 256 * 1024 * 1024 * 1024;\r\n    this.used_size = 0;\r\n\r\n    //RegisterMessage(\"LoadFilesystem\", this.LoadFilesystem.bind(this) );\r\n    //RegisterMessage(\"MergeFile\", this.MergeFile.bind(this) );\r\n    //RegisterMessage(\"tar\",\r\n    //    function(data) {\r\n    //        SendToMaster(\"tar\", this.tar.Pack(data));\r\n    //    }.bind(this)\r\n    //);\r\n    //RegisterMessage(\"sync\",\r\n    //    function(data) {\r\n    //        SendToMaster(\"sync\", this.tar.Pack(data));\r\n    //    }.bind(this)\r\n    //);\r\n\r\n    // root entry\r\n    this.CreateDirectory(\"\", -1);\r\n}\r\n\r\n\r\n// -----------------------------------------------------\r\n\r\nFS.prototype.AddEvent = function(id, OnEvent) {\r\n    var inode = this.GetInode(id);\r\n    if (inode.status == STATUS_OK) {\r\n        OnEvent();\r\n        return;\r\n    }\r\n    this.events.push({id: id, OnEvent: OnEvent});    \r\n}\r\n\r\nFS.prototype.HandleEvent = function(id) {\r\n\r\n    if (this.filesinloadingqueue == 0) {\r\n        this.OnLoaded();\r\n        this.OnLoaded = function() {}\r\n    }\r\n    //message.Debug(\"number of events: \" + this.events.length);\r\n    var newevents = [];\r\n    for(var i=0; i<this.events.length; i++) {\r\n        if (this.events[i].id == id) {\r\n            this.events[i].OnEvent();\r\n        } else {\r\n            newevents.push(this.events[i]);\r\n        }\r\n    }\r\n    this.events = newevents;\r\n}\r\n\r\nFS.prototype.OnJSONLoaded = function(fs)\r\n{\r\n    if(DEBUG)\r\n    {\r\n        console.assert(fs, \"Invalid fs passed to OnJSONLoaded\");\r\n    }\r\n\r\n    //console.time(\"parse\");\r\n    var fsdata = JSON.parse(fs);\r\n    //console.timeEnd(\"parse\");\r\n\r\n    if(fsdata[\"version\"] !== JSONFS_VERSION)\r\n    {\r\n        throw \"The filesystem JSON format has changed. \" +\r\n              \"Please update your fs2json (https://github.com/copy/fs2json) and recreate the filesystem JSON.\";\r\n    }\r\n\r\n    var fsroot = fsdata[\"fsroot\"];\r\n    this.used_size = fsdata[\"size\"];\r\n\r\n    var me = this;\r\n\r\n    setTimeout(function()\r\n    {\r\n        //console.time(\"Load\");\r\n        //console.profile(\"Load\");\r\n        for(var i = 0; i < fsroot.length; i++) {\r\n            me.LoadRecursive(fsroot[i], 0);\r\n        }\r\n        //console.profileEnd(\"Load\");\r\n        //console.timeEnd(\"Load\");\r\n\r\n        //if(DEBUG)\r\n        //{\r\n        //    console.time(\"Check\");\r\n        //    me.Check();\r\n        //    console.timeEnd(\"Check\");\r\n        //}\r\n\r\n        me.OnLoaded();\r\n        me.OnLoaded = function() {};\r\n    }, 0);\r\n};\r\n\r\nFS.prototype.LoadRecursive = function(data, parentid)\r\n{\r\n    var inode = this.CreateInode();\r\n\r\n    inode.name = data[JSONFS_IDX_NAME]\r\n    inode.size = data[JSONFS_IDX_SIZE];\r\n    inode.mtime = data[JSONFS_IDX_MTIME];\r\n    inode.ctime = inode.mtime;\r\n    inode.atime = inode.mtime;\r\n    inode.mode = data[JSONFS_IDX_MODE];\r\n    inode.uid = data[JSONFS_IDX_UID];\r\n    inode.gid = data[JSONFS_IDX_GID];\r\n\r\n    inode.parentid = parentid;\r\n    this.inodes[inode.parentid].nlinks++;\r\n\r\n    var ifmt = inode.mode & S_IFMT;\r\n\r\n    if(ifmt === S_IFDIR)\r\n    {\r\n        this.LoadDir(inode, data[JSONFS_IDX_TARGET]);\r\n    }\r\n    else if(ifmt === S_IFREG)\r\n    {\r\n        inode.status = STATUS_ON_SERVER;\r\n        this.PushInode(inode);\r\n    }\r\n    else if(ifmt === S_IFLNK)\r\n    {\r\n        inode.symlink = data[JSONFS_IDX_TARGET];\r\n        this.PushInode(inode);\r\n    }\r\n    else if(ifmt === S_IFSOCK)\r\n    {\r\n        // socket: ignore\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"Unexpected ifmt: \" + h(ifmt) + \" (\" + inode.name + \")\");\r\n    }\r\n}\r\n\r\nFS.prototype.LoadDir = function(inode, children)\r\n{\r\n    inode.updatedir = true;\r\n    inode.nlinks = 2; // . and ..\r\n\r\n    var p = this.inodes.length;\r\n    this.PushInode(inode);\r\n\r\n    for(var i = 0; i < children.length; i++) {\r\n        this.LoadRecursive(children[i], p);\r\n    }\r\n}\r\n\r\n// Loads the data from a url for a specific inode\r\nFS.prototype.LoadFile = function(idx) {\r\n    var inode = this.inodes[idx];\r\n    if (inode.status != STATUS_ON_SERVER) {\r\n        return;\r\n    }\r\n    inode.status = STATUS_LOADING;\r\n    this.filesinloadingqueue++;\r\n\r\n    //if (inode.compressed) {\r\n    //    inode.data = new Uint8Array(inode.size);\r\n    //    LoadBinaryResource(inode.url + \".bz2\",\r\n    //    function(buffer){\r\n    //        var buffer8 = new Uint8Array(buffer);\r\n    //        var ofs = 0;\r\n    //        bzip2.simple(buffer8, function(x){inode.data[ofs++] = x;}.bind(this) );    \r\n    //        inode.status = STATUS_OK;\r\n    //        this.filesinloadingqueue--;\r\n    //        this.HandleEvent(idx);            \r\n    //    }.bind(this), \r\n    //    function(error){throw error;});\r\n    //    return;\r\n    //}\r\n\r\n    if(this.baseurl)\r\n    {\r\n        LoadBinaryResource(this.baseurl + this.GetFullPath(inode.fid),  \r\n            function(buffer){\r\n                var data = this.inodedata[idx] = new Uint8Array(buffer);\r\n                inode.size = data.length; // correct size if the previous was wrong. \r\n                inode.status = STATUS_OK;\r\n\r\n                this.filesinloadingqueue--;\r\n                this.HandleEvent(idx);            \r\n            }.bind(this), \r\n            function(error){throw error;});\r\n    }\r\n    else\r\n    {\r\n        // If baseurl is not set, we started with an empty filesystem. No files\r\n        // can be loaded\r\n    }\r\n}\r\n\r\n// -----------------------------------------------------\r\n\r\nFS.prototype.PushInode = function(inode) {\r\n    if (inode.parentid != -1) {\r\n        this.inodes.push(inode);\r\n        inode.fid = this.inodes.length - 1;\r\n        var parent_node = this.inodes[inode.parentid];\r\n        parent_node.updatedir = true;\r\n        inode.nextid = parent_node.firstid;\r\n        parent_node.firstid = this.inodes.length-1;\r\n        return;\r\n    } else {\r\n        if (this.inodes.length == 0) { // if root directory\r\n            this.inodes.push(inode);\r\n            return;\r\n        }\r\n    }\r\n\r\n    message.Debug(\"Error in Filesystem: Pushed inode with name = \"+ inode.name + \" has no parent\");\r\n    message.Abort();\r\n\r\n}\r\n\r\n/** @constructor */\r\nfunction Inode(qidnumber)\r\n{\r\n    this.updatedir = false; // did the directory listing changed?\r\n    this.parentid = -1;\r\n    this.firstid = -1; // first file id in directory\r\n    this.nextid = -1; // next id in directory\r\n    this.status = 0;\r\n    this.name = \"\";\r\n    this.size = 0x0;\r\n    this.uid = 0x0;\r\n    this.gid = 0x0;\r\n    this.fid = 0;\r\n    this.ctime = 0;\r\n    this.atime = 0;\r\n    this.mtime = 0;\r\n    this.major = 0x0;\r\n    this.minor = 0x0;\r\n    //data = new Uint8Array(0);\r\n    this.symlink = \"\";\r\n    this.nlinks = 1;\r\n    this.mode = 0x01ED;\r\n    this.qid = {\r\n        type: 0,\r\n        version: 0,\r\n        path: qidnumber,\r\n    };\r\n    this.caps = undefined;\r\n\r\n    //this.qid_type = 0;\r\n    //this.qid_version = 0;\r\n    //this.qid_path = qidnumber;\r\n}\r\n\r\nFS.prototype.CreateInode = function() {\r\n    //console.log(\"CreateInode\", Error().stack);\r\n    return new Inode(++this.qidnumber);\r\n};\r\n\r\n\r\nFS.prototype.CreateDirectory = function(name, parentid) {\r\n    var x = this.CreateInode();\r\n    x.name = name;\r\n    x.parentid = parentid;\r\n    x.mode = 0x01FF | S_IFDIR;\r\n    x.updatedir = true;\r\n    x.nlinks = 2; // . and ..\r\n    if (parentid >= 0) {\r\n        x.uid = this.inodes[parentid].uid;\r\n        x.gid = this.inodes[parentid].gid;\r\n        x.mode = (this.inodes[parentid].mode & 0x1FF) | S_IFDIR;\r\n        this.inodes[parentid].nlinks++;\r\n    }\r\n    x.qid.type = S_IFDIR >> 8;\r\n    this.PushInode(x);\r\n    this.NotifyListeners(this.inodes.length-1, 'newdir');\r\n    return this.inodes.length-1;\r\n}\r\n\r\nFS.prototype.CreateFile = function(filename, parentid) {\r\n    var x = this.CreateInode();\r\n    x.name = filename;\r\n    x.parentid = parentid;\r\n    x.uid = this.inodes[parentid].uid;\r\n    x.gid = this.inodes[parentid].gid;\r\n    this.inodes[parentid].nlinks++;\r\n    x.qid.type = S_IFREG >> 8;\r\n    x.mode = (this.inodes[parentid].mode & 0x1B6) | S_IFREG;\r\n    this.PushInode(x);\r\n    this.NotifyListeners(this.inodes.length-1, 'newfile');\r\n    return this.inodes.length-1;\r\n}\r\n\r\n\r\nFS.prototype.CreateNode = function(filename, parentid, major, minor) {\r\n    var x = this.CreateInode();\r\n    x.name = filename;\r\n    x.parentid = parentid;\r\n    x.major = major;\r\n    x.minor = minor;\r\n    x.uid = this.inodes[parentid].uid;\r\n    x.gid = this.inodes[parentid].gid;\r\n    this.inodes[parentid].nlinks++;\r\n    x.qid.type = S_IFSOCK >> 8;\r\n    x.mode = (this.inodes[parentid].mode & 0x1B6);\r\n    this.PushInode(x);\r\n    return this.inodes.length-1;\r\n}\r\n     \r\nFS.prototype.CreateSymlink = function(filename, parentid, symlink) {\r\n    var x = this.CreateInode();\r\n    x.name = filename;\r\n    x.parentid = parentid;\r\n    x.uid = this.inodes[parentid].uid;\r\n    x.gid = this.inodes[parentid].gid;\r\n    this.inodes[parentid].nlinks++;\r\n    x.qid.type = S_IFLNK >> 8;\r\n    x.symlink = symlink;\r\n    x.mode = S_IFLNK;\r\n    this.PushInode(x);\r\n    return this.inodes.length-1;\r\n}\r\n\r\nFS.prototype.CreateTextFile = function(filename, parentid, str) {\r\n    var id = this.CreateFile(filename, parentid);\r\n    var x = this.inodes[id];\r\n    var data = this.inodedata[id] = new Uint8Array(str.length);\r\n    x.size = str.length;\r\n    for (var j = 0; j < str.length; j++) {\r\n        data[j] = str.charCodeAt(j);\r\n    }\r\n    return id;\r\n}\r\n\r\n/** \r\n * @param {Uint8Array} buffer\r\n */\r\nFS.prototype.CreateBinaryFile = function(filename, parentid, buffer) {\r\n    var id = this.CreateFile(filename, parentid);\r\n    var x = this.inodes[id];\r\n    var data = this.inodedata[id] = new Uint8Array(buffer.length);\r\n    data.set(buffer);\r\n    x.size = buffer.length;\r\n    return id;\r\n}\r\n\r\n\r\nFS.prototype.OpenInode = function(id, mode) {\r\n    var inode = this.GetInode(id);\r\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\r\n        this.FillDirectory(id);\r\n    }\r\n    /*\r\n    var type = \"\";\r\n    switch(inode.mode&S_IFMT) {\r\n        case S_IFREG: type = \"File\"; break;\r\n        case S_IFBLK: type = \"Block Device\"; break;\r\n        case S_IFDIR: type = \"Directory\"; break;\r\n        case S_IFCHR: type = \"Character Device\"; break;\r\n    }\r\n    */\r\n    //message.Debug(\"open:\" + this.GetFullPath(id) +  \" type: \" + inode.mode + \" status:\" + inode.status);\r\n    if (inode.status == STATUS_ON_SERVER) {\r\n        this.LoadFile(id);\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nFS.prototype.CloseInode = function(id) {\r\n    //message.Debug(\"close: \" + this.GetFullPath(id));\r\n    var inode = this.GetInode(id);\r\n    if (inode.status == STATUS_UNLINKED) {\r\n        //message.Debug(\"Filesystem: Delete unlinked file\");\r\n        inode.status = STATUS_INVALID;\r\n        delete this.inodedata[id];\r\n        inode.size = 0;\r\n    }\r\n}\r\n\r\nFS.prototype.Rename = function(olddirid, oldname, newdirid, newname) {\r\n    // message.Debug(\"Rename \" + oldname + \" to \" + newname);\r\n    if ((olddirid == newdirid) && (oldname == newname)) {\r\n        return true;\r\n    }\r\n    var oldid = this.Search(olddirid, oldname);\r\n    var oldpath = this.GetFullPath(oldid);\r\n    if (oldid == -1) {\r\n        return false;\r\n    }\r\n    var newid = this.Search(newdirid, newname);\r\n    if (newid != -1) {\r\n        this.Unlink(newid);\r\n    }\r\n\r\n    var idx = oldid; // idx contains the id which we want to rename\r\n    var inode = this.inodes[idx];\r\n\r\n    // remove inode ids\r\n    if (this.inodes[inode.parentid].firstid == idx) {\r\n        this.inodes[inode.parentid].firstid = inode.nextid;\r\n    } else {\r\n        var id = this.FindPreviousID(idx);\r\n        if (id == -1) {\r\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\r\n            message.Abort();\r\n        }\r\n        this.inodes[id].nextid = inode.nextid;\r\n    }\r\n\r\n    inode.parentid = newdirid;\r\n    inode.name = newname;\r\n    inode.qid.version++;\r\n\r\n    inode.nextid = this.inodes[inode.parentid].firstid;\r\n    this.inodes[inode.parentid].firstid = idx;\r\n\r\n    this.inodes[olddirid].updatedir = true;\r\n    this.inodes[newdirid].updatedir = true;\r\n    this.inodes[olddirid].nlinks--;\r\n    this.inodes[newdirid].nlinks++;\r\n\r\n    this.NotifyListeners(idx, \"rename\", {oldpath: oldpath});\r\n    \r\n    return true;\r\n}\r\n\r\nFS.prototype.Write = function(id, offset, count, GetByte) {\r\n    this.NotifyListeners(id, 'write');\r\n    var inode = this.inodes[id];\r\n    var data = this.inodedata[id];\r\n\r\n    if (!data || data.length < (offset+count)) {\r\n        this.ChangeSize(id, Math.floor(((offset+count)*3)/2) );\r\n        inode.size = offset + count;\r\n        data = this.inodedata[id];\r\n    } else\r\n    if (inode.size < (offset+count)) {\r\n        inode.size = offset + count;\r\n    }\r\n    for(var i=0; i<count; i++)\r\n        data[offset+i] = GetByte();\r\n}\r\n\r\nFS.prototype.Search = function(parentid, name) {\r\n    var id = this.inodes[parentid].firstid;\r\n    while(id != -1) {\r\n        if (this.inodes[id].parentid != parentid) { // consistency check\r\n            message.Debug(\"Error in Filesystem: Found inode with wrong parent id\");\r\n        }\r\n        if (this.inodes[id].name == name) return id;\r\n        id = this.inodes[id].nextid;\r\n    }\r\n    return -1;\r\n}\r\n\r\nFS.prototype.GetTotalSize = function() {\r\n    return this.used_size;\r\n    //var size = 0;\r\n    //for(var i=0; i<this.inodes.length; i++) {\r\n    //    var d = this.inodes[i].data;\r\n    //    size += d ? d.length : 0;\r\n    //}\r\n    //return size;\r\n}\r\n\r\nFS.prototype.GetSpace = function() {\r\n    return this.total_size;\r\n};\r\n\r\nFS.prototype.GetFullPath = function(idx) {\r\n    var path = \"\";\r\n\r\n    while(idx != 0) {\r\n        path = \"/\" + this.inodes[idx].name + path;\r\n        idx = this.inodes[idx].parentid;\r\n    }\r\n    return path.substring(1);\r\n}\r\n\r\n// no double linked list. So, we need this\r\nFS.prototype.FindPreviousID = function(idx) {\r\n    var inode = this.GetInode(idx);\r\n    var id = this.inodes[inode.parentid].firstid;\r\n    while(id != -1) {\r\n        if (this.inodes[id].nextid == idx) return id;\r\n        id = this.inodes[id].nextid;\r\n    }\r\n    return id;\r\n}\r\n\r\nFS.prototype.Unlink = function(idx) {\r\n    this.NotifyListeners(idx, 'delete');\r\n    if (idx == 0) return false; // root node cannot be deleted\r\n    var inode = this.GetInode(idx);\r\n    //message.Debug(\"Unlink \" + inode.name);\r\n\r\n    // check if directory is not empty\r\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\r\n       if (inode.firstid != -1) return false;\r\n    }\r\n\r\n    // update ids\r\n    if (this.inodes[inode.parentid].firstid == idx) {\r\n        this.inodes[inode.parentid].firstid = inode.nextid;\r\n    } else {\r\n        var id = this.FindPreviousID(idx);\r\n        if (id == -1) {\r\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\r\n            message.Abort();\r\n        }\r\n        this.inodes[id].nextid = inode.nextid;\r\n    }\r\n    // don't delete the content. The file is still accessible\r\n    this.inodes[inode.parentid].updatedir = true;\r\n    this.inodes[inode.parentid].nlinks--;\r\n    inode.status = STATUS_UNLINKED;\r\n    inode.nextid = -1;\r\n    inode.firstid = -1;\r\n    inode.parentid = -1;\r\n    inode.nlinks--;\r\n    return true;\r\n}\r\n\r\nFS.prototype.GetInode = function(idx)\r\n{\r\n    if (isNaN(idx)) {\r\n        message.Debug(\"Error in filesystem: id is not a number \");\r\n        return 0;\r\n    }\r\n\r\n    if ((idx < 0) || (idx > this.inodes.length)) {\r\n        message.Debug(\"Error in filesystem: Attempt to get inode with id \" + idx);\r\n        return 0;\r\n    }\r\n    return this.inodes[idx];\r\n}\r\n\r\nFS.prototype.ChangeSize = function(idx, newsize)\r\n{\r\n    var inode = this.GetInode(idx);\r\n    var temp = this.inodedata[idx];\r\n    //message.Debug(\"change size to: \" + newsize);\r\n    if (newsize == inode.size) return;\r\n    var data = this.inodedata[idx] = new Uint8Array(newsize);\r\n    inode.size = newsize;\r\n    if(!temp) return;\r\n    var size = Math.min(temp.length, inode.size);\r\n    for(var i=0; i<size; i++) {\r\n        data[i] = temp[i];\r\n    }\r\n}\r\n\r\nFS.prototype.SearchPath = function(path) {\r\n    //path = path.replace(/\\/\\//g, \"/\");\r\n    path = path.replace(\"//\", \"/\");\r\n    var walk = path.split(\"/\");\r\n    var n = walk.length;\r\n    if (walk[n-1].length == 0) walk.pop();\r\n    if (walk[0].length == 0) walk.shift();\r\n    n = walk.length;\r\n\r\n    var parentid = 0;\r\n    var id = -1;\r\n    for(var i=0; i<n; i++) {\r\n        id = this.Search(parentid, walk[i]);        \r\n        if (id == -1) {\r\n            if (i < n-1) return {id: -1, parentid: -1, name: walk[i]}; // one name of the path cannot be found\r\n            return {id: -1, parentid: parentid, name: walk[i]}; // the last element in the path does not exist, but the parent\r\n        }\r\n        parentid = id;\r\n    }\r\n    return {id: id, parentid: parentid, name: walk[i]};\r\n}\r\n// -----------------------------------------------------\r\n\r\nFS.prototype.GetRecursiveList = function(dirid, list) {\r\n    var id = this.inodes[dirid].firstid;\r\n    while(id != -1) {\r\n        list.push(id);\r\n        if ((this.inodes[id].mode&S_IFMT) == S_IFDIR) {\r\n            this.GetRecursiveList(id, list);\r\n        }\r\n        id = this.inodes[id].nextid;\r\n    }\r\n}\r\n\r\nFS.prototype.MergeFile = function(file) {\r\n    message.Debug(\"Merge path:\" + file.name);\r\n    var ids = this.SearchPath(file.name);\r\n    if (ids.parentid == -1) return; // not even the path seems to exist\r\n    if (ids.id == -1) {\r\n        ids.id = this.CreateFile(ids.name, ids.parentid); \r\n    }\r\n    this.inodes[ids.id].data = file.data;\r\n    this.inodes[ids.id].size = file.data.length;\r\n    // Don't forget to update the timestamps !\r\n    this.inodes[ids.id].mtime = Math.floor((new Date()).getTime()/1000);\r\n    this.inodes[ids.id].atime = this.inodes[ids.id].mtime;\r\n    this.inodes[ids.id].ctime = this.inodes[ids.id].mtime;\r\n}\r\n\r\n\r\nFS.prototype.RecursiveDelete = function(path) {\r\n    var toDelete = []\r\n    var ids = this.SearchPath(path);\r\n    if (ids.parentid == -1 || ids.id == -1) return;\r\n    \r\n    this.GetRecursiveList(ids.id, toDelete);\r\n\r\n    for(var i=toDelete.length-1; i>=0; i--)\r\n        this.Unlink(toDelete[i]);\r\n\r\n}\r\n\r\nFS.prototype.DeleteNode = function(path) {\r\n    var ids = this.SearchPath(path);\r\n    if (ids.parentid == -1 || ids.id == -1) return;\r\n    \r\n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFREG){\r\n        this.Unlink(ids.id);\r\n        return;\r\n    }\r\n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFDIR){\r\n        var toDelete = []\r\n        this.GetRecursiveList(ids.id, toDelete);\r\n        for(var i=toDelete.length-1; i>=0; i--)\r\n            this.Unlink(toDelete[i]);\r\n        this.Unlink(ids.id);\r\n        return;\r\n    }\r\n}\r\n\r\n/** @param {*=} info */\r\nFS.prototype.NotifyListeners = function(id, action, info) {\r\n    //if(info==undefined)\r\n    //    info = {};\r\n\r\n    //var path = this.GetFullPath(id);\r\n    //if (this.watchFiles[path] == true && action=='write') {\r\n    //  message.Send(\"WatchFileEvent\", path);\r\n    //}\r\n    //for (var directory in this.watchDirectories) {\r\n    //    if (this.watchDirectories.hasOwnProperty(directory)) {\r\n    //        var indexOf = path.indexOf(directory)\r\n    //        if(indexOf == 0 || indexOf == 1)\r\n    //            message.Send(\"WatchDirectoryEvent\", {path: path, event: action, info: info});         \r\n    //    }\r\n    //}\r\n}\r\n\r\n\r\nFS.prototype.Check = function() {\r\n    for(var i=1; i<this.inodes.length; i++)\r\n    {\r\n        if (this.inodes[i].status == STATUS_INVALID) continue;\r\n        if (this.inodes[i].nextid == i) {\r\n            message.Debug(\"Error in filesystem: file points to itself\");\r\n            message.Abort();\r\n        }\r\n\r\n        var inode = this.GetInode(i);\r\n        if (inode.parentid < 0) {\r\n            message.Debug(\"Error in filesystem: negative parent id \" + i);\r\n        }\r\n        var n = inode.name.length;\r\n        if (n == 0) {\r\n            message.Debug(\"Error in filesystem: inode with no name and id \" + i);\r\n        }\r\n\r\n        for (var j in inode.name) {\r\n            var c = inode.name.charCodeAt(j);\r\n            if (c < 32) {\r\n                message.Debug(\"Error in filesystem: Unallowed char in filename\");\r\n            } \r\n        }\r\n    }\r\n}\r\n\r\nFS.prototype.FillDirectory = function(dirid) {\r\n    var inode = this.GetInode(dirid);\r\n    if (!inode.updatedir) return;\r\n    var parentid = inode.parentid;\r\n    if (parentid == -1) parentid = 0; // if root directory point to the root directory\r\n\r\n    // first get size\r\n    var size = 0;\r\n    var id = this.inodes[dirid].firstid;\r\n    while(id != -1) {\r\n        size += 13 + 8 + 1 + 2 + UTF8.UTF8Length(this.inodes[id].name);\r\n        id = this.inodes[id].nextid;\r\n    }\r\n\r\n    size += 13 + 8 + 1 + 2 + 1; // \".\" entry\r\n    size += 13 + 8 + 1 + 2 + 2; // \"..\" entry\r\n    //message.Debug(\"size of dir entry: \" + size);\r\n    var data = this.inodedata[dirid] = new Uint8Array(size);\r\n    inode.size = size;\r\n\r\n    var offset = 0x0;\r\n    offset += marshall.Marshall(\r\n        [\"Q\", \"d\", \"b\", \"s\"],\r\n        [this.inodes[dirid].qid, \r\n        offset+13+8+1+2+1, \r\n        this.inodes[dirid].mode >> 12, \r\n        \".\"],\r\n        data, offset);\r\n\r\n    offset += marshall.Marshall(\r\n        [\"Q\", \"d\", \"b\", \"s\"],\r\n        [this.inodes[parentid].qid,\r\n        offset+13+8+1+2+2, \r\n        this.inodes[parentid].mode >> 12, \r\n        \"..\"],\r\n        data, offset);\r\n\r\n    id = this.inodes[dirid].firstid;\r\n    while(id != -1) {\r\n        offset += marshall.Marshall(\r\n        [\"Q\", \"d\", \"b\", \"s\"],\r\n        [\r\n            this.inodes[id].qid,\r\n            offset+13+8+1+2+UTF8.UTF8Length(this.inodes[id].name),\r\n            this.inodes[id].mode >> 12,\r\n            this.inodes[id].name\r\n        ],\r\n        data, offset);\r\n        id = this.inodes[id].nextid;\r\n    }\r\n    inode.updatedir = false;\r\n}\r\n\r\n\r\n// -----------------------------------------------------\r\n\r\n// only support for security.capabilities\r\n// should return a  \"struct vfs_cap_data\" defined in\r\n// linux/capability for format\r\n// check also:\r\n//   sys/capability.h\r\n//   http://lxr.free-electrons.com/source/security/commoncap.c#L376\r\n//   http://man7.org/linux/man-pages/man7/capabilities.7.html\r\n//   http://man7.org/linux/man-pages/man8/getcap.8.html\r\n//   http://man7.org/linux/man-pages/man3/libcap.3.html\r\nFS.prototype.PrepareCAPs = function(id) {\r\n    var inode = this.GetInode(id);\r\n    if (inode.caps) return inode.caps.length;\r\n    inode.caps = new Uint8Array(12);\r\n    // format is little endian\r\n    // magic_etc (revision=0x01: 12 bytes)\r\n    inode.caps[0]  = 0x00;\r\n    inode.caps[1]  = 0x00;\r\n    inode.caps[2]  = 0x00;\r\n    inode.caps[3]  = 0x01;\r\n    // permitted (full capabilities)\r\n    inode.caps[4]  = 0xFF;\r\n    inode.caps[5]  = 0xFF;\r\n    inode.caps[6]  = 0xFF;\r\n    inode.caps[7]  = 0xFF;\r\n    // inheritable (full capabilities\r\n    inode.caps[8]  = 0xFF;\r\n    inode.caps[9]  = 0xFF;\r\n    inode.caps[10] = 0xFF;\r\n    inode.caps[11] = 0xFF;\r\n\r\n    return inode.caps.length;\r\n}\r\n\r\n","\"use strict\";\r\n\r\n\r\nif(typeof window !== \"undefined\" && !window.requestAnimationFrame)\r\n{\r\n    window.requestAnimationFrame =\r\n        window.mozRequestAnimationFrame ||\r\n        window.webkitRequestAnimationFrame;\r\n}\r\n\r\n/**\r\n * Adapter to use visual screen in browsers (in contrast to node)\r\n * @constructor\r\n *\r\n * @param {BusConnector} bus\r\n */\r\nfunction ScreenAdapter(screen_container, bus)\r\n{\r\n    console.assert(screen_container, \"1st argument must be a DOM container\");\r\n\r\n    var\r\n        graphic_screen = screen_container.getElementsByTagName(\"canvas\")[0],\r\n        graphic_context = graphic_screen.getContext(\"2d\", { alpha: false }),\r\n\r\n        text_screen = screen_container.getElementsByTagName(\"div\")[0],\r\n        cursor_element = document.createElement(\"div\");\r\n\r\n    var\r\n        graphic_image_data,\r\n        graphic_buffer,\r\n        graphic_buffer32,\r\n\t\t\r\n        /** @type {number} */\r\n        cursor_row,\r\n\r\n        /** @type {number} */\r\n        cursor_col,\r\n\r\n        /** @type {number} */\r\n        scale_x = 1,\r\n\r\n        /** @type {number} */\r\n        scale_y = 1,\r\n\r\n        graphical_mode_width,\r\n        graphical_mode_height,\r\n\r\n        modified_pixel_min = 0,\r\n        modified_pixel_max = 0,\r\n\r\n        changed_rows,\r\n\r\n        // are we in graphical mode now?\r\n        is_graphical = false,\r\n\r\n        // Index 0: ASCII code\r\n        // Index 1: Background color\r\n        // Index 2: Foreground color\r\n        text_mode_data,\r\n\r\n        // number of columns\r\n        text_mode_width,\r\n\r\n        // number of rows\r\n        text_mode_height;\r\n\r\n    var stopped = false;\r\n\r\n    var screen = this;\r\n\r\n    // 0x12345 -> \"#012345\"\r\n    function number_as_color(n)\r\n    {\r\n        n = n.toString(16);\r\n        return \"#\" + \"0\".repeat(6 - n.length) + n;\r\n    }\r\n\r\n\r\n    /**\r\n     * Charmaps that constraint unicode sequences for the default dospage\r\n     * @const\r\n     */\r\n    var charmap_high = new Uint16Array([\r\n        0xC7, 0xFC, 0xE9, 0xE2, 0xE4, 0xE0, 0xE5, 0xE7,\r\n        0xEA, 0xEB, 0xE8, 0xEF, 0xEE, 0xEC, 0xC4, 0xC5,\r\n        0xC9, 0xE6, 0xC6, 0xF4, 0xF6, 0xF2, 0xFB, 0xF9,\r\n        0xFF, 0xD6, 0xDC, 0xA2, 0xA3, 0xA5, 0x20A7, 0x192,\r\n        0xE1, 0xED, 0xF3, 0xFA, 0xF1, 0xD1, 0xAA, 0xBA,\r\n        0xBF, 0x2310, 0xAC, 0xBD, 0xBC, 0xA1, 0xAB, 0xBB,\r\n        0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,\r\n        0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,\r\n        0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,\r\n        0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,\r\n        0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,\r\n        0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,\r\n        0x3B1, 0xDF, 0x393, 0x3C0, 0x3A3, 0x3C3, 0xB5, 0x3C4,\r\n        0x3A6, 0x398, 0x3A9, 0x3B4, 0x221E, 0x3C6, 0x3B5, 0x2229,\r\n        0x2261, 0xB1, 0x2265, 0x2264, 0x2320, 0x2321, 0xF7,\r\n        0x2248, 0xB0, 0x2219, 0xB7, 0x221A, 0x207F, 0xB2, 0x25A0, 0xA0\r\n    ]);\r\n\r\n    /** @const */\r\n    var charmap_low = new Uint16Array([\r\n        0x20,   0x263A, 0x263B, 0x2665, 0x2666, 0x2663, 0x2660, 0x2022,\r\n        0x25D8, 0x25CB, 0x25D9, 0x2642, 0x2640, 0x266A, 0x266B, 0x263C,\r\n        0x25BA, 0x25C4, 0x2195, 0x203C, 0xB6,   0xA7,   0x25AC, 0x21A8,\r\n        0x2191, 0x2193, 0x2192, 0x2190, 0x221F, 0x2194, 0x25B2, 0x25BC\r\n    ]);\r\n\r\n    var charmap = [],\r\n        chr;\r\n\r\n    for(var i = 0; i < 256; i++)\r\n    {\r\n        if(i > 127)\r\n        {\r\n            chr = charmap_high[i - 0x80];\r\n        }\r\n        else if(i < 32)\r\n        {\r\n            chr = charmap_low[i];\r\n        }\r\n        else\r\n        {\r\n            chr = i;\r\n        }\r\n\r\n        charmap[i] = String.fromCharCode(chr);\r\n    }\r\n\r\n    graphic_context.imageSmoothingEnabled = false;\r\n\r\n    cursor_element.style.position = \"absolute\";\r\n    cursor_element.style.backgroundColor = \"#ccc\";\r\n    cursor_element.style.width = \"9px\";\r\n    cursor_element.style.display = \"inline-block\";\r\n\tcursor_element.id = \"text_cursor\";\r\n\r\n    text_screen.style.display = \"block\";\r\n    graphic_screen.style.display = \"none\";\r\n\r\n    this.bus = bus;\r\n\r\n    bus.register(\"screen-set-mode\", function(data)\r\n    {\r\n        this.set_mode(data);\r\n    }, this);\r\n\r\n    bus.register(\"screen-fill-buffer-end\", function(data)\r\n    {\r\n        this.update_buffer(data);\r\n    }, this);\r\n\r\n    bus.register(\"screen-put-char\", function(data)\r\n    {\r\n        //console.log(data);\r\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\r\n    }, this);\r\n\r\n    bus.register(\"screen-update-cursor\", function(data)\r\n    {\r\n        this.update_cursor(data[0], data[1]);\r\n    }, this);\r\n    bus.register(\"screen-update-cursor-scanline\", function(data)\r\n    {\r\n        this.update_cursor_scanline(data[0], data[1]);\r\n    }, this);\r\n\r\n    bus.register(\"screen-clear\", function()\r\n    {\r\n        this.clear_screen();\r\n    }, this);\r\n\r\n    bus.register(\"screen-set-size-text\", function(data)\r\n    {\r\n        this.set_size_text(data[0], data[1]);\r\n    }, this);\r\n    bus.register(\"screen-set-size-graphical\", function(data)\r\n    {\r\n        this.set_size_graphical(data[0], data[1], data[2], data[3]);\r\n    }, this);\r\n\r\n\r\n    this.init = function()\r\n    {\r\n        // not necessary, because this gets initialized by the bios early,\r\n        // but nicer to look at\r\n        this.set_size_text(80, 25);\r\n\r\n        this.timer();\r\n    };\r\n\r\n    this.make_screenshot = function()\r\n    {\r\n        const image = new Image();\r\n\r\n        if(is_graphical)\r\n        {\r\n            image.src = graphic_screen.toDataURL(\"image/png\");\r\n        }\r\n        else\r\n        {\r\n            // Default 720x400, but can be [8, 16] at 640x400\r\n            const char_size = [9, 16];\r\n\r\n            const canvas = document.createElement(\"canvas\");\r\n            canvas.width = text_mode_width * char_size[0];\r\n            canvas.height = text_mode_height * char_size[1];\r\n            const context = canvas.getContext(\"2d\");\r\n            context.imageSmoothingEnabled = false;\r\n            context.font = window.getComputedStyle(text_screen).font;\r\n            context.textBaseline = \"top\";\r\n\r\n            for(let x = 0; x < text_mode_width; x++)\r\n            {\r\n                for(let y = 0; y < text_mode_height; y++)\r\n                {\r\n                    const index = (y * text_mode_width + x) * 3;\r\n                    context.fillStyle = number_as_color(text_mode_data[index + 1]);\r\n                    context.fillRect(x * char_size[0], y * char_size[1], char_size[0], char_size[1]);\r\n                    context.fillStyle = number_as_color(text_mode_data[index + 2]);\r\n                    context.fillText(charmap[text_mode_data[index]], x * char_size[0], y * char_size[1]);\r\n                }\r\n            }\r\n\r\n            if(cursor_element.style.display !== \"none\")\r\n            {\r\n                context.fillStyle = cursor_element.style.backgroundColor;\r\n                context.fillRect(\r\n                    cursor_col * char_size[0],\r\n                    cursor_row * char_size[1] + parseInt(cursor_element.style.marginTop, 10) - 1,\r\n                    parseInt(cursor_element.style.width, 10),\r\n                    parseInt(cursor_element.style.height, 10)\r\n                );\r\n            }\r\n\r\n            image.src = canvas.toDataURL(\"image/png\");\r\n        }\r\n\r\n        try {\r\n            const w = window.open(\"\");\r\n            w.document.write(image.outerHTML);\r\n        }\r\n        catch(e) {}\r\n    };\r\n\r\n    this.put_char = function(row, col, chr, bg_color, fg_color)\r\n    {\r\n        if(row < text_mode_height && col < text_mode_width)\r\n        {\r\n            var p = 3 * (row * text_mode_width + col);\r\n\r\n            text_mode_data[p] = chr;\r\n            text_mode_data[p + 1] = bg_color;\r\n            text_mode_data[p + 2] = fg_color;\r\n\r\n            changed_rows[row] = 1;\r\n        }\r\n    };\r\n\r\n    this.timer = function()\r\n    {\r\n        if(!stopped)\r\n        {\r\n            requestAnimationFrame(is_graphical ? update_graphical : update_text);\r\n        }\r\n    };\r\n\r\n    var update_text = function()\r\n    {\r\n        for(var i = 0; i < text_mode_height; i++)\r\n        {\r\n            if(changed_rows[i])\r\n            {\r\n                screen.text_update_row(i);\r\n                changed_rows[i] = 0;\r\n            }\r\n        }\r\n\r\n        this.timer();\r\n    }.bind(this);\r\n\r\n    var update_graphical = function()\r\n    {\r\n        this.bus.send(\"screen-fill-buffer\");\r\n        this.timer();\r\n    }.bind(this);\r\n\r\n    this.destroy = function()\r\n    {\r\n        stopped = true;\r\n    };\r\n\r\n    this.set_mode = function(graphical)\r\n    {\r\n        is_graphical = graphical;\r\n\r\n        if(graphical)\r\n        {\r\n            text_screen.style.display = \"none\";\r\n            graphic_screen.style.display = \"block\";\r\n        }\r\n        else\r\n        {\r\n            text_screen.style.display = \"block\";\r\n            graphic_screen.style.display = \"none\";\r\n        }\r\n    };\r\n\r\n    this.clear_screen = function()\r\n    {\r\n        graphic_context.fillStyle = \"#000\";\r\n        graphic_context.fillRect(0, 0, graphic_screen.width, graphic_screen.height);\r\n    };\r\n\r\n    /**\r\n     * @param {number} cols\r\n     * @param {number} rows\r\n     */\r\n    this.set_size_text = function(cols, rows)\r\n    {\r\n        if(cols === text_mode_width && rows === text_mode_height)\r\n        {\r\n            return;\r\n        }\r\n\r\n        changed_rows = new Int8Array(rows);\r\n        text_mode_data = new Int32Array(cols * rows * 3);\r\n\r\n        text_mode_width = cols;\r\n        text_mode_height = rows;\r\n\r\n        while(text_screen.childNodes.length > rows)\r\n        {\r\n            text_screen.removeChild(text_screen.firstChild);\r\n        }\r\n\r\n        while(text_screen.childNodes.length < rows)\r\n        {\r\n            text_screen.appendChild(document.createElement(\"div\"));\r\n        }\r\n\r\n        for(var i = 0; i < rows; i++)\r\n        {\r\n            this.text_update_row(i);\r\n        }\r\n\r\n        update_scale_text();\r\n    };\r\n\r\n    this.set_size_graphical = function(width, height, buffer_width, buffer_height)\r\n    {\r\n        if(DEBUG_SCREEN_LAYERS)\r\n        {\r\n            // Draw the entire buffer. Useful for debugging\r\n            // panning / page flipping / screen splitting code for both\r\n            // v86 developers and os developers\r\n            width = buffer_width;\r\n            height = buffer_height;\r\n        }\r\n\r\n        graphic_screen.style.display = \"block\";\r\n\r\n        graphic_screen.width = width;\r\n        graphic_screen.height = height;\r\n\r\n        //graphic_screen.style.width = width * scale_x + \"px\";\r\n        //graphic_screen.style.height = height * scale_y + \"px\";\r\n\r\n        // Make sure to call this here, because pixels are transparent otherwise\r\n        //screen.clear_screen();\r\n\r\n        graphic_image_data = graphic_context.createImageData(buffer_width, buffer_height);\r\n        graphic_buffer = new Uint8Array(graphic_image_data.data.buffer);\r\n        graphic_buffer32 = new Int32Array(graphic_image_data.data.buffer);\r\n\r\n        graphical_mode_width = width;\r\n        graphical_mode_height = height;\r\n\r\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\r\n        update_scale_graphic();\r\n    };\r\n\r\n    this.set_scale = function(s_x, s_y)\r\n    {\r\n        scale_x = s_x;\r\n        scale_y = s_y;\r\n\r\n        update_scale_text();\r\n        update_scale_graphic();\r\n    };\r\n    this.set_scale(scale_x, scale_y);\r\n\r\n    function update_scale_text()\r\n    {\r\n        elem_set_scale(text_screen, scale_x, scale_y, true);\r\n    }\r\n\r\n    function update_scale_graphic()\r\n    {\r\n        elem_set_scale(graphic_screen, scale_x, scale_y, false);\r\n    }\r\n\r\n    function elem_set_scale(elem, scale_x, scale_y, use_scale)\r\n    {\r\n        elem.style.width = \"\";\r\n        elem.style.height = \"\";\r\n\r\n        if(use_scale)\r\n        {\r\n            elem.style.transform = \"\";\r\n        }\r\n\r\n        var rectangle = elem.getBoundingClientRect();\r\n\r\n        if(use_scale)\r\n        {\r\n            var scale_str = \"\";\r\n\r\n            scale_str += scale_x === 1 ? \"\" : \" scaleX(\" + scale_x + \")\";\r\n            scale_str += scale_y === 1 ? \"\" : \" scaleY(\" + scale_y + \")\";\r\n\r\n            elem.style.transform = scale_str;\r\n        }\r\n        else\r\n        {\r\n            // unblur non-fractional scales\r\n            if(scale_x % 1 === 0 && scale_y % 1 === 0)\r\n            {\r\n                graphic_screen.style[\"imageRendering\"] = \"crisp-edges\"; // firefox\r\n                graphic_screen.style[\"imageRendering\"] = \"pixelated\";\r\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"nearest-neighbor\";\r\n            }\r\n            else\r\n            {\r\n                graphic_screen.style.imageRendering = \"\";\r\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"\";\r\n            }\r\n\r\n            // undo fractional css-to-device pixel ratios\r\n            var device_pixel_ratio = window.devicePixelRatio || 1;\r\n            if(device_pixel_ratio % 1 !== 0)\r\n            {\r\n                scale_x /= device_pixel_ratio;\r\n                scale_y /= device_pixel_ratio;\r\n            }\r\n        }\r\n\r\n        if(scale_x !== 1)\r\n        {\r\n            elem.style.width = rectangle.width * scale_x + \"px\";\r\n        }\r\n        if(scale_y !== 1)\r\n        {\r\n            elem.style.height = rectangle.height * scale_y + \"px\";\r\n        }\r\n    }\r\n\r\n    this.update_cursor_scanline = function(start, end)\r\n    {\r\n        if(start & 0x20)\r\n        {\r\n            cursor_element.style.display = \"none\";\r\n        }\r\n        else\r\n        {\r\n            cursor_element.style.display = \"inline\";\r\n\r\n            cursor_element.style.height = Math.min(15, end - start) + \"px\";\r\n            cursor_element.style.marginTop = Math.min(15, start) + \"px\";\r\n        }\r\n    };\r\n\r\n    this.update_cursor = function(row, col)\r\n    {\r\n        if(row !== cursor_row || col !== cursor_col)\r\n        {\r\n            changed_rows[row] = 1;\r\n            changed_rows[cursor_row] = 1;\r\n\r\n            cursor_row = row;\r\n            cursor_col = col;\r\n        }\r\n    };\r\n\r\n    this.text_update_row = function(row)\r\n    {\r\n        var offset = 3 * row * text_mode_width,\r\n            row_element,\r\n            color_element,\r\n            fragment;\r\n\r\n        var bg_color,\r\n            fg_color,\r\n            text;\r\n\r\n        row_element = text_screen.childNodes[row];\r\n        fragment = document.createElement(\"div\");\r\n\r\n        for(var i = 0; i < text_mode_width; )\r\n        {\r\n            color_element = document.createElement(\"span\");\r\n\r\n            bg_color = text_mode_data[offset + 1];\r\n            fg_color = text_mode_data[offset + 2];\r\n\r\n            color_element.style.backgroundColor = number_as_color(bg_color);\r\n            color_element.style.color = number_as_color(fg_color);\r\n\r\n            text = \"\";\r\n\r\n            // put characters of the same color in one element\r\n            while(i < text_mode_width &&\r\n                text_mode_data[offset + 1] === bg_color &&\r\n                text_mode_data[offset + 2] === fg_color)\r\n            {\r\n                var ascii = text_mode_data[offset];\r\n\r\n                text += charmap[ascii];\r\n                dbg_assert(charmap[ascii]);\r\n\r\n                i++;\r\n                offset += 3;\r\n\r\n                if(row === cursor_row)\r\n                {\r\n                    if(i === cursor_col)\r\n                    {\r\n                        // next row will be cursor\r\n                        // create new element\r\n                        break;\r\n                    }\r\n                    else if(i === cursor_col + 1)\r\n                    {\r\n                        // found the cursor\r\n\t\t\t\t\t\tcursor_element.style.backgroundColor = number_as_color(fg_color);\r\n                        fragment.appendChild(cursor_element);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            color_element.textContent = text;\r\n            fragment.appendChild(color_element);\r\n        }\r\n\r\n        row_element.parentNode.replaceChild(fragment, row_element);\r\n    };\r\n\r\n    this.update_buffer = function(layers)\r\n    {\r\n        if(DEBUG_SCREEN_LAYERS)\r\n        {\r\n            // Draw the entire buffer. Useful for debugging\r\n            // panning / page flipping / screen splitting code for both\r\n            // v86 developers and os developers\r\n            graphic_context.putImageData(\r\n                graphic_image_data,\r\n                0, 0\r\n            );\r\n\r\n            // For each visible layer that would've been drawn, draw a\r\n            // rectangle to visualise the layer instead.\r\n            graphic_context.strokeStyle = \"#0F0\";\r\n            graphic_context.lineWidth = 4;\r\n            layers.forEach((layer) =>\r\n            {\r\n                graphic_context.strokeRect(\r\n                    layer.buffer_x,\r\n                    layer.buffer_y,\r\n                    layer.buffer_width,\r\n                    layer.buffer_height\r\n                );\r\n            });\r\n            graphic_context.lineWidth = 1;\r\n            return;\r\n        }\r\n\r\n        layers.forEach(layer =>\r\n        {\r\n            graphic_context.putImageData(\r\n                graphic_image_data,\r\n                layer.screen_x - layer.buffer_x,\r\n                layer.screen_y - layer.buffer_y,\r\n                layer.buffer_x,\r\n                layer.buffer_y,\r\n                layer.buffer_width,\r\n                layer.buffer_height\r\n            );\r\n        });\r\n    };\r\n\r\n    this.init();\r\n}\r\n","\"use strict\";\r\n\r\n(function()\r\n{\r\n    /** @const */\r\n    var ON_LOCALHOST = !location.hostname.endsWith(\"copy.sh\");\r\n\r\n    /** @const */\r\n    var HOST = ON_LOCALHOST ? \"\" : \"//i.copy.sh/\";\r\n\r\n    /**\r\n     * @return {Object.<string, string>}\r\n     */\r\n    function get_query_arguments()\r\n    {\r\n        var query = location.search.substr(1).split(\"&\");\r\n        var parameters = {};\r\n\r\n        for(var i = 0; i < query.length; i++)\r\n        {\r\n            var param = query[i].split(\"=\");\r\n            parameters[param[0]] = decodeURIComponent(param[1]);\r\n        }\r\n\r\n        return parameters;\r\n    }\r\n\r\n    function set_title(text)\r\n    {\r\n        document.title = text + \" - Virtual x86\" +  (DEBUG ? \" - debug\" : \"\");\r\n    }\r\n\r\n    function format_timestamp(time)\r\n    {\r\n        if(time < 60)\r\n        {\r\n            return time + \"s\";\r\n        }\r\n        else if(time < 3600)\r\n        {\r\n            return (time / 60 | 0) + \"m \" + v86util.pad0(time % 60, 2) + \"s\";\r\n        }\r\n        else\r\n        {\r\n            return (time / 3600 | 0) + \"h \" +\r\n                v86util.pad0((time / 60 | 0) % 60, 2) + \"m \" +\r\n                v86util.pad0(time % 60, 2) + \"s\";\r\n        }\r\n    }\r\n\r\n    function chr_repeat(chr, count)\r\n    {\r\n        var result = \"\";\r\n\r\n        while(count-- > 0)\r\n        {\r\n            result += chr;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    var progress_ticks = 0;\r\n\r\n    function show_progress(e)\r\n    {\r\n        var el = $(\"loading\");\r\n        el.style.display = \"block\";\r\n\r\n        if(e.file_index === e.file_count - 1 && e.loaded >= e.total - 2048)\r\n        {\r\n            // last file is (almost) loaded\r\n            el.textContent = \"Done downloading. Starting now ...\";\r\n            return;\r\n        }\r\n\r\n        var line = \"Downloading images \";\r\n\r\n        if(typeof e.file_index === \"number\" && e.file_count)\r\n        {\r\n            line += \"[\" + (e.file_index + 1) + \"/\" + e.file_count + \"] \";\r\n        }\r\n\r\n        if(e.total && typeof e.loaded === \"number\")\r\n        {\r\n            var per100 = Math.floor(e.loaded / e.total * 100);\r\n            per100 = Math.min(100, Math.max(0, per100));\r\n\r\n            var per50 = Math.floor(per100 / 2);\r\n\r\n            line += per100 + \"% [\";\r\n            line += chr_repeat(\"#\", per50);\r\n            line += chr_repeat(\" \", 50 - per50) + \"]\";\r\n        }\r\n        else\r\n        {\r\n            line += chr_repeat(\".\", progress_ticks++ % 50);\r\n        }\r\n\r\n        el.textContent = line;\r\n    }\r\n\r\n    function $(id)\r\n    {\r\n        var el = document.getElementById(id);\r\n\r\n        if(!el)\r\n        {\r\n            dbg_log(\"Element with id `\" + id + \"` not found\");\r\n        }\r\n\r\n        return el;\r\n    }\r\n\r\n    function onload()\r\n    {\r\n        if(!(\"responseType\" in new XMLHttpRequest))\r\n        {\r\n            alert(\"Your browser is not supported \" +\r\n                  \"because it doesn't have XMLHttpRequest.responseType\");\r\n            return;\r\n        }\r\n\r\n        var settings = {};\r\n\r\n        $(\"start_emulation\").onclick = function()\r\n        {\r\n            $(\"boot_options\").style.display = \"none\";\r\n            set_profile(\"custom\");\r\n\r\n            var images = [];\r\n            var last_file;\r\n\r\n            var floppy_file = $(\"floppy_image\").files[0];\r\n            if(floppy_file)\r\n            {\r\n                last_file = floppy_file;\r\n                settings.fda = { buffer: floppy_file };\r\n            }\r\n\r\n            var cd_file = $(\"cd_image\").files[0];\r\n            if(cd_file)\r\n            {\r\n                last_file = cd_file;\r\n                settings.cdrom = { buffer: cd_file };\r\n            }\r\n\r\n            var hda_file = $(\"hda_image\").files[0];\r\n            if(hda_file)\r\n            {\r\n                last_file = hda_file;\r\n                settings.hda = { buffer: hda_file };\r\n            }\r\n\r\n            var hdb_file = $(\"hdb_image\") && $(\"hdb_image\").files[0];\r\n            if(hdb_file)\r\n            {\r\n                last_file = hdb_file;\r\n                settings.hdb = { buffer: hdb_file };\r\n            }\r\n\r\n            if($(\"multiboot_image\"))\r\n            {\r\n                var multiboot_file = $(\"multiboot_image\").files[0];\r\n                if(multiboot_file)\r\n                {\r\n                    last_file = multiboot_file;\r\n                    settings.multiboot = { buffer: multiboot_file };\r\n                }\r\n            }\r\n\r\n            if(last_file)\r\n            {\r\n                set_title(last_file.name);\r\n            }\r\n\r\n            start_emulation(settings);\r\n        };\r\n\r\n        if(DEBUG)\r\n        {\r\n            debug_onload(settings);\r\n        }\r\n\r\n        var oses = [\r\n            {\r\n                id: \"archlinux\",\r\n                state: {\r\n                    \"url\": HOST + \"images/v86state.bin\",\r\n                    \"size\": 142770436,\r\n                },\r\n                name: \"Arch Linux\",\r\n                memory_size: 128 * 1024 * 1024,\r\n                vga_memory_size: 8 * 1024 * 1024,\r\n\r\n                // required for restoring state, should not be used when booted on 9p\r\n                hda: {\r\n                    \"url\": HOST + \"images/arch3.img\",\r\n                    \"size\": 16 * 1024 * 1024 * 1024,\r\n                    \"async\": true,\r\n                },\r\n\r\n                filesystem: {\r\n                    \"basefs\": {\r\n                        \"url\": HOST + \"images/fs.json\",\r\n                        \"size\": 10232633,\r\n                    },\r\n                    \"baseurl\": HOST + \"arch/\",\r\n                },\r\n            },\r\n            {\r\n                id: \"msdos\",\r\n                hda: {\r\n                    \"url\": HOST + \"images/msdos.img\",\r\n                    \"size\": 8 * 1024 * 1024,\r\n                },\r\n                boot_order: 0x132,\r\n                name: \"MS-DOS\",\r\n            },\r\n            {\r\n                id: \"freedos\",\r\n                fda: {\r\n                    \"url\": HOST + \"images/freedos722.img\",\r\n                    \"size\": 737280,\r\n                },\r\n                name: \"FreeDOS\",\r\n            },\r\n            {\r\n                id: \"oberon\",\r\n                fda: {\r\n                    \"url\": HOST + \"images/oberon-boot.dsk\",\r\n                    \"size\": 1440 * 1024,\r\n                },\r\n                hda: {\r\n                    \"url\": HOST + \"images/oberon.dsk\",\r\n                    \"size\": 41943040,\r\n                },\r\n                name: \"Oberon\",\r\n            },\r\n            {\r\n                id: \"windows1\",\r\n                fda: {\r\n                    \"url\": HOST + \"images/windows101.img\",\r\n                    \"size\": 1474560,\r\n                },\r\n                name: \"Windows\",\r\n            },\r\n            {\r\n                id: \"linux26\",\r\n                cdrom: {\r\n                    \"url\": HOST + \"images/linux.iso\",\r\n                    \"size\": 5666816,\r\n                },\r\n                name: \"Linux\",\r\n            },\r\n            {\r\n                id: \"linux3\",\r\n                cdrom: {\r\n                    \"url\": HOST + \"images/linux3.iso\",\r\n                    \"size\": 8624128,\r\n                },\r\n                name: \"Linux\",\r\n                filesystem: {},\r\n            },\r\n            {\r\n                id: \"kolibrios\",\r\n                fda: {\r\n                    \"url\": ON_LOCALHOST ?\r\n                            \"images/kolibri.img\" :\r\n                            \"//builds.kolibrios.org/eng/data/data/kolibri.img\",\r\n                    \"size\": 1474560,\r\n                },\r\n                name: \"KolibriOS\",\r\n            },\r\n            {\r\n                id: \"kolibrios-fallback\",\r\n                fda: {\r\n                    \"url\": HOST + \"images/kolibri.img\",\r\n                    \"size\": 1474560,\r\n                },\r\n                name: \"KolibriOS\",\r\n            },\r\n            {\r\n                id: \"openbsd\",\r\n                fda: {\r\n                    \"url\": HOST + \"images/openbsd.img\",\r\n                    \"size\": 1474560,\r\n                },\r\n                name: \"OpenBSD\",\r\n            },\r\n            {\r\n                id: \"solos\",\r\n                fda: {\r\n                    \"url\": HOST + \"images/os8.dsk\",\r\n                    \"size\": 1474560,\r\n                },\r\n                name: \"Sol OS\",\r\n            },\r\n            {\r\n                id: \"dexos\",\r\n                cdrom: {\r\n                    \"url\": HOST + \"images/DexOSv6.iso\",\r\n                    \"size\": 1837056,\r\n                },\r\n                name: \"DexOS\",\r\n            },\r\n            {\r\n                id: \"bootchess\",\r\n                fda: {\r\n                    \"url\": HOST + \"images/bootchess.img\",\r\n                },\r\n                name: \"Bootchess\",\r\n            },\r\n            {\r\n                id: \"windows98\",\r\n                memory_size: 64 * 1024 * 1024,\r\n                hda: {\r\n                    \"url\": HOST + \"images/windows98.img\",\r\n                    \"async\": true,\r\n                    \"size\": 300 * 1024 * 1024,\r\n                },\r\n                name: \"Windows 98\",\r\n                state: {\r\n                    \"url\": HOST + \"images/windows98_state.bin\",\r\n                    \"size\": 75705744,\r\n                },\r\n            },\r\n            {\r\n                id: \"windows95\",\r\n                memory_size: 32 * 1024 * 1024,\r\n                hda: {\r\n                    \"url\": HOST + \"images/W95.IMG\",\r\n                    \"size\": 242049024,\r\n                    \"async\": true,\r\n                },\r\n                name: \"Windows 95\",\r\n                state: {\r\n                    \"url\": HOST + \"images/windows95_state.bin\",\r\n                    \"size\": 42151316,\r\n                },\r\n            },\r\n            {\r\n                id: \"freebsd\",\r\n                memory_size: 128 * 1024 * 1024,\r\n                state: {\r\n                    \"url\": HOST + \"images/freebsd_state.bin\",\r\n                    \"size\": 142815292,\r\n                },\r\n                hda: {\r\n                    \"url\": HOST + \"images/freebsd3.img\",\r\n                    \"size\": 17179869184,\r\n                    \"async\": true,\r\n                },\r\n                name: \"FreeBSD\",\r\n            },\r\n            {\r\n                id: \"reactos\",\r\n                memory_size: 256 * 1024 * 1024,\r\n                cdrom: {\r\n                    \"url\": HOST + \"images/ReactOS-0.4.9-RC-Live.iso\",\r\n                    \"async\": true,\r\n                },\r\n                state: {\r\n                    \"url\": HOST + \"images/reactos_state.bin\",\r\n                    \"size\": 276971224,\r\n                },\r\n                name: \"ReactOS\",\r\n                description: 'Running <a href=\"https://reactos.org/\">ReactOS</a>',\r\n            },\r\n        ];\r\n\r\n        if(DEBUG)\r\n        {\r\n            // see tests/kvm-unit-tests/x86/\r\n            var tests = [\r\n                \"realmode\",\r\n                // All tests below require an APIC\r\n                \"cmpxchg8b\",\r\n                \"port80\",\r\n                \"setjmp\",\r\n                \"sieve\",\r\n                \"hypercall\", // crashes\r\n                \"init\", // stops execution\r\n                \"msr\", // TODO: Expects 64 bit msrs\r\n                \"smap\", // test stops, SMAP not enabled\r\n                \"tsc_adjust\", // TODO: IA32_TSC_ADJUST\r\n                \"tsc\", // TODO: rdtscp\r\n                \"rmap_chain\", // crashes\r\n                \"memory\", // missing mfence (uninteresting)\r\n                \"taskswitch\", // TODO: Jump\r\n                \"taskswitch2\", // TODO: Call TSS\r\n                \"eventinj\", // Missing #nt\r\n                \"ioapic\",\r\n                \"apic\",\r\n            ];\r\n\r\n            for(let test of tests)\r\n            {\r\n                oses.push({\r\n                    name: \"Test case: \" + test,\r\n                    id: \"test-\" + test,\r\n                    memory_size: 128 * 1024 * 1024,\r\n                    multiboot: { \"url\": \"tests/kvm-unit-tests/x86/\" + test + \".flat\", }\r\n                });\r\n            }\r\n        }\r\n\r\n        var query_args = get_query_arguments();\r\n        var profile = query_args[\"profile\"];\r\n\r\n        if(query_args[\"use_bochs_bios\"])\r\n        {\r\n            settings.use_bochs_bios = true;\r\n        }\r\n\r\n        for(var i = 0; i < oses.length; i++)\r\n        {\r\n            var infos = oses[i];\r\n\r\n            if(profile === infos.id)\r\n            {\r\n                start_profile(infos);\r\n                return;\r\n            }\r\n\r\n            var element = $(\"start_\" + infos.id);\r\n\r\n            if(element)\r\n            {\r\n                element.onclick = function(infos, element)\r\n                {\r\n                    set_profile(infos.id);\r\n                    element.blur();\r\n\r\n                    start_profile(infos);\r\n                }.bind(this, infos, element);\r\n            }\r\n        }\r\n\r\n        if(profile === \"custom\")\r\n        {\r\n            if(query_args[\"hda.url\"])\r\n            {\r\n                settings.hda = {\r\n                    \"size\": parseInt(query_args[\"hda.size\"], 10) || undefined,\r\n                    \"url\": query_args[\"hda.url\"],\r\n                    \"async\": true,\r\n                };\r\n            }\r\n\r\n            if(query_args[\"cdrom.url\"])\r\n            {\r\n                settings.cdrom = {\r\n                    \"size\": parseInt(query_args[\"cdrom.size\"], 10) || undefined,\r\n                    \"url\": query_args[\"cdrom.url\"],\r\n                    \"async\": true,\r\n                };\r\n            }\r\n\r\n            if(query_args[\"fda.url\"])\r\n            {\r\n                settings.fda = {\r\n                    \"size\": parseInt(query_args[\"fda.size\"], 10) || undefined,\r\n                    \"url\": query_args[\"fda.url\"],\r\n                    \"async\": true,\r\n                };\r\n            }\r\n\r\n            if(settings.fda || settings.cdrom || settings.hda)\r\n            {\r\n                $(\"boot_options\").style.display = \"none\";\r\n\r\n                start_emulation(settings, done);\r\n            }\r\n        }\r\n\r\n        function start_profile(infos)\r\n        {\r\n            $(\"boot_options\").style.display = \"none\";\r\n            set_title(infos.name);\r\n\r\n            settings.filesystem = infos.filesystem;\r\n\r\n            if(infos.state)\r\n            {\r\n                $(\"reset\").style.display = \"none\";\r\n                settings.initial_state = infos.state;\r\n            }\r\n\r\n            settings.fda = infos.fda;\r\n            settings.cdrom = infos.cdrom;\r\n            settings.hda = infos.hda;\r\n            settings.multiboot = infos.multiboot;\r\n\r\n            settings.memory_size = infos.memory_size;\r\n            settings.vga_memory_size = infos.vga_memory_size;\r\n\r\n            settings.id = infos.id;\r\n\r\n            if(infos.boot_order !== undefined)\r\n            {\r\n                settings.boot_order = infos.boot_order;\r\n            }\r\n\r\n            if(!DEBUG && infos.description)\r\n            {\r\n                $(\"description\").style.display = \"block\";\r\n                $(\"description\").innerHTML = \"<br>\" + infos.description;\r\n            }\r\n\r\n            start_emulation(settings, done);\r\n        }\r\n\r\n        function done(emulator)\r\n        {\r\n            if(query_args[\"c\"])\r\n            {\r\n                setTimeout(function()\r\n                {\r\n                    //emulator.serial0_send(query_args[\"c\"] + \"\\n\");\r\n                    emulator.keyboard_send_text(query_args[\"c\"] + \"\\n\");\r\n                }, 25);\r\n            }\r\n        }\r\n    }\r\n\r\n    function debug_onload(settings)\r\n    {\r\n        // called on window.onload, in debug mode\r\n\r\n        //settings.filesystem = {\r\n        //    baseurl: \"http://localhost/v86-images/arch/\",\r\n        //    basefs: \"http://localhost/v86-images/fs.json\",\r\n        //};\r\n\r\n        //$(\"restore_state\").onchange = function()\r\n        //{\r\n        //};\r\n\r\n        //$(\"start_test\").onclick = function()\r\n        //{\r\n        //};\r\n\r\n        var log_levels = $(\"log_levels\");\r\n\r\n        for(var i = 0; i < LOG_NAMES.length; i++)\r\n        {\r\n            var mask = LOG_NAMES[i][0];\r\n\r\n            if(mask === 1)\r\n                continue;\r\n\r\n            var name = LOG_NAMES[i][1].toLowerCase(),\r\n                input = document.createElement(\"input\"),\r\n                label = document.createElement(\"label\");\r\n\r\n            input.type = \"checkbox\";\r\n\r\n            label.htmlFor = input.id = \"log_\" + name;\r\n\r\n            if(LOG_LEVEL & mask)\r\n            {\r\n                input.checked = true;\r\n            }\r\n            input.mask = mask;\r\n\r\n            label.appendChild(input);\r\n            label.appendChild(document.createTextNode(v86util.pads(name, 4) + \" \"));\r\n            log_levels.appendChild(label);\r\n\r\n            if(i === Math.floor(LOG_NAMES.length / 2))\r\n            {\r\n                log_levels.appendChild(document.createTextNode(\"\\n\"));\r\n            }\r\n        }\r\n\r\n        log_levels.onchange = function(e)\r\n        {\r\n            var target = e.target,\r\n                mask = target.mask;\r\n\r\n            if(target.checked)\r\n            {\r\n                LOG_LEVEL |= mask;\r\n            }\r\n            else\r\n            {\r\n                LOG_LEVEL &= ~mask;\r\n            }\r\n\r\n            target.blur();\r\n        };\r\n\r\n        var debug_infos = $(\"debug_infos\");\r\n        debug_infos.textContent = \"ACPI: \" + (ENABLE_ACPI ? \"enabled\" : \"disabled\");\r\n    }\r\n\r\n    window.addEventListener(\"load\", onload, false);\r\n\r\n    // old webkit fires popstate on every load, fuck webkit\r\n    // https://code.google.com/p/chromium/issues/detail?id=63040\r\n    window.addEventListener(\"load\", function()\r\n    {\r\n        setTimeout(function()\r\n        {\r\n            window.addEventListener(\"popstate\", onpopstate);\r\n        }, 0);\r\n    });\r\n\r\n    // works in firefox and chromium\r\n    if(document.readyState === \"complete\")\r\n    {\r\n        onload();\r\n    }\r\n\r\n    /** @param {?=} done */\r\n    function start_emulation(settings, done)\r\n    {\r\n        /** @const */\r\n        var MB = 1024 * 1024;\r\n\r\n        var memory_size = settings.memory_size;\r\n\r\n        if(!memory_size)\r\n        {\r\n            memory_size = parseInt($(\"memory_size\").value, 10) * MB;\r\n\r\n            if(!memory_size)\r\n            {\r\n                alert(\"Invalid memory size - reset to 128MB\");\r\n                memory_size = 128 * MB;\r\n            }\r\n        }\r\n\r\n        var vga_memory_size = settings.vga_memory_size;\r\n\r\n        if(!vga_memory_size)\r\n        {\r\n            vga_memory_size = parseInt($(\"video_memory_size\").value, 10) * MB;\r\n\r\n            if(!vga_memory_size)\r\n            {\r\n                alert(\"Invalid video memory size - reset to 8MB\");\r\n                vga_memory_size = 8 * MB;\r\n            }\r\n        }\r\n\r\n        if(!settings.fda)\r\n        {\r\n            var floppy_file = $(\"floppy_image\").files[0];\r\n            if(floppy_file)\r\n            {\r\n                settings.fda = { buffer: floppy_file };\r\n            }\r\n        }\r\n\r\n        /** @const */\r\n        var BIOSPATH = \"bios/\";\r\n\r\n        if(settings.use_bochs_bios)\r\n        {\r\n            var biosfile = \"bochs-bios.bin\";\r\n            var vgabiosfile = \"bochs-vgabios.bin\";\r\n        }\r\n        else\r\n        {\r\n            var biosfile = DEBUG ? \"seabios-debug.bin\" : \"seabios.bin\";\r\n            var vgabiosfile = DEBUG ? \"vgabios-debug.bin\" : \"vgabios.bin\";\r\n            //var biosfile = DEBUG ? \"seabios-ultradebug.bin\" : \"seabios.bin\";\r\n            //var vgabiosfile = DEBUG ? \"vgabios-ultradebug.bin\" : \"vgabios.bin\";\r\n        }\r\n\r\n        //var biosfile = \"seabios-qemu.bin\";\r\n        //var vgabiosfile = \"vgabios-qemu.bin\";\r\n\r\n        var bios;\r\n        var vga_bios;\r\n\r\n        // a bios is only needed if the machine is booted\r\n        if(!settings.initial_state)\r\n        {\r\n            bios = {\r\n                \"url\": BIOSPATH + biosfile,\r\n            };\r\n            vga_bios = {\r\n                \"url\": BIOSPATH + vgabiosfile,\r\n            };\r\n        }\r\n\r\n        var emulator = new V86Starter({\r\n            \"memory_size\": memory_size,\r\n            \"vga_memory_size\": vga_memory_size,\r\n\r\n            \"screen_container\": $(\"screen_container\"),\r\n            \"serial_container\": $(\"serial\"),\r\n\r\n            \"boot_order\": settings.boot_order || parseInt($(\"boot_order\").value, 16) || 0,\r\n\r\n            \"network_relay_url\": \"wss://relay.widgetry.org/\",\r\n            //\"network_relay_url\": \"ws://localhost:8001/\",\r\n\r\n            \"bios\": bios,\r\n            \"vga_bios\": vga_bios,\r\n\r\n            \"fda\": settings.fda,\r\n            \"hda\": settings.hda,\r\n            \"hdb\": settings.hdb,\r\n            \"cdrom\": settings.cdrom,\r\n\r\n            \"multiboot\": settings.multiboot,\r\n\r\n            \"initial_state\": settings.initial_state,\r\n            \"filesystem\": settings.filesystem || {},\r\n\r\n            \"autostart\": true,\r\n        });\r\n\r\n        if(DEBUG) window[\"emulator\"] = emulator;\r\n\r\n        emulator.add_listener(\"emulator-ready\", function()\r\n        {\r\n            if(DEBUG)\r\n            {\r\n                debug_start(emulator);\r\n            }\r\n\r\n            init_ui(settings, emulator);\r\n\r\n            done && done(emulator);\r\n        });\r\n\r\n        emulator.add_listener(\"download-progress\", function(e)\r\n        {\r\n            show_progress(e);\r\n        });\r\n\r\n        emulator.add_listener(\"download-error\", function(e)\r\n        {\r\n            var el = $(\"loading\");\r\n            el.style.display = \"block\";\r\n            el.textContent = \"Loading \" + e.file_name + \" failed. Check your connection \" +\r\n                             \"and reload the page to try again.\";\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @param {Object} settings\r\n     * @param {V86Starter} emulator\r\n     */\r\n    function init_ui(settings, emulator)\r\n    {\r\n        $(\"boot_options\").style.display = \"none\";\r\n        $(\"loading\").style.display = \"none\";\r\n        $(\"runtime_options\").style.display = \"block\";\r\n        $(\"runtime_infos\").style.display = \"block\";\r\n        $(\"screen_container\").style.display = \"block\";\r\n\r\n        if(settings.filesystem)\r\n        {\r\n            init_filesystem_panel(emulator);\r\n        }\r\n\r\n        $(\"run\").onclick = function()\r\n        {\r\n            if(emulator.is_running())\r\n            {\r\n                $(\"run\").value = \"Run\";\r\n                emulator.stop();\r\n            }\r\n            else\r\n            {\r\n                $(\"run\").value = \"Pause\";\r\n                emulator.run();\r\n            }\r\n\r\n            $(\"run\").blur();\r\n        };\r\n\r\n        $(\"exit\").onclick = function()\r\n        {\r\n            emulator.stop();\r\n            location.href = location.pathname;\r\n        };\r\n\r\n        $(\"lock_mouse\").onclick = function()\r\n        {\r\n            if(!mouse_is_enabled)\r\n            {\r\n                $(\"toggle_mouse\").onclick();\r\n            }\r\n\r\n            emulator.lock_mouse();\r\n            $(\"lock_mouse\").blur();\r\n        };\r\n\r\n        var mouse_is_enabled = true;\r\n\r\n        $(\"toggle_mouse\").onclick = function()\r\n        {\r\n            mouse_is_enabled = !mouse_is_enabled;\r\n\r\n            emulator.mouse_set_status(mouse_is_enabled);\r\n            $(\"toggle_mouse\").value = (mouse_is_enabled ? \"Dis\" : \"En\") + \"able mouse\";\r\n            $(\"toggle_mouse\").blur();\r\n        };\r\n\r\n\r\n        var last_tick = 0;\r\n        var running_time = 0;\r\n        var last_instr_counter = 0;\r\n        var interval;\r\n        var os_uses_mouse = false;\r\n\r\n        function update_info()\r\n        {\r\n            var now = Date.now();\r\n\r\n            var instruction_counter = emulator.get_instruction_counter();\r\n            var last_ips = instruction_counter - last_instr_counter;\r\n\r\n            last_instr_counter = instruction_counter;\r\n\r\n            var delta_time = now - last_tick;\r\n            running_time += delta_time;\r\n            last_tick = now;\r\n\r\n            $(\"speed\").textContent = last_ips / delta_time | 0;\r\n            $(\"avg_speed\").textContent = instruction_counter / running_time | 0;\r\n            $(\"running_time\").textContent = format_timestamp(running_time / 1000 | 0);\r\n        }\r\n\r\n        emulator.add_listener(\"emulator-started\", function()\r\n        {\r\n            last_tick = Date.now();\r\n            interval = setInterval(update_info, 1000);\r\n        });\r\n\r\n        emulator.add_listener(\"emulator-stopped\", function()\r\n        {\r\n            update_info();\r\n            clearInterval(interval);\r\n        });\r\n\r\n        var stats_9p = {\r\n            read: 0,\r\n            write: 0,\r\n        };\r\n\r\n        emulator.add_listener(\"9p-read-start\", function()\r\n        {\r\n            $(\"info_filesystem\").style.display = \"block\";\r\n            $(\"info_filesystem_status\").textContent = \"Loading ...\";\r\n        });\r\n        emulator.add_listener(\"9p-read-end\", function(args)\r\n        {\r\n            stats_9p.read += args[1];\r\n\r\n            $(\"info_filesystem_status\").textContent = \"Idle\";\r\n            $(\"info_filesystem_last_file\").textContent = args[0];\r\n            $(\"info_filesystem_bytes_read\").textContent = stats_9p.read;\r\n        });\r\n        emulator.add_listener(\"9p-write-end\", function(args)\r\n        {\r\n            stats_9p.write += args[1];\r\n\r\n            $(\"info_filesystem_last_file\").textContent = args[0];\r\n            $(\"info_filesystem_bytes_written\").textContent = stats_9p.write;\r\n        });\r\n\r\n        var stats_storage = {\r\n            read: 0,\r\n            read_sectors: 0,\r\n            write: 0,\r\n            write_sectors: 0,\r\n        };\r\n\r\n        emulator.add_listener(\"ide-read-start\", function()\r\n        {\r\n            $(\"info_storage\").style.display = \"block\";\r\n            $(\"info_storage_status\").textContent = \"Loading ...\";\r\n        });\r\n        emulator.add_listener(\"ide-read-end\", function(args)\r\n        {\r\n            stats_storage.read += args[1];\r\n            stats_storage.read_sectors += args[2];\r\n\r\n            $(\"info_storage_status\").textContent = \"Idle\";\r\n            $(\"info_storage_bytes_read\").textContent = stats_storage.read;\r\n            $(\"info_storage_sectors_read\").textContent = stats_storage.read_sectors;\r\n        });\r\n        emulator.add_listener(\"ide-write-end\", function(args)\r\n        {\r\n            stats_storage.write += args[1];\r\n            stats_storage.write_sectors += args[2];\r\n\r\n            $(\"info_storage_bytes_written\").textContent = stats_storage.write;\r\n            $(\"info_storage_sectors_written\").textContent = stats_storage.write_sectors;\r\n        });\r\n\r\n        var stats_net = {\r\n            bytes_transmitted: 0,\r\n            bytes_received: 0,\r\n        };\r\n\r\n        emulator.add_listener(\"eth-receive-end\", function(args)\r\n        {\r\n            stats_net.bytes_received += args[0];\r\n\r\n            $(\"info_network\").style.display = \"block\";\r\n            $(\"info_network_bytes_received\").textContent = stats_net.bytes_received;\r\n        });\r\n        emulator.add_listener(\"eth-transmit-end\", function(args)\r\n        {\r\n            stats_net.bytes_transmitted += args[0];\r\n\r\n            $(\"info_network\").style.display = \"block\";\r\n            $(\"info_network_bytes_transmitted\").textContent = stats_net.bytes_transmitted;\r\n        });\r\n\r\n\r\n        emulator.add_listener(\"mouse-enable\", function(is_enabled)\r\n        {\r\n            os_uses_mouse = is_enabled;\r\n            $(\"info_mouse_enabled\").textContent = is_enabled ? \"Yes\" : \"No\";\r\n        });\r\n\r\n        emulator.add_listener(\"screen-set-mode\", function(is_graphical)\r\n        {\r\n            if(is_graphical)\r\n            {\r\n                $(\"info_vga_mode\").textContent = \"Graphical\";\r\n            }\r\n            else\r\n            {\r\n                $(\"info_vga_mode\").textContent = \"Text\";\r\n                $(\"info_res\").textContent = \"-\";\r\n                $(\"info_bpp\").textContent = \"-\";\r\n            }\r\n        });\r\n        emulator.add_listener(\"screen-set-size-graphical\", function(args)\r\n        {\r\n            $(\"info_res\").textContent = args[0] + \"x\" + args[1];\r\n            $(\"info_bpp\").textContent = args[4];\r\n        });\r\n\r\n\r\n        $(\"reset\").onclick = function()\r\n        {\r\n            emulator.restart();\r\n            $(\"reset\").blur();\r\n        };\r\n\r\n        add_image_download_button(settings.hda, \"hda\");\r\n        add_image_download_button(settings.hdb, \"hdb\");\r\n        add_image_download_button(settings.fda, \"fda\");\r\n        add_image_download_button(settings.fdb, \"fdb\");\r\n        add_image_download_button(settings.cdrom, \"cdrom\");\r\n\r\n        function add_image_download_button(obj, type)\r\n        {\r\n            var elem = $(\"get_\" + type + \"_image\");\r\n\r\n            if(!obj || obj.size > 100 * 1024 * 1024)\r\n            {\r\n                elem.style.display = \"none\";\r\n                return;\r\n            }\r\n\r\n            elem.onclick = function(e)\r\n            {\r\n                let buffer = emulator.disk_images[type];\r\n                let filename = settings.id + (type === \"cdrom\" ? \".iso\" : \".img\");\r\n\r\n                if(buffer.get_as_file)\r\n                {\r\n                    var file = buffer.get_as_file(filename);\r\n                    download(file, filename);\r\n                }\r\n                else\r\n                {\r\n                    buffer.get_buffer(function(b)\r\n                    {\r\n                        if(b)\r\n                        {\r\n                            dump_file(b, filename);\r\n                        }\r\n                        else\r\n                        {\r\n                            alert(\"The file could not be loaded. Maybe it's too big?\");\r\n                        }\r\n                    });\r\n                }\r\n\r\n                elem.blur();\r\n            };\r\n        }\r\n\r\n        $(\"memory_dump\").onclick = function()\r\n        {\r\n            dump_file(emulator.v86.cpu.mem8, \"v86memory.bin\");\r\n            $(\"memory_dump\").blur();\r\n        };\r\n\r\n        //$(\"memory_dump_dmp\").onclick = function()\r\n        //{\r\n        //    var memory = emulator.v86.cpu.mem8;\r\n        //    var memory_size = memory.length;\r\n        //    var page_size = 4096;\r\n        //    var header = new Uint8Array(4096);\r\n        //    var header32 = new Int32Array(header.buffer);\r\n\r\n        //    header32[0] = 0x45474150; // 'PAGE'\r\n        //    header32[1] = 0x504D5544; // 'DUMP'\r\n\r\n        //    header32[0x10 >> 2] = emulator.v86.cpu.cr[3]; // DirectoryTableBase\r\n        //    header32[0x24 >> 2] = 1; // NumberProcessors\r\n        //    header32[0xf88 >> 2] = 1; // DumpType: full dump\r\n        //    header32[0xfa0 >> 2] = header.length + memory_size; // RequiredDumpSpace\r\n\r\n        //    header32[0x064 + 0 >> 2] = 1; // NumberOfRuns\r\n        //    header32[0x064 + 4 >> 2] = memory_size / page_size; // NumberOfPages\r\n        //    header32[0x064 + 8 >> 2] = 0; // BasePage\r\n        //    header32[0x064 + 12 >> 2] = memory_size / page_size; // PageCount\r\n\r\n        //    dump_file([header, memory], \"v86memory.dmp\");\r\n\r\n        //    $(\"memory_dump_dmp\").blur();\r\n        //};\r\n\r\n        $(\"save_state\").onclick = function()\r\n        {\r\n            emulator.save_state(function(error, result)\r\n            {\r\n                if(error)\r\n                {\r\n                    console.log(error.stack);\r\n                    console.log(\"Couldn't save state: \", error);\r\n                }\r\n                else\r\n                {\r\n                    dump_file(result, \"v86state.bin\");\r\n                }\r\n            });\r\n\r\n            $(\"save_state\").blur();\r\n        };\r\n\r\n        $(\"load_state\").onclick = function()\r\n        {\r\n            $(\"load_state_input\").click();\r\n            $(\"load_state\").blur();\r\n        };\r\n\r\n        $(\"load_state_input\").onchange = function()\r\n        {\r\n            var file = this.files[0];\r\n\r\n            if(!file)\r\n            {\r\n                return;\r\n            }\r\n\r\n            var was_running = emulator.is_running();\r\n\r\n            if(was_running)\r\n            {\r\n                emulator.stop();\r\n            }\r\n\r\n            var filereader = new FileReader();\r\n            filereader.onload = function(e)\r\n            {\r\n                try\r\n                {\r\n                    emulator.restore_state(e.target.result);\r\n                }\r\n                catch(err)\r\n                {\r\n                    alert(\"Something bad happened while restoring the state:\\n\" + err + \"\\n\\n\" +\r\n                          \"Note that the current configuration must be the same as the original\");\r\n                    throw err;\r\n                }\r\n\r\n                if(was_running)\r\n                {\r\n                    emulator.run();\r\n                }\r\n            };\r\n            filereader.readAsArrayBuffer(file);\r\n\r\n            this.value = \"\";\r\n        };\r\n\r\n        $(\"ctrlaltdel\").onclick = function()\r\n        {\r\n            emulator.keyboard_send_scancodes([\r\n                0x1D, // ctrl\r\n                0x38, // alt\r\n                0x53, // delete\r\n\r\n                // break codes\r\n                0x1D | 0x80,\r\n                0x38 | 0x80,\r\n                0x53 | 0x80,\r\n            ]);\r\n\r\n            $(\"ctrlaltdel\").blur();\r\n        };\r\n\r\n        $(\"alttab\").onclick = function()\r\n        {\r\n            emulator.keyboard_send_scancodes([\r\n                0x38, // alt\r\n                0x0F, // tab\r\n            ]);\r\n\r\n            setTimeout(function()\r\n            {\r\n                emulator.keyboard_send_scancodes([\r\n                    0x38 | 0x80,\r\n                    0x0F | 0x80,\r\n                ]);\r\n            }, 100);\r\n\r\n            $(\"alttab\").blur();\r\n        };\r\n\r\n        $(\"scale\").onchange = function()\r\n        {\r\n            var n = parseFloat(this.value);\r\n\r\n            if(n || n > 0)\r\n            {\r\n                emulator.screen_set_scale(n, n);\r\n            }\r\n        };\r\n\r\n        $(\"fullscreen\").onclick = function()\r\n        {\r\n            emulator.screen_go_fullscreen();\r\n        };\r\n\r\n        $(\"screen_container\").onclick = function()\r\n        {\r\n            if(mouse_is_enabled && os_uses_mouse)\r\n            {\r\n                emulator.lock_mouse();\r\n                $(\"lock_mouse\").blur();\r\n            }\r\n            else\r\n            {\r\n                // allow text selection\r\n                if(window.getSelection().isCollapsed)\r\n                {\r\n                    let phone_keyboard = document.getElementsByClassName(\"phone_keyboard\")[0];\r\n\r\n                    // stop mobile browser from scrolling into view when the keyboard is shown\r\n                    phone_keyboard.style.top = document.body.scrollTop + 100 + \"px\";\r\n                    phone_keyboard.style.left = document.body.scrollLeft + 100 + \"px\";\r\n\r\n                    phone_keyboard.focus();\r\n                }\r\n            }\r\n        };\r\n\r\n        const phone_keyboard = document.getElementsByClassName(\"phone_keyboard\")[0];\r\n\r\n        phone_keyboard.setAttribute(\"autocorrect\", \"off\");\r\n        phone_keyboard.setAttribute(\"autocapitalize\", \"off\");\r\n        phone_keyboard.setAttribute(\"spellcheck\", \"false\");\r\n        phone_keyboard.tabIndex = 0;\r\n\r\n        $(\"screen_container\").addEventListener(\"mousedown\", (e) =>\r\n        {\r\n            phone_keyboard.focus();\r\n        }, false);\r\n\r\n        $(\"take_screenshot\").onclick = function()\r\n        {\r\n            emulator.screen_make_screenshot();\r\n\r\n            $(\"take_screenshot\").blur();\r\n        };\r\n\r\n        $(\"serial\").style.display = \"block\";\r\n\r\n        window.addEventListener(\"keydown\", ctrl_w_rescue, false);\r\n        window.addEventListener(\"keyup\", ctrl_w_rescue, false);\r\n        window.addEventListener(\"blur\", ctrl_w_rescue, false);\r\n\r\n        function ctrl_w_rescue(e)\r\n        {\r\n            if(e.ctrlKey)\r\n            {\r\n                window.onbeforeunload = function()\r\n                {\r\n                    window.onbeforeunload = null;\r\n                    return \"CTRL-W cannot be sent to the emulator.\";\r\n                };\r\n            }\r\n            else\r\n            {\r\n                window.onbeforeunload = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    function init_filesystem_panel(emulator)\r\n    {\r\n        $(\"filesystem_panel\").style.display = \"block\";\r\n\r\n        $(\"filesystem_send_file\").onchange = function()\r\n        {\r\n            Array.prototype.forEach.call(this.files, function(file)\r\n            {\r\n                var loader = new v86util.SyncFileBuffer(file);\r\n                loader.onload = function()\r\n                {\r\n                    loader.get_buffer(function(buffer)\r\n                    {\r\n                        emulator.create_file(\"/\" + file.name, new Uint8Array(buffer));\r\n                    });\r\n                };\r\n                loader.load();\r\n            }, this);\r\n\r\n            this.value = \"\";\r\n            this.blur();\r\n        };\r\n\r\n        $(\"filesystem_get_file\").onkeypress = function(e)\r\n        {\r\n            if(e.which !== 13)\r\n            {\r\n                return;\r\n            }\r\n\r\n            this.disabled = true;\r\n\r\n            emulator.read_file(this.value, function(err, uint8array)\r\n            {\r\n                this.disabled = false;\r\n\r\n                if(uint8array)\r\n                {\r\n                    var filename = this.value.replace(/\\/$/, \"\").split(\"/\");\r\n                    filename = filename[filename.length - 1] || \"root\";\r\n\r\n                    dump_file(uint8array, filename);\r\n                    this.value = \"\";\r\n                }\r\n                else\r\n                {\r\n                    alert(\"Can't read file\");\r\n                }\r\n            }.bind(this));\r\n        };\r\n    }\r\n\r\n    function debug_start(emulator)\r\n    {\r\n        if(!emulator.v86)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // called as soon as soon as emulation is started, in debug mode\r\n        var debug = emulator.v86.cpu.debug;\r\n\r\n        var debug_infos = $(\"debug_infos\");\r\n        debug_infos.textContent += \" | logging ops: \" +\r\n            (debug.step_mode || debug.trace_all ? \"yes\" : \"no\");\r\n\r\n        $(\"step\").onclick = debug.step.bind(debug);\r\n        $(\"run_until\").onclick = debug.run_until.bind(debug);\r\n        $(\"dump_gdt\").onclick = debug.dump_gdt_ldt.bind(debug);\r\n        $(\"dump_idt\").onclick = debug.dump_idt.bind(debug);\r\n        $(\"dump_regs\").onclick = debug.dump_regs.bind(debug);\r\n        $(\"dump_pt\").onclick = debug.dump_page_directory.bind(debug);\r\n        $(\"dump_instructions\").onclick = debug.dump_instructions.bind(debug);\r\n\r\n        $(\"dump_log\").onclick = function()\r\n        {\r\n            dump_file(log_data, \"v86.log\");\r\n        };\r\n\r\n        $(\"dump_instructions_file\").onclick = function()\r\n        {\r\n            var ins = debug.get_instructions();\r\n\r\n            if(ins)\r\n            {\r\n                dump_file(ins, \"trace.txt\");\r\n            }\r\n        };\r\n\r\n        var cpu = emulator.v86.cpu;\r\n\r\n        $(\"debug_panel\").style.display = \"block\";\r\n        setInterval(function()\r\n        {\r\n            $(\"debug_panel\").textContent =\r\n                cpu.debug.get_regs_short().join(\"\\n\") + \"\\n\" + cpu.debug.get_state();\r\n        }, 1000);\r\n\r\n        // helps debugging\r\n        window.emulator = emulator;\r\n        window.cpu = cpu;\r\n        window.dump_file = dump_file;\r\n    }\r\n\r\n    function onpopstate(e)\r\n    {\r\n        location.reload();\r\n    }\r\n\r\n    function set_profile(prof)\r\n    {\r\n        if(window.history.pushState)\r\n        {\r\n            window.history.pushState({ profile: prof }, \"\", \"?profile=\" + prof);\r\n        }\r\n\r\n    }\r\n\r\n})();\r\n","\"use strict\";\r\n\r\n/**\r\n * Constructor for emulator instances.\r\n *\r\n * Usage: `var emulator = new V86Starter(options);`\r\n *\r\n * Options can have the following properties (all optional, default in parenthesis):\r\n *\r\n * - `memory_size number` (16 * 1024 * 1024) - The memory size in bytes, should\r\n *   be a power of 2.\r\n * - `vga_memory_size number` (8 * 1024 * 1024) - VGA memory size in bytes.\r\n *\r\n * - `autostart boolean` (false) - If emulation should be started when emulator\r\n *   is ready.\r\n *\r\n * - `disable_keyboard boolean` (false) - If the keyboard should be disabled.\r\n * - `disable_mouse boolean` (false) - If the mouse should be disabled.\r\n *\r\n * - `network_relay_url string` (No network card) - The url of a server running\r\n *   websockproxy. See [networking.md](networking.md). Setting this will\r\n *   enable an emulated network card.\r\n *\r\n * - `bios Object` (No bios) - Either a url pointing to a bios or an\r\n *   ArrayBuffer, see below.\r\n * - `vga_bios Object` (No VGA bios) - VGA bios, see below.\r\n * - `hda Object` (No hard drive) - First hard disk, see below.\r\n * - `fda Object` (No floppy disk) - First floppy disk, see below.\r\n * - `cdrom Object` (No CD) - See below.\r\n * - `initial_state Object` (Normal boot) - An initial state to load, see\r\n *   [`restore_state`](#restore_statearraybuffer-state) and below.\r\n *\r\n * - `filesystem Object` (No 9p filesystem) - A 9p filesystem, see\r\n *   [filesystem.md](filesystem.md).\r\n *\r\n * - `serial_container HTMLTextAreaElement` (No serial terminal) - A textarea\r\n *   that will receive and send data to the emulated serial terminal.\r\n *   Alternatively the serial terminal can also be accessed programatically,\r\n *   see [serial.html](../examples/serial.html).\r\n *\r\n * - `screen_container HTMLElement` (No screen) - An HTMLElement. This should\r\n *   have a certain structure, see [basic.html](../examples/basic.html).\r\n *\r\n * ***\r\n *\r\n * There are two ways to load images (`bios`, `vga_bios`, `cdrom`, `hda`, ...):\r\n *\r\n * - Pass an object that has a url. Optionally, `async: true` and `size:\r\n *   size_in_bytes` can be added to the object, so that sectors of the image\r\n *   are loaded on demand instead of being loaded before boot (slower, but\r\n *   strongly recommended for big files). In that case, the `Range: bytes=...`\r\n *   header must be supported on the server.\r\n *\r\n *   ```javascript\r\n *   // download file before boot\r\n *   bios: {\r\n *       url: \"bios/seabios.bin\"\r\n *   }\r\n *   // download file sectors as requested, size is required\r\n *   hda: {\r\n *       url: \"disk/linux.iso\",\r\n *       async: true,\r\n *       size: 16 * 1024 * 1024\r\n *   }\r\n *   ```\r\n *\r\n * - Pass an `ArrayBuffer` or `File` object as `buffer` property.\r\n *\r\n *   ```javascript\r\n *   // use <input type=file>\r\n *   bios: {\r\n *       buffer: document.all.hd_image.files[0]\r\n *   }\r\n *   // start with empty hard drive\r\n *   hda: {\r\n *       buffer: new ArrayBuffer(16 * 1024 * 1024)\r\n *   }\r\n *   ```\r\n *\r\n * ***\r\n *\r\n * @param {Object} options Options to initialize the emulator with.\r\n * @constructor\r\n */\r\nfunction V86Starter(options)\r\n{\r\n    //var worker = new Worker(\"src/browser/worker.js\");\r\n    //var adapter_bus = this.bus = WorkerBus.init(worker);\r\n\r\n    this.cpu_is_running = false;\r\n\r\n    var bus = Bus.create();\r\n    var adapter_bus = this.bus = bus[0];\r\n    this.emulator_bus = bus[1];\r\n    var emulator = this.v86 = new v86(this.emulator_bus);\r\n\r\n    this.bus.register(\"emulator-stopped\", function()\r\n    {\r\n        this.cpu_is_running = false;\r\n    }, this);\r\n\r\n    this.bus.register(\"emulator-started\", function()\r\n    {\r\n        this.cpu_is_running = true;\r\n    }, this);\r\n\r\n    var settings = {};\r\n\r\n    this.disk_images = {\r\n        \"fda\": undefined,\r\n        \"fdb\": undefined,\r\n        \"hda\": undefined,\r\n        \"hdb\": undefined,\r\n        \"cdrom\": undefined,\r\n    };\r\n\r\n    settings.load_devices = true;\r\n    settings.memory_size = options[\"memory_size\"] || 64 * 1024 * 1024;\r\n    settings.vga_memory_size = options[\"vga_memory_size\"] || 8 * 1024 * 1024;\r\n    settings.boot_order = options[\"boot_order\"] || 0x213;\r\n    settings.fastboot = options[\"fastboot\"] || false;\r\n    settings.fda = undefined;\r\n    settings.fdb = undefined;\r\n    settings.uart1 = options[\"uart1\"] || false;\r\n    settings.uart2 = options[\"uart2\"] || false;\r\n    settings.uart3 = options[\"uart3\"] || false;\r\n\r\n    if(options[\"network_relay_url\"])\r\n    {\r\n        this.network_adapter = new NetworkAdapter(options[\"network_relay_url\"], adapter_bus);\r\n        settings.enable_ne2k = true;\r\n    }\r\n\r\n    if(!options[\"disable_keyboard\"])\r\n    {\r\n        this.keyboard_adapter = new KeyboardAdapter(adapter_bus);\r\n    }\r\n    if(!options[\"disable_mouse\"])\r\n    {\r\n        this.mouse_adapter = new MouseAdapter(adapter_bus, options[\"screen_container\"]);\r\n    }\r\n\r\n    if(options[\"screen_container\"])\r\n    {\r\n        this.screen_adapter = new ScreenAdapter(options[\"screen_container\"], adapter_bus);\r\n    }\r\n    else if(options[\"screen_dummy\"])\r\n    {\r\n        this.screen_adapter = new DummyScreenAdapter(adapter_bus);\r\n    }\r\n\r\n    if(options[\"serial_container\"])\r\n    {\r\n        this.serial_adapter = new SerialAdapter(options[\"serial_container\"], adapter_bus);\r\n    }\r\n\r\n    if(!options[\"disable_speaker\"])\r\n    {\r\n        this.speaker_adapter = new SpeakerAdapter(adapter_bus);\r\n    }\r\n\r\n    // ugly, but required for closure compiler compilation\r\n    function put_on_settings(name, buffer)\r\n    {\r\n        switch(name)\r\n        {\r\n            case \"hda\":\r\n                settings.hda = this.disk_images[\"hda\"] = buffer;\r\n                break;\r\n            case \"hdb\":\r\n                settings.hdb = this.disk_images[\"hdb\"] = buffer;\r\n                break;\r\n            case \"cdrom\":\r\n                settings.cdrom = this.disk_images[\"cdrom\"] = buffer;\r\n                break;\r\n            case \"fda\":\r\n                settings.fda = this.disk_images[\"fda\"] = buffer;\r\n                break;\r\n            case \"fdb\":\r\n                settings.fdb = this.disk_images[\"fdb\"] = buffer;\r\n                break;\r\n\r\n            case \"multiboot\":\r\n                settings.multiboot = this.disk_images[\"multiboot\"] = buffer;\r\n                break;\r\n\r\n            case \"bios\":\r\n                settings.bios = buffer.buffer;\r\n                break;\r\n            case \"vga_bios\":\r\n                settings.vga_bios = buffer.buffer;\r\n                break;\r\n            case \"initial_state\":\r\n                settings.initial_state = buffer.buffer;\r\n                break;\r\n            case \"fs9p_json\":\r\n                settings.fs9p_json = buffer.buffer;\r\n                break;\r\n            default:\r\n                dbg_assert(false, name);\r\n        }\r\n    }\r\n\r\n    var files_to_load = [];\r\n\r\n    function add_file(name, file)\r\n    {\r\n        if(!file)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(file[\"get\"] && file[\"set\"] && file[\"load\"])\r\n        {\r\n            files_to_load.push({\r\n                name: name,\r\n                loadable: file,\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Anything coming from the outside world needs to be quoted for\r\n        // Closure Compiler compilation\r\n        file = {\r\n            buffer: file[\"buffer\"],\r\n            async: file[\"async\"],\r\n            url: file[\"url\"],\r\n            size: file[\"size\"],\r\n        };\r\n\r\n        if(name === \"bios\" || name === \"vga_bios\" ||\r\n            name === \"initial_state\" || name === \"multiboot\")\r\n        {\r\n            // Ignore async for these because they must be available before boot.\r\n            // This should make result.buffer available after the object is loaded\r\n            file.async = false;\r\n        }\r\n\r\n        if(file.buffer instanceof ArrayBuffer)\r\n        {\r\n            var buffer = new SyncBuffer(file.buffer);\r\n            files_to_load.push({\r\n                name: name,\r\n                loadable: buffer,\r\n            });\r\n        }\r\n        else if(typeof File !== \"undefined\" && file.buffer instanceof File)\r\n        {\r\n            // SyncFileBuffer:\r\n            // - loads the whole disk image into memory, impossible for large files (more than 1GB)\r\n            // - can later serve get/set operations fast and synchronously\r\n            // - takes some time for first load, neglectable for small files (up to 100Mb)\r\n            //\r\n            // AsyncFileBuffer:\r\n            // - loads slices of the file asynchronously as requested\r\n            // - slower get/set\r\n\r\n            // Heuristics: If file is larger than or equal to 256M, use AsyncFileBuffer\r\n            if(file.async === undefined)\r\n            {\r\n                file.async = file.buffer.size >= 256 * 1024 * 1024;\r\n            }\r\n\r\n            if(file.async)\r\n            {\r\n                var buffer = new v86util.AsyncFileBuffer(file.buffer);\r\n            }\r\n            else\r\n            {\r\n                var buffer = new v86util.SyncFileBuffer(file.buffer);\r\n            }\r\n\r\n            files_to_load.push({\r\n                name: name,\r\n                loadable: buffer,\r\n            });\r\n        }\r\n        else if(file.url)\r\n        {\r\n            if(file.async)\r\n            {\r\n                var buffer = new v86util.AsyncXHRBuffer(file.url, file.size);\r\n                files_to_load.push({\r\n                    name: name,\r\n                    loadable: buffer,\r\n                });\r\n            }\r\n            else\r\n            {\r\n                files_to_load.push({\r\n                    name: name,\r\n                    url: file.url,\r\n                    size: file.size,\r\n                });\r\n            }\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Ignored file: url=\" + file.url + \" buffer=\" + file.buffer);\r\n        }\r\n    }\r\n\r\n    var image_names = [\r\n        \"bios\", \"vga_bios\",\r\n        \"cdrom\", \"hda\", \"hdb\", \"fda\", \"fdb\",\r\n        \"initial_state\", \"multiboot\",\r\n    ];\r\n\r\n    for(var i = 0; i < image_names.length; i++)\r\n    {\r\n        add_file(image_names[i], options[image_names[i]]);\r\n    }\r\n\r\n    if(options[\"filesystem\"])\r\n    {\r\n        var fs_url = options[\"filesystem\"][\"basefs\"];\r\n        var base_url = options[\"filesystem\"][\"baseurl\"];\r\n\r\n        this.fs9p = new FS(base_url);\r\n        settings.fs9p = this.fs9p;\r\n\r\n        if(fs_url)\r\n        {\r\n            console.assert(base_url, \"Filesystem: baseurl must be specified\");\r\n\r\n            var size;\r\n\r\n            if(typeof fs_url === \"object\")\r\n            {\r\n                size = fs_url[\"size\"];\r\n                fs_url = fs_url[\"url\"];\r\n            }\r\n            dbg_assert(typeof fs_url === \"string\");\r\n\r\n            files_to_load.push({\r\n                name: \"fs9p_json\",\r\n                url: fs_url,\r\n                size: size,\r\n                as_text: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    var starter = this;\r\n    var total = files_to_load.length;\r\n\r\n    var cont = function(index)\r\n    {\r\n        if(index === total)\r\n        {\r\n            setTimeout(done.bind(this), 0);\r\n            return;\r\n        }\r\n\r\n        var f = files_to_load[index];\r\n\r\n        if(f.loadable)\r\n        {\r\n            f.loadable.onload = function(e)\r\n            {\r\n                put_on_settings.call(this, f.name, f.loadable);\r\n                cont(index + 1);\r\n            }.bind(this);\r\n            f.loadable.load();\r\n        }\r\n        else\r\n        {\r\n            v86util.load_file(f.url, {\r\n                done: function(result)\r\n                {\r\n                    put_on_settings.call(this, f.name, new SyncBuffer(result));\r\n                    cont(index + 1);\r\n                }.bind(this),\r\n                progress: function progress(e)\r\n                {\r\n                    if(e.target.status === 200)\r\n                    {\r\n                        starter.emulator_bus.send(\"download-progress\", {\r\n                            file_index: index,\r\n                            file_count: total,\r\n                            file_name: f.url,\r\n\r\n                            lengthComputable: e.lengthComputable,\r\n                            total: e.total || f.size,\r\n                            loaded: e.loaded,\r\n                        });\r\n                    }\r\n                    else\r\n                    {\r\n                        starter.emulator_bus.send(\"download-error\", {\r\n                            file_index: index,\r\n                            file_count: total,\r\n                            file_name: f.url,\r\n                            request: e.target,\r\n                        });\r\n                    }\r\n                },\r\n                as_text: f.as_text,\r\n            });\r\n        }\r\n    }.bind(this);\r\n    cont(0);\r\n\r\n    function done()\r\n    {\r\n        if(settings.initial_state)\r\n        {\r\n            // avoid large allocation now, memory will be restored later anyway\r\n            settings.memory_size = 0;\r\n        }\r\n\r\n        this.bus.send(\"cpu-init\", settings);\r\n\r\n        setTimeout(function()\r\n        {\r\n            if(settings.initial_state)\r\n            {\r\n                emulator.restore_state(settings.initial_state);\r\n            }\r\n\r\n            setTimeout(function()\r\n            {\r\n                if(settings.fs9p && settings.fs9p_json)\r\n                {\r\n                    settings.fs9p.OnJSONLoaded(settings.fs9p_json);\r\n                }\r\n\r\n                if(options[\"autostart\"])\r\n                {\r\n                    this.bus.send(\"cpu-run\");\r\n                }\r\n            }.bind(this), 0);\r\n        }.bind(this), 0);\r\n    }\r\n}\r\n\r\n/**\r\n * Start emulation. Do nothing if emulator is running already. Can be\r\n * asynchronous.\r\n * @export\r\n */\r\nV86Starter.prototype.run = function()\r\n{\r\n    this.bus.send(\"cpu-run\");\r\n};\r\n\r\n/**\r\n * Stop emulation. Do nothing if emulator is not running. Can be asynchronous.\r\n * @export\r\n */\r\nV86Starter.prototype.stop = function()\r\n{\r\n    this.bus.send(\"cpu-stop\");\r\n};\r\n\r\n/**\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.destroy = function()\r\n{\r\n    this.stop();\r\n\r\n    this.v86.destroy();\r\n    this.keyboard_adapter && this.keyboard_adapter.destroy();\r\n    this.network_adapter && this.network_adapter.destroy();\r\n    this.mouse_adapter && this.mouse_adapter.destroy();\r\n    this.screen_adapter && this.screen_adapter.destroy();\r\n    this.serial_adapter && this.serial_adapter.destroy();\r\n};\r\n\r\n/**\r\n * Restart (force a reboot).\r\n * @export\r\n */\r\nV86Starter.prototype.restart = function()\r\n{\r\n    this.bus.send(\"cpu-restart\");\r\n};\r\n\r\n/**\r\n * Add an event listener (the emulator is an event emitter). A list of events\r\n * can be found at [events.md](events.md).\r\n *\r\n * The callback function gets a single argument which depends on the event.\r\n *\r\n * @param {string} event Name of the event.\r\n * @param {function(*)} listener The callback function.\r\n * @export\r\n */\r\nV86Starter.prototype.add_listener = function(event, listener)\r\n{\r\n    this.bus.register(event, listener, this);\r\n};\r\n\r\n/**\r\n * Remove an event listener.\r\n *\r\n * @param {string} event\r\n * @param {function(*)} listener\r\n * @export\r\n */\r\nV86Starter.prototype.remove_listener = function(event, listener)\r\n{\r\n    this.bus.unregister(event, listener);\r\n};\r\n\r\n/**\r\n * Restore the emulator state from the given state, which must be an\r\n * ArrayBuffer returned by\r\n * [`save_state`](#save_statefunctionobject-arraybuffer-callback).\r\n *\r\n * Note that the state can only be restored correctly if this constructor has\r\n * been created with the same options as the original instance (e.g., same disk\r\n * images, memory size, etc.).\r\n *\r\n * Different versions of the emulator might use a different format for the\r\n * state buffer.\r\n *\r\n * @param {ArrayBuffer} state\r\n * @export\r\n */\r\nV86Starter.prototype.restore_state = function(state)\r\n{\r\n    this.v86.restore_state(state);\r\n};\r\n\r\n/**\r\n * Asynchronously save the current state of the emulator. The first argument to\r\n * the callback is an Error object if something went wrong and is null\r\n * otherwise.\r\n *\r\n * @param {function(Object, ArrayBuffer)} callback\r\n * @export\r\n */\r\nV86Starter.prototype.save_state = function(callback)\r\n{\r\n    // Might become asynchronous at some point\r\n\r\n    setTimeout(function()\r\n    {\r\n        try\r\n        {\r\n            callback(null, this.v86.save_state());\r\n        }\r\n        catch(e)\r\n        {\r\n            callback(e, null);\r\n        }\r\n    }.bind(this), 0);\r\n};\r\n\r\n/**\r\n * Return an object with several statistics. Return value looks similar to\r\n * (but can be subject to change in future versions or different\r\n * configurations, so use defensively):\r\n *\r\n * ```javascript\r\n * {\r\n *     \"cpu\": {\r\n *         \"instruction_counter\": 2821610069\r\n *     },\r\n *     \"hda\": {\r\n *         \"sectors_read\": 95240,\r\n *         \"sectors_written\": 952,\r\n *         \"bytes_read\": 48762880,\r\n *         \"bytes_written\": 487424,\r\n *         \"loading\": false\r\n *     },\r\n *     \"cdrom\": {\r\n *         \"sectors_read\": 0,\r\n *         \"sectors_written\": 0,\r\n *         \"bytes_read\": 0,\r\n *         \"bytes_written\": 0,\r\n *         \"loading\": false\r\n *     },\r\n *     \"mouse\": {\r\n *         \"enabled\": true\r\n *     },\r\n *     \"vga\": {\r\n *         \"is_graphical\": true,\r\n *         \"res_x\": 800,\r\n *         \"res_y\": 600,\r\n *         \"bpp\": 32\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * @deprecated\r\n * @return {Object}\r\n * @export\r\n */\r\nV86Starter.prototype.get_statistics = function()\r\n{\r\n    console.warn(\"V86Starter.prototype.get_statistics is deprecated. Use events instead.\");\r\n\r\n    var stats = {\r\n        cpu: {\r\n            instruction_counter: this.get_instruction_counter(),\r\n        },\r\n    };\r\n\r\n    if(!this.v86)\r\n    {\r\n        return stats;\r\n    }\r\n\r\n    var devices = this.v86.cpu.devices;\r\n\r\n    if(devices.hda)\r\n    {\r\n        stats.hda = devices.hda.stats;\r\n    }\r\n\r\n    if(devices.cdrom)\r\n    {\r\n        stats.cdrom = devices.cdrom.stats;\r\n    }\r\n\r\n    if(devices.ps2)\r\n    {\r\n        stats[\"mouse\"] = {\r\n            \"enabled\": devices.ps2.use_mouse,\r\n        };\r\n    }\r\n\r\n    if(devices.vga)\r\n    {\r\n        stats[\"vga\"] = {\r\n            \"is_graphical\": devices.vga.stats.is_graphical,\r\n        };\r\n    }\r\n\r\n    return stats;\r\n};\r\n\r\n/**\r\n * @return {number}\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.get_instruction_counter = function()\r\n{\r\n    if(this.v86)\r\n    {\r\n        return this.v86.cpu.timestamp_counter;\r\n    }\r\n    else\r\n    {\r\n        // TODO: Should be handled using events\r\n        return 0;\r\n    }\r\n};\r\n\r\n/**\r\n * @return {boolean}\r\n * @export\r\n */\r\nV86Starter.prototype.is_running = function()\r\n{\r\n    return this.cpu_is_running;\r\n};\r\n\r\n/**\r\n * Send a sequence of scan codes to the emulated PS2 controller. A list of\r\n * codes can be found at http://stanislavs.org/helppc/make_codes.html.\r\n * Do nothing if there is no keyboard controller.\r\n *\r\n * @param {Array.<number>} codes\r\n * @export\r\n */\r\nV86Starter.prototype.keyboard_send_scancodes = function(codes)\r\n{\r\n    for(var i = 0; i < codes.length; i++)\r\n    {\r\n        this.bus.send(\"keyboard-code\", codes[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Send translated keys\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.keyboard_send_keys = function(codes)\r\n{\r\n    for(var i = 0; i < codes.length; i++)\r\n    {\r\n        this.keyboard_adapter.simulate_press(codes[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Send text\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.keyboard_send_text = function(string)\r\n{\r\n    for(var i = 0; i < string.length; i++)\r\n    {\r\n        this.keyboard_adapter.simulate_char(string[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Download a screenshot.\r\n *\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.screen_make_screenshot = function()\r\n{\r\n    if(this.screen_adapter)\r\n    {\r\n        this.screen_adapter.make_screenshot();\r\n    }\r\n};\r\n\r\n/**\r\n * Set the scaling level of the emulated screen.\r\n *\r\n * @param {number} sx\r\n * @param {number} sy\r\n *\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.screen_set_scale = function(sx, sy)\r\n{\r\n    if(this.screen_adapter)\r\n    {\r\n        this.screen_adapter.set_scale(sx, sy);\r\n    }\r\n};\r\n\r\n/**\r\n * Go fullscreen.\r\n *\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.screen_go_fullscreen = function()\r\n{\r\n    if(!this.screen_adapter)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var elem = document.getElementById(\"screen_container\");\r\n\r\n    if(!elem)\r\n    {\r\n        return;\r\n    }\r\n\r\n    // bracket notation because otherwise they get renamed by closure compiler\r\n    var fn = elem[\"requestFullScreen\"] ||\r\n            elem[\"webkitRequestFullscreen\"] ||\r\n            elem[\"mozRequestFullScreen\"] ||\r\n            elem[\"msRequestFullScreen\"];\r\n\r\n    if(fn)\r\n    {\r\n        fn.call(elem);\r\n\r\n        // This is necessary, because otherwise chromium keyboard doesn't work anymore.\r\n        // Might (but doesn't seem to) break something else\r\n        var focus_element = document.getElementsByClassName(\"phone_keyboard\")[0];\r\n        focus_element && focus_element.focus();\r\n    }\r\n\r\n    //this.lock_mouse(elem);\r\n    this.lock_mouse();\r\n};\r\n\r\n/**\r\n * Lock the mouse cursor: It becomes invisble and is not moved out of the\r\n * browser window.\r\n *\r\n * @ignore\r\n * @export\r\n */\r\nV86Starter.prototype.lock_mouse = function()\r\n{\r\n    var elem = document.body;\r\n\r\n    var fn = elem[\"requestPointerLock\"] ||\r\n                elem[\"mozRequestPointerLock\"] ||\r\n                elem[\"webkitRequestPointerLock\"];\r\n\r\n    if(fn)\r\n    {\r\n        fn.call(elem);\r\n    }\r\n};\r\n\r\n/**\r\n * Enable or disable sending mouse events to the emulated PS2 controller.\r\n *\r\n * @param {boolean} enabled\r\n */\r\nV86Starter.prototype.mouse_set_status = function(enabled)\r\n{\r\n    if(this.mouse_adapter)\r\n    {\r\n        this.mouse_adapter.emu_enabled = enabled;\r\n    }\r\n};\r\n\r\n/**\r\n * Enable or disable sending keyboard events to the emulated PS2 controller.\r\n *\r\n * @param {boolean} enabled\r\n * @export\r\n */\r\nV86Starter.prototype.keyboard_set_status = function(enabled)\r\n{\r\n    if(this.keyboard_adapter)\r\n    {\r\n        this.keyboard_adapter.emu_enabled = enabled;\r\n    }\r\n};\r\n\r\n\r\n/**\r\n * Send a string to the first emulated serial terminal.\r\n *\r\n * @param {string} data\r\n * @export\r\n */\r\nV86Starter.prototype.serial0_send = function(data)\r\n{\r\n    for(var i = 0; i < data.length; i++)\r\n    {\r\n        this.bus.send(\"serial0-input\", data.charCodeAt(i));\r\n    }\r\n};\r\n\r\n/**\r\n * Send bytes to a serial port (to be received by the emulated PC).\r\n *\r\n * @param {Uint8Array} data\r\n * @export\r\n */\r\nV86Starter.prototype.serial_send_bytes = function(serial, data)\r\n{\r\n    for(var i = 0; i < data.length; i++)\r\n    {\r\n        this.bus.send(\"serial\" + serial + \"-input\", data[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * Write to a file in the 9p filesystem. Nothing happens if no filesystem has\r\n * been initialized. First argument to the callback is an error object if\r\n * something went wrong and null otherwise.\r\n *\r\n * @param {string} file\r\n * @param {Uint8Array} data\r\n * @param {function(Object)=} callback\r\n * @export\r\n */\r\nV86Starter.prototype.create_file = function(file, data, callback)\r\n{\r\n    var fs = this.fs9p;\r\n\r\n    if(!fs)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var parts = file.split(\"/\");\r\n    var filename = parts[parts.length - 1];\r\n\r\n    var path_infos = fs.SearchPath(file);\r\n    var parent_id = path_infos.parentid;\r\n    var not_found = filename === \"\" || parent_id === -1;\r\n\r\n    if(!not_found)\r\n    {\r\n        fs.CreateBinaryFile(filename, parent_id, data);\r\n    }\r\n\r\n    if(callback)\r\n    {\r\n        setTimeout(function()\r\n        {\r\n            if(not_found)\r\n            {\r\n                callback(new FileNotFoundError());\r\n            }\r\n            else\r\n            {\r\n                callback(null);\r\n            }\r\n        }, 0);\r\n    }\r\n};\r\n\r\n/**\r\n * Read a file in the 9p filesystem. Nothing happens if no filesystem has been\r\n * initialized.\r\n *\r\n * @param {string} file\r\n * @param {function(Object, Uint8Array)} callback\r\n * @export\r\n */\r\nV86Starter.prototype.read_file = function(file, callback)\r\n{\r\n    var fs = this.fs9p;\r\n\r\n    if(!fs)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var path_infos = fs.SearchPath(file);\r\n    var id = path_infos.id;\r\n\r\n    if(id === -1)\r\n    {\r\n        callback(new FileNotFoundError(), null);\r\n    }\r\n    else\r\n    {\r\n        fs.OpenInode(id, undefined);\r\n        fs.AddEvent(\r\n            id,\r\n            function()\r\n            {\r\n                var data = fs.inodedata[id];\r\n\r\n                if(data)\r\n                {\r\n                    callback(null, data.subarray(0, fs.inodes[id].size));\r\n                }\r\n                else\r\n                {\r\n                    callback(new FileNotFoundError(), null);\r\n                }\r\n            }\r\n        );\r\n    }\r\n};\r\n\r\n/**\r\n * @ignore\r\n * @constructor\r\n *\r\n * @param {string=} message\r\n */\r\nfunction FileNotFoundError(message)\r\n{\r\n    this.message = message || \"File not found\";\r\n}\r\nFileNotFoundError.prototype = Error.prototype;\r\n\r\n// Closure Compiler's way of exporting\r\nif(typeof window !== \"undefined\")\r\n{\r\n    window[\"V86Starter\"] = V86Starter;\r\n    window[\"V86\"] = V86Starter;\r\n}\r\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\r\n{\r\n    module.exports[\"V86Starter\"] = V86Starter;\r\n    module.exports[\"V86\"] = V86Starter;\r\n}\r\nelse if(typeof importScripts === \"function\")\r\n{\r\n    // web worker\r\n    self[\"V86Starter\"] = V86Starter;\r\n    self[\"V86\"] = V86Starter;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * The ISA IO bus\r\n * Devices register their ports here\r\n *\r\n * @constructor\r\n * @param {CPU} cpu\r\n */\r\nfunction IO(cpu)\r\n{\r\n    /** @const */\r\n    this.ports = [];\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    for(var i = 0; i < 0x10000; i++)\r\n    {\r\n        this.ports[i] = this.create_empty_entry();\r\n    }\r\n\r\n    var memory_size = cpu.memory_size;\r\n\r\n    for(var i = 0; (i << MMAP_BLOCK_BITS) < memory_size; i++)\r\n    {\r\n        // avoid sparse arrays\r\n        cpu.memory_map_read8[i] = cpu.memory_map_write8[i] = undefined;\r\n        cpu.memory_map_read32[i] = cpu.memory_map_write32[i] = undefined;\r\n    }\r\n\r\n    this.mmap_register(memory_size, 0x100000000 - memory_size,\r\n        function(addr) {\r\n            // read outside of the memory size\r\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\r\n            return 0xFF;\r\n        },\r\n        function(addr, value) {\r\n            // write outside of the memory size\r\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value, 2), LOG_IO);\r\n        },\r\n        function(addr) {\r\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\r\n            return -1;\r\n        },\r\n        function(addr, value) {\r\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value >>> 0, 8), LOG_IO);\r\n        }\r\n    );\r\n}\r\n\r\nIO.prototype.create_empty_entry = function()\r\n{\r\n    return {\r\n        read8: this.empty_port_read8,\r\n        read16: this.empty_port_read16,\r\n        read32: this.empty_port_read32,\r\n\r\n        write8: this.empty_port_write,\r\n        write16: this.empty_port_write,\r\n        write32: this.empty_port_write,\r\n\r\n        device: undefined,\r\n    };\r\n};\r\n\r\nIO.prototype.empty_port_read8 = function()\r\n{\r\n    return 0xFF;\r\n};\r\n\r\nIO.prototype.empty_port_read16 = function()\r\n{\r\n    return 0xFFFF;\r\n};\r\n\r\nIO.prototype.empty_port_read32 = function()\r\n{\r\n    return -1;\r\n};\r\n\r\nIO.prototype.empty_port_write = function(x)\r\n{\r\n};\r\n\r\n\r\n/**\r\n * @param {number} port_addr\r\n * @param {Object} device\r\n * @param {function():number=} r8\r\n * @param {function():number=} r16\r\n * @param {function():number=} r32\r\n */\r\nIO.prototype.register_read = function(port_addr, device, r8, r16, r32)\r\n{\r\n    dbg_assert(typeof port_addr === \"number\");\r\n    dbg_assert(typeof device === \"object\");\r\n    dbg_assert(!r8 || typeof r8 === \"function\");\r\n    dbg_assert(!r16 || typeof r16 === \"function\");\r\n    dbg_assert(!r32 || typeof r32 === \"function\");\r\n    dbg_assert(r8 || r16 || r32);\r\n\r\n    if(DEBUG)\r\n    {\r\n        var fail = function(n) {\r\n            dbg_assert(false, \"Overlapped read\" + n + \" \" + h(port_addr, 4) + \" (\" + device.name + \")\");\r\n            return -1 >>> (32 - n) | 0;\r\n        };\r\n        if(!r8) r8 = fail.bind(this, 8);\r\n        if(!r16) r16 = fail.bind(this, 16);\r\n        if(!r32) r32 = fail.bind(this, 32);\r\n    }\r\n\r\n    if(r8) this.ports[port_addr].read8 = r8;\r\n    if(r16) this.ports[port_addr].read16 = r16;\r\n    if(r32) this.ports[port_addr].read32 = r32;\r\n    this.ports[port_addr].device = device;\r\n};\r\n\r\n/**\r\n * @param {number} port_addr\r\n * @param {Object} device\r\n * @param {function(number)=} w8\r\n * @param {function(number)=} w16\r\n * @param {function(number)=} w32\r\n */\r\nIO.prototype.register_write = function(port_addr, device, w8, w16, w32)\r\n{\r\n    dbg_assert(typeof port_addr === \"number\");\r\n    dbg_assert(typeof device === \"object\");\r\n    dbg_assert(!w8 || typeof w8 === \"function\");\r\n    dbg_assert(!w16 || typeof w16 === \"function\");\r\n    dbg_assert(!w32 || typeof w32 === \"function\");\r\n    dbg_assert(w8 || w16 || w32);\r\n\r\n    if(DEBUG)\r\n    {\r\n        var fail = function(n) {\r\n            dbg_assert(false, \"Overlapped write\" + n + \" \" + h(port_addr) + \" (\" + device.name + \")\");\r\n        };\r\n        if(!w8) w8 = fail.bind(this, 8);\r\n        if(!w16) w16 = fail.bind(this, 16);\r\n        if(!w32) w32 = fail.bind(this, 32);\r\n    }\r\n\r\n    if(w8) this.ports[port_addr].write8 = w8;\r\n    if(w16) this.ports[port_addr].write16 = w16;\r\n    if(w32) this.ports[port_addr].write32 = w32;\r\n    this.ports[port_addr].device = device;\r\n};\r\n\r\n/**\r\n * > Any two consecutive 8-bit ports can be treated as a 16-bit port;\r\n * > and four consecutive 8-bit ports can be treated as a 32-bit port\r\n * > http://css.csail.mit.edu/6.858/2012/readings/i386/s08_01.htm\r\n *\r\n * This info is not correct for all ports, but handled by the following functions\r\n *\r\n * Register the write of 2 or 4 consecutive 8-bit ports, 1 or 2 16-bit\r\n * ports and 0 or 1 32-bit ports\r\n *\r\n * @param {number} port_addr\r\n * @param {!Object} device\r\n * @param {function():number} r8_1\r\n * @param {function():number} r8_2\r\n * @param {function():number=} r8_3\r\n * @param {function():number=} r8_4\r\n */\r\nIO.prototype.register_read_consecutive = function(port_addr, device, r8_1, r8_2, r8_3, r8_4)\r\n{\r\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\r\n\r\n    function r16_1()\r\n    {\r\n        return r8_1.call(this) |\r\n                r8_2.call(this) << 8;\r\n    }\r\n    function r16_2()\r\n    {\r\n        return r8_3.call(this) |\r\n                r8_4.call(this) << 8;\r\n    }\r\n    function r32()\r\n    {\r\n        return r8_1.call(this) |\r\n                r8_2.call(this) << 8 |\r\n                r8_3.call(this) << 16 |\r\n                r8_4.call(this) << 24;\r\n    }\r\n\r\n    if(r8_3 && r8_4)\r\n    {\r\n        this.register_read(port_addr, device, r8_1, r16_1, r32);\r\n        this.register_read(port_addr + 1, device, r8_2);\r\n        this.register_read(port_addr + 2, device, r8_3, r16_2);\r\n        this.register_read(port_addr + 3, device, r8_4);\r\n    }\r\n    else\r\n    {\r\n        this.register_read(port_addr, device, r8_1, r16_1);\r\n        this.register_read(port_addr + 1, device, r8_2);\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} port_addr\r\n * @param {!Object} device\r\n * @param {function(number)} w8_1\r\n * @param {function(number)} w8_2\r\n * @param {function(number)=} w8_3\r\n * @param {function(number)=} w8_4\r\n */\r\nIO.prototype.register_write_consecutive = function(port_addr, device, w8_1, w8_2, w8_3, w8_4)\r\n{\r\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\r\n\r\n    function w16_1(data)\r\n    {\r\n        w8_1.call(this, data & 0xFF);\r\n        w8_2.call(this, data >> 8 & 0xFF);\r\n    }\r\n    function w16_2(data)\r\n    {\r\n        w8_3.call(this, data & 0xFF);\r\n        w8_4.call(this, data >> 8 & 0xFF);\r\n    }\r\n    function w32(data)\r\n    {\r\n        w8_1.call(this, data & 0xFF);\r\n        w8_2.call(this, data >> 8 & 0xFF);\r\n        w8_3.call(this, data >> 16 & 0xFF);\r\n        w8_4.call(this, data >>> 24);\r\n    }\r\n\r\n    if(w8_3 && w8_4)\r\n    {\r\n        this.register_write(port_addr,     device, w8_1, w16_1, w32);\r\n        this.register_write(port_addr + 1, device, w8_2);\r\n        this.register_write(port_addr + 2, device, w8_3, w16_2);\r\n        this.register_write(port_addr + 3, device, w8_4);\r\n    }\r\n    else\r\n    {\r\n        this.register_write(port_addr,     device, w8_1, w16_1);\r\n        this.register_write(port_addr + 1, device, w8_2);\r\n    }\r\n};\r\n\r\nIO.prototype.in_mmap_range = function(start, count)\r\n{\r\n    start >>>= 0;\r\n    count >>>= 0;\r\n\r\n    var end = start + count;\r\n\r\n    if(end >= this.cpu.memory_size)\r\n    {\r\n        return true;\r\n    }\r\n\r\n    //dbg_log(\"in_mmap_range start=\" + start + \" count=\" + count);\r\n    start &= ~(MMAP_BLOCK_SIZE - 1);\r\n\r\n    while(start < end)\r\n    {\r\n        if(this.cpu.in_mapped_range(start))\r\n        {\r\n            return true;\r\n        }\r\n\r\n        start += MMAP_BLOCK_SIZE;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nIO.prototype.mmap_read32_shim = function(addr)\r\n{\r\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\r\n    var fn = this.cpu.memory_map_read8[aligned_addr];\r\n\r\n    return fn(addr) | fn(addr + 1) << 8 |\r\n            fn(addr + 2) << 16 | fn(addr + 3) << 24;\r\n};\r\n\r\nIO.prototype.mmap_write32_shim = function(addr, value)\r\n{\r\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\r\n    var fn = this.cpu.memory_map_write8[aligned_addr];\r\n\r\n    fn(addr, value & 0xFF);\r\n    fn(addr + 1, value >> 8 & 0xFF);\r\n    fn(addr + 2, value >> 16 & 0xFF);\r\n    fn(addr + 3, value >>> 24);\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n * @param {number} size\r\n * @param {*} read_func8\r\n * @param {*} write_func8\r\n * @param {*=} read_func32\r\n * @param {*=} write_func32\r\n */\r\nIO.prototype.mmap_register = function(addr, size, read_func8, write_func8, read_func32, write_func32)\r\n{\r\n    dbg_log(\"mmap_register addr=\" + h(addr >>> 0, 8) + \" size=\" + h(size, 8), LOG_IO);\r\n\r\n    dbg_assert((addr & MMAP_BLOCK_SIZE - 1) === 0);\r\n    dbg_assert(size && (size & MMAP_BLOCK_SIZE - 1) === 0);\r\n\r\n    if(!read_func32)\r\n        read_func32 = this.mmap_read32_shim.bind(this);\r\n\r\n    if(!write_func32)\r\n        write_func32 = this.mmap_write32_shim.bind(this);\r\n\r\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\r\n\r\n    for(; size > 0; aligned_addr++)\r\n    {\r\n        this.cpu.memory_map_read8[aligned_addr] = read_func8;\r\n        this.cpu.memory_map_write8[aligned_addr] = write_func8;\r\n        this.cpu.memory_map_read32[aligned_addr] = read_func32;\r\n        this.cpu.memory_map_write32[aligned_addr] = write_func32;\r\n\r\n        size -= MMAP_BLOCK_SIZE;\r\n    }\r\n};\r\n\r\n\r\nIO.prototype.port_write8 = function(port_addr, data)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.write8 === this.empty_port_write || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"write8 port #\" + h(port_addr, 4) + \" <- \" + h(data, 2) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    return entry.write8.call(entry.device, data);\r\n};\r\n\r\nIO.prototype.port_write16 = function(port_addr, data)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.write16 === this.empty_port_write || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"write16 port #\" + h(port_addr, 4) + \" <- \" + h(data, 4) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    return entry.write16.call(entry.device, data);\r\n};\r\n\r\nIO.prototype.port_write32 = function(port_addr, data)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.write32 === this.empty_port_write || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"write32 port #\" + h(port_addr, 4) + \" <- \" + h(data >>> 0, 8) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    return entry.write32.call(entry.device, data);\r\n};\r\n\r\nIO.prototype.port_read8 = function(port_addr)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.read8 === this.empty_port_read8 || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"read8 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    var value = entry.read8.call(entry.device);\r\n    dbg_assert(value < 0x100, \"8 bit port returned large value: \" + h(port_addr));\r\n    return value;\r\n};\r\n\r\nIO.prototype.port_read16 = function(port_addr)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.read16 === this.empty_port_read16 || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"read16 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    var value = entry.read16.call(entry.device);\r\n    dbg_assert(value < 0x10000 && value >= 0, \"16 bit port returned large value: \" + h(port_addr));\r\n    return value;\r\n};\r\n\r\nIO.prototype.port_read32 = function(port_addr)\r\n{\r\n    var entry = this.ports[port_addr];\r\n\r\n    if(entry.read32 === this.empty_port_read32 || LOG_ALL_IO)\r\n    {\r\n        dbg_log(\r\n            \"read32 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\r\n            LOG_IO\r\n        );\r\n    }\r\n    var value = entry.read32.call(entry.device);\r\n    dbg_assert((value | 0) === value);\r\n    return value;\r\n};\r\n\r\n// via seabios ioport.h\r\nvar debug_port_list = {\r\n    0x0004: \"PORT_DMA_ADDR_2\",\r\n    0x0005: \"PORT_DMA_CNT_2\",\r\n    0x000a: \"PORT_DMA1_MASK_REG\",\r\n    0x000b: \"PORT_DMA1_MODE_REG\",\r\n    0x000c: \"PORT_DMA1_CLEAR_FF_REG\",\r\n    0x000d: \"PORT_DMA1_MASTER_CLEAR\",\r\n    0x0020: \"PORT_PIC1_CMD\",\r\n    0x0021: \"PORT_PIC1_DATA\",\r\n    0x0040: \"PORT_PIT_COUNTER0\",\r\n    0x0041: \"PORT_PIT_COUNTER1\",\r\n    0x0042: \"PORT_PIT_COUNTER2\",\r\n    0x0043: \"PORT_PIT_MODE\",\r\n    0x0060: \"PORT_PS2_DATA\",\r\n    0x0061: \"PORT_PS2_CTRLB\",\r\n    0x0064: \"PORT_PS2_STATUS\",\r\n    0x0070: \"PORT_CMOS_INDEX\",\r\n    0x0071: \"PORT_CMOS_DATA\",\r\n    0x0080: \"PORT_DIAG\",\r\n    0x0081: \"PORT_DMA_PAGE_2\",\r\n    0x0092: \"PORT_A20\",\r\n    0x00a0: \"PORT_PIC2_CMD\",\r\n    0x00a1: \"PORT_PIC2_DATA\",\r\n    0x00b2: \"PORT_SMI_CMD\",\r\n    0x00b3: \"PORT_SMI_STATUS\",\r\n    0x00d4: \"PORT_DMA2_MASK_REG\",\r\n    0x00d6: \"PORT_DMA2_MODE_REG\",\r\n    0x00da: \"PORT_DMA2_MASTER_CLEAR\",\r\n    0x00f0: \"PORT_MATH_CLEAR\",\r\n    0x0170: \"PORT_ATA2_CMD_BASE\",\r\n    0x01f0: \"PORT_ATA1_CMD_BASE\",\r\n    0x0278: \"PORT_LPT2\",\r\n    0x02e8: \"PORT_SERIAL4\",\r\n    0x02f8: \"PORT_SERIAL2\",\r\n    0x0374: \"PORT_ATA2_CTRL_BASE\",\r\n    0x0378: \"PORT_LPT1\",\r\n    0x03e8: \"PORT_SERIAL3\",\r\n    //0x03f4: \"PORT_ATA1_CTRL_BASE\",\r\n    0x03f0: \"PORT_FD_BASE\",\r\n    0x03f2: \"PORT_FD_DOR\",\r\n    0x03f4: \"PORT_FD_STATUS\",\r\n    0x03f5: \"PORT_FD_DATA\",\r\n    0x03f6: \"PORT_HD_DATA\",\r\n    0x03f7: \"PORT_FD_DIR\",\r\n    0x03f8: \"PORT_SERIAL1\",\r\n    0x0cf8: \"PORT_PCI_CMD\",\r\n    0x0cf9: \"PORT_PCI_REBOOT\",\r\n    0x0cfc: \"PORT_PCI_DATA\",\r\n    0x0402: \"PORT_BIOS_DEBUG\",\r\n    0x0510: \"PORT_QEMU_CFG_CTL\",\r\n    0x0511: \"PORT_QEMU_CFG_DATA\",\r\n    0xb000: \"PORT_ACPI_PM_BASE\",\r\n    0xb100: \"PORT_SMB_BASE\",\r\n    0x8900: \"PORT_BIOS_APM\"\r\n};\r\n\r\nIO.prototype.get_port_description = function(addr)\r\n{\r\n    if(debug_port_list[addr])\r\n    {\r\n        return \"  (\" + debug_port_list[addr] + \")\";\r\n    }\r\n    else\r\n    {\r\n        return \"\";\r\n    }\r\n};\r\n\r\n\r\n","\"use strict\";\r\n\r\nvar\r\n/** @const */ LOG_ALL = -1,\r\n/** @const */ LOG_NONE = 0,\r\n\r\n/** @const */ LOG_OTHER =  0x000001,\r\n/** @const */ LOG_CPU =    0x000002,\r\n/** @const */ LOG_FPU =    0x000004,\r\n/** @const */ LOG_MEM =    0x000008,\r\n/** @const */ LOG_DMA =    0x000010,\r\n/** @const */ LOG_IO =     0x000020,\r\n/** @const */ LOG_PS2 =    0x000040,\r\n/** @const */ LOG_PIC =    0x000080,\r\n/** @const */ LOG_VGA =    0x000100,\r\n/** @const */ LOG_PIT =    0x000200,\r\n/** @const */ LOG_MOUSE =  0x000400,\r\n/** @const */ LOG_PCI =    0x000800,\r\n/** @const */ LOG_BIOS =   0x001000,\r\n/** @const */ LOG_FLOPPY = 0x002000,\r\n/** @const */ LOG_SERIAL = 0x004000,\r\n/** @const */ LOG_DISK =   0x008000,\r\n/** @const */ LOG_RTC =    0x010000,\r\n/** @const */ LOG_HPET =   0x020000,\r\n/** @const */ LOG_ACPI =   0x040000,\r\n/** @const */ LOG_APIC =   0x080000,\r\n/** @const */ LOG_NET =    0x100000,\r\n/** @const */ LOG_VIRTIO = 0x200000,\r\n/** @const */ LOG_9P =     0x400000,\r\n/** @const */ LOG_SB16 =   0x800000;\r\n\r\n\r\n/**\r\n * @const\r\n * @type {Array<Array<string|number>>}\r\n */\r\nvar LOG_NAMES = [\r\n    [1, \"\"],\r\n    [LOG_CPU, \"CPU\"],\r\n    [LOG_DISK, \"DISK\"],\r\n    [LOG_FPU, \"FPU\"],\r\n    [LOG_MEM, \"MEM\"],\r\n    [LOG_DMA, \"DMA\"],\r\n    [LOG_IO, \"IO\"],\r\n    [LOG_PS2, \"PS2\"],\r\n    [LOG_PIC, \"PIC\"],\r\n    [LOG_VGA, \"VGA\"],\r\n    [LOG_PIT, \"PIT\"],\r\n    [LOG_MOUSE, \"MOUS\"],\r\n    [LOG_PCI, \"PCI\"],\r\n    [LOG_BIOS, \"BIOS\"],\r\n    [LOG_FLOPPY, \"FLOP\"],\r\n    [LOG_SERIAL, \"SERI\"],\r\n    [LOG_RTC, \"RTC\"],\r\n    [LOG_HPET, \"HPET\"],\r\n    [LOG_ACPI, \"ACPI\"],\r\n    [LOG_APIC, \"APIC\"],\r\n    [LOG_NET, \"NET\"],\r\n    [LOG_VIRTIO, \"VIO\"],\r\n    [LOG_9P, \"9P\"],\r\n    [LOG_SB16, \"SB16\"]\r\n];\r\n\r\nvar\r\n/** @const */ TLB_SYSTEM_READ = 1,\r\n/** @const */ TLB_SYSTEM_WRITE = 2,\r\n/** @const */ TLB_USER_READ = 4,\r\n/** @const */ TLB_USER_WRITE = 8;\r\n\r\n\r\nvar\r\n\r\n// flags register bitflags\r\n/** @const */ flag_carry = 1,\r\n/** @const */ flag_parity = 4,\r\n/** @const */ flag_adjust = 16,\r\n/** @const */ flag_zero = 64,\r\n/** @const */ flag_sign = 128,\r\n/** @const */ flag_trap = 256,\r\n/** @const */ flag_interrupt = 512,\r\n/** @const */ flag_direction = 1024,\r\n/** @const */ flag_overflow = 2048,\r\n/** @const */ flag_iopl = 1 << 12 | 1 << 13,\r\n/** @const */ flag_nt = 1 << 14,\r\n/** @const */ flag_rf = 1 << 16,\r\n/** @const */ flag_vm = 1 << 17,\r\n/** @const */ flag_ac = 1 << 18,\r\n/** @const */ flag_vif = 1 << 19,\r\n/** @const */ flag_vip = 1 << 20,\r\n/** @const */ flag_id = 1 << 21,\r\n\r\n/**\r\n * default values of reserved flags bits\r\n * @const\r\n */\r\nflags_default = 1 << 1,\r\n\r\n/**\r\n * bitmask to select non-reserved flags bits\r\n * @const\r\n */\r\nflags_mask =\r\n    flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_trap | flag_interrupt |\r\n    flag_direction | flag_overflow | flag_iopl | flag_nt | flag_rf | flag_vm | flag_ac |\r\n    flag_vif | flag_vip | flag_id,\r\n\r\n\r\n/**\r\n * all arithmetic flags\r\n * @const\r\n */\r\nflags_all = flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_overflow,\r\n\r\n\r\n/**\r\n * opsizes used by get flag functions\r\n *\r\n * @const\r\n */\r\nOPSIZE_8 = 7,\r\n/** @const */\r\nOPSIZE_16 = 15,\r\n/** @const */\r\nOPSIZE_32 = 31,\r\n\r\n/** @const */\r\nPSE_ENABLED = 128,\r\n\r\n/** @const */ reg_eax = 0,\r\n/** @const */ reg_ecx = 1,\r\n/** @const */ reg_edx = 2,\r\n/** @const */ reg_ebx = 3,\r\n/** @const */ reg_esp = 4,\r\n/** @const */ reg_ebp = 5,\r\n/** @const */ reg_esi = 6,\r\n/** @const */ reg_edi = 7,\r\n\r\n/** @const */ reg_ax = 0,\r\n/** @const */ reg_cx = 2,\r\n/** @const */ reg_dx = 4,\r\n/** @const */ reg_bx = 6,\r\n/** @const */ reg_sp = 8,\r\n/** @const */ reg_bp = 10,\r\n/** @const */ reg_si = 12,\r\n/** @const */ reg_di = 14,\r\n\r\n/** @const */ reg_al = 0,\r\n/** @const */ reg_cl = 4,\r\n/** @const */ reg_dl = 8,\r\n/** @const */ reg_bl = 12,\r\n/** @const */ reg_ah = 1,\r\n/** @const */ reg_ch = 5,\r\n/** @const */ reg_dh = 9,\r\n/** @const */ reg_bh = 13,\r\n\r\n\r\n/** @const */ reg_es = 0,\r\n/** @const */ reg_cs = 1,\r\n/** @const */ reg_ss = 2,\r\n/** @const */ reg_ds = 3,\r\n/** @const */ reg_fs = 4,\r\n/** @const */ reg_gs = 5,\r\n\r\n\r\n/** @const */ reg_tr = 6, // task register\r\n/** @const */ reg_ldtr = 7; // local descriptor table register\r\n\r\nvar\r\n    /**\r\n     * The minimum number of bytes that can be memory-mapped\r\n     * by one device.\r\n     *\r\n     * @const\r\n     */\r\n    MMAP_BLOCK_BITS = 17,\r\n    /** @const */\r\n    MMAP_BLOCK_SIZE = 1 << MMAP_BLOCK_BITS;\r\n\r\n\r\n/** @const */\r\nvar MEM_PAGE_WRITTEN = 1;\r\n\r\n\r\n/** @const */\r\nvar MAGIC_CPU_EXCEPTION = 0xDEADBEE;\r\n\r\n\r\nvar\r\n    /** @const */\r\n    REPEAT_STRING_PREFIX_NONE = 0,\r\n    /** @const */\r\n    REPEAT_STRING_PREFIX_NZ = 1,\r\n    /** @const */\r\n    REPEAT_STRING_PREFIX_Z = 2;\r\n\r\nvar\r\n    /** @const */\r\n    CR0_PE = 1,\r\n    /** @const */\r\n    CR0_MP = 1 << 1,\r\n    /** @const */\r\n    CR0_EM = 1 << 2,\r\n    /** @const */\r\n    CR0_TS = 1 << 3,\r\n    /** @const */\r\n    CR0_ET = 1 << 4,\r\n    /** @const */\r\n    CR0_WP = 1 << 16,\r\n    /** @const */\r\n    CR0_NW = 1 << 29,\r\n    /** @const */\r\n    CR0_CD = 1 << 30,\r\n    /** @const */\r\n    CR0_PG = 1 << 31;\r\n\r\nvar\r\n    /** @const */\r\n    CR4_VME = 1,\r\n    /** @const */\r\n    CR4_PVI = 1 << 1,\r\n    /** @const */\r\n    CR4_TSD = 1 << 2,\r\n    /** @const */\r\n    CR4_PSE = 1 << 4,\r\n    /** @const */\r\n    CR4_DE = 1 << 3,\r\n    /** @const */\r\n    CR4_PAE = 1 << 5,\r\n    /** @const */\r\n    CR4_PGE = 1 << 7,\r\n    /** @const */\r\n    CR4_OSFXSR = 1 << 9,\r\n    /** @const */\r\n    CR4_OSXMMEXCPT = 1 << 10;\r\n\r\n\r\n// Segment prefixes must not collide with reg_*s variables\r\n// _ZERO is a special zero offset segment\r\nvar\r\n    /** @const */\r\n    SEG_PREFIX_NONE = -1,\r\n\r\n    /** @const */\r\n    SEG_PREFIX_ZERO = 7;\r\n\r\n\r\nvar\r\n    /** @const */\r\n    IA32_SYSENTER_CS = 0x174,\r\n\r\n    // Note: These are wrong in Intel's manuals. Fuck Intel\r\n    /** @const */\r\n    IA32_SYSENTER_ESP = 0x175,\r\n\r\n    /** @const */\r\n    IA32_SYSENTER_EIP = 0x176;\r\n\r\n/** @const */\r\nvar IA32_TIME_STAMP_COUNTER = 0x10;\r\n\r\n/** @const */\r\nvar IA32_PLATFORM_ID = 0x17;\r\n\r\n/** @const */\r\nvar MSR_EBC_FREQUENCY_ID = 0x2C;\r\n\r\n/** @const */\r\nvar IA32_APIC_BASE_MSR = 0x1B;\r\n\r\n/** @const */\r\nvar IA32_BIOS_SIGN_ID = 0x8B;\r\n\r\n/** @const */\r\nvar IA32_MISC_ENABLE = 0x1A0;\r\n\r\n/** @const */\r\nvar IA32_RTIT_CTL = 0x570;\r\n\r\n/** @const */\r\nvar MSR_SMI_COUNT = 0x34;\r\n\r\n/** @const */\r\nvar IA32_MCG_CAP = 0x179;\r\n\r\n/** @const */\r\nvar IA32_KERNEL_GS_BASE = 0xC0000101 | 0;\r\n\r\n/** @const */\r\nvar MSR_PKG_C2_RESIDENCY = 0x60D;\r\n\r\n\r\n/** @const */\r\nvar IA32_APIC_BASE_BSP = 1 << 8;\r\n/** @const */\r\nvar IA32_APIC_BASE_EXTD = 1 << 10;\r\n/** @const */\r\nvar IA32_APIC_BASE_EN = 1 << 11;\r\n\r\n\r\n/** @const */ var TSR_BACKLINK = 0x00;\r\n/** @const */ var TSR_CR3 = 0x1C;\r\n/** @const */ var TSR_EIP = 0x20;\r\n/** @const */ var TSR_EFLAGS = 0x24;\r\n\r\n/** @const */ var TSR_EAX = 0x28;\r\n/** @const */ var TSR_ECX = 0x2c;\r\n/** @const */ var TSR_EDX = 0x30;\r\n/** @const */ var TSR_EBX = 0x34;\r\n/** @const */ var TSR_ESP = 0x38;\r\n/** @const */ var TSR_EBP = 0x3c;\r\n/** @const */ var TSR_ESI = 0x40;\r\n/** @const */ var TSR_EDI = 0x44;\r\n\r\n/** @const */ var TSR_ES = 0x48;\r\n/** @const */ var TSR_CS = 0x4c;\r\n/** @const */ var TSR_SS = 0x50;\r\n/** @const */ var TSR_DS = 0x54;\r\n/** @const */ var TSR_FS = 0x58;\r\n/** @const */ var TSR_GS = 0x5c;\r\n/** @const */ var TSR_LDT = 0x60;\r\n\r\n\r\n/** @const */ var FW_CFG_SIGNATURE = 0x00;\r\n/** @const */ var FW_CFG_RAM_SIZE = 0x03;\r\n/** @const */ var FW_CFG_NB_CPUS = 0x05;\r\n\r\n\r\n/** @const */\r\nvar PREFIX_MASK_REP = 0b11000;\r\n/** @const */\r\nvar PREFIX_REPZ = 0b01000;\r\n/** @const */\r\nvar PREFIX_REPNZ = 0b10000;\r\n\r\n/** @const */\r\nvar PREFIX_MASK_SEGMENT = 0b111;\r\n\r\n/** @const */\r\nvar PREFIX_MASK_OPSIZE = 0b100000;\r\n/** @const */\r\nvar PREFIX_MASK_ADDRSIZE = 0b1000000;\r\n\r\n/** @const */\r\nvar PREFIX_F2 = PREFIX_REPNZ; // alias\r\n/** @const */\r\nvar PREFIX_F3 = PREFIX_REPZ; // alias\r\n/** @const */\r\nvar PREFIX_66 = PREFIX_MASK_OPSIZE; // alias\r\n\r\n/** @const */\r\nvar MXCSR_MASK = (0xFFFF & ~(1 << 6));\r\n\r\n\r\n/** @const */\r\nvar MIXER_CHANNEL_LEFT = 0;\r\n/** @const */\r\nvar MIXER_CHANNEL_RIGHT = 1;\r\n/** @const */\r\nvar MIXER_CHANNEL_BOTH = 2;\r\n/** @const */\r\nvar MIXER_SRC_MASTER = 0;\r\n/** @const */\r\nvar MIXER_SRC_PCSPEAKER = 1;\r\n/** @const */\r\nvar MIXER_SRC_DAC = 2;\r\n","\"use strict\";\r\n\r\n/** @constructor */\r\nfunction v86(bus)\r\n{\r\n    /** @type {boolean} */\r\n    this.running = false;\r\n\r\n    /** @type {boolean} */\r\n    this.stopped = false;\r\n\r\n    /** @type {CPU} */\r\n    this.cpu = new CPU(bus);\r\n\r\n    this.bus = bus;\r\n    bus.register(\"cpu-init\", this.init, this);\r\n    bus.register(\"cpu-run\", this.run, this);\r\n    bus.register(\"cpu-stop\", this.stop, this);\r\n    bus.register(\"cpu-restart\", this.restart, this);\r\n\r\n    this.register_tick();\r\n}\r\n\r\nv86.prototype.run = function()\r\n{\r\n    if(!this.running)\r\n    {\r\n        this.bus.send(\"emulator-started\");\r\n        this.fast_next_tick();\r\n    }\r\n};\r\n\r\nv86.prototype.do_tick = function()\r\n{\r\n    if(this.stopped)\r\n    {\r\n        this.stopped = this.running = false;\r\n        this.bus.send(\"emulator-stopped\");\r\n        return;\r\n    }\r\n\r\n    this.running = true;\r\n    var dt = this.cpu.main_run();\r\n\r\n    if(dt <= 0)\r\n    {\r\n        this.fast_next_tick();\r\n    }\r\n    else\r\n    {\r\n        this.next_tick(dt);\r\n    }\r\n};\r\n\r\nv86.prototype.stop = function()\r\n{\r\n    if(this.running)\r\n    {\r\n        this.stopped = true;\r\n    }\r\n};\r\n\r\nv86.prototype.destroy = function()\r\n{\r\n    this.unregister_tick();\r\n};\r\n\r\nv86.prototype.restart = function()\r\n{\r\n    this.cpu.reset();\r\n    this.cpu.load_bios();\r\n};\r\n\r\nv86.prototype.init = function(settings)\r\n{\r\n    this.cpu.init(settings, this.bus);\r\n    this.bus.send(\"emulator-ready\");\r\n};\r\n\r\nif(typeof setImmediate !== \"undefined\")\r\n{\r\n    /** @this {v86} */\r\n    var fast_next_tick = function()\r\n    {\r\n        setImmediate(() => { this.do_tick(); });\r\n    };\r\n\r\n    /** @this {v86} */\r\n    var register_tick = function() {};\r\n\r\n    /** @this {v86} */\r\n    var unregister_tick = function() {};\r\n}\r\nelse if(typeof window !== \"undefined\" && typeof postMessage !== \"undefined\")\r\n{\r\n    // setImmediate shim for the browser.\r\n    // TODO: Make this deactivatable, for other applications\r\n    //       using postMessage\r\n\r\n    /** @const */\r\n    let MAGIC_POST_MESSAGE = 0xAA55;\r\n\r\n    /** @this {v86} */\r\n    fast_next_tick = function()\r\n    {\r\n        window.postMessage(MAGIC_POST_MESSAGE, \"*\");\r\n    };\r\n\r\n    let tick;\r\n\r\n    /** @this {v86} */\r\n    register_tick = function()\r\n    {\r\n        tick = e =>\r\n        {\r\n            if(e.source === window && e.data === MAGIC_POST_MESSAGE)\r\n            {\r\n                this.do_tick();\r\n            }\r\n        };\r\n\r\n        window.addEventListener(\"message\", tick, false);\r\n    };\r\n\r\n    /** @this {v86} */\r\n    unregister_tick = function()\r\n    {\r\n        window.removeEventListener(\"message\", tick);\r\n        tick = null;\r\n    };\r\n}\r\nelse\r\n{\r\n    /** @this {v86} */\r\n    fast_next_tick = function()\r\n    {\r\n        setTimeout(() => { this.do_tick(); }, 0);\r\n    };\r\n\r\n    /** @this {v86} */\r\n    register_tick = function() {};\r\n\r\n    /** @this {v86} */\r\n    unregister_tick = function() {};\r\n}\r\n\r\nv86.prototype.fast_next_tick = fast_next_tick;\r\nv86.prototype.register_tick = register_tick;\r\nv86.prototype.unregister_tick = unregister_tick;\r\n\r\nif(typeof document !== \"undefined\" && typeof document.hidden === \"boolean\")\r\n{\r\n    /** @this {v86} */\r\n    var next_tick = function(t)\r\n    {\r\n        if(t < 4 || document.hidden)\r\n        {\r\n            // Avoid sleeping for 1 second (happens if page is not\r\n            // visible), it can break boot processes. Also don't try to\r\n            // sleep for less than 4ms, since the value is clamped up\r\n            this.fast_next_tick();\r\n        }\r\n        else\r\n        {\r\n            setTimeout(() => { this.do_tick(); }, t);\r\n        }\r\n    };\r\n}\r\nelse\r\n{\r\n    // In environments that aren't browsers, we might as well use setTimeout\r\n    /** @this {v86} */\r\n    next_tick = function(t)\r\n    {\r\n        setTimeout(() => { this.do_tick(); }, t);\r\n    };\r\n}\r\n\r\nv86.prototype.next_tick = next_tick;\r\n\r\nv86.prototype.save_state = function()\r\n{\r\n    // TODO: Should be implemented here, not on cpu\r\n    return this.cpu.save_state();\r\n};\r\n\r\nv86.prototype.restore_state = function(state)\r\n{\r\n    // TODO: Should be implemented here, not on cpu\r\n    return this.cpu.restore_state(state);\r\n};\r\n\r\n\r\nif(typeof performance === \"object\" && performance.now)\r\n{\r\n    v86.microtick = function()\r\n    {\r\n        return performance.now();\r\n    };\r\n}\r\n//else if(typeof process === \"object\" && process.hrtime)\r\n//{\r\n//    v86.microtick = function()\r\n//    {\r\n//        var t = process.hrtime();\r\n//        return t[0] * 1000 + t[1] / 1e6;\r\n//    };\r\n//}\r\nelse\r\n{\r\n    v86.microtick = Date.now;\r\n}\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar CPU_LOG_VERBOSE = false;\r\n\r\n\r\n// Resources:\r\n// https://pdos.csail.mit.edu/6.828/2006/readings/i386/toc.htm\r\n// https://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\r\n// http://ref.x86asm.net/geek32.html\r\n\r\n\r\n// exception bits in the MXCSR Register\r\nvar\r\n    /** @const */\r\n    CPU_EX_P = 1 << 5,\r\n    /** @const */\r\n    CPU_EX_U = 1 << 4,\r\n    /** @const */\r\n    CPU_EX_O = 1 << 3,\r\n    /** @const */\r\n    CPU_EX_Z = 1 << 2,\r\n    /** @const */\r\n    CPU_EX_D = 1 << 1,\r\n    /** @const */\r\n    CPU_EX_I = 1 << 0;\r\n\r\n/** @constructor */\r\nfunction CPU(bus)\r\n{\r\n    /** @type {number} */\r\n    this.memory_size = 0;\r\n\r\n    // Note: Currently unused (degrades performance and not required by any OS\r\n    //       that we support)\r\n    this.a20_enabled = true;\r\n\r\n    this.mem_page_infos = undefined;\r\n\r\n    this.mem8 = new Uint8Array(0);\r\n    this.mem16 = new Uint16Array(this.mem8.buffer);\r\n    this.mem32s = new Int32Array(this.mem8.buffer);\r\n\r\n    this.segment_is_null = new Uint8Array(8);\r\n    this.segment_limits = new Uint32Array(8);\r\n    //this.segment_infos = new Uint32Array(8);\r\n    this.segment_offsets = new Int32Array(8);\r\n\r\n    /**\r\n     * Translation Lookaside Buffer\r\n     * @const\r\n     */\r\n    this.tlb_data = new Int32Array(1 << 20);\r\n\r\n    /**\r\n     * Information about which pages are cached in the tlb.\r\n     * By bit:\r\n     *   0 system, read\r\n     *   1 system, write\r\n     *   2 user, read\r\n     *   3 user, write\r\n     * @const\r\n     */\r\n    this.tlb_info = new Uint8Array(1 << 20);\r\n\r\n    /**\r\n     * Same as tlb_info, except it only contains global pages\r\n     * @const\r\n     */\r\n    this.tlb_info_global = new Uint8Array(1 << 20);\r\n\r\n    /**\r\n     * Wheter or not in protected mode\r\n     * @type {boolean}\r\n     */\r\n    this.protected_mode = false;\r\n\r\n    /**\r\n     * interrupt descriptor table\r\n     * @type {number}\r\n     */\r\n    this.idtr_size = 0;\r\n    /** @type {number} */\r\n    this.idtr_offset = 0;\r\n\r\n    /**\r\n     * global descriptor table register\r\n     * @type {number}\r\n     */\r\n    this.gdtr_size = 0;\r\n    /** @type {number} */\r\n    this.gdtr_offset = 0;\r\n\r\n    this.tss_size_32 = false;\r\n\r\n    /*\r\n     * whether or not a page fault occured\r\n     */\r\n    this.page_fault = false;\r\n\r\n    this.cr = new Int32Array(8);\r\n\r\n    /** @type {number} */\r\n    this.cr[0] = 0;\r\n    /** @type {number} */\r\n    this.cr[2] = 0;\r\n    /** @type {number} */\r\n    this.cr[3] = 0;\r\n    /** @type {number} */\r\n    this.cr[4] = 0;\r\n\r\n    // current privilege level\r\n    /** @type {number} */\r\n    this.cpl = 0;\r\n\r\n    // if false, pages are 4 KiB, else 4 Mib\r\n    /** @type {number} */\r\n    this.page_size_extensions = 0;\r\n\r\n    // current operand/address size\r\n    /** @type {boolean} */\r\n    this.is_32 = false;\r\n\r\n    /** @type {boolean} */\r\n    this.stack_size_32 = false;\r\n\r\n    /**\r\n     * Was the last instruction a hlt?\r\n     * @type {boolean}\r\n     */\r\n    this.in_hlt = false;\r\n\r\n    /** @type {number} */\r\n    this.last_virt_eip = 0;\r\n\r\n    /** @type {number} */\r\n    this.eip_phys = 0;\r\n\r\n    /** @type {number} */\r\n    this.last_virt_esp = 0;\r\n\r\n    /** @type {number} */\r\n    this.esp_phys = 0;\r\n\r\n\r\n    /** @type {number} */\r\n    this.sysenter_cs = 0;\r\n\r\n    /** @type {number} */\r\n    this.sysenter_esp = 0;\r\n\r\n    /** @type {number} */\r\n    this.sysenter_eip = 0;\r\n\r\n    /** @type {number} */\r\n    this.prefixes = 0;\r\n\r\n    /** @type {number} */\r\n    this.flags = 0;\r\n\r\n    /**\r\n     * bitmap of flags which are not updated in the flags variable\r\n     * changed by arithmetic instructions, so only relevant to arithmetic flags\r\n     * @type {number}\r\n     */\r\n    this.flags_changed = 0;\r\n\r\n    /**\r\n     * the last 2 operators and the result and size of the last arithmetic operation\r\n     * @type {number}\r\n     */\r\n    this.last_op1 = 0;\r\n    /** @type {number} */\r\n    this.last_op2 = 0;\r\n    /** @type {number} */\r\n    this.last_op_size = 0;\r\n\r\n    /** @type {number} */\r\n    this.last_add_result = 0;\r\n\r\n    /** @type {number} */\r\n    this.last_result = 0;\r\n\r\n    this.div32_result = new Float64Array(2);\r\n\r\n    this.tsc_offset = 0;\r\n\r\n    /** @type {number} */\r\n    this.modrm_byte = 0;\r\n\r\n    /** @type {number} */\r\n    this.phys_addr = 0;\r\n\r\n    /** @type {number} */\r\n    this.phys_addr_high = 0;\r\n\r\n    /** @type {!Object} */\r\n    this.devices = {};\r\n\r\n    this.table = [];\r\n\r\n    // paging enabled\r\n    /** @type {boolean} */\r\n    this.paging = false;\r\n\r\n    /** @type {number} */\r\n    this.instruction_pointer = 0;\r\n\r\n    /** @type {number} */\r\n    this.previous_ip = 0;\r\n\r\n    this.apic_enabled = true;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.timestamp_counter = 0;\r\n\r\n    // registers\r\n    this.reg32s = new Int32Array(8);\r\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\r\n    this.reg16s = new Int16Array(this.reg32s.buffer);\r\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\r\n    this.reg8s = new Int8Array(this.reg32s.buffer);\r\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\r\n\r\n    // mm0-mm7 split up into 32 bit pairs\r\n    this.reg_mmxs = new Int32Array(16);\r\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\r\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\r\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\r\n\r\n    this.reg_xmm32s = new Int32Array(8 * 4);\r\n    this.mxcsr = 0x1F80;\r\n\r\n    // segment registers, tr and ldtr\r\n    this.sreg = new Uint16Array(8);\r\n\r\n    // debug registers\r\n    this.dreg = new Int32Array(8);\r\n\r\n\r\n    // managed in io.js\r\n    /** @const */ this.memory_map_read8 = [];\r\n    /** @const */ this.memory_map_write8 = [];\r\n    /** @const */ this.memory_map_read32 = [];\r\n    /** @const */ this.memory_map_write32 = [];\r\n\r\n    /**\r\n     * @const\r\n     * @type {{main: ArrayBuffer, vga: ArrayBuffer}}\r\n     */\r\n    this.bios = {\r\n        main: null,\r\n        vga: null,\r\n    };\r\n\r\n    /** @type {number} */\r\n    this.fw_value = 0;\r\n\r\n    this.io = undefined;\r\n    this.fpu = undefined;\r\n\r\n    this.bus = bus;\r\n\r\n    dbg_assert(this.table16 && this.table32);\r\n    dbg_assert(this.table0F_16 && this.table0F_32);\r\n\r\n    this.update_operand_size();\r\n\r\n    this.tsc_offset = v86.microtick();\r\n\r\n    this.debug_init();\r\n\r\n    this.init2();\r\n\t\r\n\tthis.winnt_fix = WINNT_FIX;\r\n\r\n    //Object.seal(this);\r\n}\r\n\r\nCPU.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.memory_size;\r\n    state[1] = this.segment_is_null;\r\n    state[2] = this.segment_offsets;\r\n    state[3] = this.segment_limits;\r\n    state[4] = this.protected_mode;\r\n    state[5] = this.idtr_offset;\r\n    state[6] = this.idtr_size;\r\n    state[7] = this.gdtr_offset;\r\n    state[8] = this.gdtr_size;\r\n    state[9] = this.page_fault;\r\n    state[10] = this.cr;\r\n    state[11] = this.cpl;\r\n    state[12] = this.page_size_extensions;\r\n    state[13] = this.is_32;\r\n\r\n    state[16] = this.stack_size_32;\r\n    state[17] = this.in_hlt;\r\n    state[18] = this.last_virt_eip;\r\n    state[19] = this.eip_phys;\r\n    state[20] = this.last_virt_esp;\r\n    state[21] = this.esp_phys;\r\n    state[22] = this.sysenter_cs;\r\n    state[23] = this.sysenter_eip;\r\n    state[24] = this.sysenter_esp;\r\n    state[25] = this.prefixes;\r\n    state[26] = this.flags;\r\n    state[27] = this.flags_changed;\r\n    state[28] = this.last_op1;\r\n    state[29] = this.last_op2;\r\n    state[30] = this.last_op_size;\r\n    state[31] = this.last_add_result;\r\n    state[32] = this.modrm_byte;\r\n\r\n    state[36] = this.paging;\r\n    state[37] = this.instruction_pointer;\r\n    state[38] = this.previous_ip;\r\n    state[39] = this.reg32s;\r\n    state[40] = this.sreg;\r\n    state[41] = this.dreg;\r\n    state[42] = this.mem8;\r\n    state[43] = this.fpu;\r\n\r\n    state[45] = this.devices.virtio;\r\n    state[46] = this.devices.apic;\r\n    state[47] = this.devices.rtc;\r\n    state[48] = this.devices.pci;\r\n    state[49] = this.devices.dma;\r\n    state[50] = this.devices.acpi;\r\n    state[51] = this.devices.hpet;\r\n    state[52] = this.devices.vga;\r\n    state[53] = this.devices.ps2;\r\n    state[54] = this.devices.uart0;\r\n    state[55] = this.devices.fdc;\r\n    state[56] = this.devices.cdrom;\r\n    state[57] = this.devices.hda;\r\n    state[58] = this.devices.pit;\r\n    state[59] = this.devices.net;\r\n    state[60] = this.devices.pic;\r\n    state[61] = this.devices.sb16;\r\n\r\n    state[62] = this.a20_enabled;\r\n    state[63] = this.fw_value;\r\n\r\n    state[64] = this.devices.ioapic;\r\n\r\n    state[65] = this.tss_size_32;\r\n\r\n    state[66] = this.reg_mmxs;\r\n\r\n    state[67] = this.devices.uart1;\r\n    state[68] = this.devices.uart2;\r\n    state[69] = this.devices.uart3;\r\n\r\n    return state;\r\n};\r\n\r\nCPU.prototype.set_state = function(state)\r\n{\r\n    this.memory_size = state[0];\r\n    this.segment_is_null = state[1];\r\n    this.segment_offsets = state[2];\r\n    this.segment_limits = state[3];\r\n    this.protected_mode = state[4];\r\n    this.idtr_offset = state[5];\r\n    this.idtr_size = state[6];\r\n    this.gdtr_offset = state[7];\r\n    this.gdtr_size = state[8];\r\n    this.page_fault = state[9];\r\n    this.cr = state[10];\r\n    this.cpl = state[11];\r\n    this.page_size_extensions = state[12];\r\n    this.is_32 = state[13];\r\n\r\n    this.stack_size_32 = state[16];\r\n\r\n    this.in_hlt = state[17];\r\n    this.last_virt_eip = state[18];\r\n    this.eip_phys = state[19];\r\n    this.last_virt_esp = state[20];\r\n    this.esp_phys = state[21];\r\n    this.sysenter_cs = state[22];\r\n    this.sysenter_eip = state[23];\r\n    this.sysenter_esp = state[24];\r\n    this.prefixes = state[25];\r\n\r\n    this.flags = state[26];\r\n    this.flags_changed = state[27];\r\n    this.last_op1 = state[28];\r\n    this.last_op2 = state[29];\r\n    this.last_op_size = state[30];\r\n    this.last_add_result = state[31];\r\n    this.modrm_byte = state[32];\r\n\r\n    this.paging = state[36];\r\n    this.instruction_pointer = state[37];\r\n    this.previous_ip = state[38];\r\n    this.reg32s = state[39];\r\n    this.sreg = state[40];\r\n    this.dreg = state[41];\r\n    this.mem8 = state[42];\r\n    this.fpu = state[43];\r\n\r\n    this.devices.virtio = state[45];\r\n    this.devices.apic = state[46];\r\n    this.devices.rtc = state[47];\r\n    this.devices.pci = state[48];\r\n    this.devices.dma = state[49];\r\n    this.devices.acpi = state[50];\r\n    this.devices.hpet = state[51];\r\n    this.devices.vga = state[52];\r\n    this.devices.ps2 = state[53];\r\n    this.devices.uart0 = state[54];\r\n    this.devices.fdc = state[55];\r\n    this.devices.cdrom = state[56];\r\n    this.devices.hda = state[57];\r\n    this.devices.pit = state[58];\r\n    this.devices.net = state[59];\r\n    this.devices.pic = state[60];\r\n    this.devices.sb16 = state[61];\r\n\r\n    this.a20_enabled = state[62];\r\n    this.fw_value = state[63];\r\n\r\n    this.devices.ioapic = state[64];\r\n\r\n    this.tss_size_32 = state[65];\r\n\r\n    this.reg_mmxs = state[66];\r\n\r\n    this.devices.uart1 = state[67];\r\n    this.devices.uart2 = state[68];\r\n    this.devices.uart3 = state[69];\r\n\r\n    this.mem16 = new Uint16Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 1);\r\n    this.mem32s = new Int32Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 2);\r\n\r\n\r\n    this.full_clear_tlb();\r\n    // tsc_offset?\r\n\r\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\r\n    this.reg16s = new Int16Array(this.reg32s.buffer);\r\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\r\n    this.reg8s = new Int8Array(this.reg32s.buffer);\r\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\r\n\r\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\r\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\r\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\r\n    this.update_operand_size();\r\n};\r\n\r\n\r\n/**\r\n * @return {number} time in ms until this method should becalled again\r\n */\r\nCPU.prototype.main_run = function()\r\n{\r\n    if(this.in_hlt)\r\n    {\r\n        //if(false)\r\n        //{\r\n        //    var _t = this.hlt_loop();\r\n        //    var t = 0;\r\n        //}\r\n        //else\r\n        //{\r\n            var t = this.hlt_loop();\r\n        //}\r\n\r\n        if(this.in_hlt)\r\n        {\r\n            return t;\r\n        }\r\n    }\r\n\r\n    this.do_run();\r\n\r\n    return 0;\r\n};\r\n\r\nCPU.prototype.exception_cleanup = function(e)\r\n{\r\n    if(e === MAGIC_CPU_EXCEPTION)\r\n    {\r\n        // A legit CPU exception (for instance, a page fault happened)\r\n        // call_interrupt_vector has already been called at this point,\r\n        // so we just need to reset some state\r\n\r\n        this.page_fault = false;\r\n\r\n        // restore state from prefixes\r\n        this.clear_prefixes();\r\n    }\r\n    else\r\n    {\r\n        console.log(e);\r\n        console.log(e.stack);\r\n        //var e = new Error(e.message);\r\n        //Error.captureStackTrace && Error.captureStackTrace(e);\r\n        throw e;\r\n    }\r\n};\r\n\r\nCPU.prototype.reboot_internal = function()\r\n{\r\n    this.reset();\r\n    this.load_bios();\r\n\r\n    throw MAGIC_CPU_EXCEPTION;\r\n};\r\n\r\nCPU.prototype.reset = function()\r\n{\r\n    this.a20_enabled = true;\r\n\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.segment_is_null[i] = 0;\r\n        this.segment_limits[i] = 0;\r\n        //this.segment_infos = new Uint32Array(8);\r\n        this.segment_offsets[i] = 0;\r\n    }\r\n\r\n    this.full_clear_tlb();\r\n\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.reg32s[i] = 0;\r\n        this.sreg[i] = 0;\r\n        this.cr[i] = 0;\r\n        this.dreg[i] = 0;\r\n    }\r\n\r\n    for(let i = 0; i < this.reg_mmxs.length; i++)\r\n    {\r\n        this.reg_mmxs[i] = 0;\r\n    }\r\n\r\n    for(let i = 0; i < this.reg_xmm32s.length; i++)\r\n    {\r\n        this.reg_xmm32s[i] = 0;\r\n    }\r\n    this.mxcsr = 0x1F80;\r\n\r\n    this.protected_mode = false;\r\n\r\n    // http://www.sandpile.org/x86/initial.htm\r\n    this.idtr_size = 0;\r\n    this.idtr_offset = 0;\r\n\r\n    this.gdtr_size = 0;\r\n    this.gdtr_offset = 0;\r\n\r\n    this.page_fault = false;\r\n    this.cr[0] = 1 << 30 | 1 << 29 | 1 << 4;\r\n    this.cr[2] = 0;\r\n    this.cr[3] = 0;\r\n    this.cr[4] = 0;\r\n    this.dreg[6] = 0xFFFF0FF0|0;\r\n    this.dreg[7] = 0x400;\r\n    this.cpl = 0;\r\n    this.paging = false;\r\n    this.page_size_extensions = 0;\r\n    this.is_32 = false;\r\n    this.stack_size_32 = false;\r\n    this.prefixes = 0;\r\n\r\n    this.last_virt_eip = -1;\r\n    this.last_virt_esp = -1;\r\n\r\n    this.update_operand_size();\r\n\r\n    this.timestamp_counter = 0;\r\n    this.previous_ip = 0;\r\n    this.in_hlt = false;\r\n\r\n    this.sysenter_cs = 0;\r\n    this.sysenter_esp = 0;\r\n    this.sysenter_eip = 0;\r\n\r\n    this.flags = flags_default;\r\n    this.flags_changed = 0;\r\n\r\n    this.last_result = 0;\r\n    this.last_add_result = 0;\r\n    this.last_op1 = 0;\r\n    this.last_op2 = 0;\r\n    this.last_op_size = 0;\r\n\r\n    this.tsc_offset = v86.microtick();\r\n\r\n    this.instruction_pointer = 0xFFFF0;\r\n    this.switch_cs_real_mode(0xF000);\r\n\r\n    this.switch_seg(reg_ss, 0x30);\r\n    this.reg16[reg_sp] = 0x100;\r\n\r\n    if(this.devices.virtio)\r\n    {\r\n        this.devices.virtio.reset();\r\n    }\r\n\r\n    this.fw_value = 0;\r\n};\r\n\r\n/** @export */\r\nCPU.prototype.create_memory = function(size)\r\n{\r\n    if(size < 1024 * 1024)\r\n    {\r\n        size = 1024 * 1024;\r\n    }\r\n    else if((size | 0) < 0)\r\n    {\r\n        size = Math.pow(2, 31) - MMAP_BLOCK_SIZE;\r\n    }\r\n\r\n    size = ((size - 1) | (MMAP_BLOCK_SIZE - 1)) + 1 | 0;\r\n    dbg_assert((size | 0) > 0);\r\n    dbg_assert((size & MMAP_BLOCK_SIZE - 1) === 0);\r\n\r\n    this.memory_size = size;\r\n\r\n    var buffer = new ArrayBuffer(size);\r\n\r\n    this.mem8 = new Uint8Array(buffer);\r\n    this.mem16 = new Uint16Array(buffer);\r\n    this.mem32s = new Int32Array(buffer);\r\n};\r\n\r\nCPU.prototype.init = function(settings, device_bus)\r\n{\r\n    this.create_memory(typeof settings.memory_size === \"number\" ?\r\n        settings.memory_size : 1024 * 1024 * 64);\r\n\r\n    this.reset();\r\n\r\n    var io = new IO(this);\r\n    this.io = io;\r\n\r\n    this.bios.main = settings.bios;\r\n    this.bios.vga = settings.vga_bios;\r\n\r\n    this.load_bios();\r\n\r\n    var a20_byte = 0;\r\n\r\n    io.register_read(0xB3, this, function()\r\n    {\r\n        // seabios smm_relocate_and_restore\r\n        dbg_log(\"port 0xB3 read\");\r\n        return 0;\r\n    });\r\n\r\n    io.register_read(0x92, this, function()\r\n    {\r\n        return a20_byte;\r\n    });\r\n\r\n    io.register_write(0x92, this, function(out_byte)\r\n    {\r\n        a20_byte = out_byte;\r\n    });\r\n\r\n    io.register_read(0x511, this, function()\r\n    {\r\n        // bios config port (used by seabios and kvm-unit-test)\r\n        let result = this.fw_value & 0xFF;\r\n        this.fw_value >>>= 8;\r\n        return result;\r\n    });\r\n    io.register_write(0x510, this, undefined, function(value)\r\n    {\r\n        dbg_log(\"bios config port, index=\" + h(value));\r\n\r\n        if(value === FW_CFG_SIGNATURE)\r\n        {\r\n            // We could pretend to be QEMU here to control certain options in\r\n            // seabios, but for now this isn't needed\r\n            this.fw_value = 0xfab0fab0|0;\r\n        }\r\n        else if(value === FW_CFG_RAM_SIZE)\r\n        {\r\n            this.fw_value = this.memory_size;\r\n        }\r\n        else if(value === FW_CFG_NB_CPUS)\r\n        {\r\n            this.fw_value = 1;\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(false, \"Unimplemented fw index: \" + h(value));\r\n            this.fw_value = 0;\r\n        }\r\n    });\r\n\r\n    if(DEBUG)\r\n    {\r\n        // Use by linux for port-IO delay\r\n        // Avoid generating tons of debug messages\r\n        io.register_write(0x80, this, function(out_byte)\r\n        {\r\n        });\r\n    }\r\n\r\n    this.devices = {};\r\n\r\n    // TODO: Make this more configurable\r\n    if(settings.load_devices)\r\n    {\r\n        this.devices.pic = new PIC(this);\r\n        this.devices.pci = new PCI(this);\r\n\r\n        if(ENABLE_ACPI)\r\n        {\r\n            this.devices.ioapic = new IOAPIC(this);\r\n            this.devices.apic = new APIC(this);\r\n            this.devices.acpi = new ACPI(this);\r\n        }\r\n\r\n        this.devices.rtc = new RTC(this);\r\n        this.fill_cmos(this.devices.rtc, settings);\r\n\r\n        this.devices.dma = new DMA(this);\r\n\r\n        if(ENABLE_HPET)\r\n        {\r\n            this.devices.hpet = new HPET(this);\r\n        }\r\n\r\n        this.devices.vga = new VGAScreen(this, device_bus,\r\n                settings.vga_memory_size || 8 * 1024 * 1024);\r\n\r\n        this.fpu = new FPU(this);\r\n\r\n        this.devices.ps2 = new PS2(this, device_bus);\r\n\r\n        this.devices.uart0 = new UART(this, 0x3F8, device_bus);\r\n\r\n        if(settings.uart1)\r\n        {\r\n            this.devices.uart1 = new UART(this, 0x2F8, device_bus);\r\n        }\r\n        if(settings.uart2)\r\n        {\r\n            this.devices.uart2 = new UART(this, 0x3E8, device_bus);\r\n        }\r\n        if(settings.uart3)\r\n        {\r\n            this.devices.uart3 = new UART(this, 0x3E8, device_bus);\r\n        }\r\n\r\n        this.devices.fdc = new FloppyController(this, settings.fda, settings.fdb);\r\n\r\n        var ide_device_count = 0;\r\n\r\n        if(settings.hda)\r\n        {\r\n            this.devices.hda = new IDEDevice(this, settings.hda, settings.hdb, false, ide_device_count++, device_bus);\r\n        }\r\n\r\n        if(settings.cdrom)\r\n        {\r\n            this.devices.cdrom = new IDEDevice(this, settings.cdrom, undefined, true, ide_device_count++, device_bus);\r\n        }\r\n\r\n        this.devices.pit = new PIT(this, device_bus);\r\n\r\n        if(settings.enable_ne2k)\r\n        {\r\n            this.devices.net = new Ne2k(this, device_bus, settings.preserve_mac_from_state_image);\r\n        }\r\n\r\n        if(settings.fs9p)\r\n        {\r\n            this.devices.virtio = new VirtIO(this, device_bus, settings.fs9p);\r\n        }\r\n\r\n        if(true)\r\n        {\r\n            this.devices.sb16 = new SB16(this, device_bus);\r\n        }\r\n    }\r\n\r\n    if(settings.multiboot)\r\n    {\r\n        dbg_assert(settings.multiboot.buffer);\r\n        this.load_multiboot(settings.multiboot.buffer);\r\n    }\r\n\r\n    if(DEBUG)\r\n    {\r\n        this.debug.init();\r\n    }\r\n};\r\n\r\nCPU.prototype.load_multiboot = function(buffer)\r\n{\r\n    // https://www.gnu.org/software/grub/manual/multiboot/multiboot.html\r\n\r\n    dbg_log(\"Trying multiboot from buffer of size \" + buffer.byteLength, LOG_CPU);\r\n\r\n    const MAGIC = 0x1BADB002;\r\n    const ELF_MAGIC = 0x464C457F;\r\n    const MULTIBOOT_HEADER_ADDRESS = 0x10000;\r\n    const MULTIBOOT_SEARCH_BYTES = 8192;\r\n\r\n    if(buffer.byteLength < MULTIBOOT_SEARCH_BYTES)\r\n    {\r\n        var buf32 = new Int32Array(MULTIBOOT_SEARCH_BYTES / 4);\r\n        new Uint8Array(buf32.buffer).set(new Uint8Array(buffer));\r\n    }\r\n    else\r\n    {\r\n        var buf32 = new Int32Array(buffer, 0, MULTIBOOT_SEARCH_BYTES / 4);\r\n    }\r\n\r\n    for(var offset = 0; offset < MULTIBOOT_SEARCH_BYTES; offset += 4)\r\n    {\r\n        if(buf32[offset >> 2] === MAGIC)\r\n        {\r\n            var flags = buf32[offset + 4 >> 2];\r\n            var checksum = buf32[offset + 8 >> 2];\r\n            var total = MAGIC + flags + checksum | 0;\r\n\r\n            if(total)\r\n            {\r\n                dbg_log(\"Multiboot checksum check failed\", LOG_CPU);\r\n                continue;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            continue;\r\n        }\r\n\r\n        dbg_log(\"Multiboot magic found, flags: \" + h(flags >>> 0, 8), LOG_CPU);\r\n        dbg_assert((flags & ~MULTIBOOT_HEADER_ADDRESS) === 0, \"TODO\");\r\n\r\n        this.reg32s[reg_eax] = 0x2BADB002;\r\n\r\n        let multiboot_info_addr = 0x7C00;\r\n        this.reg32s[reg_ebx] = multiboot_info_addr;\r\n        this.write32(multiboot_info_addr, 0);\r\n\r\n        this.cr[0] = 1;\r\n        this.protected_mode = true;\r\n        this.flags = flags_default;\r\n        this.update_cs_size(true);\r\n        this.stack_size_32 = true;\r\n\r\n        for(var i = 0; i < 6; i++)\r\n        {\r\n            this.segment_is_null[i] = 0;\r\n            this.segment_offsets[i] = 0;\r\n            this.segment_limits[i] = 0xFFFFFFFF;\r\n\r\n            // Value doesn't matter, OS isn't allowed to reload without setting\r\n            // up a proper GDT\r\n            this.sreg[i] = 0xB002;\r\n        }\r\n\r\n        if(flags & MULTIBOOT_HEADER_ADDRESS)\r\n        {\r\n            dbg_log(\"Multiboot specifies its own address table\", LOG_CPU);\r\n\r\n            var header_addr = buf32[offset + 12 >> 2];\r\n            var load_addr = buf32[offset + 16 >> 2];\r\n            var load_end_addr = buf32[offset + 20 >> 2];\r\n            var bss_end_addr = buf32[offset + 24 >> 2];\r\n            var entry_addr = buf32[offset + 28 >> 2];\r\n\r\n            dbg_log(\"header=\" + h(header_addr, 8) +\r\n                    \" load=\" + h(load_addr, 8) +\r\n                    \" load_end=\" + h(load_end_addr, 8) +\r\n                    \" bss_end=\" + h(bss_end_addr, 8) +\r\n                    \" entry=\" + h(entry_addr, 8));\r\n\r\n            dbg_assert(load_addr <= header_addr);\r\n\r\n            var file_start = offset - (header_addr - load_addr);\r\n\r\n            if(load_end_addr === 0)\r\n            {\r\n                var length = undefined;\r\n            }\r\n            else\r\n            {\r\n                dbg_assert(load_end_addr >= load_addr);\r\n                var length = load_end_addr - load_addr;\r\n            }\r\n\r\n            let blob = new Uint8Array(buffer, file_start, length);\r\n            this.write_blob(blob, load_addr);\r\n\r\n            this.instruction_pointer = this.get_seg(reg_cs) + entry_addr | 0;\r\n        }\r\n        else if(buf32[0] === ELF_MAGIC)\r\n        {\r\n            dbg_log(\"Multiboot image is in elf format\", LOG_CPU);\r\n\r\n            let elf = read_elf(buffer);\r\n\r\n            this.instruction_pointer = this.get_seg(reg_cs) + elf.header.entry | 0;\r\n\r\n            for(let program of elf.program_headers)\r\n            {\r\n                if(program.type === 0)\r\n                {\r\n                    // null\r\n                }\r\n                else if(program.type === 1)\r\n                {\r\n                    // load\r\n\r\n                    // Since multiboot specifies that paging is disabled,\r\n                    // virtual and physical address must be equal\r\n                    dbg_assert(program.paddr === program.vaddr);\r\n                    dbg_assert(program.filesz <= program.memsz);\r\n\r\n                    let blob = new Uint8Array(buffer, program.offset, program.filesz);\r\n                    this.write_blob(blob, program.paddr);\r\n                }\r\n                else if(program.type === 4 ||\r\n                        program.type === 0x6474e550 ||\r\n                        program.type === 0x6474e551)\r\n                {\r\n                    // ignore for now\r\n                }\r\n                else\r\n                {\r\n                    dbg_assert(false, \"unimplemented elf section type\");\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(false, \"Not a bootable multiboot format\");\r\n        }\r\n\r\n        // only for kvm-unit-test\r\n        this.io.register_write_consecutive(0xF4, this,\r\n            function(value)\r\n            {\r\n                console.log(\"Test exited with code \" + h(value, 2));\r\n                throw \"HALT\";\r\n            },\r\n            function() {},\r\n            function() {},\r\n            function() {});\r\n\r\n        // only for kvm-unit-test\r\n        for(let i = 0xE; i <= 0xF; i++)\r\n        {\r\n            this.io.register_write(0x2000 + i, this,\r\n                function(value)\r\n                {\r\n                    dbg_log(\"kvm-unit-test: Set irq \" + h(i) + \" to \" + h(value, 2));\r\n                    if(value)\r\n                    {\r\n                        this.device_raise_irq(i);\r\n                    }\r\n                    else\r\n                    {\r\n                        this.device_lower_irq(i);\r\n                    }\r\n                });\r\n        }\r\n\r\n        dbg_log(\"Starting multiboot kernel at:\", LOG_CPU);\r\n        this.debug.dump_state();\r\n        this.debug.dump_regs();\r\n\r\n        break;\r\n    }\r\n};\r\n\r\nCPU.prototype.fill_cmos = function(rtc, settings)\r\n{\r\n    var boot_order = settings.boot_order || 0x213;\r\n\r\n    // Used by seabios to determine the boot order\r\n    //   Nibble\r\n    //   1: FloppyPrio\r\n    //   2: HDPrio\r\n    //   3: CDPrio\r\n    //   4: BEVPrio\r\n    // bootflag 1, high nibble, lowest priority\r\n    // Low nibble: Disable floppy signature check (1)\r\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG1 , 1 | boot_order >> 4 & 0xF0);\r\n\r\n    // bootflag 2, both nibbles, high and middle priority\r\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG2, boot_order & 0xFF);\r\n\r\n    // 640k or less if less memory is used\r\n    rtc.cmos_write(CMOS_MEM_BASE_LOW, 640 & 0xFF);\r\n    rtc.cmos_write(CMOS_MEM_BASE_HIGH, 640 >> 8);\r\n\r\n    var memory_above_1m = 0; // in k\r\n    if(this.memory_size >= 1024 * 1024)\r\n    {\r\n        memory_above_1m = (this.memory_size - 1024 * 1024) >> 10;\r\n        memory_above_1m = Math.min(memory_above_1m, 0xFFFF);\r\n    }\r\n\r\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_LOW, memory_above_1m & 0xFF);\r\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_HIGH, memory_above_1m >> 8 & 0xFF);\r\n    rtc.cmos_write(CMOS_MEM_EXTMEM_LOW, memory_above_1m & 0xFF);\r\n    rtc.cmos_write(CMOS_MEM_EXTMEM_HIGH, memory_above_1m >> 8 & 0xFF);\r\n\r\n    var memory_above_16m = 0; // in 64k blocks\r\n    if(this.memory_size >= 16 * 1024 * 1024)\r\n    {\r\n        memory_above_16m = (this.memory_size - 16 * 1024 * 1024) >> 16;\r\n        memory_above_16m = Math.min(memory_above_16m, 0xFFFF);\r\n    }\r\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_LOW, memory_above_16m & 0xFF);\r\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_HIGH, memory_above_16m >> 8 & 0xFF);\r\n\r\n    // memory above 4G (not supported by this emulator)\r\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_LOW, 0);\r\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_MID, 0);\r\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_HIGH, 0);\r\n\r\n    rtc.cmos_write(CMOS_EQUIPMENT_INFO, 0x2F);\r\n\r\n    rtc.cmos_write(CMOS_BIOS_SMP_COUNT, 0);\r\n\r\n    // Used by bochs BIOS to skip the boot menu delay.\r\n    if (settings.fastboot) rtc.cmos_write(0x3f, 0x01);\r\n};\r\n\r\nCPU.prototype.load_bios = function()\r\n{\r\n    var bios = this.bios.main;\r\n    var vga_bios = this.bios.vga;\r\n\r\n    if(!bios)\r\n    {\r\n        dbg_log(\"Warning: No BIOS\");\r\n        return;\r\n    }\r\n\r\n    // load bios\r\n    var data = new Uint8Array(bios),\r\n        start = 0x100000 - bios.byteLength;\r\n\r\n    this.write_blob(data, start);\r\n\r\n    if(vga_bios)\r\n    {\r\n        // load vga bios\r\n        var vga_bios8 = new Uint8Array(vga_bios);\r\n\r\n        // older versions of seabios\r\n        this.write_blob(vga_bios8, 0xC0000);\r\n\r\n        // newer versions of seabios (needs to match pci rom address, see vga.js)\r\n        this.io.mmap_register(0xFEB00000, 0x100000,\r\n            function(addr)\r\n            {\r\n                addr = (addr - 0xFEB00000) | 0;\r\n                if(addr < vga_bios8.length)\r\n                {\r\n                    return vga_bios8[addr];\r\n                }\r\n                else\r\n                {\r\n                    return 0;\r\n                }\r\n            },\r\n            function(addr, value)\r\n            {\r\n                dbg_assert(false, \"Unexpected write to VGA rom\");\r\n            });\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"Warning: No VGA BIOS\");\r\n    }\r\n\r\n    // seabios expects the bios to be mapped to 0xFFF00000 also\r\n    this.io.mmap_register(0xFFF00000, 0x100000,\r\n        function(addr)\r\n        {\r\n            addr &= 0xFFFFF;\r\n            return this.mem8[addr];\r\n        }.bind(this),\r\n        function(addr, value)\r\n        {\r\n            addr &= 0xFFFFF;\r\n            this.mem8[addr] = value;\r\n        }.bind(this));\r\n};\r\n\r\nCPU.prototype.do_run = function()\r\n{\r\n    /** @type {number} */\r\n    var start = v86.microtick();\r\n\r\n    /** @type {number} */\r\n    var now = start;\r\n\r\n    // outer loop:\r\n    // runs cycles + timers\r\n    for(; now - start < TIME_PER_FRAME;)\r\n    {\r\n        this.run_hardware_timers(now);\r\n        this.handle_irqs();\r\n\r\n        this.do_many_cycles();\r\n\r\n        if(this.in_hlt)\r\n        {\r\n            return;\r\n        }\r\n\r\n        now = v86.microtick();\r\n    }\r\n};\r\n\r\nCPU.prototype.do_many_cycles = function()\r\n{\r\n    try {\r\n        this.do_many_cycles_unsafe();\r\n    }\r\n    catch(e)\r\n    {\r\n        this.exception_cleanup(e);\r\n    }\r\n};\r\n\r\nCPU.prototype.do_many_cycles_unsafe = function()\r\n{\r\n    // inner loop:\r\n    // runs only cycles\r\n    for(var k = LOOP_COUNTER; k--;)\r\n    {\r\n        this.cycle_internal();\r\n    }\r\n};\r\n\r\n/** @const */\r\nvar PROFILING = false;\r\n\r\nif(PROFILING)\r\n{\r\n    var instruction_total = new Float64Array(256);\r\n    var instruction_count = new Float64Array(256);\r\n\r\n    window[\"print_profiling\"] = function print_profiling()\r\n    {\r\n        var prof_instructions = [];\r\n        for(var i = 0; i < 256; i++) prof_instructions[i] = {\r\n            n: h(i, 2),\r\n            total: instruction_total[i],\r\n            count: instruction_count[i],\r\n            per: (instruction_total[i] / instruction_count[i]) || 0,\r\n        };\r\n\r\n        console.log(\"count:\");\r\n        console.table(prof_instructions.sort((p0, p1) => p1.count - p0.count));\r\n\r\n        console.log(\"time:\");\r\n        console.table(prof_instructions.sort((p0, p1) => p1.total - p0.total));\r\n\r\n        console.log(\"time/count:\");\r\n        console.table(prof_instructions.sort((p0, p1) => p1.per - p0.per));\r\n    };\r\n}\r\n\r\n/**\r\n * execute a single instruction cycle on the cpu\r\n * this includes reading all prefixes and the whole instruction\r\n */\r\nCPU.prototype.cycle_internal = function()\r\n{\r\n    this.previous_ip = this.instruction_pointer;\r\n\r\n    this.timestamp_counter++;\r\n\r\n    if(PROFILING)\r\n    {\r\n        var start = performance.now();\r\n    }\r\n\r\n    var opcode = this.read_imm8();\r\n    //this.translate_address_read(this.instruction_pointer + 15|0)\r\n\r\n    if(DEBUG)\r\n    {\r\n        this.debug.logop(this.instruction_pointer - 1 >>> 0, opcode);\r\n    }\r\n\r\n    // call the instruction\r\n    this.table[opcode](this);\r\n\r\n    if(PROFILING)\r\n    {\r\n        var end = performance.now();\r\n        instruction_total[opcode] += end - start;\r\n        instruction_count[opcode]++;\r\n    }\r\n\r\n    if(this.flags & flag_trap)\r\n    {\r\n        // TODO\r\n        dbg_log(\"Trap flag: Ignored\", LOG_CPU);\r\n    }\r\n};\r\n\r\n/** @export */\r\nCPU.prototype.cycle = function()\r\n{\r\n    try\r\n    {\r\n        this.cycle_internal();\r\n    }\r\n    catch(e)\r\n    {\r\n        this.exception_cleanup(e);\r\n    }\r\n};\r\n\r\nCPU.prototype.segment_prefix_op = function(sreg)\r\n{\r\n    dbg_assert(sreg <= 5);\r\n    this.prefixes |= sreg + 1;\r\n    this.run_prefix_instruction();\r\n    this.prefixes = 0;\r\n};\r\n\r\nCPU.prototype.run_prefix_instruction = function()\r\n{\r\n    if(this.is_osize_32())\r\n    {\r\n        this.table32[this.read_imm8()](this);\r\n    }\r\n    else\r\n    {\r\n        this.table16[this.read_imm8()](this);\r\n    }\r\n};\r\n\r\nCPU.prototype.hlt_loop = function()\r\n{\r\n    dbg_assert(this.flags & flag_interrupt);\r\n    //dbg_log(\"In HLT loop\", LOG_CPU);\r\n\r\n    this.run_hardware_timers(v86.microtick());\r\n    this.handle_irqs();\r\n\r\n    return 0;\r\n};\r\n\r\nCPU.prototype.run_hardware_timers = function(now)\r\n{\r\n    if(ENABLE_HPET)\r\n    {\r\n        var pit_time = this.devices.pit.timer(now, this.devices.hpet.legacy_mode);\r\n        var rtc_time = this.devices.rtc.timer(now, this.devices.hpet.legacy_mode);\r\n        this.devices.hpet.timer(now);\r\n    }\r\n    else\r\n    {\r\n        var pit_time = this.devices.pit.timer(now, false);\r\n        var rtc_time = this.devices.rtc.timer(now, false);\r\n    }\r\n\r\n    if(ENABLE_ACPI)\r\n    {\r\n        this.devices.acpi.timer(now);\r\n        this.devices.apic.timer(now);\r\n    }\r\n};\r\n\r\nCPU.prototype.clear_prefixes = function()\r\n{\r\n    this.prefixes = 0;\r\n};\r\n\r\nCPU.prototype.set_cr0 = function(cr0)\r\n{\r\n    //dbg_log(\"cr0 = \" + h(this.cr[0] >>> 0), LOG_CPU);\r\n\r\n    if((cr0 & (CR0_PE | CR0_PG)) === CR0_PG)\r\n    {\r\n        // cannot load PG without PE\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    this.cr[0] = cr0;\r\n\r\n    if(!this.fpu)\r\n    {\r\n        // if there's no FPU, keep emulation set\r\n        this.cr[0] |= CR0_EM;\r\n    }\r\n    this.cr[0] |= CR0_ET;\r\n\r\n    var new_paging = (this.cr[0] & CR0_PG) === CR0_PG;\r\n\r\n    dbg_assert(typeof this.paging === \"boolean\");\r\n    if(new_paging !== this.paging)\r\n    {\r\n        this.paging = new_paging;\r\n        this.full_clear_tlb();\r\n    }\r\n\r\n    this.protected_mode = (this.cr[0] & CR0_PE) === CR0_PE;\r\n};\r\n\r\nCPU.prototype.set_cr4 = function(cr4)\r\n{\r\n    if(cr4 & (1 << 11 | 1 << 12 | 1 << 15 | 1 << 16 | 1 << 19 | 0xFFC00000))\r\n    {\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if((this.cr[4] ^ cr4) & CR4_PGE)\r\n    {\r\n        if(cr4 & CR4_PGE)\r\n        {\r\n            // The PGE bit has been enabled. The global TLB is\r\n            // still empty, so we only have to copy it over\r\n            this.clear_tlb();\r\n        }\r\n        else\r\n        {\r\n            // Clear the global TLB\r\n            this.full_clear_tlb();\r\n        }\r\n    }\r\n\r\n    this.cr[4] = cr4;\r\n    this.page_size_extensions = (cr4 & CR4_PSE) ? PSE_ENABLED : 0;\r\n\r\n    if(cr4 & CR4_PAE)\r\n    {\r\n        throw this.debug.unimpl(\"PAE\");\r\n    }\r\n\r\n    if(cr4 & 0xFFFFF900)\r\n    {\r\n        dbg_assert(false, \"Unimplemented CR4 bits: \" + h(cr4));\r\n        this.trigger_ud();\r\n    }\r\n\r\n    dbg_log(\"cr4=\" + h(cr4 >>> 0), LOG_CPU);\r\n};\r\n\r\nCPU.prototype.cpl_changed = function()\r\n{\r\n    this.last_virt_eip = -1;\r\n    this.last_virt_esp = -1;\r\n};\r\n\r\nCPU.prototype.read_imm8 = function()\r\n{\r\n    if((this.instruction_pointer & ~0xFFF) ^ this.last_virt_eip)\r\n    {\r\n        this.eip_phys = this.translate_address_read(this.instruction_pointer) ^ this.instruction_pointer;\r\n        this.last_virt_eip = this.instruction_pointer & ~0xFFF;\r\n    }\r\n\r\n    var data8 = this.read8(this.eip_phys ^ this.instruction_pointer);\r\n    this.instruction_pointer = this.instruction_pointer + 1 | 0;\r\n\r\n    return data8;\r\n};\r\n\r\nCPU.prototype.read_imm8s = function()\r\n{\r\n    return this.read_imm8() << 24 >> 24;\r\n};\r\n\r\nCPU.prototype.read_imm16 = function()\r\n{\r\n    // Two checks in one comparison:\r\n    //    1. Did the high 20 bits of eip change\r\n    // or 2. Are the low 12 bits of eip 0xFFF (and this read crosses a page boundary)\r\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFE)\r\n    {\r\n        return this.read_imm8() | this.read_imm8() << 8;\r\n    }\r\n\r\n    var data16 = this.read16(this.eip_phys ^ this.instruction_pointer);\r\n    this.instruction_pointer = this.instruction_pointer + 2 | 0;\r\n\r\n    return data16;\r\n};\r\n\r\nCPU.prototype.read_imm32s = function()\r\n{\r\n    // Analogue to the above comment\r\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFC)\r\n    {\r\n        return this.read_imm16() | this.read_imm16() << 16;\r\n    }\r\n\r\n    var data32 = this.read32s(this.eip_phys ^ this.instruction_pointer);\r\n    this.instruction_pointer = this.instruction_pointer + 4 | 0;\r\n\r\n    return data32;\r\n};\r\n\r\n/*\r\n * Create an internal data unit to represent 64 bits of data\r\n */\r\nCPU.prototype.create_atom64s = function(low, high)\r\n{\r\n    let data = new Int32Array(2);\r\n    data[0] = low;\r\n    data[1] = high;\r\n    return data;\r\n};\r\n\r\nCPU.prototype.create_atom128s = function(d0, d1, d2, d3)\r\n{\r\n    let data = new Int32Array(4);\r\n    data[0] = d0;\r\n    data[1] = d1;\r\n    data[2] = d2;\r\n    data[3] = d3;\r\n    return data;\r\n}\r\n\r\nCPU.prototype.read_modrm_byte = function()\r\n{\r\n    this.modrm_byte = this.read_imm8();\r\n};\r\n\r\nCPU.prototype.read_op0F = CPU.prototype.read_imm8;\r\nCPU.prototype.read_sib = CPU.prototype.read_imm8;\r\nCPU.prototype.read_op8 = CPU.prototype.read_imm8;\r\nCPU.prototype.read_op8s = CPU.prototype.read_imm8s;\r\nCPU.prototype.read_op16 = CPU.prototype.read_imm16;\r\nCPU.prototype.read_op32s = CPU.prototype.read_imm32s;\r\nCPU.prototype.read_disp8 = CPU.prototype.read_imm8;\r\nCPU.prototype.read_disp8s = CPU.prototype.read_imm8s;\r\nCPU.prototype.read_disp16 = CPU.prototype.read_imm16;\r\nCPU.prototype.read_disp32s = CPU.prototype.read_imm32s;\r\n\r\nCPU.prototype.init2 = function () {};\r\nCPU.prototype.branch_taken = function () {};\r\nCPU.prototype.branch_not_taken = function () {};\r\nCPU.prototype.diverged = function () {};\r\n\r\nCPU.prototype.modrm_resolve = function(modrm_byte)\r\n{\r\n    dbg_assert(modrm_byte < 0xC0);\r\n\r\n    return (this.is_asize_32() ? this.modrm_table32 : this.modrm_table16)[modrm_byte](this);\r\n};\r\n\r\nCPU.prototype.sib_resolve = function(mod)\r\n{\r\n    return this.sib_table[this.read_sib()](this, mod);\r\n};\r\n\r\nCPU.prototype.clear_instruction_cache = function() {};\r\n\r\n// read word from a page boundary, given 2 physical addresses\r\nCPU.prototype.virt_boundary_read16 = function(low, high)\r\n{\r\n    dbg_assert((low & 0xFFF) === 0xFFF);\r\n    dbg_assert((high & 0xFFF) === 0);\r\n\r\n    return this.read8(low) | this.read8(high) << 8;\r\n};\r\n\r\n// read doubleword from a page boundary, given 2 addresses\r\nCPU.prototype.virt_boundary_read32s = function(low, high)\r\n{\r\n    dbg_assert((low & 0xFFF) >= 0xFFD);\r\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\r\n\r\n    var mid;\r\n\r\n    if(low & 1)\r\n    {\r\n        if(low & 2)\r\n        {\r\n            // 0xFFF\r\n            mid = this.read_aligned16(high - 2 >> 1);\r\n        }\r\n        else\r\n        {\r\n            // 0xFFD\r\n            mid = this.read_aligned16(low + 1 >> 1);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // 0xFFE\r\n        mid = this.virt_boundary_read16(low + 1 | 0, high - 1 | 0);\r\n    }\r\n\r\n    return this.read8(low) | mid << 8 | this.read8(high) << 24;\r\n};\r\n\r\nCPU.prototype.virt_boundary_write16 = function(low, high, value)\r\n{\r\n    dbg_assert((low & 0xFFF) === 0xFFF);\r\n    dbg_assert((high & 0xFFF) === 0);\r\n\r\n    this.write8(low, value);\r\n    this.write8(high, value >> 8);\r\n};\r\n\r\nCPU.prototype.virt_boundary_write32 = function(low, high, value)\r\n{\r\n    dbg_assert((low & 0xFFF) >= 0xFFD);\r\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\r\n\r\n    this.write8(low, value);\r\n    this.write8(high, value >> 24);\r\n\r\n    if(low & 1)\r\n    {\r\n        if(low & 2)\r\n        {\r\n            // 0xFFF\r\n            this.write8(high - 2, value >> 8);\r\n            this.write8(high - 1, value >> 16);\r\n        }\r\n        else\r\n        {\r\n            // 0xFFD\r\n            this.write8(low + 1 | 0, value >> 8);\r\n            this.write8(low + 2 | 0, value >> 16);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // 0xFFE\r\n        this.write8(low + 1 | 0, value >> 8);\r\n        this.write8(high - 1, value >> 16);\r\n    }\r\n};\r\n\r\n// safe_read, safe_write\r\n// read or write byte, word or dword to the given *virtual* address,\r\n// and be safe on page boundaries\r\n\r\nCPU.prototype.safe_read8 = function(addr)\r\n{\r\n    dbg_assert(addr < 0x80000000);\r\n    return this.read8(this.translate_address_read(addr));\r\n};\r\n\r\nCPU.prototype.safe_read16 = function(addr)\r\n{\r\n    if(this.paging && (addr & 0xFFF) === 0xFFF)\r\n    {\r\n        return this.safe_read8(addr) | this.safe_read8(addr + 1 | 0) << 8;\r\n    }\r\n    else\r\n    {\r\n        return this.read16(this.translate_address_read(addr));\r\n    }\r\n};\r\n\r\nCPU.prototype.safe_read32s = function(addr)\r\n{\r\n    if(this.paging && (addr & 0xFFF) >= 0xFFD)\r\n    {\r\n        return this.safe_read16(addr) | this.safe_read16(addr + 2 | 0) << 16;\r\n    }\r\n    else\r\n    {\r\n        return this.read32s(this.translate_address_read(addr));\r\n    }\r\n};\r\n\r\nCPU.prototype.safe_read64s = function(addr)\r\n{\r\n    let data = this.create_atom64s(0, 0);\r\n    if(this.paging && (addr & 0xFFF) >= 0xFF9)\r\n    {\r\n        data[0] = this.safe_read32s(addr);\r\n        data[1] = this.safe_read32s(addr + 4 | 0);\r\n    }\r\n    else\r\n    {\r\n        data[0] = this.read32s(this.translate_address_read(addr));\r\n        data[1] = this.read32s(this.translate_address_read(addr + 4 | 0));\r\n    }\r\n    return data;\r\n};\r\n\r\nCPU.prototype.safe_read128s_aligned = function(addr)\r\n{\r\n    dbg_assert((addr & 0xF) === 0);\r\n    let phys = this.translate_address_read(addr);\r\n    return this.create_atom128s(\r\n        this.read32s(phys),\r\n        this.read32s(phys + 4 | 0),\r\n        this.read32s(phys + 8 | 0),\r\n        this.read32s(phys + 12 | 0)\r\n    );\r\n};\r\n\r\nCPU.prototype.safe_read128s_unaligned = function(addr)\r\n{\r\n    return this.create_atom128s(\r\n        this.safe_read32s(addr),\r\n        this.safe_read32s(addr + 4 | 0),\r\n        this.safe_read32s(addr + 8 | 0),\r\n        this.safe_read32s(addr + 12 | 0)\r\n    );\r\n};\r\n\r\nCPU.prototype.safe_write8 = function(addr, value)\r\n{\r\n    dbg_assert(addr < 0x80000000);\r\n    this.write8(this.translate_address_write(addr), value);\r\n};\r\n\r\nCPU.prototype.safe_write16 = function(addr, value)\r\n{\r\n    var phys_low = this.translate_address_write(addr);\r\n\r\n    if((addr & 0xFFF) === 0xFFF)\r\n    {\r\n        this.virt_boundary_write16(phys_low, this.translate_address_write(addr + 1 | 0), value);\r\n    }\r\n    else\r\n    {\r\n        this.write16(phys_low, value);\r\n    }\r\n};\r\n\r\nCPU.prototype.safe_write32 = function(addr, value)\r\n{\r\n    var phys_low = this.translate_address_write(addr);\r\n\r\n    if((addr & 0xFFF) >= 0xFFD)\r\n    {\r\n        // XXX\r\n        this.virt_boundary_write32(phys_low, this.translate_address_write(addr + 3 & ~3) | (addr + 3) & 3, value);\r\n    }\r\n    else\r\n    {\r\n        this.write32(phys_low, value);\r\n    }\r\n};\r\n\r\nCPU.prototype.safe_write64 = function(addr, low, high)\r\n{\r\n    this.writable_or_pagefault(addr, 8);\r\n    this.safe_write32(addr, low);\r\n    this.safe_write32(addr + 4 | 0, high);\r\n};\r\n\r\nCPU.prototype.safe_write128 = function(addr, d0, d1, d2, d3)\r\n{\r\n    this.writable_or_pagefault(addr, 16);\r\n    this.safe_write32(addr, d0);\r\n    this.safe_write32(addr + 4 | 0, d1);\r\n    this.safe_write32(addr + 8 | 0, d2);\r\n    this.safe_write32(addr + 12 | 0, d3);\r\n};\r\n\r\n\r\n// read 2 or 4 byte from ip, depending on address size attribute\r\nCPU.prototype.read_moffs = function()\r\n{\r\n    if(this.is_asize_32())\r\n    {\r\n        return this.get_seg_prefix(reg_ds) + this.read_op32s() | 0;\r\n    }\r\n    else\r\n    {\r\n        return this.get_seg_prefix(reg_ds) + this.read_op16() | 0;\r\n    }\r\n};\r\n\r\nCPU.prototype.getiopl = function()\r\n{\r\n    return this.flags >> 12 & 3;\r\n};\r\n\r\nCPU.prototype.vm86_mode = function()\r\n{\r\n    return !!(this.flags & flag_vm);\r\n};\r\n\r\nCPU.prototype.get_eflags = function()\r\n{\r\n    return (this.flags & ~flags_all) | !!this.getcf() | !!this.getpf() << 2 | !!this.getaf() << 4 |\r\n                                  !!this.getzf() << 6 | !!this.getsf() << 7 | !!this.getof() << 11;\r\n};\r\n\r\n/**\r\n * Update the flags register depending on iopl and cpl\r\n */\r\nCPU.prototype.update_eflags = function(new_flags)\r\n{\r\n    var dont_update = flag_rf | flag_vm | flag_vip | flag_vif,\r\n        clear = ~flag_vip & ~flag_vif & flags_mask;\r\n\r\n    if(this.flags & flag_vm)\r\n    {\r\n        // other case needs to be handled in popf or iret\r\n        dbg_assert(this.getiopl() === 3);\r\n\r\n        dont_update |= flag_iopl;\r\n\r\n        // don't clear vip or vif\r\n        clear |= flag_vip | flag_vif;\r\n    }\r\n    else\r\n    {\r\n        if(!this.protected_mode) dbg_assert(this.cpl === 0);\r\n\r\n        if(this.cpl)\r\n        {\r\n            // cpl > 0\r\n            // cannot update iopl\r\n            dont_update |= flag_iopl;\r\n\r\n            if(this.cpl > this.getiopl())\r\n            {\r\n                // cpl > iopl\r\n                // cannot update interrupt flag\r\n                dont_update |= flag_interrupt;\r\n            }\r\n        }\r\n    }\r\n\r\n    this.flags = (new_flags ^ ((this.flags ^ new_flags) & dont_update)) & clear | flags_default;\r\n\r\n    this.flags_changed = 0;\r\n};\r\n\r\nCPU.prototype.get_stack_reg = function()\r\n{\r\n    if(this.stack_size_32)\r\n    {\r\n        return this.reg32s[reg_esp];\r\n    }\r\n    else\r\n    {\r\n        return this.reg16[reg_sp];\r\n    }\r\n};\r\n\r\nCPU.prototype.set_stack_reg = function(value)\r\n{\r\n    if(this.stack_size_32)\r\n    {\r\n        this.reg32s[reg_esp] = value;\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg_sp] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.adjust_stack_reg = function(value)\r\n{\r\n    if(this.stack_size_32)\r\n    {\r\n        this.reg32s[reg_esp] += value;\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg_sp] += value;\r\n    }\r\n};\r\n\r\nCPU.prototype.get_stack_pointer = function(mod)\r\n{\r\n    if(this.stack_size_32)\r\n    {\r\n        return this.get_seg(reg_ss) + this.reg32s[reg_esp] + mod | 0;\r\n    }\r\n    else\r\n    {\r\n        return this.get_seg(reg_ss) + (this.reg16[reg_sp] + mod & 0xFFFF) | 0;\r\n    }\r\n};\r\n\r\n/*\r\n * returns the \"real\" instruction pointer,\r\n * without segment offset\r\n */\r\nCPU.prototype.get_real_eip = function()\r\n{\r\n    return this.instruction_pointer - this.get_seg(reg_cs) | 0;\r\n};\r\n\r\nCPU.prototype.call_interrupt_vector = function(interrupt_nr, is_software_int, error_code)\r\n{\r\n    //dbg_log(\"int \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\", LOG_CPU);\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int \" + h(interrupt_nr) + \" start\" +\r\n        \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\");\r\n    CPU_LOG_VERBOSE && this.debug.dump_regs();\r\n\r\n    this.debug.debug_interrupt(interrupt_nr);\r\n\r\n    dbg_assert(error_code === false || typeof error_code === \"number\");\r\n\r\n    // we have to leave hlt_loop at some point, this is a\r\n    // good place to do it\r\n    //this.in_hlt && dbg_log(\"Leave HLT loop\", LOG_CPU);\r\n    this.in_hlt = false;\r\n\r\n    if(this.protected_mode)\r\n    {\r\n        if(this.vm86_mode() && (this.cr[4] & CR4_VME))\r\n        {\r\n            throw this.debug.unimpl(\"VME\");\r\n        }\r\n\r\n        if(this.vm86_mode() && is_software_int && this.getiopl() < 3)\r\n        {\r\n            dbg_log(\"call_interrupt_vector #GP. vm86 && software int && iopl < 3\", LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(0);\r\n        }\r\n\r\n        if((interrupt_nr << 3 | 7) > this.idtr_size)\r\n        {\r\n            dbg_log(interrupt_nr, LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n\r\n        var addr = this.idtr_offset + (interrupt_nr << 3) | 0;\r\n        dbg_assert((addr & 0xFFF) < 0xFF8);\r\n\r\n        if(this.paging)\r\n        {\r\n            addr = this.translate_address_system_read(addr);\r\n        }\r\n\r\n        var base = this.read16(addr) | this.read16(addr + 6 | 0) << 16;\r\n        var selector = this.read16(addr + 2 | 0);\r\n        var access = this.read8(addr + 5 | 0);\r\n        var dpl = access >> 5 & 3;\r\n        var type = access & 31;\r\n\r\n        if((access & 0x80) === 0)\r\n        {\r\n            // present bit not set\r\n            // throw this.debug.unimpl(\"#NP handler\");\r\n\t\t\treturn;\r\n        }\r\n\r\n        if(is_software_int && dpl < this.cpl)\r\n        {\r\n            dbg_log(\"#gp software interrupt (\" + h(interrupt_nr, 2) + \") and dpl < cpl\", LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(interrupt_nr << 3 | 2);\r\n        }\r\n\r\n        if(type === 5)\r\n        {\r\n            // task gate\r\n            dbg_log(\"interrupt to task gate: int=\" + h(interrupt_nr, 2) + \" sel=\" + h(selector, 4) + \" dpl=\" + dpl, LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n\r\n            this.do_task_switch(selector, error_code);\r\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\r\n            return;\r\n        }\r\n\r\n        if((type & ~1 & ~8) !== 6)\r\n        {\r\n            // invalid type\r\n            dbg_trace(LOG_CPU);\r\n            dbg_log(\"invalid type: \" + h(type));\r\n            dbg_log(h(addr) + \" \" + h(base >>> 0) + \" \" + h(selector));\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n\r\n        var is_trap = (type & 1) === 1;\r\n        var is_16 = (type & 8) === 0;\r\n\r\n        var info = this.lookup_segment_selector(selector);\r\n\r\n        dbg_assert((base >>> 0) <= info.effective_limit);\r\n        dbg_assert(info.is_valid);\r\n\r\n        if(info.is_null)\r\n        {\r\n            dbg_log(\"is null\");\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n        if(!info.is_executable || info.dpl > this.cpl)\r\n        {\r\n            dbg_log(\"not exec\");\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n        if(!info.is_present)\r\n        {\r\n            // kvm-unit-test\r\n            dbg_log(\"not present\");\r\n            this.trigger_np(interrupt_nr << 3 | 2);\r\n        }\r\n\r\n        var old_flags = this.get_eflags();\r\n\r\n        //dbg_log(\"interrupt \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware) from cpl=\" + this.cpl + \" vm=\" + (this.flags & flag_vm) + \" cs:eip=\" + h(this.sreg[reg_cs], 4) + \":\" + h(this.get_real_eip(), 8) + \" to cpl=\"\r\n\r\n        if(!info.dc_bit && info.dpl < this.cpl)\r\n        {\r\n            // inter privilege level interrupt\r\n            // interrupt from vm86 mode\r\n\r\n            //dbg_log(\"Inter privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) + \" trap=\" + is_trap + \" 16bit=\" + is_16, LOG_CPU);\r\n            //this.debug.dump_regs();\r\n            var tss_stack_addr = this.get_tss_stack_addr(info.dpl);\r\n\r\n            if(this.tss_size_32)\r\n            {\r\n                var new_esp = this.read32s(tss_stack_addr);\r\n                var new_ss = this.read16(tss_stack_addr + 4 | 0);\r\n            }\r\n            else\r\n            {\r\n                var new_esp = this.read16(tss_stack_addr);\r\n                var new_ss = this.read16(tss_stack_addr + 2 | 0);\r\n            }\r\n            var ss_info = this.lookup_segment_selector(new_ss);\r\n\r\n            // Disabled: Incorrect handling of direction bit\r\n            // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\r\n            //if(!((new_esp >>> 0) <= ss_info.effective_limit))\r\n            //    debugger;\r\n            //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\r\n            dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\r\n\r\n            if(ss_info.is_null)\r\n            {\r\n                throw this.debug.unimpl(\"#TS handler\");\r\n            }\r\n            if(ss_info.rpl !== info.dpl) // xxx: 0 in v86 mode\r\n            {\r\n                throw this.debug.unimpl(\"#TS handler\");\r\n            }\r\n            if(ss_info.dpl !== info.dpl || !ss_info.rw_bit)\r\n            {\r\n                throw this.debug.unimpl(\"#TS handler\");\r\n            }\r\n            if(!ss_info.is_present)\r\n            {\r\n                throw this.debug.unimpl(\"#TS handler\");\r\n            }\r\n\r\n            var old_esp = this.reg32s[reg_esp];\r\n            var old_ss = this.sreg[reg_ss];\r\n\r\n            if(old_flags & flag_vm)\r\n            {\r\n                //dbg_log(\"return from vm86 mode\");\r\n                //this.debug.dump_regs();\r\n                dbg_assert(info.dpl === 0, \"switch to non-0 dpl from vm86 mode\");\r\n            }\r\n\r\n            var stack_space = (is_16 ? 2 : 4) * (5 + (error_code !== false) + 4 * ((old_flags & flag_vm) === flag_vm));\r\n            var new_stack_pointer = ss_info.base + (ss_info.size ? new_esp - stack_space : (new_esp - stack_space & 0xFFFF));\r\n\r\n            // XXX: with new cpl or with cpl 0?\r\n            this.translate_address_system_write(new_stack_pointer);\r\n            this.translate_address_system_write(ss_info.base + new_esp - 1);\r\n\r\n            // no exceptions below\r\n\r\n            this.cpl = info.dpl;\r\n            this.cpl_changed();\r\n\r\n            this.update_cs_size(info.size);\r\n\r\n            this.flags &= ~flag_vm & ~flag_rf;\r\n\r\n            this.switch_seg(reg_ss, new_ss);\r\n            this.set_stack_reg(new_esp);\r\n\r\n            if(old_flags & flag_vm)\r\n            {\r\n                if(is_16)\r\n                {\r\n                    dbg_assert(false);\r\n                }\r\n                else\r\n                {\r\n                    this.push32(this.sreg[reg_gs]);\r\n                    this.push32(this.sreg[reg_fs]);\r\n                    this.push32(this.sreg[reg_ds]);\r\n                    this.push32(this.sreg[reg_es]);\r\n                }\r\n            }\r\n\r\n            if(is_16)\r\n            {\r\n                this.push16(old_ss);\r\n                this.push16(old_esp);\r\n            }\r\n            else\r\n            {\r\n                this.push32(old_ss);\r\n                this.push32(old_esp);\r\n            }\r\n        }\r\n        else if(info.dc_bit || info.dpl === this.cpl)\r\n        {\r\n            // intra privilege level interrupt\r\n\r\n            //dbg_log(\"Intra privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) +\r\n            //        \" trap=\" + is_trap + \" 16bit=\" + is_16 +\r\n            //        \" cpl=\" + this.cpl + \" dpl=\" + info.dpl + \" conforming=\" + +info.dc_bit, LOG_CPU);\r\n            //this.debug.dump_regs();\r\n\r\n            if(this.flags & flag_vm)\r\n            {\r\n                dbg_assert(false, \"check error code\");\r\n                this.trigger_gp(selector & ~3);\r\n            }\r\n\r\n            var stack_space = (is_16 ? 2 : 4) * (3 + (error_code !== false));\r\n\r\n            // XXX: with current cpl or with cpl 0?\r\n            this.writable_or_pagefault(this.get_stack_pointer(-stack_space), stack_space);\r\n\r\n            // no exceptions below\r\n        }\r\n        else\r\n        {\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n\r\n        if(is_16)\r\n        {\r\n            this.push16(old_flags);\r\n            this.push16(this.sreg[reg_cs]);\r\n            this.push16(this.get_real_eip());\r\n\r\n            if(error_code !== false)\r\n            {\r\n                this.push16(error_code);\r\n            }\r\n\r\n            base &= 0xFFFF;\r\n        }\r\n        else\r\n        {\r\n            this.push32(old_flags);\r\n            this.push32(this.sreg[reg_cs]);\r\n            this.push32(this.get_real_eip());\r\n\r\n            if(error_code !== false)\r\n            {\r\n                this.push32(error_code);\r\n            }\r\n        }\r\n\r\n        if(old_flags & flag_vm)\r\n        {\r\n            this.switch_seg(reg_gs, 0);\r\n            this.switch_seg(reg_fs, 0);\r\n            this.switch_seg(reg_ds, 0);\r\n            this.switch_seg(reg_es, 0);\r\n        }\r\n\r\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\r\n        dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\r\n\r\n        this.update_cs_size(info.size);\r\n\r\n        this.segment_limits[reg_cs] = info.effective_limit;\r\n        this.segment_offsets[reg_cs] = info.base;\r\n\r\n        this.instruction_pointer = this.get_seg(reg_cs) + base | 0;\r\n\r\n        this.flags &= ~flag_nt & ~flag_vm & ~flag_rf & ~flag_trap;\r\n\r\n        if(!is_trap)\r\n        {\r\n            // clear int flag for interrupt gates\r\n            this.flags &= ~flag_interrupt;\r\n        }\r\n        else\r\n        {\r\n            if((this.flags & flag_interrupt) && !(old_flags & flag_interrupt))\r\n            {\r\n                if(!this.page_fault[0]) // XXX\r\n                {\r\n                    this.handle_irqs();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // call 4 byte cs:ip interrupt vector from ivt at cpu.memory 0\r\n\r\n        var index = interrupt_nr << 2;\r\n        var new_ip = this.read16(index);\r\n        var new_cs = this.read16(index + 2 | 0);\r\n\r\n        // push flags, cs:ip\r\n        this.push16(this.get_eflags());\r\n        this.push16(this.sreg[reg_cs]);\r\n        this.push16(this.get_real_eip());\r\n\r\n        this.flags &= ~flag_interrupt;\r\n\r\n        this.switch_cs_real_mode(new_cs);\r\n        this.instruction_pointer = this.get_seg(reg_cs) + new_ip | 0;\r\n    }\r\n\r\n    //dbg_log(\"int to:\", LOG_CPU);\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\r\n};\r\n\r\nCPU.prototype.iret16 = function()\r\n{\r\n    this.iret(true);\r\n};\r\n\r\nCPU.prototype.iret32 = function()\r\n{\r\n    this.iret(false);\r\n};\r\n\r\nCPU.prototype.iret = function(is_16)\r\n{\r\n    //dbg_log(\"iret is_16=\" + is_16, LOG_CPU);\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" start\");\r\n    //this.debug.dump_regs();\r\n\r\n    if(this.vm86_mode() && this.getiopl() < 3)\r\n    {\r\n        // vm86 mode, iopl != 3\r\n        dbg_log(\"#gp iret vm86 mode, iopl != 3\", LOG_CPU);\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if(is_16)\r\n    {\r\n        var new_eip = this.safe_read16(this.get_stack_pointer(0));\r\n        var new_cs = this.safe_read16(this.get_stack_pointer(2));\r\n        var new_flags = this.safe_read16(this.get_stack_pointer(4));\r\n    }\r\n    else\r\n    {\r\n        var new_eip = this.safe_read32s(this.get_stack_pointer(0));\r\n        var new_cs = this.safe_read16(this.get_stack_pointer(4));\r\n        var new_flags = this.safe_read32s(this.get_stack_pointer(8));\r\n    }\r\n\r\n    if(!this.protected_mode || (this.vm86_mode() && this.getiopl() === 3))\r\n    {\r\n        if(new_eip & 0xFFFF0000)\r\n        {\r\n            throw this.debug.unimpl(\"#GP handler\");\r\n        }\r\n\r\n        this.switch_cs_real_mode(new_cs);\r\n        this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\r\n\r\n        if(is_16)\r\n        {\r\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\r\n            this.adjust_stack_reg(3 * 2);\r\n        }\r\n        else\r\n        {\r\n            this.update_eflags(new_flags);\r\n            this.adjust_stack_reg(3 * 4);\r\n        }\r\n\r\n        //dbg_log(\"iret32 to:\", LOG_CPU);\r\n        CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\r\n\r\n        this.handle_irqs();\r\n        return;\r\n    }\r\n\r\n    dbg_assert(!this.vm86_mode());\r\n\r\n    if(this.flags & flag_nt)\r\n    {\r\n        if(DEBUG) throw this.debug.unimpl(\"nt\");\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if(new_flags & flag_vm)\r\n    {\r\n        if(this.cpl === 0)\r\n        {\r\n            // return to virtual 8086 mode\r\n\r\n            // vm86 cannot be set in 16 bit flag\r\n            dbg_assert(!is_16);\r\n\r\n            dbg_assert((new_eip & ~0xFFFF) === 0);\r\n\r\n            //dbg_log(\"in vm86 mode now \" +\r\n            //        \" cs:eip=\" + h(new_cs, 4) + \":\" + h(this.instruction_pointer >>> 0, 8) +\r\n            //        \" iopl=\" + this.getiopl() + \" flags=\" + h(new_flags, 8), LOG_CPU);\r\n\r\n\r\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\r\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\r\n\r\n            var new_es = this.safe_read16(this.get_stack_pointer(20));\r\n            var new_ds = this.safe_read16(this.get_stack_pointer(24));\r\n            var new_fs = this.safe_read16(this.get_stack_pointer(28));\r\n            var new_gs = this.safe_read16(this.get_stack_pointer(32));\r\n\r\n            // no exceptions below\r\n\r\n            this.update_eflags(new_flags);\r\n            this.flags |= flag_vm;\r\n\r\n            this.switch_cs_real_mode(new_cs);\r\n            this.instruction_pointer = (new_eip & 0xFFFF) + this.get_seg(reg_cs) | 0;\r\n\r\n            this.switch_seg(reg_es, new_es);\r\n            this.switch_seg(reg_ds, new_ds);\r\n            this.switch_seg(reg_fs, new_fs);\r\n            this.switch_seg(reg_gs, new_gs);\r\n\r\n            this.adjust_stack_reg(9 * 4); // 9 dwords: eip, cs, flags, esp, ss, es, ds, fs, gs\r\n\r\n            this.reg32s[reg_esp] = temp_esp;\r\n            this.switch_seg(reg_ss, temp_ss);\r\n\r\n            this.cpl = 3;\r\n            this.cpl_changed();\r\n\r\n            this.update_cs_size(false);\r\n\r\n            //dbg_log(\"iret32 to:\", LOG_CPU);\r\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\r\n            //this.debug.dump_regs();\r\n\r\n            return;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"vm86 flag ignored because cpl != 0\", LOG_CPU);\r\n            new_flags &= ~flag_vm;\r\n        }\r\n    }\r\n\r\n    // protected mode return\r\n\r\n    var info = this.lookup_segment_selector(new_cs);\r\n\r\n    dbg_assert(info.is_valid);\r\n    dbg_assert((new_eip >>> 0) <= info.effective_limit);\r\n\r\n    if(info.is_null)\r\n    {\r\n        throw this.debug.unimpl(\"is null\");\r\n    }\r\n    if(!info.is_present)\r\n    {\r\n        throw this.debug.unimpl(\"not present\");\r\n    }\r\n    if(!info.is_executable)\r\n    {\r\n        throw this.debug.unimpl(\"not exec\");\r\n    }\r\n    if(info.rpl < this.cpl)\r\n    {\r\n        throw this.debug.unimpl(\"rpl < cpl\");\r\n    }\r\n    if(info.dc_bit && info.dpl > info.rpl)\r\n    {\r\n        throw this.debug.unimpl(\"conforming and dpl > rpl\");\r\n    }\r\n\r\n    if(!info.dc_bit && info.rpl !== info.dpl)\r\n    {\r\n        dbg_log(\"#gp iret: non-conforming cs and rpl != dpl, dpl=\" + info.dpl + \" rpl=\" + info.rpl, LOG_CPU);\r\n        this.trigger_gp(new_cs & ~3);\r\n    }\r\n\r\n    if(info.rpl > this.cpl)\r\n    {\r\n        // outer privilege return\r\n        if(is_16)\r\n        {\r\n            var temp_esp = this.safe_read16(this.get_stack_pointer(6));\r\n            var temp_ss = this.safe_read16(this.get_stack_pointer(8));\r\n        }\r\n        else\r\n        {\r\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\r\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\r\n        }\r\n\r\n        var ss_info = this.lookup_segment_selector(temp_ss);\r\n        var new_cpl = info.rpl;\r\n\r\n        if(ss_info.is_null)\r\n        {\r\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(temp_ss, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(0);\r\n        }\r\n\r\n        if(!ss_info.is_valid ||\r\n           ss_info.is_system ||\r\n           ss_info.rpl !== new_cpl ||\r\n           !ss_info.is_writable ||\r\n           ss_info.dpl !== new_cpl)\r\n        {\r\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(temp_ss, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(temp_ss & ~3);\r\n        }\r\n\r\n        if(!ss_info.is_present)\r\n        {\r\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(temp_ss, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_ss(temp_ss & ~3);\r\n        }\r\n\r\n        // no exceptions below\r\n\r\n        if(is_16)\r\n        {\r\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\r\n        }\r\n        else\r\n        {\r\n            this.update_eflags(new_flags);\r\n        }\r\n\r\n        this.cpl = info.rpl;\r\n        this.cpl_changed();\r\n\r\n        //dbg_log(\"outer privilege return: from=\" + this.cpl + \" to=\" + info.rpl + \" ss:esp=\" + h(temp_ss, 4) + \":\" + h(temp_esp >>> 0, 8), LOG_CPU);\r\n\r\n        this.switch_seg(reg_ss, temp_ss);\r\n\r\n        this.set_stack_reg(temp_esp);\r\n\r\n        if(this.cpl === 0)\r\n        {\r\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\r\n        }\r\n\r\n\r\n        // XXX: Set segment to 0 if it's not usable in the new cpl\r\n        // XXX: Use cached segment information\r\n        //var ds_info = this.lookup_segment_selector(this.sreg[reg_ds]);\r\n        //if(this.cpl > ds_info.dpl && (!ds_info.is_executable || !ds_info.dc_bit)) this.switch_seg(reg_ds, 0);\r\n        // ...\r\n    }\r\n    else if(info.rpl === this.cpl)\r\n    {\r\n        // same privilege return\r\n        // no exceptions below\r\n        if(is_16)\r\n        {\r\n            this.adjust_stack_reg(3 * 2);\r\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\r\n        }\r\n        else\r\n        {\r\n            this.adjust_stack_reg(3 * 4);\r\n            this.update_eflags(new_flags);\r\n        }\r\n\r\n        // update vip and vif, which are not changed by update_eflags\r\n        if(this.cpl === 0)\r\n        {\r\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\r\n        }\r\n    }\r\n    else\r\n    {\r\n        dbg_assert(false);\r\n    }\r\n\r\n    this.sreg[reg_cs] = new_cs;\r\n    dbg_assert((new_cs & 3) === this.cpl);\r\n\r\n    this.update_cs_size(info.size);\r\n\r\n    this.segment_limits[reg_cs] = info.effective_limit;\r\n    this.segment_offsets[reg_cs] = info.base;\r\n\r\n    this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\r\n\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" end\");\r\n\r\n    this.handle_irqs();\r\n};\r\n\r\nCPU.prototype.switch_cs_real_mode = function(selector)\r\n{\r\n    dbg_assert(!this.protected_mode || this.vm86_mode());\r\n\r\n    this.sreg[reg_cs] = selector;\r\n    this.segment_is_null[reg_cs] = 0;\r\n    this.segment_offsets[reg_cs] = selector << 4;\r\n};\r\n\r\nCPU.prototype.far_return = function(eip, selector, stack_adjust)\r\n{\r\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\r\n\r\n    //dbg_log(\"far return eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4) + \" stack_adjust=\" + h(stack_adjust), LOG_CPU);\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret start\");\r\n\r\n    if(!this.protected_mode)\r\n    {\r\n        dbg_assert(!this.is_32);\r\n        //dbg_assert(!this.stack_size_32);\r\n    }\r\n\r\n    if(!this.protected_mode || this.vm86_mode())\r\n    {\r\n        this.switch_cs_real_mode(selector);\r\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\r\n        this.adjust_stack_reg(2 * (this.is_osize_32() ? 4 : 2) + stack_adjust);\r\n        return;\r\n    }\r\n\r\n    var info = this.lookup_segment_selector(selector);\r\n\r\n    if(info.is_null)\r\n    {\r\n        dbg_log(\"null cs\", LOG_CPU);\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if(!info.is_valid)\r\n    {\r\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(info.is_system)\r\n    {\r\n        dbg_assert(false, \"is system in far return\");\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(!info.is_executable)\r\n    {\r\n        dbg_log(\"non-executable cs: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(info.rpl < this.cpl)\r\n    {\r\n        dbg_log(\"cs rpl < cpl: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(info.dc_bit && info.dpl > info.rpl)\r\n    {\r\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(!info.dc_bit && info.dpl !== info.rpl)\r\n    {\r\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(!info.is_present)\r\n    {\r\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\r\n        dbg_trace(LOG_CPU);\r\n        this.trigger_np(selector & ~3);\r\n    }\r\n\r\n    if(info.rpl > this.cpl)\r\n    {\r\n        dbg_log(\"far return privilege change cs: \" + h(selector) + \" from=\" + this.cpl + \" to=\" + info.rpl + \" is_16=\" + this.is_osize_32(), LOG_CPU);\r\n\r\n        if(this.is_osize_32())\r\n        {\r\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 8))))\r\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(stack_adjust + 8));\r\n            //dbg_log(\"esp=\" + h(temp_esp));\r\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 12));\r\n        }\r\n        else\r\n        {\r\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 4))));\r\n            var temp_esp = this.safe_read16(this.get_stack_pointer(stack_adjust + 4));\r\n            //dbg_log(\"esp=\" + h(temp_esp));\r\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 6));\r\n        }\r\n\r\n        this.cpl = info.rpl;\r\n        this.cpl_changed();\r\n\r\n        // XXX: Can raise, conditions should be checked before side effects\r\n        this.switch_seg(reg_ss, temp_ss);\r\n        this.set_stack_reg(temp_esp + stack_adjust);\r\n\r\n        //if(this.is_osize_32())\r\n        //{\r\n        //    this.adjust_stack_reg(2 * 4);\r\n        //}\r\n        //else\r\n        //{\r\n        //    this.adjust_stack_reg(2 * 2);\r\n        //}\r\n\r\n        //throw this.debug.unimpl(\"privilege change\");\r\n\r\n        //this.adjust_stack_reg(stack_adjust);\r\n    }\r\n    else\r\n    {\r\n        if(this.is_osize_32())\r\n        {\r\n            this.adjust_stack_reg(2 * 4 + stack_adjust);\r\n        }\r\n        else\r\n        {\r\n            this.adjust_stack_reg(2 * 2 + stack_adjust);\r\n        }\r\n    }\r\n\r\n    //dbg_assert(this.cpl === info.dpl);\r\n\r\n    this.update_cs_size(info.size);\r\n\r\n    this.segment_is_null[reg_cs] = 0;\r\n    this.segment_limits[reg_cs] = info.effective_limit;\r\n    //this.segment_infos[reg_cs] = 0; // TODO\r\n\r\n    this.segment_offsets[reg_cs] = info.base;\r\n    this.sreg[reg_cs] = selector;\r\n\r\n    dbg_assert((selector & 3) === this.cpl);\r\n\r\n    this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\r\n\r\n    //dbg_log(\"far return to:\", LOG_CPU)\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret end\");\r\n};\r\n\r\nCPU.prototype.far_jump = function(eip, selector, is_call)\r\n{\r\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\r\n\r\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4), LOG_CPU);\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call]);\r\n\r\n    if(!this.protected_mode || this.vm86_mode())\r\n    {\r\n        if(is_call)\r\n        {\r\n            if(this.is_osize_32())\r\n            {\r\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\r\n                this.push32(this.sreg[reg_cs]);\r\n                this.push32(this.get_real_eip());\r\n            }\r\n            else\r\n            {\r\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\r\n                this.push16(this.sreg[reg_cs]);\r\n                this.push16(this.get_real_eip());\r\n            }\r\n        }\r\n        this.switch_cs_real_mode(selector);\r\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\r\n        return;\r\n    }\r\n\r\n    var info = this.lookup_segment_selector(selector);\r\n\r\n    if(info.is_null)\r\n    {\r\n        dbg_log(\"#gp null cs\", LOG_CPU);\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if(!info.is_valid)\r\n    {\r\n        dbg_log(\"#gp invalid cs: \" + h(selector), LOG_CPU);\r\n        this.trigger_gp(selector & ~3);\r\n    }\r\n\r\n    if(info.is_system)\r\n    {\r\n        dbg_assert(is_call, \"TODO: Jump\");\r\n\r\n        dbg_log(\"system type cs: \" + h(selector), LOG_CPU);\r\n\r\n        if(info.type === 0xC || info.type === 4)\r\n        {\r\n            // call gate\r\n            var is_16 = info.type === 4;\r\n\r\n            if(info.dpl < this.cpl || info.dpl < info.rpl)\r\n            {\r\n                dbg_log(\"#gp cs gate dpl < cpl or dpl < rpl: \" + h(selector), LOG_CPU);\r\n                this.trigger_gp(selector & ~3);\r\n            }\r\n\r\n            if(!info.is_present)\r\n            {\r\n                dbg_log(\"#NP for loading not-present in gate cs sel=\" + h(selector, 4), LOG_CPU);\r\n                this.trigger_np(selector & ~3);\r\n            }\r\n\r\n            var cs_selector = info.raw0 >>> 16;\r\n            var cs_info = this.lookup_segment_selector(cs_selector);\r\n\r\n            if(cs_info.is_null)\r\n            {\r\n                dbg_log(\"#gp null cs\", LOG_CPU);\r\n                this.trigger_gp(0);\r\n            }\r\n\r\n            if(!cs_info.is_valid)\r\n            {\r\n                dbg_log(\"#gp invalid cs: \" + h(cs_selector), LOG_CPU);\r\n                this.trigger_gp(cs_selector & ~3);\r\n            }\r\n\r\n            if(!cs_info.is_executable)\r\n            {\r\n                dbg_log(\"#gp non-executable cs: \" + h(cs_selector), LOG_CPU);\r\n                this.trigger_gp(cs_selector & ~3);\r\n            }\r\n\r\n            if(cs_info.dpl > this.cpl)\r\n            {\r\n                dbg_log(\"#gp dpl > cpl: \" + h(cs_selector), LOG_CPU);\r\n                this.trigger_gp(cs_selector & ~3);\r\n            }\r\n\r\n            if(!cs_info.is_present)\r\n            {\r\n                dbg_log(\"#NP for loading not-present in cs sel=\" + h(cs_selector, 4), LOG_CPU);\r\n                this.trigger_np(cs_selector & ~3);\r\n            }\r\n\r\n            if(!cs_info.dc_bit && cs_info.dpl < this.cpl)\r\n            {\r\n                dbg_log(\"more privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl);\r\n                var tss_stack_addr = this.get_tss_stack_addr(cs_info.dpl);\r\n\r\n                if(this.tss_size_32)\r\n                {\r\n                    var new_esp = this.read32s(tss_stack_addr);\r\n                    var new_ss = this.read16(tss_stack_addr + 4 | 0);\r\n                }\r\n                else\r\n                {\r\n                    var new_esp = this.read16(tss_stack_addr);\r\n                    var new_ss = this.read16(tss_stack_addr + 2 | 0);\r\n                }\r\n                var ss_info = this.lookup_segment_selector(new_ss);\r\n\r\n                // Disabled: Incorrect handling of direction bit\r\n                // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\r\n                //if(!((new_esp >>> 0) <= ss_info.effective_limit))\r\n                //    debugger;\r\n                //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\r\n                dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\r\n\r\n                if(ss_info.is_null)\r\n                {\r\n                    throw this.debug.unimpl(\"#TS handler\");\r\n                }\r\n                if(ss_info.rpl !== cs_info.dpl) // xxx: 0 in v86 mode\r\n                {\r\n                    throw this.debug.unimpl(\"#TS handler\");\r\n                }\r\n                if(ss_info.dpl !== cs_info.dpl || !ss_info.rw_bit)\r\n                {\r\n                    throw this.debug.unimpl(\"#TS handler\");\r\n                }\r\n                if(!ss_info.is_present)\r\n                {\r\n                    throw this.debug.unimpl(\"#SS handler\");\r\n                }\r\n\r\n                var parameter_count = info.raw1 & 0x1F;\r\n                var stack_space = is_16 ? 4 : 8;\r\n                if(is_call)\r\n                {\r\n                    stack_space += is_16 ? 4 + 2 * parameter_count : 8 + 4 * parameter_count;\r\n                }\r\n                if(ss_info.size)\r\n                {\r\n                    //try {\r\n                    this.writable_or_pagefault(ss_info.base + new_esp - stack_space | 0, stack_space); // , cs_info.dpl\r\n                    //} catch(e) { debugger; }\r\n                }\r\n                else\r\n                {\r\n                    //try {\r\n                    this.writable_or_pagefault(ss_info.base + (new_esp - stack_space & 0xFFFF) | 0, stack_space); // , cs_info.dpl\r\n                    //} catch(e) { debugger; }\r\n                }\r\n\r\n                var old_esp = this.reg32s[reg_esp];\r\n                var old_ss = this.sreg[reg_ss];\r\n                var old_stack_pointer = this.get_stack_pointer(0);\r\n\r\n                //dbg_log(\"old_esp=\" + h(old_esp));\r\n\r\n                this.cpl = cs_info.dpl;\r\n                this.cpl_changed();\r\n\r\n                this.update_cs_size(cs_info.size);\r\n\r\n                this.switch_seg(reg_ss, new_ss);\r\n                this.set_stack_reg(new_esp);\r\n\r\n                //dbg_log(\"parameter_count=\" + parameter_count);\r\n                //dbg_assert(parameter_count === 0, \"TODO\");\r\n\r\n                if(is_16)\r\n                {\r\n                    this.push16(old_ss);\r\n                    this.push16(old_esp);\r\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\r\n                }\r\n                else\r\n                {\r\n                    this.push32(old_ss);\r\n                    this.push32(old_esp);\r\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\r\n                }\r\n\r\n                if(is_call)\r\n                {\r\n                    if(is_16)\r\n                    {\r\n                        for(var i = parameter_count - 1; i >= 0; i--)\r\n                        {\r\n                            var parameter = this.safe_read16(old_stack_pointer + 2 * i);\r\n                            this.push16(parameter);\r\n                        }\r\n\r\n                        //this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\r\n                        this.push16(this.sreg[reg_cs]);\r\n                        this.push16(this.get_real_eip());\r\n                    }\r\n                    else\r\n                    {\r\n                        for(var i = parameter_count - 1; i >= 0; i--)\r\n                        {\r\n                            var parameter = this.safe_read32s(old_stack_pointer + 4 * i);\r\n                            this.push32(parameter);\r\n                        }\r\n\r\n                        //this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\r\n                        this.push32(this.sreg[reg_cs]);\r\n                        this.push32(this.get_real_eip());\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                dbg_log(\"same privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl + \" conforming=\" + cs_info.dc_bit);\r\n                // ok\r\n\r\n                if(is_call)\r\n                {\r\n                    if(is_16)\r\n                    {\r\n                        this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\r\n                        this.push16(this.sreg[reg_cs]);\r\n                        this.push16(this.get_real_eip());\r\n                    }\r\n                    else\r\n                    {\r\n                        this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\r\n                        this.push32(this.sreg[reg_cs]);\r\n                        this.push32(this.get_real_eip());\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Note: eip from call is ignored\r\n            var new_eip = info.raw0 & 0xFFFF;\r\n            if(!is_16)\r\n            {\r\n                new_eip |= info.raw1 & 0xFFFF0000;\r\n            }\r\n\r\n            dbg_log(\"call gate eip=\" + h(new_eip >>> 0) + \" cs=\" + h(cs_selector) + \" conforming=\" + cs_info.dc_bit);\r\n            dbg_assert((new_eip >>> 0) <= cs_info.effective_limit, \"todo: #gp\");\r\n\r\n            this.update_cs_size(cs_info.size);\r\n\r\n            this.segment_is_null[reg_cs] = 0;\r\n            this.segment_limits[reg_cs] = cs_info.effective_limit;\r\n            //this.segment_infos[reg_cs] = 0; // TODO\r\n            this.segment_offsets[reg_cs] = cs_info.base;\r\n            this.sreg[reg_cs] = cs_selector & ~3 | this.cpl;\r\n            dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\r\n\r\n            this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\r\n        }\r\n        else\r\n        {\r\n            var types = { 9: \"Available 386 TSS\", 0xb: \"Busy 386 TSS\", 4: \"286 Call Gate\", 0xc: \"386 Call Gate\" };\r\n            throw this.debug.unimpl(\"load system segment descriptor, type = \" + (info.access & 15) + \" (\" + types[info.access & 15] + \")\");\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if(!info.is_executable)\r\n        {\r\n            dbg_log(\"#gp non-executable cs: \" + h(selector), LOG_CPU);\r\n            this.trigger_gp(selector & ~3);\r\n        }\r\n\r\n        if(info.dc_bit)\r\n        {\r\n            // conforming code segment\r\n            if(info.dpl > this.cpl)\r\n            {\r\n                dbg_log(\"#gp cs dpl > cpl: \" + h(selector), LOG_CPU);\r\n                this.trigger_gp(selector & ~3);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // non-conforming code segment\r\n\r\n            if(info.rpl > this.cpl || info.dpl !== this.cpl)\r\n            {\r\n                dbg_log(\"#gp cs rpl > cpl or dpl != cpl: \" + h(selector), LOG_CPU);\r\n                this.trigger_gp(selector & ~3);\r\n            }\r\n        }\r\n\r\n        if(!info.is_present)\r\n        {\r\n            dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_np(selector & ~3);\r\n        }\r\n\r\n        if(is_call)\r\n        {\r\n            if(this.is_osize_32())\r\n            {\r\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\r\n                this.push32(this.sreg[reg_cs]);\r\n                this.push32(this.get_real_eip());\r\n            }\r\n            else\r\n            {\r\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\r\n                this.push16(this.sreg[reg_cs]);\r\n                this.push16(this.get_real_eip());\r\n            }\r\n        }\r\n\r\n        dbg_assert((eip >>> 0) <= info.effective_limit, \"todo: #gp\");\r\n\r\n        this.update_cs_size(info.size);\r\n\r\n        this.segment_is_null[reg_cs] = 0;\r\n        this.segment_limits[reg_cs] = info.effective_limit;\r\n        //this.segment_infos[reg_cs] = 0; // TODO\r\n\r\n        this.segment_offsets[reg_cs] = info.base;\r\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\r\n\r\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\r\n    }\r\n\r\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" to:\", LOG_CPU)\r\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call] + \" end\");\r\n};\r\n\r\nCPU.prototype.get_tss_stack_addr = function(dpl)\r\n{\r\n    if(this.tss_size_32)\r\n    {\r\n        var tss_stack_addr = (dpl << 3) + 4 | 0;\r\n\r\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\r\n        {\r\n            throw this.debug.unimpl(\"#TS handler\");\r\n        }\r\n\r\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\r\n\r\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 6);\r\n    }\r\n    else\r\n    {\r\n        var tss_stack_addr = (dpl << 2) + 2 | 0;\r\n\r\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\r\n        {\r\n            throw this.debug.unimpl(\"#TS handler\");\r\n        }\r\n\r\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\r\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 4);\r\n    }\r\n\r\n    if(this.paging)\r\n    {\r\n        tss_stack_addr = this.translate_address_system_read(tss_stack_addr);\r\n    }\r\n\r\n    return tss_stack_addr;\r\n};\r\n\r\nCPU.prototype.do_task_switch = function(selector, error_code)\r\n{\r\n    dbg_assert(this.tss_size_32, \"TODO\");\r\n\r\n    dbg_log(\"do_task_switch sel=\" + h(selector), LOG_CPU);\r\n    var descriptor = this.lookup_segment_selector(selector);\r\n\r\n    dbg_assert((descriptor.type | 2) === 3 || (descriptor.type | 2) === 0xb);\r\n    var tss_is_16 = descriptor.type <= 3;\r\n    var tss_is_busy = (descriptor.type & 2) === 2;\r\n\r\n    if(!descriptor.is_valid || descriptor.is_null || !descriptor.from_gdt)\r\n    {\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if((descriptor.access & 31) === 0xB)\r\n    {\r\n        // is busy\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if(!descriptor.is_present)\r\n    {\r\n        // throw this.debug.unimpl(\"#NP handler\");\r\n\t\treturn;\r\n    }\r\n\r\n    if(descriptor.effective_limit < 103)\r\n    {\r\n        // throw this.debug.unimpl(\"#NP handler\");\r\n\t\treturn;\r\n    }\r\n\r\n    var tsr_size = this.segment_limits[reg_tr];\r\n    var tsr_offset = this.segment_offsets[reg_tr];\r\n\r\n    var old_eflags = this.get_eflags();\r\n\r\n    if(tss_is_busy)\r\n    {\r\n        old_eflags &= ~flag_nt;\r\n    }\r\n\r\n    this.writable_or_pagefault(tsr_offset, 0x66);\r\n\r\n    //this.safe_write32(tsr_offset + TSR_CR3, this.cr[3]);\r\n\r\n    // TODO: Write 16 bit values if old tss is 16 bit\r\n    this.safe_write32(tsr_offset + TSR_EIP, this.get_real_eip());\r\n    this.safe_write32(tsr_offset + TSR_EFLAGS, old_eflags);\r\n\r\n    this.safe_write32(tsr_offset + TSR_EAX, this.reg32s[reg_eax]);\r\n    this.safe_write32(tsr_offset + TSR_ECX, this.reg32s[reg_ecx]);\r\n    this.safe_write32(tsr_offset + TSR_EDX, this.reg32s[reg_edx]);\r\n    this.safe_write32(tsr_offset + TSR_EBX, this.reg32s[reg_ebx]);\r\n\r\n    this.safe_write32(tsr_offset + TSR_ESP, this.reg32s[reg_esp]);\r\n    this.safe_write32(tsr_offset + TSR_EBP, this.reg32s[reg_ebp]);\r\n    this.safe_write32(tsr_offset + TSR_ESI, this.reg32s[reg_esi]);\r\n    this.safe_write32(tsr_offset + TSR_EDI, this.reg32s[reg_edi]);\r\n\r\n    this.safe_write32(tsr_offset + TSR_ES, this.sreg[reg_es]);\r\n    this.safe_write32(tsr_offset + TSR_CS, this.sreg[reg_cs]);\r\n    this.safe_write32(tsr_offset + TSR_SS, this.sreg[reg_ss]);\r\n    this.safe_write32(tsr_offset + TSR_DS, this.sreg[reg_ds]);\r\n    this.safe_write32(tsr_offset + TSR_FS, this.sreg[reg_fs]);\r\n    this.safe_write32(tsr_offset + TSR_GS, this.sreg[reg_gs]);\r\n\r\n    //this.safe_write32(tsr_offset + TSR_LDT, this.sreg[reg_ldtr]);\r\n\r\n    if(true /* is jump or call or int */)\r\n    {\r\n        // mark as busy\r\n        this.write8(descriptor.table_offset + 5 | 0, this.read8(descriptor.table_offset + 5 | 0) | 2);\r\n    }\r\n\r\n    //var new_tsr_size = descriptor.effective_limit;\r\n    var new_tsr_offset = descriptor.base;\r\n\r\n    dbg_assert(!tss_is_16, \"unimplemented\");\r\n\r\n    if(true /* is call or int */)\r\n    {\r\n        this.safe_write16(new_tsr_offset + TSR_BACKLINK, this.sreg[reg_tr]);\r\n    }\r\n\r\n    var new_cr3 = this.safe_read32s(new_tsr_offset + TSR_CR3);\r\n\r\n    this.flags &= ~flag_vm;\r\n\r\n    var new_eip = this.safe_read32s(new_tsr_offset + TSR_EIP);\r\n    var new_cs = this.safe_read16(new_tsr_offset + TSR_CS);\r\n    var info = this.lookup_segment_selector(new_cs);\r\n\r\n    if(info.is_null)\r\n    {\r\n        dbg_log(\"null cs\", LOG_CPU);\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(!info.is_valid)\r\n    {\r\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(info.is_system)\r\n    {\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(!info.is_executable)\r\n    {\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(info.dc_bit && info.dpl > info.rpl)\r\n    {\r\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(!info.dc_bit && info.dpl !== info.rpl)\r\n    {\r\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    if(!info.is_present)\r\n    {\r\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\r\n        throw this.debug.unimpl(\"#TS handler\");\r\n    }\r\n\r\n    this.segment_is_null[reg_cs] = 0;\r\n    this.segment_limits[reg_cs] = info.effective_limit;\r\n    this.segment_offsets[reg_cs] = info.base;\r\n    this.sreg[reg_cs] = new_cs;\r\n\r\n    this.cpl = info.dpl;\r\n    this.cpl_changed();\r\n\r\n    dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\r\n\r\n    dbg_assert((new_eip >>> 0) <= info.effective_limit, \"todo: #gp\");\r\n    this.update_cs_size(info.size);\r\n\r\n    var new_eflags = this.safe_read32s(new_tsr_offset + TSR_EFLAGS);\r\n\r\n    if(true /* is call or int */)\r\n    {\r\n        this.safe_write32(tsr_offset + TSR_BACKLINK, selector);\r\n        new_eflags |= flag_nt;\r\n    }\r\n\r\n    if(new_eflags & flag_vm)\r\n    {\r\n        throw this.debug.unimpl(\"task switch to VM mode\");\r\n    }\r\n\r\n    this.update_eflags(new_eflags);\r\n\r\n    if(true /* call or int */)\r\n    {\r\n        this.flags |= flag_nt;\r\n    }\r\n\r\n    var new_ldt = this.safe_read16(new_tsr_offset + TSR_LDT);\r\n    this.load_ldt(new_ldt);\r\n\r\n    this.reg32s[reg_eax] = this.safe_read32s(new_tsr_offset + TSR_EAX);\r\n    this.reg32s[reg_ecx] = this.safe_read32s(new_tsr_offset + TSR_ECX);\r\n    this.reg32s[reg_edx] = this.safe_read32s(new_tsr_offset + TSR_EDX);\r\n    this.reg32s[reg_ebx] = this.safe_read32s(new_tsr_offset + TSR_EBX);\r\n\r\n    this.reg32s[reg_esp] = this.safe_read32s(new_tsr_offset + TSR_ESP);\r\n    this.reg32s[reg_ebp] = this.safe_read32s(new_tsr_offset + TSR_EBP);\r\n    this.reg32s[reg_esi] = this.safe_read32s(new_tsr_offset + TSR_ESI);\r\n    this.reg32s[reg_edi] = this.safe_read32s(new_tsr_offset + TSR_EDI);\r\n\r\n    this.switch_seg(reg_es, this.safe_read16(new_tsr_offset + TSR_ES));\r\n    this.switch_seg(reg_ss, this.safe_read16(new_tsr_offset + TSR_SS));\r\n    this.switch_seg(reg_ds, this.safe_read16(new_tsr_offset + TSR_DS));\r\n    this.switch_seg(reg_fs, this.safe_read16(new_tsr_offset + TSR_FS));\r\n    this.switch_seg(reg_gs, this.safe_read16(new_tsr_offset + TSR_GS));\r\n\r\n    this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\r\n\r\n    this.segment_offsets[reg_tr] = descriptor.base;\r\n    this.segment_limits[reg_tr] = descriptor.effective_limit;\r\n    this.sreg[reg_tr] = selector;\r\n\r\n    this.cr[3] = new_cr3;\r\n    dbg_assert((this.cr[3] & 0xFFF) === 0);\r\n    this.clear_tlb();\r\n\r\n    this.cr[0] |= CR0_TS;\r\n\r\n    if(error_code !== false)\r\n    {\r\n        if(tss_is_16)\r\n        {\r\n            this.push16(error_code & 0xFFFF);\r\n        }\r\n        else\r\n        {\r\n            this.push32(error_code);\r\n        }\r\n    }\r\n};\r\n\r\nCPU.prototype.hlt_op = function()\r\n{\r\n    if(this.cpl)\r\n    {\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    if((this.flags & flag_interrupt) === 0)\r\n    {\r\n        // this.debug.show(\"cpu halted\");\r\n        // this.bus.send(\"cpu-event-halt\");\r\n        // if(DEBUG) this.debug.dump_regs();\r\n        // throw \"HALT\";\r\n    }\r\n    else\r\n    {\r\n        // get out of here and into hlt_loop\r\n        this.in_hlt = true;\r\n\r\n        //if(false) // possibly unsafe, test in safari\r\n        //{\r\n        //    this.hlt_loop();\r\n        //    this.diverged();\r\n        //    if(this.in_hlt)\r\n        //    {\r\n        //        throw MAGIC_CPU_EXCEPTION;\r\n        //    }\r\n        //}\r\n        //else\r\n        {\r\n            throw MAGIC_CPU_EXCEPTION;\r\n        }\r\n    }\r\n};\r\n\r\n// assumes ip to point to the byte before the next instruction\r\nCPU.prototype.raise_exception = function(interrupt_nr)\r\n{\r\n    //if(DEBUG && interrupt_nr !== 7)\r\n    //{\r\n    //    // show interesting exceptions\r\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\r\n    //    dbg_trace(LOG_CPU);\r\n    //    this.debug.dump_regs();\r\n    //    this.debug.dump_state();\r\n    //}\r\n\r\n    this.call_interrupt_vector(interrupt_nr, false, false);\r\n    throw MAGIC_CPU_EXCEPTION;\r\n};\r\n\r\nCPU.prototype.raise_exception_with_code = function(interrupt_nr, error_code)\r\n{\r\n    dbg_assert(typeof error_code === \"number\");\r\n\r\n    //if(DEBUG)\r\n    //{\r\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" err=\" + h(error_code) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\r\n    //    dbg_trace(LOG_CPU);\r\n    //    this.debug.dump_regs();\r\n    //}\r\n\r\n    this.call_interrupt_vector(interrupt_nr, false, error_code);\r\n    throw MAGIC_CPU_EXCEPTION;\r\n};\r\n\r\nCPU.prototype.trigger_de = function()\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception(0);\r\n};\r\n\r\nCPU.prototype.trigger_ud = function()\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception(6);\r\n};\r\n\r\nCPU.prototype.trigger_nm = function()\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception(7);\r\n};\r\n\r\nCPU.prototype.trigger_ts = function(code)\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception_with_code(10, code);\r\n};\r\n\r\nCPU.prototype.trigger_gp = function(code)\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception_with_code(13, code);\r\n};\r\n\r\nCPU.prototype.trigger_np = function(code)\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception_with_code(11, code);\r\n};\r\n\r\nCPU.prototype.trigger_ss = function(code)\r\n{\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.raise_exception_with_code(12, code);\r\n};\r\n\r\n// used before fpu instructions\r\nCPU.prototype.task_switch_test = function()\r\n{\r\n    if(this.cr[0] & (CR0_EM | CR0_TS))\r\n    {\r\n        this.trigger_nm();\r\n    }\r\n};\r\n\r\n// used before mmx instructions\r\nCPU.prototype.task_switch_test_mmx = function()\r\n{\r\n    if(this.cr[0] & (CR0_EM | CR0_TS))\r\n    {\r\n        if(this.cr[0] & CR0_TS)\r\n        {\r\n            this.trigger_nm();\r\n        }\r\n        else\r\n        {\r\n            this.trigger_ud();\r\n        }\r\n    }\r\n\r\n};\r\n\r\nCPU.prototype.todo = function()\r\n{\r\n    if(DEBUG)\r\n    {\r\n        dbg_trace();\r\n        throw \"TODO\";\r\n    }\r\n\r\n    this.trigger_ud();\r\n};\r\n\r\nCPU.prototype.undefined_instruction = function()\r\n{\r\n    dbg_assert(false, \"Possible fault: undefined instruction\");\r\n    this.trigger_ud();\r\n};\r\n\r\nCPU.prototype.unimplemented_sse = function()\r\n{\r\n    dbg_log(\"No SSE\", LOG_CPU);\r\n    dbg_assert(false);\r\n    this.trigger_ud();\r\n};\r\n\r\nCPU.prototype.get_seg_prefix_ds = function()\r\n{\r\n    return this.get_seg_prefix(reg_ds);\r\n};\r\n\r\nCPU.prototype.get_seg_prefix_ss = function()\r\n{\r\n    return this.get_seg_prefix(reg_ss);\r\n};\r\n\r\nCPU.prototype.get_seg_prefix_cs = function()\r\n{\r\n    return this.get_seg_prefix(reg_cs);\r\n};\r\n\r\n/**\r\n * Get segment base by prefix or default\r\n * @param {number} default_segment\r\n */\r\nCPU.prototype.get_seg_prefix = function(default_segment /*, offset*/)\r\n{\r\n    var prefix = this.prefixes & PREFIX_MASK_SEGMENT;\r\n\r\n    if(prefix)\r\n    {\r\n        if(prefix === SEG_PREFIX_ZERO)\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            return this.get_seg(prefix - 1 /*, offset*/);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        return this.get_seg(default_segment /*, offset*/);\r\n    }\r\n};\r\n\r\n/**\r\n * Get segment base\r\n * @param {number} segment\r\n */\r\nCPU.prototype.get_seg = function(segment /*, offset*/)\r\n{\r\n    dbg_assert(segment >= 0 && segment < 8);\r\n\r\n    if(this.protected_mode)\r\n    {\r\n        if(this.segment_is_null[segment])\r\n        {\r\n            dbg_assert(segment !== reg_cs && segment !== reg_ss);\r\n            dbg_trace();\r\n            dbg_log(\"#gp Use null segment: \" + segment + \" sel=\" + h(this.sreg[segment], 4), LOG_CPU);\r\n\r\n            this.trigger_gp(0);\r\n        }\r\n\r\n        // TODO:\r\n        // - validate segment limits\r\n        // - validate if segment is writable\r\n    }\r\n\r\n    return this.segment_offsets[segment];\r\n};\r\n\r\nCPU.prototype.read_e8 = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read8(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\r\n    }\r\n};\r\n\r\nCPU.prototype.read_e8s = function()\r\n{\r\n    return this.read_e8() << 24 >> 24;\r\n};\r\n\r\nCPU.prototype.read_e16 = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read16(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        return this.reg16[this.modrm_byte << 1 & 14];\r\n    }\r\n};\r\n\r\nCPU.prototype.read_e16s = function()\r\n{\r\n    return this.read_e16() << 16 >> 16;\r\n};\r\n\r\nCPU.prototype.read_e32s = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        return this.reg32s[this.modrm_byte & 7];\r\n    }\r\n};\r\n\r\nCPU.prototype.read_e32 = function()\r\n{\r\n    return this.read_e32s() >>> 0;\r\n};\r\n\r\nCPU.prototype.read_mmx_mem32s = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        // Returning lower dword of qword\r\n        return this.reg_mmxs[2 * (this.modrm_byte & 7)];\r\n    }\r\n};\r\n\r\nCPU.prototype.read_mmx_mem64s = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        return this.create_atom64s(\r\n            this.reg_mmxs[2 * (this.modrm_byte & 7)],\r\n            this.reg_mmxs[2 * (this.modrm_byte & 7) + 1]\r\n        );\r\n    }\r\n};\r\n\r\nCPU.prototype.read_xmm_mem64s = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        let i = (this.modrm_byte & 7) << 2;\r\n        return this.create_atom64s(\r\n            this.reg_xmm32s[i],\r\n            this.reg_xmm32s[i | 1]\r\n        );\r\n    }\r\n};\r\n\r\nCPU.prototype.read_xmm_mem128s = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read128s_aligned(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        let i = (this.modrm_byte & 7) << 2;\r\n        return this.create_atom128s(\r\n            this.reg_xmm32s[i],\r\n            this.reg_xmm32s[i | 1],\r\n            this.reg_xmm32s[i | 2],\r\n            this.reg_xmm32s[i | 3]\r\n        );\r\n    }\r\n};\r\n\r\nCPU.prototype.read_xmm_mem128s_unaligned = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        return this.safe_read128s_unaligned(this.modrm_resolve(this.modrm_byte));\r\n    } else {\r\n        let i = (this.modrm_byte & 7) << 2;\r\n        return this.create_atom128s(\r\n            this.reg_xmm32s[i],\r\n            this.reg_xmm32s[i | 1],\r\n            this.reg_xmm32s[i | 2],\r\n            this.reg_xmm32s[i | 3]\r\n        );\r\n    }\r\n};\r\n\r\nCPU.prototype.set_e8 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var addr = this.modrm_resolve(this.modrm_byte);\r\n        this.safe_write8(addr, value);\r\n    } else {\r\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.set_e16 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var addr = this.modrm_resolve(this.modrm_byte);\r\n        this.safe_write16(addr, value);\r\n    } else {\r\n        this.reg16[this.modrm_byte << 1 & 14] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.set_e32 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var addr = this.modrm_resolve(this.modrm_byte);\r\n        this.safe_write32(addr, value);\r\n    } else {\r\n        this.reg32s[this.modrm_byte & 7] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.set_mmx_mem64s = function(low, high)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var addr = this.modrm_resolve(this.modrm_byte);\r\n        this.safe_write64(addr, low, high);\r\n    } else {\r\n        this.reg_mmxs[2 * (this.modrm_byte & 7)] = low;\r\n        this.reg_mmxs[2 * (this.modrm_byte & 7) + 1] = high;\r\n    }\r\n};\r\n\r\nCPU.prototype.read_write_e8 = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\r\n        this.phys_addr = this.translate_address_write(virt_addr);\r\n        return this.read8(this.phys_addr);\r\n    } else {\r\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\r\n    }\r\n};\r\n\r\nCPU.prototype.write_e8 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        this.write8(this.phys_addr, value);\r\n    }\r\n    else {\r\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.read_write_e16 = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\r\n        this.phys_addr = this.translate_address_write(virt_addr);\r\n        if(this.paging && (virt_addr & 0xFFF) === 0xFFF) {\r\n            this.phys_addr_high = this.translate_address_write(virt_addr + 1 | 0);\r\n            dbg_assert(this.phys_addr_high);\r\n            return this.virt_boundary_read16(this.phys_addr, this.phys_addr_high);\r\n        } else {\r\n            this.phys_addr_high = 0;\r\n            return this.read16(this.phys_addr);\r\n        }\r\n    } else {\r\n        return this.reg16[this.modrm_byte << 1 & 14];\r\n    }\r\n};\r\n\r\nCPU.prototype.write_e16 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        if(this.phys_addr_high) {\r\n            this.virt_boundary_write16(this.phys_addr, this.phys_addr_high, value);\r\n        } else {\r\n            this.write16(this.phys_addr, value);\r\n        }\r\n    } else {\r\n        this.reg16[this.modrm_byte << 1 & 14] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.read_write_e32 = function()\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\r\n        this.phys_addr = this.translate_address_write(virt_addr);\r\n        if(this.paging && (virt_addr & 0xFFF) >= 0xFFD) {\r\n            //this.phys_addr_high = this.translate_address_write(virt_addr + 3 | 0);\r\n            this.phys_addr_high = this.translate_address_write(virt_addr + 3 & ~3) | (virt_addr + 3) & 3;\r\n            dbg_assert(this.phys_addr_high);\r\n            return this.virt_boundary_read32s(this.phys_addr, this.phys_addr_high);\r\n        } else {\r\n            this.phys_addr_high = 0;\r\n            return this.read32s(this.phys_addr);\r\n        }\r\n    } else {\r\n        return this.reg32s[this.modrm_byte & 7];\r\n    }\r\n};\r\n\r\nCPU.prototype.write_e32 = function(value)\r\n{\r\n    if(this.modrm_byte < 0xC0) {\r\n        if(this.phys_addr_high) {\r\n            this.virt_boundary_write32(this.phys_addr, this.phys_addr_high, value);\r\n        } else {\r\n            this.write32(this.phys_addr, value);\r\n        }\r\n    } else {\r\n        this.reg32s[this.modrm_byte & 7] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.read_reg_e16 = function()\r\n{\r\n    return this.reg16[this.modrm_byte << 1 & 14];\r\n};\r\n\r\nCPU.prototype.write_reg_e16 = function(value)\r\n{\r\n    this.reg16[this.modrm_byte << 1 & 14] = value;\r\n};\r\n\r\nCPU.prototype.read_reg_e32s = function()\r\n{\r\n    return this.reg32s[this.modrm_byte & 7];\r\n};\r\n\r\nCPU.prototype.write_reg_e32 = function(value)\r\n{\r\n    this.reg32s[this.modrm_byte & 7] = value;\r\n};\r\n\r\nCPU.prototype.read_g8 = function()\r\n{\r\n    return this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1];\r\n};\r\n\r\nCPU.prototype.write_g8 = function(value)\r\n{\r\n    this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1] = value;\r\n};\r\n\r\nCPU.prototype.read_g16 = function()\r\n{\r\n    return this.reg16[this.modrm_byte >> 2 & 14];\r\n};\r\n\r\nCPU.prototype.read_g16s = function()\r\n{\r\n    return this.reg16s[this.modrm_byte >> 2 & 14];\r\n};\r\n\r\nCPU.prototype.write_g16 = function(value)\r\n{\r\n    this.reg16[this.modrm_byte >> 2 & 14] = value;\r\n};\r\n\r\nCPU.prototype.read_g32s = function()\r\n{\r\n    return this.reg32s[this.modrm_byte >> 3 & 7];\r\n};\r\n\r\nCPU.prototype.write_g32 = function(value)\r\n{\r\n    this.reg32[this.modrm_byte >> 3 & 7] = value;\r\n};\r\n\r\nCPU.prototype.read_xmm64s = function()\r\n{\r\n    return this.create_atom64s(\r\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2],\r\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2 | 1]\r\n    );\r\n};\r\n\r\nCPU.prototype.read_xmm128s = function()\r\n{\r\n    let i = (this.modrm_byte >> 3 & 7) << 2;\r\n    return this.create_atom128s(\r\n        this.reg_xmm32s[i | 0],\r\n        this.reg_xmm32s[i | 1],\r\n        this.reg_xmm32s[i | 2],\r\n        this.reg_xmm32s[i | 3]\r\n    );\r\n};\r\n\r\nCPU.prototype.read_mmx64s = function()\r\n{\r\n    return this.create_atom64s(\r\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)],\r\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1]\r\n    );\r\n};\r\n\r\nCPU.prototype.write_mmx64s = function(low, high)\r\n{\r\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)] = low;\r\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1] = high;\r\n};\r\n\r\nCPU.prototype.write_xmm64 = function(low, high)\r\n{\r\n    let i = (this.modrm_byte >> 3 & 7) << 2;\r\n    this.reg_xmm32s[i] = low;\r\n    this.reg_xmm32s[i + 1] = high;\r\n};\r\n\r\nCPU.prototype.write_xmm128s = function(d0, d1, d2, d3)\r\n{\r\n    let i = (this.modrm_byte >> 3 & 7) << 2;\r\n    this.reg_xmm32s[i] = d0;\r\n    this.reg_xmm32s[i + 1] = d1;\r\n    this.reg_xmm32s[i + 2] = d2;\r\n    this.reg_xmm32s[i + 3] = d3;\r\n};\r\n\r\nCPU.prototype.pic_call_irq = function(int)\r\n{\r\n    try\r\n    {\r\n        this.previous_ip = this.instruction_pointer;\r\n        this.call_interrupt_vector(int, false, false);\r\n    }\r\n    catch(e)\r\n    {\r\n        this.exception_cleanup(e);\r\n    }\r\n};\r\n\r\nCPU.prototype.handle_irqs = function()\r\n{\r\n    dbg_assert(!this.page_fault);\r\n\r\n    this.diverged();\r\n\r\n    if((this.flags & flag_interrupt) && !this.page_fault)\r\n    {\r\n        if(this.devices.pic)\r\n        {\r\n            this.devices.pic.acknowledge_irq();\r\n        }\r\n\r\n        if(this.devices.apic)\r\n        {\r\n            this.devices.apic.acknowledge_irq();\r\n        }\r\n    }\r\n};\r\n\r\nCPU.prototype.device_raise_irq = function(i)\r\n{\r\n    dbg_assert(arguments.length === 1);\r\n    if(this.devices.pic)\r\n    {\r\n        this.devices.pic.set_irq(i);\r\n    }\r\n\r\n    if(this.devices.ioapic)\r\n    {\r\n        this.devices.ioapic.set_irq(i);\r\n    }\r\n};\r\n\r\nCPU.prototype.device_lower_irq = function(i)\r\n{\r\n    if(this.devices.pic)\r\n    {\r\n        this.devices.pic.clear_irq(i);\r\n    }\r\n\r\n    if(this.devices.ioapic)\r\n    {\r\n        this.devices.ioapic.clear_irq(i);\r\n    }\r\n};\r\n\r\nCPU.prototype.test_privileges_for_io = function(port, size)\r\n{\r\n    if(this.protected_mode && (this.cpl > this.getiopl() || (this.flags & flag_vm)))\r\n    {\r\n        if(!this.tss_size_32)\r\n        {\r\n            dbg_log(\"#GP for port io, 16-bit TSS  port=\" + h(port) + \" size=\" + size, LOG_CPU);\r\n            CPU_LOG_VERBOSE && this.debug.dump_state();\r\n            this.trigger_gp(0);\r\n        }\r\n\r\n        var tsr_size = this.segment_limits[reg_tr];\r\n        var tsr_offset = this.segment_offsets[reg_tr];\r\n\r\n        if(tsr_size >= 0x67)\r\n        {\r\n            dbg_assert((tsr_offset + 0x64 + 2 & 0xFFF) < 0xFFF);\r\n\r\n            var iomap_base = this.read16(this.translate_address_system_read(tsr_offset + 0x64 + 2 | 0)),\r\n                high_port = port + size - 1 | 0;\r\n\r\n            if(tsr_size >= (iomap_base + (high_port >> 3) | 0))\r\n            {\r\n                var mask = ((1 << size) - 1) << (port & 7),\r\n                    addr = this.translate_address_system_read(tsr_offset + iomap_base + (port >> 3) | 0),\r\n                    port_info = (mask & 0xFF00) ?\r\n                        this.read16(addr) : this.read8(addr);\r\n\r\n                dbg_assert((addr & 0xFFF) < 0xFFF);\r\n\r\n                if(!(port_info & mask))\r\n                {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        dbg_log(\"#GP for port io  port=\" + h(port) + \" size=\" + size, LOG_CPU);\r\n        CPU_LOG_VERBOSE && this.debug.dump_state();\r\n        this.trigger_gp(0);\r\n    }\r\n};\r\n\r\nCPU.prototype.cpuid = function()\r\n{\r\n    // cpuid\r\n    // TODO: Fill in with less bogus values\r\n\r\n    // http://lxr.linux.no/linux+%2a/arch/x86/include/asm/cpufeature.h\r\n    // http://www.sandpile.org/x86/cpuid.htm\r\n\r\n    var eax = 0;\r\n    var ecx = 0;\r\n    var edx = 0;\r\n    var ebx = 0;\r\n\r\n    switch(this.reg32s[reg_eax])\r\n    {\r\n        case 0:\r\n            // maximum supported level\r\n            if(this.winnt_fix)\r\n            {\r\n                eax = 2;\r\n            }\r\n            else\r\n            {\r\n                eax = 5;\r\n            }\r\n\r\n            ebx = 0x756E6547|0; // Genu\r\n            edx = 0x49656E69|0; // ineI\r\n            ecx = 0x6C65746E|0; // ntel\r\n            break;\r\n\r\n        case 1:\r\n            // pentium\r\n            eax = 3 | 6 << 4 | 15 << 8;\r\n            ebx = 1 << 16 | 8 << 8; // cpu count, clflush size\r\n            ecx = 1 << 23 | 1 << 30; // popcnt, rdrand\r\n            var vme = 0 << 1;\r\n            if(VMWARE_HYPERVISOR_PORT) ecx |= 1 << 31; // hypervisor\r\n            edx = (this.fpu ? 1 : 0) |                // fpu\r\n                    vme | 1 << 3 | 1 << 4 | 1 << 5 |   // vme, pse, tsc, msr\r\n                    1 << 8 | 1 << 11 | 1 << 13 | 1 << 15 | // cx8, sep, pge, cmov\r\n                    0 << 23 | 0 << 24 | 0 << 25 | 0 << 26;   // mmx, fxsr, sse, sse2\r\n\r\n            if(ENABLE_ACPI && this.apic_enabled)\r\n            {\r\n                edx |= 1 << 9; // apic\r\n            }\r\n            break;\r\n\r\n        case 2:\r\n            // Taken from http://siyobik.info.gf/main/reference/instruction/CPUID\r\n            eax = 0x665B5001|0;\r\n            ebx = 0;\r\n            ecx = 0;\r\n            edx = 0x007A7000;\r\n            break;\r\n\r\n        case 4:\r\n            // from my local machine\r\n            switch(this.reg32s[reg_ecx])\r\n            {\r\n                case 0:\r\n                    eax = 0x00000121;\r\n                    ebx = 0x01c0003f;\r\n                    ecx = 0x0000003f;\r\n                    edx = 0x00000001;\r\n                    break;\r\n                case 1:\r\n                    eax = 0x00000122;\r\n                    ebx = 0x01c0003f;\r\n                    ecx = 0x0000003f;\r\n                    edx = 0x00000001;\r\n                    break;\r\n                case 2:\r\n                    eax = 0x00000143;\r\n                    ebx = 0x05c0003f;\r\n                    ecx = 0x00000fff;\r\n                    edx = 0x00000001;\r\n                    break;\r\n            }\r\n            break;\r\n\r\n        case 5:\r\n            // from my local machine\r\n            eax = 0x40;\r\n            ebx = 0x40;\r\n            ecx = 3;\r\n            edx = 0x00142120;\r\n            break;\r\n\r\n        case 0x80000000|0:\r\n            // maximum supported extended level\r\n            eax = 5;\r\n            // other registers are reserved\r\n            break;\r\n\r\n        case 0x40000000|0: // hypervisor\r\n            if(VMWARE_HYPERVISOR_PORT)\r\n            {\r\n                // h(\"Ware\".split(\"\").reduce((a, c, i) => a | c.charCodeAt(0) << i * 8, 0))\r\n                ebx = 0x61774D56|0; // VMwa\r\n                ecx = 0x4D566572|0; // reVM\r\n                edx = 0x65726177|0; // ware\r\n            }\r\n            break;\r\n\r\n        default:\r\n            dbg_log(\"cpuid: unimplemented eax: \" + h(this.reg32[reg_eax]), LOG_CPU);\r\n    }\r\n\r\n    dbg_log(\"cpuid: eax=\" + h(this.reg32[reg_eax], 8) + \" cl=\" + h(this.reg8[reg_cl], 2), LOG_CPU);\r\n\r\n    this.reg32s[reg_eax] = eax;\r\n    this.reg32s[reg_ecx] = ecx;\r\n    this.reg32s[reg_edx] = edx;\r\n    this.reg32s[reg_ebx] = ebx;\r\n};\r\n\r\nCPU.prototype.update_cs_size = function(new_size)\r\n{\r\n    dbg_assert(typeof new_size === \"boolean\");\r\n\r\n    if(this.is_32 !== new_size)\r\n    {\r\n        this.clear_instruction_cache();\r\n        this.is_32 = new_size;\r\n        this.update_operand_size();\r\n    }\r\n};\r\n\r\nCPU.prototype.update_operand_size = function()\r\n{\r\n    if(this.is_32)\r\n    {\r\n        this.table = this.table32;\r\n    }\r\n    else\r\n    {\r\n        this.table = this.table16;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} selector\r\n */\r\nCPU.prototype.lookup_segment_selector = function(selector)\r\n{\r\n    dbg_assert(typeof selector === \"number\" && selector >= 0 && selector < 0x10000);\r\n\r\n    var is_gdt = (selector & 4) === 0,\r\n        selector_offset = selector & ~7,\r\n        info,\r\n        table_offset,\r\n        table_limit;\r\n\r\n    info = {\r\n        rpl: selector & 3,\r\n        from_gdt: is_gdt,\r\n        is_null: false,\r\n        is_valid: true,\r\n\r\n        base: 0,\r\n        access: 0,\r\n        flags: 0,\r\n        type: 0,\r\n        dpl: 0,\r\n        is_system: false,\r\n        is_present: false,\r\n        is_executable: false,\r\n        rw_bit: false,\r\n        dc_bit: false,\r\n        size: false,\r\n\r\n        is_conforming_executable: false,\r\n\r\n        // limit after applying granularity\r\n        effective_limit: 0,\r\n\r\n        is_writable: false,\r\n        is_readable: false,\r\n        table_offset: 0,\r\n\r\n        raw0: 0,\r\n        raw1: 0,\r\n    };\r\n\r\n    if(is_gdt)\r\n    {\r\n        table_offset = this.gdtr_offset;\r\n        table_limit = this.gdtr_size;\r\n    }\r\n    else\r\n    {\r\n        table_offset = this.segment_offsets[reg_ldtr];\r\n        table_limit = this.segment_limits[reg_ldtr];\r\n    }\r\n\r\n    if(is_gdt && selector_offset === 0)\r\n    {\r\n        info.is_null = true;\r\n        return info;\r\n    }\r\n\r\n    // limit is the number of entries in the table minus one\r\n    if((selector | 7) > table_limit)\r\n    {\r\n        dbg_log(\"Selector \" + h(selector, 4) + \" is outside of the \" +\r\n            (is_gdt ? \"g\" : \"l\") + \"dt limits\", LOG_CPU);\r\n        info.is_valid = false;\r\n        return info;\r\n    }\r\n\r\n    table_offset = table_offset + selector_offset | 0;\r\n\r\n    if(this.paging)\r\n    {\r\n        table_offset = this.translate_address_system_read(table_offset);\r\n    }\r\n    info.table_offset = table_offset;\r\n\r\n    info.base = this.read16(table_offset + 2 | 0) | this.read8(table_offset + 4 | 0) << 16 |\r\n                this.read8(table_offset + 7 | 0) << 24;\r\n    info.access = this.read8(table_offset + 5 | 0);\r\n    info.flags = this.read8(table_offset + 6 | 0) >> 4;\r\n\r\n    info.raw0 = this.read32s(table_offset     | 0);\r\n    info.raw1 = this.read32s(table_offset + 4 | 0);\r\n\r\n    //this.write8(table_offset + 5 | 0, info.access | 1);\r\n\r\n    // used if system\r\n    info.type = info.access & 0xF;\r\n\r\n    info.dpl = info.access >> 5 & 3;\r\n\r\n    info.is_system = (info.access & 0x10) === 0;\r\n    info.is_present = (info.access & 0x80) === 0x80;\r\n    info.is_executable = (info.access & 8) === 8;\r\n\r\n    info.rw_bit = (info.access & 2) === 2;\r\n    info.dc_bit = (info.access & 4) === 4;\r\n\r\n    info.is_conforming_executable = info.dc_bit && info.is_executable;\r\n\r\n    info.size = (info.flags & 4) === 4;\r\n\r\n    var limit = this.read16(table_offset) |\r\n                (this.read8(table_offset + 6 | 0) & 0xF) << 16;\r\n\r\n    if(info.flags & 8)\r\n    {\r\n        // granularity set\r\n        info.effective_limit = (limit << 12 | 0xFFF) >>> 0;\r\n    }\r\n    else\r\n    {\r\n        info.effective_limit = limit;\r\n    }\r\n\r\n    info.is_writable = info.rw_bit && !info.is_executable;\r\n    info.is_readable = info.rw_bit || !info.is_executable;\r\n\r\n    return info;\r\n};\r\n\r\n/**\r\n * @param {number} reg\r\n * @param {number} selector\r\n */\r\nCPU.prototype.switch_seg = function(reg, selector)\r\n{\r\n    dbg_assert(reg >= 0 && reg <= 5);\r\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\r\n\r\n    if(!this.protected_mode || this.vm86_mode())\r\n    {\r\n        this.sreg[reg] = selector;\r\n        this.segment_is_null[reg] = 0;\r\n        this.segment_offsets[reg] = selector << 4;\r\n\r\n        if(reg === reg_ss)\r\n        {\r\n            this.stack_size_32 = false;\r\n        }\r\n        return;\r\n    }\r\n\r\n    var info = this.lookup_segment_selector(selector);\r\n\r\n    if(reg === reg_ss)\r\n    {\r\n        if(info.is_null)\r\n        {\r\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(selector, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(0);\r\n        }\r\n\r\n        if(!info.is_valid ||\r\n           info.is_system ||\r\n           info.rpl !== this.cpl ||\r\n           !info.is_writable ||\r\n           info.dpl !== this.cpl)\r\n        {\r\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(selector, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(selector & ~3);\r\n        }\r\n\r\n        if(!info.is_present)\r\n        {\r\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(selector, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_ss(selector & ~3);\r\n        }\r\n\r\n        this.stack_size_32 = info.size;\r\n    }\r\n    else if(reg === reg_cs)\r\n    {\r\n        // handled by switch_cs_real_mode, far_return or far_jump\r\n        dbg_assert(false);\r\n    }\r\n    else\r\n    {\r\n        // es, ds, fs, gs\r\n        if(info.is_null)\r\n        {\r\n            //dbg_log(\"0 loaded in seg=\" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\r\n            //dbg_trace(LOG_CPU);\r\n            this.sreg[reg] = selector;\r\n            this.segment_is_null[reg] = 1;\r\n            return;\r\n        }\r\n\r\n        if(!info.is_valid ||\r\n           info.is_system ||\r\n           !info.is_readable ||\r\n           (!info.is_conforming_executable &&\r\n            (info.rpl > info.dpl || this.cpl > info.dpl))\r\n        ) {\r\n            dbg_log(\"#GP for loading invalid in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\r\n            this.debug.dump_state();\r\n            this.debug.dump_regs();\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_gp(selector & ~3);\r\n        }\r\n\r\n        if(!info.is_present)\r\n        {\r\n            dbg_log(\"#NP for loading not-present in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\r\n            dbg_trace(LOG_CPU);\r\n            this.trigger_np(selector & ~3);\r\n        }\r\n    }\r\n\r\n    this.segment_is_null[reg] = 0;\r\n    this.segment_limits[reg] = info.effective_limit;\r\n    //this.segment_infos[reg] = 0; // TODO\r\n\r\n    this.segment_offsets[reg] = info.base;\r\n    this.sreg[reg] = selector;\r\n};\r\n\r\nCPU.prototype.load_tr = function(selector)\r\n{\r\n    var info = this.lookup_segment_selector(selector);\r\n\r\n    dbg_assert(info.is_valid);\r\n    //dbg_log(\"load tr: \" + h(selector, 4) + \" offset=\" + h(info.base >>> 0, 8) + \" limit=\" + h(info.effective_limit >>> 0, 8), LOG_CPU);\r\n\r\n    if(!info.from_gdt)\r\n    {\r\n        throw this.debug.unimpl(\"TR can only be loaded from GDT\");\r\n    }\r\n\r\n    if(info.is_null)\r\n    {\r\n        dbg_log(\"#GP(0) | tried to load null selector (ltr)\");\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if(!info.is_system)\r\n    {\r\n        dbg_log(\"#GP | ltr: not a system entry\");\r\n        throw this.debug.unimpl(\"#GP handler (happens when running kvm-unit-test without ACPI)\");\r\n    }\r\n\r\n    if(info.type !== 9 && info.type !== 1)\r\n    {\r\n        // 0xB: busy 386 TSS (GP)\r\n        // 0x9: 386 TSS\r\n        // 0x3: busy 286 TSS (GP)\r\n        // 0x1: 286 TSS (??)\r\n        dbg_log(\"#GP | ltr: invalid type (type = \" + h(info.type) + \")\");\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if(!info.is_present)\r\n    {\r\n        dbg_log(\"#NT | present bit not set (ltr)\");\r\n        throw this.debug.unimpl(\"#NT handler\");\r\n    }\r\n\r\n    this.tss_size_32 = info.type === 9;\r\n    this.segment_offsets[reg_tr] = info.base;\r\n    this.segment_limits[reg_tr] = info.effective_limit;\r\n    this.sreg[reg_tr] = selector;\r\n\r\n    // Mark task as busy\r\n    this.write8(info.table_offset + 5 | 0, this.read8(info.table_offset + 5 | 0) | 2);\r\n\r\n    //dbg_log(\"tsr at \" + h(info.base) + \"; (\" + info.effective_limit + \" bytes)\");\r\n};\r\n\r\nCPU.prototype.load_ldt = function(selector)\r\n{\r\n    var info = this.lookup_segment_selector(selector);\r\n\r\n    if(info.is_null)\r\n    {\r\n        // invalid\r\n        this.segment_offsets[reg_ldtr] = 0;\r\n        this.segment_limits[reg_ldtr] = 0;\r\n        return;\r\n    }\r\n\r\n    dbg_assert(info.is_valid);\r\n\r\n    if(!info.from_gdt)\r\n    {\r\n        throw this.debug.unimpl(\"LDTR can only be loaded from GDT\");\r\n    }\r\n\r\n    if(!info.is_present)\r\n    {\r\n        dbg_log(\"lldt: present bit not set\");\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if(!info.is_system)\r\n    {\r\n        dbg_log(\"lldt: not a system entry\");\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    if(info.type !== 2)\r\n    {\r\n        dbg_log(\"lldt: invalid type (\" + info.type + \")\");\r\n        throw this.debug.unimpl(\"#GP handler\");\r\n    }\r\n\r\n    this.segment_offsets[reg_ldtr] = info.base;\r\n    this.segment_limits[reg_ldtr] = info.effective_limit;\r\n    this.sreg[reg_ldtr] = selector;\r\n\r\n    //dbg_log(\"ldt at \" + h(info.base >>> 0) + \"; (\" + info.effective_limit + \" bytes)\", LOG_CPU);\r\n};\r\n\r\nCPU.prototype.arpl = function(seg, r16)\r\n{\r\n    this.flags_changed &= ~flag_zero;\r\n\r\n    if((seg & 3) < (this.reg16[r16] & 3))\r\n    {\r\n        this.flags |= flag_zero;\r\n        return seg & ~3 | this.reg16[r16] & 3;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_zero;\r\n        return seg;\r\n    }\r\n};\r\n\r\nCPU.prototype.lar = function(selector, original)\r\n{\r\n    dbg_log(\"lar sel=\" + h(selector, 4), LOG_CPU);\r\n\r\n    /** @const */\r\n    var LAR_INVALID_TYPE = 1 << 0 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 0xA |\r\n                           1 << 0xD | 1 << 0xE | 1 << 0xF;\r\n\r\n    var info = this.lookup_segment_selector(selector);\r\n    this.flags_changed &= ~flag_zero;\r\n\r\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\r\n\r\n    if(info.is_null || !info.is_valid ||\r\n       (info.is_system ? (LAR_INVALID_TYPE >> info.type & 1) || dpl_bad :\r\n                         !info.is_conforming_executable && dpl_bad)\r\n    ) {\r\n        this.flags &= ~flag_zero;\r\n        dbg_log(\"lar: invalid selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\r\n        return original;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= flag_zero;\r\n        return info.raw1 & 0x00FFFF00;\r\n    }\r\n};\r\n\r\nCPU.prototype.lsl = function(selector, original)\r\n{\r\n    dbg_log(\"lsl sel=\" + h(selector, 4), LOG_CPU);\r\n\r\n    /** @const */\r\n    var LSL_INVALID_TYPE = 1 << 0 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 8 |\r\n                           1 << 0xA | 1 << 0xC | 1 << 0xD | 1 << 0xE | 1 << 0xF;\r\n\r\n    var info = this.lookup_segment_selector(selector);\r\n    this.flags_changed &= ~flag_zero;\r\n\r\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\r\n\r\n    if(info.is_null || !info.is_valid ||\r\n       (info.is_system ? (LSL_INVALID_TYPE >> info.type & 1) || dpl_bad :\r\n                         !info.is_conforming_executable && dpl_bad)\r\n    ) {\r\n        this.flags &= ~flag_zero;\r\n        dbg_log(\"lsl: invalid  selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\r\n        return original;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= flag_zero;\r\n        return info.effective_limit | 0;\r\n    }\r\n\r\n};\r\n\r\nCPU.prototype.verr = function(selector)\r\n{\r\n    var info = this.lookup_segment_selector(selector);\r\n    this.flags_changed &= ~flag_zero;\r\n\r\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_readable ||\r\n       (!info.is_conforming_executable && (info.dpl < this.cpl || info.dpl < info.rpl)))\r\n    {\r\n        dbg_log(\"verr -> invalid. selector=\" + h(selector, 4), LOG_CPU);\r\n        this.flags &= ~flag_zero;\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"verr -> valid. selector=\" + h(selector, 4), LOG_CPU);\r\n        this.flags |= flag_zero;\r\n    }\r\n};\r\n\r\nCPU.prototype.verw = function(selector)\r\n{\r\n    var info = this.lookup_segment_selector(selector);\r\n    this.flags_changed &= ~flag_zero;\r\n\r\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_writable ||\r\n       info.dpl < this.cpl || info.dpl < info.rpl)\r\n    {\r\n        dbg_log(\"verw invalid \" + \" \" + h(selector) + \" \" + info.is_null + \" \" +\r\n                !info.is_valid + \" \" + info.is_system + \" \" + !info.is_writable + \" \" +\r\n                (info.dpl < this.cpl) + \" \" + (info.dpl < info.rpl) + \" \" + LOG_CPU);\r\n        this.flags &= ~flag_zero;\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"verw valid\", LOG_CPU);\r\n        this.flags |= flag_zero;\r\n    }\r\n};\r\n\r\nCPU.prototype.clear_tlb = function()\r\n{\r\n    // clear tlb excluding global pages\r\n    this.last_virt_eip = -1;\r\n    this.last_virt_esp = -1;\r\n\r\n    this.tlb_info.set(this.tlb_info_global);\r\n\r\n    //dbg_log(\"page table loaded\", LOG_CPU);\r\n};\r\n\r\nCPU.prototype.full_clear_tlb = function()\r\n{\r\n    //dbg_log(\"TLB full clear\", LOG_CPU);\r\n\r\n    // clear tlb including global pages\r\n    var buf32 = new Int32Array(this.tlb_info_global.buffer);\r\n    for(var i = 0; i < (1 << 18); )\r\n    {\r\n        buf32[i++] = buf32[i++] = buf32[i++] = buf32[i++] = 0;\r\n    }\r\n\r\n    this.clear_tlb();\r\n};\r\n\r\nCPU.prototype.invlpg = function(addr)\r\n{\r\n    var page = addr >>> 12;\r\n    //dbg_log(\"invlpg: addr=\" + h(addr >>> 0), LOG_CPU);\r\n\r\n    this.tlb_info[page] = 0;\r\n    this.tlb_info_global[page] = 0;\r\n\r\n    this.last_virt_eip = -1;\r\n    this.last_virt_esp = -1;\r\n};\r\n\r\nCPU.prototype.translate_address_read = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    if(this.cpl === 3)\r\n    {\r\n        return this.translate_address_user_read(addr);\r\n    }\r\n    else\r\n    {\r\n        return this.translate_address_system_read(addr);\r\n    }\r\n};\r\n\r\nCPU.prototype.translate_address_write = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    if(this.cpl === 3)\r\n    {\r\n        return this.translate_address_user_write(addr);\r\n    }\r\n    else\r\n    {\r\n        return this.translate_address_system_write(addr);\r\n    }\r\n};\r\n\r\nCPU.prototype.translate_address_user_write = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    var base = addr >>> 12;\r\n\r\n    if(this.tlb_info[base] & TLB_USER_WRITE)\r\n    {\r\n        return this.tlb_data[base] ^ addr;\r\n    }\r\n    else\r\n    {\r\n        return this.do_page_translation(addr, 1, 1) | addr & 0xFFF;\r\n    }\r\n};\r\n\r\nCPU.prototype.translate_address_user_read = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    var base = addr >>> 12;\r\n\r\n    if(this.tlb_info[base] & TLB_USER_READ)\r\n    {\r\n        return this.tlb_data[base] ^ addr;\r\n    }\r\n    else\r\n    {\r\n        return this.do_page_translation(addr, 0, 1) | addr & 0xFFF;\r\n    }\r\n};\r\n\r\nCPU.prototype.translate_address_system_write = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    var base = addr >>> 12;\r\n\r\n    if(this.tlb_info[base] & TLB_SYSTEM_WRITE)\r\n    {\r\n        return this.tlb_data[base] ^ addr;\r\n    }\r\n    else\r\n    {\r\n        return this.do_page_translation(addr, 1, 0) | addr & 0xFFF;\r\n    }\r\n};\r\n\r\nCPU.prototype.translate_address_system_read = function(addr)\r\n{\r\n    if(!this.paging)\r\n    {\r\n        return addr;\r\n    }\r\n\r\n    var base = addr >>> 12;\r\n\r\n    if(this.tlb_info[base] & TLB_SYSTEM_READ)\r\n    {\r\n        return this.tlb_data[base] ^ addr;\r\n    }\r\n    else\r\n    {\r\n        return this.do_page_translation(addr, 0, 0) | addr & 0xFFF;\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n */\r\nCPU.prototype.do_page_translation = function(addr, for_writing, user)\r\n{\r\n    var page = addr >>> 12,\r\n        page_dir_addr = (this.cr[3] >>> 2) + (page >> 10) | 0,\r\n        page_dir_entry = this.mem32s[page_dir_addr],\r\n        high,\r\n        can_write = true,\r\n        global,\r\n        cachable = true,\r\n        allow_user = true;\r\n\r\n    dbg_assert(addr < 0x80000000);\r\n\r\n    if(!(page_dir_entry & 1))\r\n    {\r\n        // to do at this place:\r\n        //\r\n        // - set cr2 = addr (which caused the page fault)\r\n        // - call_interrupt_vector  with id 14, error code 0-7 (requires information if read or write)\r\n        // - prevent execution of the function that triggered this call\r\n        //dbg_log(\"#PF not present\", LOG_CPU);\r\n\r\n        this.cr[2] = addr;\r\n        this.trigger_pagefault(for_writing, user, 0);\r\n\r\n        // never reached as this.trigger_pagefault throws up\r\n        dbg_assert(false);\r\n    }\r\n\r\n    if((page_dir_entry & 2) === 0)\r\n    {\r\n        can_write = false;\r\n\r\n        if(for_writing && (user || (this.cr[0] & CR0_WP)))\r\n        {\r\n            this.cr[2] = addr;\r\n            this.trigger_pagefault(for_writing, user, 1);\r\n            dbg_assert(false);\r\n        }\r\n    }\r\n\r\n    if((page_dir_entry & 4) === 0)\r\n    {\r\n        allow_user = false;\r\n\r\n        if(user)\r\n        {\r\n            // \"Page Fault: page table accessed by non-supervisor\";\r\n            //dbg_log(\"#PF supervisor\", LOG_CPU);\r\n            this.cr[2] = addr;\r\n            this.trigger_pagefault(for_writing, user, 1);\r\n            dbg_assert(false);\r\n        }\r\n    }\r\n\r\n    if(page_dir_entry & this.page_size_extensions)\r\n    {\r\n        // size bit is set\r\n\r\n        // set the accessed and dirty bits\r\n        this.mem32s[page_dir_addr] = page_dir_entry | 0x20 | for_writing << 6;\r\n\r\n        high = (page_dir_entry & 0xFFC00000) | (addr & 0x3FF000);\r\n        global = page_dir_entry & 0x100;\r\n    }\r\n    else\r\n    {\r\n        var page_table_addr = ((page_dir_entry & 0xFFFFF000) >>> 2) + (page & 0x3FF) | 0,\r\n            page_table_entry = this.mem32s[page_table_addr];\r\n\r\n        if((page_table_entry & 1) === 0)\r\n        {\r\n            //dbg_log(\"#PF not present table\", LOG_CPU);\r\n            this.cr[2] = addr;\r\n            this.trigger_pagefault(for_writing, user, 0);\r\n            dbg_assert(false);\r\n        }\r\n\r\n        if((page_table_entry & 2) === 0)\r\n        {\r\n            can_write = false;\r\n\r\n            if(for_writing && (user || (this.cr[0] & CR0_WP)))\r\n            {\r\n                //dbg_log(\"#PF not writable page\", LOG_CPU);\r\n                this.cr[2] = addr;\r\n                this.trigger_pagefault(for_writing, user, 1);\r\n                dbg_assert(false);\r\n            }\r\n        }\r\n\r\n        if((page_table_entry & 4) === 0)\r\n        {\r\n            allow_user = false;\r\n\r\n            if(user)\r\n            {\r\n                //dbg_log(\"#PF not supervisor page\", LOG_CPU);\r\n                this.cr[2] = addr;\r\n                this.trigger_pagefault(for_writing, user, 1);\r\n                dbg_assert(false);\r\n            }\r\n        }\r\n\r\n        // set the accessed and dirty bits\r\n        this.write_aligned32(page_dir_addr, page_dir_entry | 0x20);\r\n        this.write_aligned32(page_table_addr, page_table_entry | 0x20 | for_writing << 6);\r\n\r\n        high = page_table_entry & 0xFFFFF000;\r\n        global = page_table_entry & 0x100;\r\n    }\r\n\r\n    this.tlb_data[page] = high ^ page << 12;\r\n\r\n    var allowed_flag;\r\n\r\n    if(allow_user)\r\n    {\r\n        if(can_write)\r\n        {\r\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE | TLB_USER_READ | TLB_USER_WRITE;\r\n        }\r\n        else\r\n        {\r\n            // TODO: Consider if cr0.wp is not set\r\n            allowed_flag = TLB_SYSTEM_READ | TLB_USER_READ;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if(can_write)\r\n        {\r\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE;\r\n        }\r\n        else\r\n        {\r\n            allowed_flag = TLB_SYSTEM_READ;\r\n        }\r\n    }\r\n\r\n    this.tlb_info[page] = allowed_flag;\r\n\r\n    if(global && (this.cr[4] & CR4_PGE))\r\n    {\r\n        this.tlb_info_global[page] = allowed_flag;\r\n    }\r\n\r\n    return high;\r\n};\r\n\r\nCPU.prototype.writable_or_pagefault = function(addr, size)\r\n{\r\n    dbg_assert(size < 0x1000, \"not supported yet\");\r\n    dbg_assert(size > 0);\r\n\r\n    if(!this.paging)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var user = this.cpl === 3 ? 1 : 0,\r\n        mask = user ? TLB_USER_WRITE : TLB_SYSTEM_WRITE,\r\n        page = addr >>> 12;\r\n\r\n    if((this.tlb_info[page] & mask) === 0)\r\n    {\r\n        this.do_page_translation(addr, 1, user);\r\n    }\r\n\r\n    if((addr & 0xFFF) + size - 1 >= 0x1000)\r\n    {\r\n        if((this.tlb_info[page + 1 | 0] & mask) === 0)\r\n        {\r\n            this.do_page_translation(addr + size - 1 | 0, 1, user);\r\n        }\r\n    }\r\n};\r\n\r\nCPU.prototype.trigger_pagefault = function(write, user, present)\r\n{\r\n    if(LOG_PAGE_FAULTS)\r\n    {\r\n        dbg_log(\"page fault w=\" + write + \" u=\" + user + \" p=\" + present +\r\n                \" eip=\" + h(this.previous_ip >>> 0, 8) +\r\n                \" cr2=\" + h(this.cr[2] >>> 0, 8), LOG_CPU);\r\n        dbg_trace(LOG_CPU);\r\n    }\r\n\r\n    if(this.page_fault)\r\n    {\r\n        dbg_trace(LOG_CPU);\r\n        throw this.debug.unimpl(\"Double fault\");\r\n    }\r\n\r\n    // invalidate tlb entry\r\n    var page = this.cr[2] >>> 12;\r\n    this.tlb_info[page] = 0;\r\n    this.tlb_info_global[page] = 0;\r\n\r\n    this.instruction_pointer = this.previous_ip;\r\n    this.page_fault = true;\r\n    this.call_interrupt_vector(14, false, user << 2 | write << 1 | present);\r\n\r\n    throw MAGIC_CPU_EXCEPTION;\r\n};\r\n\r\nCPU.prototype.is_osize_32 = function()\r\n{\r\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_OPSIZE) === PREFIX_MASK_OPSIZE);\r\n};\r\n\r\nCPU.prototype.is_asize_32 = function()\r\n{\r\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_ADDRSIZE) === PREFIX_MASK_ADDRSIZE);\r\n};\r\n\r\nCPU.prototype.get_reg_asize = function(reg)\r\n{\r\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\r\n    var r = this.reg32s[reg];\r\n\r\n    if(this.is_asize_32())\r\n    {\r\n        return r;\r\n    }\r\n    else\r\n    {\r\n        return r & 0xFFFF;\r\n    }\r\n};\r\n\r\nCPU.prototype.set_ecx_asize = function(value)\r\n{\r\n    if(this.is_asize_32())\r\n    {\r\n        this.reg32s[reg_ecx] = value;\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg_cx] = value;\r\n    }\r\n};\r\n\r\nCPU.prototype.add_reg_asize = function(reg, value)\r\n{\r\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\r\n    if(this.is_asize_32())\r\n    {\r\n        this.reg32s[reg] += value;\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg << 1] += value;\r\n    }\r\n};\r\n\r\nCPU.prototype.decr_ecx_asize = function()\r\n{\r\n    return this.is_asize_32() ? --this.reg32s[reg_ecx] : --this.reg16[reg_cx];\r\n};\r\n\r\nCPU.prototype.invalid_arithmatic = function()\r\n{\r\n    this.mxcsr |= CPU_EX_I;\r\n};\r\n\r\nCPU.prototype.is_SNaN32 = function(value)\r\n{\r\n    let exponent = (value >>> 23) & 0xFF;\r\n    let most_significand = (value >>> 22) & 1;\r\n    let less_significand = (value >>> 0) & 0x3FFFFF;\r\n\r\n    return exponent === 0xFF && most_significand === 0 && less_significand > 0;\r\n};\r\n\r\n// Closure Compiler's way of exporting\r\nif(typeof window !== \"undefined\")\r\n{\r\n    window[\"CPU\"] = CPU;\r\n}\r\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\r\n{\r\n    module.exports[\"CPU\"] = CPU;\r\n}\r\nelse if(typeof importScripts === \"function\")\r\n{\r\n    self[\"CPU\"] = CPU;\r\n}\r\n","\"use strict\";\r\n/*\r\n * Compile time configuration, some only relevant for debug mode\r\n */\r\n\r\n/**\r\n * @define {boolean}\r\n * Overridden for production by closure compiler\r\n */\r\nvar DEBUG = false;\r\n\r\n/** @const */\r\nvar LOG_TO_FILE = false;\r\n\r\n/**\r\n * @const\r\n * Enables logging all IO port reads and writes. Very verbose\r\n */\r\nvar LOG_ALL_IO = false;\r\n\r\n/**\r\n * @const\r\n * Enables logging of page faults, quite verbose\r\n */\r\nvar LOG_PAGE_FAULTS = false;\r\n\r\n\r\nvar LOG_LEVEL = LOG_ALL & ~LOG_PS2 & ~LOG_PIT & ~LOG_VIRTIO & ~LOG_9P & ~LOG_PIC &\r\n                          ~LOG_DMA & ~LOG_SERIAL & ~LOG_NET & ~LOG_FLOPPY & ~LOG_DISK;\r\n\r\n/**\r\n * @const\r\n * Draws entire buffer and visualizes the layers that would be drawn\r\n */\r\nvar DEBUG_SCREEN_LAYERS = DEBUG && false;\r\n\r\n\r\n/** @const */\r\nvar ENABLE_HPET = DEBUG && false;\r\n\r\n/**\r\n * @define {boolean}\r\n * Overridden by closure compiler\r\n */\r\nvar ENABLE_ACPI = false;\r\n\r\n/** @const */\r\nvar WINNT_FIX = false;\r\n\r\n/**\r\n * @const\r\n * How many cycles the CPU does at a time before running hardware timers\r\n */\r\nvar LOOP_COUNTER = 11001;\r\n\r\n/**\r\n * @const\r\n * How often, in milliseconds, to yield to the browser for rendering and\r\n * running events\r\n */\r\nvar TIME_PER_FRAME = 1;\r\n\r\n/**\r\n * @const\r\n * How many ticks the TSC does per millisecond\r\n */\r\nvar TSC_RATE = 8 * 1024;\r\n\r\n\r\n/** @const */\r\nvar APIC_TIMER_FREQ = TSC_RATE;\r\n\r\n\r\n/** @const */\r\nvar VMWARE_HYPERVISOR_PORT = true;\r\n","\"use strict\";\r\n\r\nvar v86util = v86util || {};\r\n\r\n// pad string with spaces on the right\r\nv86util.pads = function(str, len)\r\n{\r\n    str = str ? str + \"\" : \"\";\r\n\r\n    while(str.length < len)\r\n    {\r\n        str = str + \" \";\r\n    }\r\n\r\n    return str;\r\n};\r\n\r\n// pad string with zeros on the left\r\nv86util.pad0 = function(str, len)\r\n{\r\n    str = str ? str + \"\" : \"\";\r\n\r\n    while(str.length < len)\r\n    {\r\n        str = \"0\" + str;\r\n    }\r\n\r\n    return str;\r\n};\r\n\r\n/**\r\n * number to hex\r\n * @param {number} n\r\n * @param {number=} len\r\n * @return {string}\r\n */\r\nfunction h(n, len)\r\n{\r\n    if(!n)\r\n    {\r\n        var str = \"\";\r\n    }\r\n    else\r\n    {\r\n        var str = n.toString(16);\r\n    }\r\n\r\n    return \"0x\" + v86util.pad0(str.toUpperCase(), len || 1);\r\n}\r\n\r\n\r\nif(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues)\r\n{\r\n    let rand_data = new Int32Array(1);\r\n\r\n    v86util.has_rand_int = function()\r\n    {\r\n        return true;\r\n    };\r\n\r\n    v86util.get_rand_int = function()\r\n    {\r\n        window.crypto.getRandomValues(rand_data);\r\n        return rand_data[0];\r\n    };\r\n}\r\nelse\r\n{\r\n    v86util.has_rand_int = function()\r\n    {\r\n        return false;\r\n    };\r\n\r\n    v86util.get_rand_int = function()\r\n    {\r\n        console.assert(false);\r\n    };\r\n}\r\n\r\n\r\n/**\r\n * Synchronous access to ArrayBuffer\r\n * @constructor\r\n */\r\nfunction SyncBuffer(buffer)\r\n{\r\n    this.buffer = buffer;\r\n    this.byteLength = buffer.byteLength;\r\n    this.onload = undefined;\r\n    this.onprogress = undefined;\r\n}\r\n\r\nSyncBuffer.prototype.load = function()\r\n{\r\n    this.onload && this.onload({ buffer: this.buffer });\r\n};\r\n\r\n/**\r\n * @param {number} start\r\n * @param {number} len\r\n * @param {function(!Uint8Array)} fn\r\n */\r\nSyncBuffer.prototype.get = function(start, len, fn)\r\n{\r\n    dbg_assert(start + len <= this.byteLength);\r\n    fn(new Uint8Array(this.buffer, start, len));\r\n};\r\n\r\n/**\r\n * @param {number} start\r\n * @param {!Uint8Array} slice\r\n * @param {function()} fn\r\n */\r\nSyncBuffer.prototype.set = function(start, slice, fn)\r\n{\r\n    dbg_assert(start + slice.byteLength <= this.byteLength);\r\n\r\n    new Uint8Array(this.buffer, start, slice.byteLength).set(slice);\r\n    fn();\r\n};\r\n\r\n/**\r\n * @param {function(!ArrayBuffer)} fn\r\n */\r\nSyncBuffer.prototype.get_buffer = function(fn)\r\n{\r\n    fn(this.buffer);\r\n};\r\n\r\n\r\n\r\n(function()\r\n{\r\n    if(typeof Math.clz32 === \"function\" && Math.clz32(0) === 32 &&\r\n       Math.clz32(0x12345) === 15 && Math.clz32(-1) === 0)\r\n    {\r\n        /**\r\n         * calculate the integer logarithm base 2 of a byte\r\n         * @param {number} x\r\n         * @return {number}\r\n         */\r\n        v86util.int_log2_byte = function(x)\r\n        {\r\n            dbg_assert(x > 0);\r\n            dbg_assert(x < 0x100);\r\n\r\n            return 31 - Math.clz32(x);\r\n        };\r\n\r\n        /**\r\n         * calculate the integer logarithm base 2\r\n         * @param {number} x\r\n         * @return {number}\r\n         */\r\n        v86util.int_log2 = function(x)\r\n        {\r\n            dbg_assert(x > 0);\r\n\r\n            return 31 - Math.clz32(x);\r\n        };\r\n\r\n        return;\r\n    }\r\n\r\n    var int_log2_table = new Int8Array(256);\r\n\r\n    for(var i = 0, b = -2; i < 256; i++)\r\n    {\r\n        if(!(i & i - 1))\r\n            b++;\r\n\r\n        int_log2_table[i] = b;\r\n    }\r\n\r\n    /**\r\n     * calculate the integer logarithm base 2 of a byte\r\n     * @param {number} x\r\n     * @return {number}\r\n     */\r\n    v86util.int_log2_byte = function(x)\r\n    {\r\n        dbg_assert(x > 0);\r\n        dbg_assert(x < 0x100);\r\n\r\n        return int_log2_table[x];\r\n    };\r\n\r\n    /**\r\n     * calculate the integer logarithm base 2\r\n     * @param {number} x\r\n     * @return {number}\r\n     */\r\n    v86util.int_log2 = function(x)\r\n    {\r\n        dbg_assert(x > 0);\r\n\r\n        // http://jsperf.com/integer-log2/6\r\n        var tt = x >>> 16;\r\n\r\n        if(tt)\r\n        {\r\n            var t = tt >>> 8;\r\n            if(t)\r\n            {\r\n                return 24 + int_log2_table[t];\r\n            }\r\n            else\r\n            {\r\n                return 16 + int_log2_table[tt];\r\n            }\r\n        }\r\n        else\r\n        {\r\n            var t = x >>> 8;\r\n            if(t)\r\n            {\r\n                return 8 + int_log2_table[t];\r\n            }\r\n            else\r\n            {\r\n                return int_log2_table[x];\r\n            }\r\n        }\r\n    };\r\n})();\r\n\r\n\r\nv86util.mul_low = v86util.imul_low =\r\n    typeof Math.imul === \"function\" &&\r\n    Math.imul(0x01234567, 0x89abcdef) === -0x36b1b9d7 ? Math.imul : function(a, b) {\r\n        b |= 0;\r\n        return (a & 0x003fffff) * b + ((a & 0xffc00000) * b | 0) | 0;\r\n    };\r\n\r\n\r\nv86util.imul_high = function(a, b) {\r\n    return Math.floor(a * b / 0x100000000) | 0;\r\n};\r\n\r\nv86util.mul_high = function(a, b) {\r\n    return Math.floor((a >>> 0) * (b >>> 0) / 0x100000000) | 0;\r\n};\r\n\r\n/**\r\n * @constructor\r\n *\r\n * Queue wrapper around Uint8Array\r\n * Used by devices such as the PS2 controller\r\n */\r\nfunction ByteQueue(size)\r\n{\r\n    var data = new Uint8Array(size),\r\n        start,\r\n        end;\r\n\r\n    dbg_assert((size & size - 1) === 0);\r\n\r\n    this.length = 0;\r\n\r\n    this.push = function(item)\r\n    {\r\n        if(this.length === size)\r\n        {\r\n            // intentional overwrite\r\n        }\r\n        else\r\n        {\r\n            this.length++;\r\n        }\r\n\r\n        data[end] = item;\r\n        end = end + 1 & size - 1;\r\n    };\r\n\r\n    this.shift = function()\r\n    {\r\n        if(!this.length)\r\n        {\r\n            return -1;\r\n        }\r\n        else\r\n        {\r\n            var item = data[start];\r\n\r\n            start = start + 1 & size - 1;\r\n            this.length--;\r\n\r\n            return item;\r\n        }\r\n    };\r\n\r\n    this.peek = function()\r\n    {\r\n        if(!this.length)\r\n        {\r\n            return -1;\r\n        }\r\n        else\r\n        {\r\n            return data[start];\r\n        }\r\n    };\r\n\r\n    this.clear = function()\r\n    {\r\n        start = 0;\r\n        end = 0;\r\n        this.length = 0;\r\n    };\r\n\r\n    this.clear();\r\n}\r\n\r\n\r\n/**\r\n * @constructor\r\n *\r\n * Queue wrapper around Float32Array\r\n * Used by devices such as the sound blaster sound card\r\n */\r\nfunction FloatQueue(size)\r\n{\r\n    this.size = size;\r\n    this.data = new Float32Array(size);\r\n    this.start = 0;\r\n    this.end = 0;\r\n    this.length = 0;\r\n\r\n    dbg_assert((size & size - 1) === 0);\r\n}\r\n\r\nFloatQueue.prototype.push = function(item)\r\n{\r\n    if(this.length === this.size)\r\n    {\r\n        // intentional overwrite\r\n        this.start = this.start + 1 & this.size - 1;\r\n    }\r\n    else\r\n    {\r\n        this.length++;\r\n    }\r\n\r\n    this.data[this.end] = item;\r\n    this.end = this.end + 1 & this.size - 1;\r\n};\r\n\r\nFloatQueue.prototype.shift = function()\r\n{\r\n    if(!this.length)\r\n    {\r\n        return undefined;\r\n    }\r\n    else\r\n    {\r\n        var item = this.data[this.start];\r\n\r\n        this.start = this.start + 1 & this.size - 1;\r\n        this.length--;\r\n\r\n        return item;\r\n    }\r\n};\r\n\r\nFloatQueue.prototype.shift_block = function(count)\r\n{\r\n    var slice = new Float32Array(count);\r\n\r\n    if(count > this.length)\r\n    {\r\n        count = this.length;\r\n    }\r\n    var slice_end = this.start + count;\r\n\r\n    var partial = this.data.subarray(this.start, slice_end);\r\n\r\n    slice.set(partial);\r\n    if(slice_end >= this.size)\r\n    {\r\n        slice_end -= this.size;\r\n        slice.set(this.data.subarray(0, slice_end), partial.length);\r\n    }\r\n    this.start = slice_end;\r\n\r\n    this.length -= count;\r\n\r\n    return slice;\r\n};\r\n\r\nFloatQueue.prototype.peek = function()\r\n{\r\n    if(!this.length)\r\n    {\r\n        return undefined;\r\n    }\r\n    else\r\n    {\r\n        return this.data[this.start];\r\n    }\r\n};\r\n\r\nFloatQueue.prototype.clear = function()\r\n{\r\n    this.start = 0;\r\n    this.end = 0;\r\n    this.length = 0;\r\n};\r\n\r\n\r\n/**\r\n * Simple circular queue for logs\r\n *\r\n * @param {number} size\r\n * @constructor\r\n */\r\nfunction CircularQueue(size)\r\n{\r\n    this.data = [];\r\n    this.index = 0;\r\n    this.size = size;\r\n}\r\n\r\nCircularQueue.prototype.add = function(item)\r\n{\r\n    this.data[this.index] = item;\r\n    this.index = (this.index + 1) % this.size;\r\n};\r\n\r\nCircularQueue.prototype.toArray = function()\r\n{\r\n    return [].slice.call(this.data, this.index).concat([].slice.call(this.data, 0, this.index));\r\n};\r\n\r\nCircularQueue.prototype.clear = function()\r\n{\r\n    this.data = [];\r\n    this.index = 0;\r\n};\r\n\r\n/**\r\n * @param {Array} new_data\r\n */\r\nCircularQueue.prototype.set = function(new_data)\r\n{\r\n    this.data = new_data;\r\n    this.index = 0;\r\n};\r\n\r\nfunction dump_file(ab, name)\r\n{\r\n    if(!(ab instanceof Array))\r\n    {\r\n        ab = [ab];\r\n    }\r\n\r\n    var blob = new Blob(ab);\r\n    download(blob, name);\r\n}\r\n\r\nfunction download(file_or_blob, name)\r\n{\r\n    var a = document.createElement(\"a\");\r\n    a[\"download\"] = name;\r\n    a.href = window.URL.createObjectURL(file_or_blob);\r\n    a.dataset[\"downloadurl\"] = [\"application/octet-stream\", a[\"download\"], a.href].join(\":\");\r\n\r\n    if(document.createEvent)\r\n    {\r\n        var ev = document.createEvent(\"MouseEvent\");\r\n        ev.initMouseEvent(\"click\", true, true, window,\r\n                          0, 0, 0, 0, 0, false, false, false, false, 0, null);\r\n        a.dispatchEvent(ev);\r\n    }\r\n    else\r\n    {\r\n        a.click();\r\n    }\r\n\r\n    window.URL.revokeObjectURL(a.href);\r\n}\r\n","\"use strict\";\r\n\r\n// Useful documentation, articles, and source codes for reference:\r\n// ===============================================================\r\n//\r\n// Official Hardware Programming Guide\r\n// -> https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\r\n//\r\n// Official Yamaha YMF262 Manual\r\n// -> http://map.grauw.nl/resources/sound/yamaha_ymf262.pdf\r\n//\r\n// OPL3 Programming Guide\r\n// -> http://www.fit.vutbr.cz/~arnost/opl/opl3.html\r\n//\r\n// DOSBox\r\n// -> https://sourceforge.net/p/dosbox/code-0/HEAD/tree/dosbox/branches/mamesound/src/hardware/sblaster.cpp\r\n// -> https://github.com/duganchen/dosbox/blob/master/src/hardware/sblaster.cpp\r\n// -> https://github.com/joncampbell123/dosbox-x/blob/master/src/hardware/sblaster.cpp\r\n//\r\n// QEMU\r\n// -> https://github.com/qemu/qemu/blob/master/hw/audio/sb16.c\r\n// -> https://github.com/hackndev/qemu/blob/master/hw/sb16.c\r\n//\r\n// VirtualBox\r\n// -> https://www.virtualbox.org/svn/vbox/trunk/src/VBox/Devices/Audio/DevSB16.cpp\r\n// -> https://github.com/mdaniel/virtualbox-org-svn-vbox-trunk/blob/master/src/VBox/Devices/Audio/DevSB16.cpp\r\n\r\nvar\r\n\r\n    // Used for drivers to identify device (DSP command 0xE3).\r\n/** @const */ DSP_COPYRIGHT = \"COPYRIGHT (C) CREATIVE TECHNOLOGY LTD, 1992.\",\r\n\r\n    // Value of the current DSP command that indicates that the\r\n    // next command/data write in port 2xC should be interpreted\r\n    // as a command number.\r\n/** @const */ DSP_NO_COMMAND = 0,\r\n\r\n    // Size (bytes) of the DSP write/read buffers\r\n/** @const */ DSP_BUFSIZE = 64,\r\n\r\n    // Size (bytes) of the buffers containing floating point linear PCM audio.\r\n/** @const */ DSP_DACSIZE = 65536,\r\n\r\n    // Size (bytes) of the buffer in which DMA transfers are temporarily\r\n    // stored before being processed.\r\n/** @const */ SB_DMA_BUFSIZE = 65536,\r\n\r\n    // Number of samples to attempt to retrieve per transfer.\r\n/** @const */ SB_DMA_BLOCK_SAMPLES = 1024,\r\n\r\n    // Usable DMA channels.\r\n/** @const */ SB_DMA0 = 0,\r\n/** @const */ SB_DMA1 = 1,\r\n/** @const */ SB_DMA3 = 3,\r\n/** @const */ SB_DMA5 = 5,\r\n/** @const */ SB_DMA6 = 6,\r\n/** @const */ SB_DMA7 = 7,\r\n\r\n    // Default DMA channels.\r\n/** @const */ SB_DMA_CHANNEL_8BIT = SB_DMA1,\r\n/** @const */ SB_DMA_CHANNEL_16BIT = SB_DMA5,\r\n\r\n    // Usable IRQ channels.\r\n/** @const */ SB_IRQ2 = 2,\r\n/** @const */ SB_IRQ5 = 5,\r\n/** @const */ SB_IRQ7 = 7,\r\n/** @const */ SB_IRQ10 = 10,\r\n\r\n    // Default IRQ channel.\r\n/** @const */ SB_IRQ = SB_IRQ5,\r\n\r\n    // Indices to the irq_triggered register.\r\n/** @const */ SB_IRQ_8BIT = 0x1,\r\n/** @const */ SB_IRQ_16BIT = 0x2,\r\n/** @const */ SB_IRQ_MIDI = 0x1,\r\n/** @const */ SB_IRQ_MPU = 0x4;\r\n\r\n\r\n// Probably less efficient, but it's more maintainable, instead\r\n// of having a single large unorganised and decoupled table.\r\nvar DSP_COMMAND_SIZES = new Uint8Array(256);\r\nvar DSP_COMMAND_HANDLERS = [];\r\nvar MIXER_READ_HANDLERS = [];\r\nvar MIXER_WRITE_HANDLERS = [];\r\nvar MIXER_REGISTER_IS_LEGACY = new Uint8Array(256);\r\nvar FM_HANDLERS = [];\r\n\r\n\r\n/**\r\n * Sound Blaster 16 Emulator, or so it seems.\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {BusConnector} bus\r\n */\r\nfunction SB16(cpu, bus)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    // I/O Buffers.\r\n    this.write_buffer = new ByteQueue(DSP_BUFSIZE);\r\n    this.read_buffer = new ByteQueue(DSP_BUFSIZE);\r\n    this.read_buffer_lastvalue = 0;\r\n\r\n    // Current DSP command info.\r\n    this.command = DSP_NO_COMMAND;\r\n    this.command_size = 0;\r\n\r\n    // Mixer.\r\n    this.mixer_current_address = 0;\r\n    this.mixer_registers = new Uint8Array(256);\r\n    this.mixer_reset();\r\n\r\n    // Dummy status and test registers.\r\n    this.dummy_speaker_enabled = false;\r\n    this.test_register = 0;\r\n\r\n    // DSP state.\r\n    this.dsp_highspeed = false;\r\n    this.dsp_stereo = false;\r\n    this.dsp_16bit = false;\r\n    this.dsp_signed = false;\r\n\r\n    // DAC buffer.\r\n    // The final destination for audio data before being sent off\r\n    // to Web Audio APIs.\r\n    // Format:\r\n    // Floating precision linear PCM, nominal between -1 and 1.\r\n    this.dac_buffers = [\r\n      new FloatQueue(DSP_DACSIZE),\r\n      new FloatQueue(DSP_DACSIZE),\r\n    ];\r\n\r\n    // Direct Memory Access transfer info.\r\n    this.dma = cpu.devices.dma;\r\n    this.dma_sample_count = 0;\r\n    this.dma_bytes_count = 0;\r\n    this.dma_bytes_left = 0;\r\n    this.dma_bytes_block = 0;\r\n    this.dma_irq = 0;\r\n    this.dma_channel = 0;\r\n    this.dma_channel_8bit = SB_DMA_CHANNEL_8BIT;\r\n    this.dma_channel_16bit = SB_DMA_CHANNEL_16BIT;\r\n    this.dma_autoinit = false;\r\n    this.dma_buffer = new ArrayBuffer(SB_DMA_BUFSIZE);\r\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\r\n    this.dma_buffer_uint8 = new Uint8Array(this.dma_buffer);\r\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\r\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\r\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\r\n    this.dma_waiting_transfer = false;\r\n    this.dma_paused = false;\r\n    this.sampling_rate = 22050;\r\n    bus.send(\"dac-tell-sampling-rate\", this.sampling_rate);\r\n    this.bytes_per_sample = 1;\r\n\r\n    // DMA identification data.\r\n    this.e2_value = 0xAA;\r\n    this.e2_count = 0;\r\n\r\n    // ASP data: not understood by me.\r\n    this.asp_registers = new Uint8Array(256);\r\n\r\n    // MPU.\r\n    this.mpu_read_buffer = new ByteQueue(DSP_BUFSIZE);\r\n    this.mpu_read_buffer_lastvalue = 0;\r\n\r\n    // FM Synthesizer.\r\n    this.fm_current_address0 = 0;\r\n    this.fm_current_address1 = 0;\r\n    this.fm_waveform_select_enable = false;\r\n\r\n    // Interrupts.\r\n    this.irq = SB_IRQ;\r\n    this.irq_triggered = new Uint8Array(0x10);\r\n\r\n    // IO Ports.\r\n    // http://homepages.cae.wisc.edu/~brodskye/sb16doc/sb16doc.html#DSPPorts\r\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\r\n\r\n    cpu.io.register_read_consecutive(0x220, this,\r\n        this.port2x0_read, this.port2x1_read, this.port2x2_read, this.port2x3_read);\r\n    cpu.io.register_read_consecutive(0x388, this,\r\n        this.port2x0_read, this.port2x1_read);\r\n\r\n    cpu.io.register_read_consecutive(0x224, this,\r\n        this.port2x4_read, this.port2x5_read);\r\n\r\n    cpu.io.register_read(0x226, this, this.port2x6_read);\r\n    cpu.io.register_read(0x227, this, this.port2x7_read);\r\n    cpu.io.register_read(0x228, this, this.port2x8_read);\r\n    cpu.io.register_read(0x229, this, this.port2x9_read);\r\n\r\n    cpu.io.register_read(0x22A, this, this.port2xA_read);\r\n    cpu.io.register_read(0x22B, this, this.port2xB_read);\r\n    cpu.io.register_read(0x22C, this, this.port2xC_read);\r\n    cpu.io.register_read(0x22D, this, this.port2xD_read);\r\n\r\n    cpu.io.register_read_consecutive(0x22E, this,\r\n        this.port2xE_read, this.port2xF_read);\r\n\r\n    cpu.io.register_write_consecutive(0x220, this,\r\n        this.port2x0_write, this.port2x1_write, this.port2x2_write, this.port2x3_write);\r\n    cpu.io.register_write_consecutive(0x388, this,\r\n        this.port2x0_write, this.port2x1_write);\r\n\r\n    cpu.io.register_write_consecutive(0x224, this,\r\n        this.port2x4_write, this.port2x5_write);\r\n\r\n    cpu.io.register_write(0x226, this, this.port2x6_write);\r\n    cpu.io.register_write(0x227, this, this.port2x7_write);\r\n\r\n    cpu.io.register_write_consecutive(0x228, this,\r\n        this.port2x8_write, this.port2x9_write);\r\n\r\n    cpu.io.register_write(0x22A, this, this.port2xA_write);\r\n    cpu.io.register_write(0x22B, this, this.port2xB_write);\r\n    cpu.io.register_write(0x22C, this, this.port2xC_write);\r\n    cpu.io.register_write(0x22D, this, this.port2xD_write);\r\n    cpu.io.register_write(0x22E, this, this.port2xE_write);\r\n    cpu.io.register_write(0x22F, this, this.port2xF_write);\r\n\r\n    cpu.io.register_read_consecutive(0x330, this, this.port3x0_read, this.port3x1_read);\r\n    cpu.io.register_write_consecutive(0x330, this, this.port3x0_write, this.port3x1_write);\r\n\r\n    this.dma.on_unmask(this.dma_on_unmask, this);\r\n\r\n    bus.register(\"dac-request-data\", function()\r\n    {\r\n        this.dac_handle_request();\r\n    }, this);\r\n    bus.register(\"speaker-has-initialized\", function()\r\n    {\r\n        this.mixer_reset();\r\n    }, this);\r\n    bus.send(\"speaker-confirm-initialized\");\r\n\r\n    this.dsp_reset();\r\n}\r\n\r\n//\r\n// General\r\n//\r\n\r\nSB16.prototype.dsp_reset = function()\r\n{\r\n    this.write_buffer.clear();\r\n    this.read_buffer.clear();\r\n\r\n    this.command = DSP_NO_COMMAND;\r\n    this.command_size = 0;\r\n\r\n    this.dummy_speaker_enabled = false;\r\n    this.test_register = 0;\r\n\r\n    this.dsp_highspeed = false;\r\n    this.dsp_stereo = false;\r\n    this.dsp_16bit = false;\r\n    this.dsp_signed = false;\r\n\r\n    this.dac_buffers[0].clear();\r\n    this.dac_buffers[1].clear();\r\n\r\n    this.dma_sample_count = 0;\r\n    this.dma_bytes_count = 0;\r\n    this.dma_bytes_left = 0;\r\n    this.dma_bytes_block = 0;\r\n    this.dma_irq = 0;\r\n    this.dma_channel = 0;\r\n    this.dma_autoinit = false;\r\n    this.dma_buffer_uint8.fill(0);\r\n    this.dma_waiting_transfer = false;\r\n    this.dma_paused = false;\r\n\r\n    this.e2_value = 0xAA;\r\n    this.e2_count = 0;\r\n\r\n    this.sampling_rate = 22050;\r\n    this.bytes_per_sample = 1;\r\n\r\n    this.lower_irq(SB_IRQ_8BIT);\r\n    this.irq_triggered.fill(0);\r\n\r\n    this.asp_registers.fill(0);\r\n    this.asp_registers[5] = 0x01;\r\n    this.asp_registers[9] = 0xF8;\r\n};\r\n\r\nSB16.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    // state[0] = this.write_buffer;\r\n    // state[1] = this.read_buffer;\r\n    state[2] = this.read_buffer_lastvalue;\r\n\r\n    state[3] = this.command;\r\n    state[4] = this.command_size;\r\n\r\n    state[5] = this.mixer_current_address;\r\n    state[6] = this.mixer_registers;\r\n\r\n    state[7] = this.dummy_speaker_enabled;\r\n    state[8] = this.test_register;\r\n\r\n    state[9] = this.dsp_highspeed;\r\n    state[10] = this.dsp_stereo;\r\n    state[11] = this.dsp_16bit;\r\n    state[12] = this.dsp_signed;\r\n\r\n    // state[13] = this.dac_buffers;\r\n    //state[14]\r\n\r\n    state[15] = this.dma_sample_count;\r\n    state[16] = this.dma_bytes_count;\r\n    state[17] = this.dma_bytes_left;\r\n    state[18] = this.dma_bytes_block;\r\n    state[19] = this.dma_irq;\r\n    state[20] = this.dma_channel;\r\n    state[21] = this.dma_channel_8bit;\r\n    state[22] = this.dma_channel_16bit;\r\n    state[23] = this.dma_autoinit;\r\n    state[24] = this.dma_buffer_uint8;\r\n    state[25] = this.dma_waiting_transfer;\r\n    state[26] = this.dma_paused;\r\n    state[27] = this.sampling_rate;\r\n    state[28] = this.bytes_per_sample;\r\n\r\n    state[29] = this.e2_value;\r\n    state[30] = this.e2_count;\r\n\r\n    state[31] = this.asp_registers;\r\n\r\n    // state[32] = this.mpu_read_buffer;\r\n    state[33] = this.mpu_read_buffer_last_value;\r\n\r\n    state[34] = this.irq;\r\n    state[35] = this.irq_triggered;\r\n    //state[36]\r\n\r\n    return state;\r\n};\r\n\r\nSB16.prototype.set_state = function(state)\r\n{\r\n    // this.write_buffer = state[0];\r\n    // this.read_buffer = state[1];\r\n    this.read_buffer_lastvalue = state[2];\r\n\r\n    this.command = state[3];\r\n    this.command_size = state[4];\r\n\r\n    this.mixer_current_address = state[5];\r\n    this.mixer_registers = state[6];\r\n    this.mixer_full_update();\r\n\r\n    this.dummy_speaker_enabled = state[7];\r\n    this.test_register = state[8];\r\n\r\n    this.dsp_highspeed = state[9];\r\n    this.dsp_stereo = state[10];\r\n    this.dsp_16bit = state[11];\r\n    this.dsp_signed = state[12];\r\n\r\n    // this.dac_buffers = state[13];\r\n    //state[14]\r\n\r\n    this.dma_sample_count = state[15];\r\n    this.dma_bytes_count = state[16];\r\n    this.dma_bytes_left = state[17];\r\n    this.dma_bytes_block = state[18];\r\n    this.dma_irq = state[19];\r\n    this.dma_channel = state[20];\r\n    this.dma_channel_8bit = state[21];\r\n    this.dma_channel_16bit = state[22];\r\n    this.dma_autoinit = state[23];\r\n    this.dma_buffer_uint8 = state[24];\r\n    this.dma_waiting_transfer = state[25];\r\n    this.dma_paused = state[26];\r\n    this.sampling_rate = state[27];\r\n    this.bytes_per_sample = state[28];\r\n\r\n    this.e2_value = state[29];\r\n    this.e2_count = state[30];\r\n\r\n    this.asp_registers = state[31];\r\n\r\n    // this.mpu_read_buffer = state[32];\r\n    this.mpu_read_buffer_last_value = state[33];\r\n\r\n    this.irq = state[34];\r\n    this.irq_triggered = state[35];\r\n    //state[36];\r\n\r\n    this.dma_buffer = this.dma_buffer_uint8.buffer;\r\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\r\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\r\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\r\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\r\n\r\n    if(this.dma_paused)\r\n    {\r\n        this.bus.send(\"dac-disable\");\r\n    }\r\n    else\r\n    {\r\n        this.bus.send(\"dac-enable\");\r\n    }\r\n};\r\n\r\n//\r\n// I/O handlers\r\n//\r\n\r\nSB16.prototype.port2x0_read = function()\r\n{\r\n    dbg_log(\"220 read: fm music status port (unimplemented)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x1_read = function()\r\n{\r\n    dbg_log(\"221 read: fm music data port (write only)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x2_read = function()\r\n{\r\n    dbg_log(\"222 read: advanced fm music status port (unimplemented)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x3_read = function()\r\n{\r\n    dbg_log(\"223 read: advanced music data port (write only)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\n// Mixer Address Port.\r\nSB16.prototype.port2x4_read = function()\r\n{\r\n    dbg_log(\"224 read: mixer address port\", LOG_SB16);\r\n    return this.mixer_current_address;\r\n};\r\n\r\n// Mixer Data Port.\r\nSB16.prototype.port2x5_read = function()\r\n{\r\n    dbg_log(\"225 read: mixer data port\", LOG_SB16);\r\n    return this.mixer_read(this.mixer_current_address);\r\n};\r\n\r\nSB16.prototype.port2x6_read = function()\r\n{\r\n    dbg_log(\"226 read: (write only)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x7_read = function()\r\n{\r\n    dbg_log(\"227 read: undocumented\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x8_read = function()\r\n{\r\n    dbg_log(\"228 read: fm music status port (unimplemented)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\nSB16.prototype.port2x9_read = function()\r\n{\r\n    dbg_log(\"229 read: fm music data port (write only)\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\n// Read Data.\r\n// Used to access in-bound DSP data.\r\nSB16.prototype.port2xA_read = function()\r\n{\r\n    dbg_log(\"22A read: read data\", LOG_SB16);\r\n    if(this.read_buffer.length)\r\n    {\r\n        this.read_buffer_lastvalue = this.read_buffer.shift();\r\n    }\r\n    dbg_log(\" <- \" + this.read_buffer_lastvalue + \" \" + h(this.read_buffer_lastvalue) + \" '\" + String.fromCharCode(this.read_buffer_lastvalue) + \"'\", LOG_SB16);\r\n    return this.read_buffer_lastvalue;\r\n};\r\n\r\nSB16.prototype.port2xB_read = function()\r\n{\r\n    dbg_log(\"22B read: undocumented\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\n// Write-Buffer Status.\r\n// Indicates whether the DSP is ready to accept commands or data.\r\nSB16.prototype.port2xC_read = function()\r\n{\r\n    dbg_log(\"22C read: write-buffer status\", LOG_SB16);\r\n    // Always return ready (bit-7 set to low)\r\n    return 0x7F;\r\n};\r\n\r\nSB16.prototype.port2xD_read = function()\r\n{\r\n    dbg_log(\"22D read: undocumented\", LOG_SB16);\r\n    return 0xFF;\r\n};\r\n\r\n// Read-Buffer Status.\r\n// Indicates whether there is any in-bound data available for reading.\r\n// Also used to acknowledge DSP 8-bit interrupt.\r\nSB16.prototype.port2xE_read = function()\r\n{\r\n    dbg_log(\"22E read: read-buffer status / irq 8bit ack.\", LOG_SB16);\r\n    if(this.irq_triggered[SB_IRQ_8BIT])\r\n    {\r\n        this.lower_irq(SB_IRQ_8BIT);\r\n    }\r\n    var ready = this.read_buffer.length && !this.dsp_highspeed;\r\n    return (ready << 7) | 0x7F;\r\n};\r\n\r\n// DSP 16-bit interrupt acknowledgement.\r\nSB16.prototype.port2xF_read = function()\r\n{\r\n    dbg_log(\"22F read: irq 16bit ack\", LOG_SB16);\r\n    this.lower_irq(SB_IRQ_16BIT);\r\n    return 0;\r\n};\r\n\r\n\r\n// FM Address Port - primary register.\r\nSB16.prototype.port2x0_write = function(value)\r\n{\r\n    dbg_log(\"220 write: (unimplemented) fm register 0 address = \" + h(value), LOG_SB16);\r\n    this.fm_current_address0 = 0;\r\n};\r\n\r\n// FM Data Port - primary register.\r\nSB16.prototype.port2x1_write = function(value)\r\n{\r\n    dbg_log(\"221 write: (unimplemented) fm register 0 data = \" + h(value), LOG_SB16);\r\n    var handler = FM_HANDLERS[this.fm_current_address0];\r\n    if(!handler)\r\n    {\r\n        handler = this.fm_default_write;\r\n    }\r\n    handler.call(this, value, 0, this.fm_current_address0);\r\n};\r\n\r\n// FM Address Port - secondary register.\r\nSB16.prototype.port2x2_write = function(value)\r\n{\r\n    dbg_log(\"222 write: (unimplemented) fm register 1 address = \" + h(value), LOG_SB16);\r\n    this.fm_current_address1 = 0;\r\n};\r\n\r\n// FM Data Port - secondary register.\r\nSB16.prototype.port2x3_write = function(value)\r\n{\r\n    dbg_log(\"223 write: (unimplemented) fm register 1 data =\" + h(value), LOG_SB16);\r\n    var handler = FM_HANDLERS[this.fm_current_address1];\r\n    if(!handler)\r\n    {\r\n        handler = this.fm_default_write;\r\n    }\r\n    handler.call(this, value, 1, this.fm_current_address1);\r\n};\r\n\r\n// Mixer Address Port.\r\nSB16.prototype.port2x4_write = function(value)\r\n{\r\n    dbg_log(\"224 write: mixer address = \" + h(value), LOG_SB16);\r\n    this.mixer_current_address = value;\r\n};\r\n\r\n// Mixer Data Port.\r\nSB16.prototype.port2x5_write = function(value)\r\n{\r\n    dbg_log(\"225 write: mixer data = \" + h(value), LOG_SB16);\r\n    this.mixer_write(this.mixer_current_address, value);\r\n};\r\n\r\n// Reset.\r\n// Used to reset the DSP to its default state and to exit highspeed mode.\r\nSB16.prototype.port2x6_write = function(yesplease)\r\n{\r\n    dbg_log(\"226 write: reset = \" + h(yesplease), LOG_SB16);\r\n\r\n    if(this.dsp_highspeed)\r\n    {\r\n        dbg_log(\" -> exit highspeed\", LOG_SB16);\r\n        this.dsp_highspeed = false;\r\n    }\r\n    else if(yesplease)\r\n    {\r\n        dbg_log(\" -> reset\", LOG_SB16);\r\n        this.dsp_reset();\r\n    }\r\n\r\n    // Signal completion.\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(0xAA);\r\n};\r\n\r\nSB16.prototype.port2x7_write = function(value)\r\n{\r\n    dbg_log(\"227 write: undocumented\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2x8_write = function(value)\r\n{\r\n    dbg_log(\"228 write: fm music register port (unimplemented)\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2x9_write = function(value)\r\n{\r\n    dbg_log(\"229 write: fm music data port (unimplemented)\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2xA_write = function(value)\r\n{\r\n    dbg_log(\"22A write: dsp read data port (read only)\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2xB_write = function(value)\r\n{\r\n    dbg_log(\"22B write: undocumented\", LOG_SB16);\r\n};\r\n\r\n// Write Command/Data.\r\n// Used to send commands or data to the DSP.\r\nSB16.prototype.port2xC_write = function(value)\r\n{\r\n    dbg_log(\"22C write: write command/data\", LOG_SB16);\r\n\r\n    if(this.command === DSP_NO_COMMAND)\r\n    {\r\n        // New command.\r\n        dbg_log(\"22C write: command = \" + h(value), LOG_SB16);\r\n        this.command = value;\r\n        this.write_buffer.clear();\r\n        this.command_size = DSP_COMMAND_SIZES[value];\r\n    }\r\n    else\r\n    {\r\n        // More data for current command.\r\n        dbg_log(\"22C write: data: \" + h(value), LOG_SB16);\r\n        this.write_buffer.push(value);\r\n    }\r\n\r\n    // Perform command when we have all the needed data.\r\n    if(this.write_buffer.length >= this.command_size)\r\n    {\r\n        this.command_do();\r\n    }\r\n};\r\n\r\nSB16.prototype.port2xD_write = function(value)\r\n{\r\n    dbg_log(\"22D write: undocumented\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2xE_write = function(value)\r\n{\r\n    dbg_log(\"22E write: dsp read buffer status (read only)\", LOG_SB16);\r\n};\r\n\r\nSB16.prototype.port2xF_write = function(value)\r\n{\r\n    dbg_log(\"22F write: undocumented\", LOG_SB16);\r\n};\r\n\r\n\r\n// MPU UART Mode - Data Port\r\nSB16.prototype.port3x0_read = function()\r\n{\r\n    dbg_log(\"330 read: mpu data\", LOG_SB16);\r\n\r\n    if(this.mpu_read_buffer.length)\r\n    {\r\n        this.mpu_read_buffer_lastvalue = this.mpu_read_buffer.shift();\r\n    }\r\n    dbg_log(\" <- \" + h(this.mpu_read_buffer_lastvalue), LOG_SB16);\r\n\r\n    return this.mpu_read_buffer_lastvalue;\r\n};\r\nSB16.prototype.port3x0_write = function(value)\r\n{\r\n    dbg_log(\"330 write: mpu data (unimplemented) : \" + h(value), LOG_SB16);\r\n};\r\n\r\n// MPU UART Mode - Status Port\r\nSB16.prototype.port3x1_read = function()\r\n{\r\n    dbg_log(\"331 read: mpu status\", LOG_SB16);\r\n\r\n    var status = 0;\r\n    status |= 0x40 * 0; // Output Ready\r\n    status |= 0x80 * !this.mpu_read_buffer.length; // Input Ready\r\n\r\n    return status;\r\n};\r\n\r\n// MPU UART Mode - Command Port\r\nSB16.prototype.port3x1_write = function(value)\r\n{\r\n    dbg_log(\"331 write: mpu command: \" + h(value), LOG_SB16);\r\n    if(value == 0xFF)\r\n    {\r\n        // Command acknowledge.\r\n        this.mpu_read_buffer.clear();\r\n        this.mpu_read_buffer.push(0xFE);\r\n    }\r\n};\r\n\r\n//\r\n// DSP command handlers\r\n//\r\n\r\nSB16.prototype.command_do = function()\r\n{\r\n    var handler = DSP_COMMAND_HANDLERS[this.command];\r\n    if(!handler)\r\n    {\r\n        handler = this.dsp_default_handler;\r\n    }\r\n    handler.call(this);\r\n\r\n    // Reset Inputs.\r\n    this.command = DSP_NO_COMMAND;\r\n    this.command_size = 0;\r\n    this.write_buffer.clear();\r\n};\r\n\r\nSB16.prototype.dsp_default_handler = function()\r\n{\r\n    dbg_log(\"Unhandled command: \" + h(this.command), LOG_SB16);\r\n};\r\n\r\n/**\r\n * @param {Array} commands\r\n * @param {number} size\r\n * @param {function()=} handler\r\n */\r\nfunction register_dsp_command(commands, size, handler)\r\n{\r\n    if(!handler)\r\n    {\r\n        handler = SB16.prototype.dsp_default_handler;\r\n    }\r\n    for(var i = 0; i < commands.length; i++)\r\n    {\r\n        DSP_COMMAND_SIZES[commands[i]] = size;\r\n        DSP_COMMAND_HANDLERS[commands[i]] = handler;\r\n    }\r\n}\r\n\r\nfunction any_first_digit(base)\r\n{\r\n    var commands = [];\r\n    for(var i = 0; i < 16; i++)\r\n    {\r\n        commands.push(base + i);\r\n    }\r\n    return commands;\r\n}\r\n\r\n// ASP set register\r\nregister_dsp_command([0x0E], 2, function()\r\n{\r\n    this.asp_registers[this.write_buffer.shift()] = this.write_buffer.shift();\r\n});\r\n\r\n// ASP get register\r\nregister_dsp_command([0x0F], 1, function()\r\n{\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(this.asp_registers[this.write_buffer.shift()]);\r\n});\r\n\r\n// 8-bit direct mode single byte digitized sound output.\r\nregister_dsp_command([0x10], 1, function()\r\n{\r\n    var value = audio_normalize(this.write_buffer.shift(), 127.5, -1);\r\n\r\n    this.dac_buffers[0].push(value);\r\n    this.dac_buffers[1].push(value);\r\n    this.bus.send(\"dac-enable\");\r\n});\r\n\r\n// 8-bit single-cycle DMA mode digitized sound output.\r\nregister_dsp_command([0x14, 0x15], 2, function()\r\n{\r\n    this.dma_irq = SB_IRQ_8BIT;\r\n    this.dma_channel = this.dma_channel_8bit;\r\n    this.dma_autoinit = false;\r\n    this.dsp_signed = false;\r\n    this.dsp_16bit = false;\r\n    this.dsp_highspeed = false;\r\n    this.dma_transfer_size_set();\r\n    this.dma_transfer_start();\r\n});\r\n\r\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitized sound output.\r\nregister_dsp_command([0x16], 2);\r\n\r\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output\r\n// with reference byte.\r\nregister_dsp_command([0x17], 2);\r\n\r\n// 8-bit auto-init DMA mode digitized sound output.\r\nregister_dsp_command([0x1C], 0, function()\r\n{\r\n    this.dma_irq = SB_IRQ_8BIT;\r\n    this.dma_channel = this.dma_channel_8bit;\r\n    this.dma_autoinit = true;\r\n    this.dsp_signed = false;\r\n    this.dsp_16bit = false;\r\n    this.dsp_highspeed = false;\r\n    this.dma_transfer_start();\r\n});\r\n\r\n// Creative 8-bit to 2-bit ADPCM auto-init DMA mode digitized sound output\r\n// with reference byte.\r\nregister_dsp_command([0x1F], 0);\r\n\r\n// 8-bit direct mode single byte digitized sound input.\r\nregister_dsp_command([0x20], 0, function()\r\n{\r\n    // Fake silent input.\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(0x7f);\r\n});\r\n\r\n// 8-bit single-cycle DMA mode digitized sound input.\r\nregister_dsp_command([0x24], 2);\r\n\r\n// 8-bit auto-init DMA mode digitized sound input.\r\nregister_dsp_command([0x2C], 0);\r\n\r\n// Polling mode MIDI input.\r\nregister_dsp_command([0x30], 0);\r\n\r\n// Interrupt mode MIDI input.\r\nregister_dsp_command([0x31], 0);\r\n\r\n// UART polling mode MIDI I/O.\r\nregister_dsp_command([0x34], 0);\r\n\r\n// UART interrupt mode MIDI I/O.\r\nregister_dsp_command([0x35], 0);\r\n\r\n// UART polling mode MIDI I/O with time stamping.\r\nregister_dsp_command([0x36], 0);\r\n\r\n// UART interrupt mode MIDI I/O with time stamping.\r\nregister_dsp_command([0x37], 0);\r\n\r\n// MIDI output.\r\nregister_dsp_command([0x38], 0);\r\n\r\n// Set digitized sound transfer Time Constant.\r\nregister_dsp_command([0x40], 1, function()\r\n{\r\n    // Note: bTimeConstant = 256 * time constant\r\n    this.sampling_rate_change(\r\n        1000000\r\n        / (256 - this.write_buffer.shift())\r\n        / this.get_channel_count()\r\n    );\r\n});\r\n\r\n// Set digitized sound output sampling rate.\r\n// Set digitized sound input sampling rate.\r\nregister_dsp_command([0x41, 0x42], 2, function()\r\n{\r\n    this.sampling_rate_change((this.write_buffer.shift() << 8) | this.write_buffer.shift());\r\n});\r\n\r\n// Set DSP block transfer size.\r\nregister_dsp_command([0x48], 2, function()\r\n{\r\n    // TODO: should be in bytes, but if this is only used\r\n    // for 8 bit transfers, then this number is the same\r\n    // as number of samples?\r\n    // Wrong: e.g. stereo requires two bytes per sample.\r\n    this.dma_transfer_size_set();\r\n});\r\n\r\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output.\r\nregister_dsp_command([0x74], 2);\r\n\r\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output\r\n// with referene byte.\r\nregister_dsp_command([0x75], 2);\r\n\r\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output.\r\nregister_dsp_command([0x76], 2);\r\n\r\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output\r\n// with referene byte.\r\nregister_dsp_command([0x77], 2);\r\n\r\n// Creative 8-bit to 4-bit ADPCM auto-init DMA mode digitized sound output\r\n// with reference byte.\r\nregister_dsp_command([0x7D], 0);\r\n\r\n// Creative 8-bit to 3-bit ADPCM auto-init DMA mode digitized sound output\r\n// with reference byte.\r\nregister_dsp_command([0x7F], 0);\r\n\r\n// Pause DAC for a duration.\r\nregister_dsp_command([0x80], 2);\r\n\r\n// 8-bit high-speed auto-init DMA mode digitized sound output.\r\nregister_dsp_command([0x90], 0, function()\r\n{\r\n    this.dma_irq = SB_IRQ_8BIT;\r\n    this.dma_channel = this.dma_channel_8bit;\r\n    this.dma_autoinit = true;\r\n    this.dsp_signed = false;\r\n    this.dsp_highspeed = true;\r\n    this.dsp_16bit = false;\r\n    this.dma_transfer_start();\r\n});\r\n\r\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\r\nregister_dsp_command([0x91], 0);\r\n\r\n// 8-bit high-speed auto-init DMA mode digitized sound input.\r\nregister_dsp_command([0x98], 0);\r\n\r\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\r\nregister_dsp_command([0x99], 0);\r\n\r\n// Set input mode to mono.\r\nregister_dsp_command([0xA0], 0);\r\n\r\n// Set input mode to stereo.\r\nregister_dsp_command([0xA8], 0);\r\n\r\n// Program 16-bit DMA mode digitized sound I/O.\r\nregister_dsp_command(any_first_digit(0xB0), 3, function()\r\n{\r\n    if(this.command & (1 << 3))\r\n    {\r\n        // Analogue to digital not implemented.\r\n        this.dsp_default_handler();\r\n        return;\r\n    }\r\n    var mode = this.write_buffer.shift();\r\n    this.dma_irq = SB_IRQ_16BIT;\r\n    this.dma_channel = this.dma_channel_16bit;\r\n    this.dma_autoinit = !!(this.command & (1 << 2));\r\n    this.dsp_signed = !!(mode & (1 << 4));\r\n    this.dsp_stereo = !!(mode & (1 << 5));\r\n    this.dsp_16bit = true;\r\n    this.dma_transfer_size_set();\r\n    this.dma_transfer_start();\r\n});\r\n\r\n// Program 8-bit DMA mode digitized sound I/O.\r\nregister_dsp_command(any_first_digit(0xC0), 3, function()\r\n{\r\n    if(this.command & (1 << 3))\r\n    {\r\n        // Analogue to digital not implemented.\r\n        this.dsp_default_handler();\r\n        return;\r\n    }\r\n    var mode = this.write_buffer.shift();\r\n    this.dma_irq = SB_IRQ_8BIT;\r\n    this.dma_channel = this.dma_channel_8bit;\r\n    this.dma_autoinit = !!(this.command & (1 << 2));\r\n    this.dsp_signed = !!(mode & (1 << 4));\r\n    this.dsp_stereo = !!(mode & (1 << 5));\r\n    this.dsp_16bit = false;\r\n    this.dma_transfer_size_set();\r\n    this.dma_transfer_start();\r\n});\r\n\r\n// Pause 8-bit DMA mode digitized sound I/O.\r\nregister_dsp_command([0xD0], 0, function()\r\n{\r\n    this.dma_paused = true;\r\n    this.bus.send(\"dac-disable\");\r\n});\r\n\r\n// Turn on speaker.\r\n// Documented to have no effect on SB16.\r\nregister_dsp_command([0xD1], 0, function()\r\n{\r\n    this.dummy_speaker_enabled = true;\r\n});\r\n\r\n// Turn off speaker.\r\n// Documented to have no effect on SB16.\r\nregister_dsp_command([0xD3], 0, function()\r\n{\r\n    this.dummy_speaker_enabled = false;\r\n});\r\n\r\n// Continue 8-bit DMA mode digitized sound I/O.\r\nregister_dsp_command([0xD4], 0, function()\r\n{\r\n    this.dma_paused = false;\r\n    this.bus.send(\"dac-enable\");\r\n});\r\n\r\n// Pause 16-bit DMA mode digitized sound I/O.\r\nregister_dsp_command([0xD5], 0, function()\r\n{\r\n    this.dma_paused = true;\r\n    this.bus.send(\"dac-disable\");\r\n});\r\n\r\n// Continue 16-bit DMA mode digitized sound I/O.\r\nregister_dsp_command([0xD6], 0, function()\r\n{\r\n    this.dma_paused = false;\r\n    this.bus.send(\"dac-enable\");\r\n});\r\n\r\n// Get speaker status.\r\nregister_dsp_command([0xD8], 0, function()\r\n{\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(this.dummy_speaker_enabled * 0xFF);\r\n});\r\n\r\n// Exit 16-bit auto-init DMA mode digitized sound I/O.\r\n// Exit 8-bit auto-init mode digitized sound I/O.\r\nregister_dsp_command([0xD9, 0xDA], 0, function()\r\n{\r\n    this.dma_autoinit = false;\r\n});\r\n\r\n// DSP identification\r\nregister_dsp_command([0xE0], 1, function()\r\n{\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(~this.write_buffer.shift());\r\n});\r\n\r\n// Get DSP version number.\r\nregister_dsp_command([0xE1], 0, function()\r\n{\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(4);\r\n    this.read_buffer.push(5);\r\n});\r\n\r\n// DMA identification.\r\nregister_dsp_command([0xE2], 1);\r\n\r\n// Get DSP copyright.\r\nregister_dsp_command([0xE3], 0, function()\r\n{\r\n    this.read_buffer.clear();\r\n    for(var i = 0; i < DSP_COPYRIGHT.length; i++)\r\n    {\r\n        this.read_buffer.push(DSP_COPYRIGHT.charCodeAt(i));\r\n    }\r\n    // Null terminator.\r\n    this.read_buffer.push(0);\r\n});\r\n\r\n// Write test register.\r\nregister_dsp_command([0xE4], 1, function()\r\n{\r\n    this.test_register = this.write_buffer.shift();\r\n});\r\n\r\n// Read test register.\r\nregister_dsp_command([0xE8], 0, function()\r\n{\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(this.test_register);\r\n});\r\n\r\n// Trigger IRQ\r\nregister_dsp_command([0xF2, 0xF3], 0, function()\r\n{\r\n    this.raise_irq();\r\n});\r\n\r\n// ASP - unknown function\r\nvar SB_F9 = new Uint8Array(256);\r\nSB_F9[0x0E] = 0xFF;\r\nSB_F9[0x0F] = 0x07;\r\nSB_F9[0x37] = 0x38;\r\nregister_dsp_command([0xF9], 1, function()\r\n{\r\n    var input = this.write_buffer.shift();\r\n    dbg_log(\"dsp 0xf9: unknown function. input: \" + input, LOG_SB16);\r\n\r\n    this.read_buffer.clear();\r\n    this.read_buffer.push(SB_F9[input]);\r\n});\r\n\r\n//\r\n// Mixer Handlers (CT1745)\r\n//\r\n\r\nSB16.prototype.mixer_read = function(address)\r\n{\r\n    var handler = MIXER_READ_HANDLERS[address];\r\n    var data;\r\n    if(handler)\r\n    {\r\n        data = handler.call(this);\r\n    }\r\n    else\r\n    {\r\n        data = this.mixer_registers[address];\r\n        dbg_log(\"unhandled mixer register read. addr:\" + h(address) + \" data:\" + h(data), LOG_SB16);\r\n    }\r\n    return data;\r\n};\r\n\r\nSB16.prototype.mixer_write = function(address, data)\r\n{\r\n    var handler = MIXER_WRITE_HANDLERS[address];\r\n    if(handler)\r\n    {\r\n        handler.call(this, data);\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"unhandled mixer register write. addr:\" + h(address) + \" data:\" + h(data), LOG_SB16);\r\n    }\r\n};\r\n\r\nSB16.prototype.mixer_default_read = function()\r\n{\r\n    dbg_log(\"mixer register read. addr:\" + h(this.mixer_current_address), LOG_SB16);\r\n    return this.mixer_registers[this.mixer_current_address];\r\n};\r\n\r\nSB16.prototype.mixer_default_write = function(data)\r\n{\r\n    dbg_log(\"mixer register write. addr:\" + h(this.mixer_current_address) + \" data:\" + h(data), LOG_SB16);\r\n    this.mixer_registers[this.mixer_current_address] = data;\r\n};\r\n\r\nSB16.prototype.mixer_reset = function()\r\n{\r\n    // Values intentionally in decimal.\r\n    // Default values available at\r\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\r\n    this.mixer_registers[0x04] = 12 << 4 | 12;\r\n    this.mixer_registers[0x22] = 12 << 4 | 12;\r\n    this.mixer_registers[0x26] = 12 << 4 | 12;\r\n    this.mixer_registers[0x28] = 0;\r\n    this.mixer_registers[0x2E] = 0;\r\n    this.mixer_registers[0x0A] = 0;\r\n    this.mixer_registers[0x30] = 24 << 3;\r\n    this.mixer_registers[0x31] = 24 << 3;\r\n    this.mixer_registers[0x32] = 24 << 3;\r\n    this.mixer_registers[0x33] = 24 << 3;\r\n    this.mixer_registers[0x34] = 24 << 3;\r\n    this.mixer_registers[0x35] = 24 << 3;\r\n    this.mixer_registers[0x36] = 0;\r\n    this.mixer_registers[0x37] = 0;\r\n    this.mixer_registers[0x38] = 0;\r\n    this.mixer_registers[0x39] = 0;\r\n    this.mixer_registers[0x3B] = 0;\r\n    this.mixer_registers[0x3C] = 0x1F;\r\n    this.mixer_registers[0x3D] = 0x15;\r\n    this.mixer_registers[0x3E] = 0x0B;\r\n    this.mixer_registers[0x3F] = 0;\r\n    this.mixer_registers[0x40] = 0;\r\n    this.mixer_registers[0x41] = 0;\r\n    this.mixer_registers[0x42] = 0;\r\n    this.mixer_registers[0x43] = 0;\r\n    this.mixer_registers[0x44] = 8 << 4;\r\n    this.mixer_registers[0x45] = 8 << 4;\r\n    this.mixer_registers[0x46] = 8 << 4;\r\n    this.mixer_registers[0x47] = 8 << 4;\r\n\r\n    this.mixer_full_update();\r\n};\r\n\r\nSB16.prototype.mixer_full_update = function()\r\n{\r\n    // Start at 1. Don't re-reset.\r\n    for(var i = 1; i < this.mixer_registers.length; i++)\r\n    {\r\n        if(MIXER_REGISTER_IS_LEGACY[i])\r\n        {\r\n            // Legacy registers are actually mapped to other register locations. Update\r\n            // using the new registers rather than the legacy registers.\r\n            continue;\r\n        }\r\n        this.mixer_write(i, this.mixer_registers[i]);\r\n    }\r\n};\r\n\r\n/**\r\n * @param{number} address\r\n * @param{function():number=} handler\r\n */\r\nfunction register_mixer_read(address, handler)\r\n{\r\n    if(!handler)\r\n    {\r\n        handler = SB16.prototype.mixer_default_read;\r\n    }\r\n    MIXER_READ_HANDLERS[address] = handler;\r\n}\r\n\r\n/**\r\n * @param{number} address\r\n * @param{function(number)=} handler\r\n */\r\nfunction register_mixer_write(address, handler)\r\n{\r\n    if(!handler)\r\n    {\r\n        handler = SB16.prototype.mixer_default_write;\r\n    }\r\n    MIXER_WRITE_HANDLERS[address] = handler;\r\n}\r\n\r\n// Legacy registers map each nibble to the last 4 bits of the new registers\r\nfunction register_mixer_legacy(address_old, address_new_left, address_new_right)\r\n{\r\n    MIXER_REGISTER_IS_LEGACY[address_old] = 1;\r\n\r\n    /** @this {SB16} */\r\n    MIXER_READ_HANDLERS[address_old] = function()\r\n    {\r\n        var left = this.mixer_registers[address_new_left] & 0xF0;\r\n        var right = this.mixer_registers[address_new_right] >>> 4;\r\n        return left | right;\r\n    };\r\n\r\n    /** @this {SB16} */\r\n    MIXER_WRITE_HANDLERS[address_old] = function(data)\r\n    {\r\n        this.mixer_registers[address_old] = data;\r\n        var prev_left = this.mixer_registers[address_new_left];\r\n        var prev_right = this.mixer_registers[address_new_right];\r\n        var left = (data & 0xF0) | (prev_left & 0x0F);\r\n        var right = (data << 4 & 0xF0) | (prev_right & 0x0F);\r\n\r\n        this.mixer_write(address_new_left, left);\r\n        this.mixer_write(address_new_right, right);\r\n    };\r\n}\r\n\r\n/**\r\n * @param {number} address\r\n * @param {number} mixer_source\r\n * @param {number} channel\r\n */\r\nfunction register_mixer_volume(address, mixer_source, channel)\r\n{\r\n    MIXER_READ_HANDLERS[address] = SB16.prototype.mixer_default_read;\r\n\r\n    /** @this {SB16} */\r\n    MIXER_WRITE_HANDLERS[address] = function(data)\r\n    {\r\n        this.mixer_registers[address] = data;\r\n        this.bus.send(\"mixer-volume\",\r\n        [\r\n            mixer_source,\r\n            channel,\r\n            (data >>> 2) - 62\r\n        ]);\r\n    };\r\n}\r\n\r\n// Reset.\r\nregister_mixer_read(0x00, function()\r\n{\r\n    this.mixer_reset();\r\n    return 0;\r\n});\r\nregister_mixer_write(0x00);\r\n\r\n// Legacy Voice Volume Left/Right.\r\nregister_mixer_legacy(0x04, 0x32, 0x33);\r\n\r\n// Legacy Mic Volume. TODO.\r\n//register_mixer_read(0x0A);\r\n//register_mixer_write(0x0A, function(data)\r\n//{\r\n//    this.mixer_registers[0x0A] = data;\r\n//    var prev = this.mixer_registers[0x3A];\r\n//    this.mixer_write(0x3A, data << 5 | (prev & 0x0F));\r\n//});\r\n\r\n// Legacy Master Volume Left/Right.\r\nregister_mixer_legacy(0x22, 0x30, 0x31);\r\n// Legacy Midi Volume Left/Right.\r\nregister_mixer_legacy(0x26, 0x34, 0x35);\r\n// Legacy CD Volume Left/Right.\r\nregister_mixer_legacy(0x28, 0x36, 0x37);\r\n// Legacy Line Volume Left/Right.\r\nregister_mixer_legacy(0x2E, 0x38, 0x39);\r\n\r\n// Master Volume Left.\r\nregister_mixer_volume(0x30, MIXER_SRC_MASTER, MIXER_CHANNEL_LEFT);\r\n// Master Volume Right.\r\nregister_mixer_volume(0x31, MIXER_SRC_MASTER, MIXER_CHANNEL_RIGHT);\r\n// Voice Volume Left.\r\nregister_mixer_volume(0x32, MIXER_SRC_DAC, MIXER_CHANNEL_LEFT);\r\n// Voice Volume Right.\r\nregister_mixer_volume(0x33, MIXER_SRC_DAC, MIXER_CHANNEL_RIGHT);\r\n// MIDI Volume Left. TODO.\r\n//register_mixer_volume(0x34, MIXER_SRC_SYNTH, MIXER_CHANNEL_LEFT);\r\n// MIDI Volume Right. TODO.\r\n//register_mixer_volume(0x35, MIXER_SRC_SYNTH, MIXER_CHANNEL_RIGHT);\r\n// CD Volume Left. TODO.\r\n//register_mixer_volume(0x36, MIXER_SRC_CD, MIXER_CHANNEL_LEFT);\r\n// CD Volume Right. TODO.\r\n//register_mixer_volume(0x37, MIXER_SRC_CD, MIXER_CHANNEL_RIGHT);\r\n// Line Volume Left. TODO.\r\n//register_mixer_volume(0x38, MIXER_SRC_LINE, MIXER_CHANNEL_LEFT);\r\n// Line Volume Right. TODO.\r\n//register_mixer_volume(0x39, MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT);\r\n// Mic Volume. TODO.\r\n//register_mixer_volume(0x3A, MIXER_SRC_MIC, MIXER_CHANNEL_BOTH);\r\n\r\n// PC Speaker Volume.\r\nregister_mixer_read(0x3B);\r\nregister_mixer_write(0x3B, function(data)\r\n{\r\n    this.mixer_registers[0x3B] = data;\r\n    this.bus.send(\"mixer-volume\", [MIXER_SRC_PCSPEAKER, MIXER_CHANNEL_BOTH, (data >>> 6) * 6 - 18]);\r\n});\r\n\r\n// Output Mixer Switches. TODO.\r\n//register_mixer_read(0x3C);\r\n//register_mixer_write(0x3C, function(data)\r\n//{\r\n//    this.mixer_registers[0x3C] = data;\r\n//\r\n//    if(data & 0x01) this.bus.send(\"mixer-connect\", [MIXER_SRC_MIC, MIXER_CHANNEL_BOTH]);\r\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_MIC, MIXER_CHANNEL_BOTH]);\r\n//\r\n//    if(data & 0x02) this.bus.send(\"mixer-connect\", [MIXER_SRC_CD, MIXER_CHANNEL_RIGHT]);\r\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_CD, MIXER_CHANNEL_RIGHT]);\r\n//\r\n//    if(data & 0x04) this.bus.send(\"mixer-connect\", [MIXER_SRC_CD, MIXER_CHANNEL_LEFT]);\r\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_CD, MIXER_CHANNEL_LEFT]);\r\n//\r\n//    if(data & 0x08) this.bus.send(\"mixer-connect\", [MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT]);\r\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT]);\r\n//\r\n//    if(data & 0x10) this.bus.send(\"mixer-connect\", [MIXER_SRC_LINE, MIXER_CHANNEL_LEFT]);\r\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_LINE, MIXER_CHANNEL_LEFT]);\r\n//});\r\n\r\n// Input Mixer Left Switches. TODO.\r\n//register_mixer_read(0x3D);\r\n//register_mixer_write(0x3D);\r\n\r\n// Input Mixer Right Switches. TODO.\r\n//register_mixer_read(0x3E);\r\n//register_mixer_write(0x3E);\r\n\r\n// Input Gain Left. TODO.\r\n//register_mixer_read(0x3F);\r\n//register_mixer_write(0x3F);\r\n\r\n// Input Gain Right. TODO.\r\n//register_mixer_read(0x40);\r\n//register_mixer_write(0x40);\r\n\r\n// Output Gain Left.\r\nregister_mixer_read(0x41);\r\nregister_mixer_write(0x41, function(data)\r\n{\r\n    this.mixer_registers[0x41] = data;\r\n    this.bus.send(\"mixer-gain-left\", (data >>> 6) * 6);\r\n});\r\n\r\n// Output Gain Right.\r\nregister_mixer_read(0x42);\r\nregister_mixer_write(0x42, function(data)\r\n{\r\n    this.mixer_registers[0x42] = data;\r\n    this.bus.send(\"mixer-gain-right\", (data >>> 6) * 6);\r\n});\r\n\r\n// Mic AGC. TODO.\r\n//register_mixer_read(0x43);\r\n//register_mixer_write(0x43);\r\n\r\n// Treble Left.\r\nregister_mixer_read(0x44);\r\nregister_mixer_write(0x44, function(data)\r\n{\r\n    this.mixer_registers[0x44] = data;\r\n    data >>>= 3;\r\n    this.bus.send(\"mixer-treble-left\", data - (data < 16 ? 14 : 16));\r\n});\r\n\r\n// Treble Right.\r\nregister_mixer_read(0x45);\r\nregister_mixer_write(0x45, function(data)\r\n{\r\n    this.mixer_registers[0x45] = data;\r\n    data >>>= 3;\r\n    this.bus.send(\"mixer-treble-right\", data - (data < 16 ? 14 : 16));\r\n});\r\n\r\n// Bass Left.\r\nregister_mixer_read(0x46);\r\nregister_mixer_write(0x46, function(data)\r\n{\r\n    this.mixer_registers[0x46] = data;\r\n    data >>>= 3;\r\n    this.bus.send(\"mixer-bass-right\", data - (data < 16 ? 14 : 16));\r\n});\r\n\r\n// Bass Right.\r\nregister_mixer_read(0x47);\r\nregister_mixer_write(0x47, function(data)\r\n{\r\n    this.mixer_registers[0x47] = data;\r\n    data >>>= 3;\r\n    this.bus.send(\"mixer-bass-right\", data - (data < 16 ? 14 : 16));\r\n});\r\n\r\n// IRQ Select.\r\nregister_mixer_read(0x80, function()\r\n{\r\n    switch(this.irq)\r\n    {\r\n        case SB_IRQ2: return 0x1;\r\n        case SB_IRQ5: return 0x2;\r\n        case SB_IRQ7: return 0x4;\r\n        case SB_IRQ10: return 0x8;\r\n        default: return 0x0;\r\n    }\r\n});\r\nregister_mixer_write(0x80, function(bits)\r\n{\r\n    if(bits & 0x1) this.irq = SB_IRQ2;\r\n    if(bits & 0x2) this.irq = SB_IRQ5;\r\n    if(bits & 0x4) this.irq = SB_IRQ7;\r\n    if(bits & 0x8) this.irq = SB_IRQ10;\r\n});\r\n\r\n// DMA Select.\r\nregister_mixer_read(0x81, function()\r\n{\r\n    var ret = 0;\r\n    switch(this.dma_channel_8bit)\r\n    {\r\n        case SB_DMA0: ret |= 0x1; break;\r\n        case SB_DMA1: ret |= 0x2; break;\r\n        // Channel 2 is hardwired to floppy disk.\r\n        case SB_DMA3: ret |= 0x8; break;\r\n    }\r\n    switch(this.dma_channel_16bit)\r\n    {\r\n        // Channel 4 cannot be used.\r\n        case SB_DMA5: ret |= 0x20; break;\r\n        case SB_DMA6: ret |= 0x40; break;\r\n        case SB_DMA7: ret |= 0x80; break;\r\n    }\r\n    return ret;\r\n});\r\nregister_mixer_write(0x81, function(bits)\r\n{\r\n    if(bits & 0x1) this.dma_channel_8bit = SB_DMA0;\r\n    if(bits & 0x2) this.dma_channel_8bit = SB_DMA1;\r\n    if(bits & 0x8) this.dma_channel_8bit = SB_DMA3;\r\n    if(bits & 0x20) this.dma_channel_16bit = SB_DMA5;\r\n    if(bits & 0x40) this.dma_channel_16bit = SB_DMA6;\r\n    if(bits & 0x80) this.dma_channel_16bit = SB_DMA7;\r\n});\r\n\r\n// IRQ Status.\r\nregister_mixer_read(0x82, function()\r\n{\r\n    var ret = 0x20;\r\n    for(var i = 0; i < 16; i++)\r\n    {\r\n        ret |= i * this.irq_triggered[i];\r\n    }\r\n    return ret;\r\n});\r\n\r\n//\r\n// FM Handlers\r\n//\r\n\r\nSB16.prototype.fm_default_write = function(data, register, address)\r\n{\r\n    dbg_log(\"unhandled fm register write. addr:\" + register + \"|\" + h(address) + \" data:\" + h(data), LOG_SB16);\r\n    // No need to save into a dummy register as the registers are write-only.\r\n};\r\n\r\n/**\r\n * @param{Array} addresses\r\n * @param{function(number, number, number)=} handler\r\n */\r\nfunction register_fm_write(addresses, handler)\r\n{\r\n    if(!handler)\r\n    {\r\n        handler = SB16.prototype.fm_default_write;\r\n    }\r\n    for(var i = 0; i < addresses.length; i++)\r\n    {\r\n        FM_HANDLERS[addresses[i]] = handler;\r\n    }\r\n}\r\n\r\nfunction between(start, end)\r\n{\r\n    var a = [];\r\n    for(var i = start; i <= end; i++)\r\n    {\r\n        a.push(i);\r\n    }\r\n    return a;\r\n}\r\n\r\n/** @const */ var SB_FM_OPERATORS_BY_OFFSET = new Uint8Array(32);\r\nSB_FM_OPERATORS_BY_OFFSET[0x00] = 0;\r\nSB_FM_OPERATORS_BY_OFFSET[0x01] = 1;\r\nSB_FM_OPERATORS_BY_OFFSET[0x02] = 2;\r\nSB_FM_OPERATORS_BY_OFFSET[0x03] = 3;\r\nSB_FM_OPERATORS_BY_OFFSET[0x04] = 4;\r\nSB_FM_OPERATORS_BY_OFFSET[0x05] = 5;\r\nSB_FM_OPERATORS_BY_OFFSET[0x08] = 6;\r\nSB_FM_OPERATORS_BY_OFFSET[0x09] = 7;\r\nSB_FM_OPERATORS_BY_OFFSET[0x0A] = 8;\r\nSB_FM_OPERATORS_BY_OFFSET[0x0B] = 9;\r\nSB_FM_OPERATORS_BY_OFFSET[0x0C] = 10;\r\nSB_FM_OPERATORS_BY_OFFSET[0x0D] = 11;\r\nSB_FM_OPERATORS_BY_OFFSET[0x10] = 12;\r\nSB_FM_OPERATORS_BY_OFFSET[0x11] = 13;\r\nSB_FM_OPERATORS_BY_OFFSET[0x12] = 14;\r\nSB_FM_OPERATORS_BY_OFFSET[0x13] = 15;\r\nSB_FM_OPERATORS_BY_OFFSET[0x14] = 16;\r\nSB_FM_OPERATORS_BY_OFFSET[0x15] = 17;\r\n\r\nfunction get_fm_operator(register, offset)\r\n{\r\n    return register * 18 + SB_FM_OPERATORS_BY_OFFSET[offset];\r\n}\r\n\r\nregister_fm_write([0x01], function(bits, register, address)\r\n{\r\n    this.fm_waveform_select_enable[register] = bits & 0x20 > 0;\r\n    this.fm_update_waveforms();\r\n});\r\n\r\n// Timer 1 Count.\r\nregister_fm_write([0x02]);\r\n\r\n// Timer 2 Count.\r\nregister_fm_write([0x03]);\r\n\r\nregister_fm_write([0x04], function(bits, register, address)\r\n{\r\n    switch(register)\r\n    {\r\n        case 0:\r\n            // if(bits & 0x80)\r\n            // {\r\n            //     // IQR Reset\r\n            // }\r\n            // else\r\n            // {\r\n            //     // Timer masks and on/off\r\n            // }\r\n            break;\r\n        case 1:\r\n            // Four-operator enable\r\n            break;\r\n    }\r\n});\r\n\r\nregister_fm_write([0x05], function(bits, register, address)\r\n{\r\n    if(register === 0)\r\n    {\r\n        // No registers documented here.\r\n        this.fm_default_write(bits, register, address);\r\n        return;\r\n    }\r\n    // OPL3 Mode Enable\r\n});\r\n\r\nregister_fm_write([0x08], function(bits, register, address)\r\n{\r\n    // Composite sine wave on/off\r\n    // Note select (keyboard split selection method)\r\n});\r\n\r\nregister_fm_write(between(0x20, 0x35), function(bits, register, address)\r\n{\r\n    var operator = get_fm_operator(register, address - 0x20);\r\n    // Tremolo\r\n    // Vibrato\r\n    // Sustain\r\n    // KSR Envelope Scaling\r\n    // Frequency Multiplication Factor\r\n});\r\n\r\nregister_fm_write(between(0x40, 0x55), function(bits, register, address)\r\n{\r\n    var operator = get_fm_operator(register, address - 0x40);\r\n    // Key Scale Level\r\n    // Output Level\r\n});\r\n\r\nregister_fm_write(between(0x60, 0x75), function(bits, register, address)\r\n{\r\n    var operator = get_fm_operator(register, address - 0x60);\r\n    // Attack Rate\r\n    // Decay Rate\r\n});\r\n\r\nregister_fm_write(between(0x80, 0x95), function(bits, register, address)\r\n{\r\n    var operator = get_fm_operator(register, address - 0x80);\r\n    // Sustain Level\r\n    // Release Rate\r\n});\r\n\r\nregister_fm_write(between(0xA0, 0xA8), function(bits, register, address)\r\n{\r\n    var channel = address - 0xA0;\r\n    // Frequency Number (Lower 8 bits)\r\n});\r\n\r\nregister_fm_write(between(0xB0, 0xB8), function(bits, register, address)\r\n{\r\n    // Key-On\r\n    // Block Number\r\n    // Frequency Number (Higher 2 bits)\r\n});\r\n\r\nregister_fm_write([0xBD], function(bits, register, address)\r\n{\r\n    // Tremelo Depth\r\n    // Vibrato Depth\r\n    // Percussion Mode\r\n    // Bass Drum Key-On\r\n    // Snare Drum Key-On\r\n    // Tom-Tom Key-On\r\n    // Cymbal Key-On\r\n    // Hi-Hat Key-On\r\n});\r\n\r\nregister_fm_write(between(0xC0, 0xC8), function(bits, register, address)\r\n{\r\n    // Right Speaker Enable\r\n    // Left Speaker Enable\r\n    // Feedback Modulation Factor\r\n    // Synthesis Type\r\n});\r\n\r\nregister_fm_write(between(0xE0, 0xF5), function(bits, register, address)\r\n{\r\n    var operator = get_fm_operator(register, address - 0xE0);\r\n    // Waveform Select\r\n});\r\n\r\n//\r\n// FM behaviours\r\n//\r\n\r\nSB16.prototype.fm_update_waveforms = function()\r\n{\r\n    // To be implemented.\r\n};\r\n\r\n//\r\n// General behaviours\r\n//\r\n\r\nSB16.prototype.sampling_rate_change = function(rate)\r\n{\r\n    this.sampling_rate = rate;\r\n    this.bus.send(\"dac-tell-sampling-rate\", rate);\r\n};\r\n\r\nSB16.prototype.get_channel_count = function()\r\n{\r\n    return this.dsp_stereo ? 2 : 1;\r\n};\r\n\r\nSB16.prototype.dma_transfer_size_set = function()\r\n{\r\n    this.dma_sample_count = 1 + (this.write_buffer.shift() << 0) + (this.write_buffer.shift() << 8);\r\n};\r\n\r\nSB16.prototype.dma_transfer_start = function()\r\n{\r\n    dbg_log(\"begin dma transfer\", LOG_SB16);\r\n\r\n    // (1) Setup appropriate settings.\r\n\r\n    this.bytes_per_sample = 1;\r\n    if(this.dsp_16bit) this.bytes_per_sample *= 2;\r\n\r\n    // Don't count stereo interleaved bits apparently.\r\n    // Disabling this line is needed for sounds to work correctly,\r\n    // especially double buffering autoinit mode.\r\n    // Learnt the hard way.\r\n    // if(this.dsp_stereo) this.bytes_per_sample *= 2;\r\n\r\n    this.dma_bytes_count = this.dma_sample_count * this.bytes_per_sample;\r\n    this.dma_bytes_block = SB_DMA_BLOCK_SAMPLES * this.bytes_per_sample;\r\n\r\n    // Ensure block size is small enough but not too small, and is divisible by 4\r\n    var max_bytes_block = Math.max(this.dma_bytes_count >> 2 & ~0x3, 32);\r\n    this.dma_bytes_block = Math.min(max_bytes_block, this.dma_bytes_block);\r\n\r\n    // (2) Wait until channel is unmasked (if not already)\r\n    this.dma_waiting_transfer = true;\r\n    if(!this.dma.channel_mask[this.dma_channel])\r\n    {\r\n        this.dma_on_unmask(this.dma_channel);\r\n    }\r\n};\r\n\r\nSB16.prototype.dma_on_unmask = function(channel)\r\n{\r\n    if(channel !== this.dma_channel || !this.dma_waiting_transfer)\r\n    {\r\n        return;\r\n    }\r\n\r\n    // (3) Configure amount of bytes left to transfer and tell speaker adapter\r\n    // to start requesting transfers\r\n    this.dma_waiting_transfer = false;\r\n    this.dma_bytes_left = this.dma_bytes_count;\r\n    this.dma_paused = false;\r\n    this.bus.send(\"dac-enable\");\r\n};\r\n\r\nSB16.prototype.dma_transfer_next = function()\r\n{\r\n    dbg_log(\"dma transfering next block\", LOG_SB16);\r\n\r\n    var size = Math.min(this.dma_bytes_left, this.dma_bytes_block);\r\n    var samples = Math.floor(size / this.bytes_per_sample);\r\n\r\n    this.dma.do_write(this.dma_syncbuffer, 0, size, this.dma_channel, (error) =>\r\n    {\r\n        dbg_log(\"dma block transfer \" + (error ? \"unsuccessful\" : \"successful\"), LOG_SB16);\r\n        if(error) return;\r\n\r\n        this.dma_to_dac(samples);\r\n        this.dma_bytes_left -= size;\r\n\r\n        if(!this.dma_bytes_left)\r\n        {\r\n            // Completed requested transfer of given size.\r\n            this.raise_irq(this.dma_irq);\r\n\r\n            if(this.dma_autoinit)\r\n            {\r\n                // Restart the transfer.\r\n                this.dma_bytes_left = this.dma_bytes_count;\r\n            }\r\n        }\r\n    });\r\n};\r\n\r\nSB16.prototype.dma_to_dac = function(sample_count)\r\n{\r\n    var amplitude = this.dsp_16bit ? 32767.5 : 127.5;\r\n    var offset = this.dsp_signed ? 0 : -1;\r\n    var repeats = this.dsp_stereo ? 1 : 2;\r\n\r\n    var buffer;\r\n    if(this.dsp_16bit)\r\n    {\r\n        buffer = this.dsp_signed ? this.dma_buffer_int16 : this.dma_buffer_uint16;\r\n    }\r\n    else\r\n    {\r\n        buffer = this.dsp_signed ? this.dma_buffer_int8 : this.dma_buffer_uint8;\r\n    }\r\n\r\n    var channel = 0;\r\n    for(var i = 0; i < sample_count; i++)\r\n    {\r\n        var sample = audio_normalize(buffer[i], amplitude, offset);\r\n        for(var j = 0; j < repeats; j++)\r\n        {\r\n            this.dac_buffers[channel].push(sample);\r\n            channel ^= 1;\r\n        }\r\n    }\r\n\r\n    this.dac_send();\r\n};\r\n\r\nSB16.prototype.dac_handle_request = function()\r\n{\r\n    if(!this.dma_bytes_left || this.dma_paused)\r\n    {\r\n        // No more data to transfer or is paused. Send whatever is in the buffers.\r\n        this.dac_send();\r\n    }\r\n    else\r\n    {\r\n        this.dma_transfer_next();\r\n    }\r\n};\r\n\r\nSB16.prototype.dac_send = function()\r\n{\r\n    if(!this.dac_buffers[0].length)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var out0 = this.dac_buffers[0].shift_block(this.dac_buffers[0].length);\r\n    var out1 = this.dac_buffers[1].shift_block(this.dac_buffers[1].length);\r\n    this.bus.send(\"dac-send-data\", [out0, out1], [out0.buffer, out1.buffer]);\r\n};\r\n\r\nSB16.prototype.raise_irq = function(type)\r\n{\r\n    dbg_log(\"raise irq\", LOG_SB16);\r\n    this.irq_triggered[type] = 1;\r\n    this.cpu.device_raise_irq(this.irq);\r\n};\r\n\r\nSB16.prototype.lower_irq = function(type)\r\n{\r\n    dbg_log(\"lower irq\", LOG_SB16);\r\n    this.irq_triggered[type] = 0;\r\n    this.cpu.device_lower_irq(this.irq);\r\n};\r\n\r\n//\r\n// Helpers\r\n//\r\n\r\nfunction audio_normalize(value, amplitude, offset)\r\n{\r\n    return audio_clip(value / amplitude + offset, -1, 1);\r\n}\r\n\r\nfunction audio_clip(value, low, high)\r\n{\r\n    return (value < low) * low + (value > high) * high + (low <= value && value <= high) * value;\r\n}\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar FPU_LOG_OP = false;\r\n\r\nvar\r\n    /** @const */\r\n    FPU_C0 = 0x100,\r\n    /** @const */\r\n    FPU_C1 = 0x200,\r\n    /** @const */\r\n    FPU_C2 = 0x400,\r\n    /** @const */\r\n    FPU_C3 = 0x4000,\r\n    /** @const */\r\n    FPU_RESULT_FLAGS = FPU_C0 | FPU_C1 | FPU_C2 | FPU_C3,\r\n    /** @const */\r\n    FPU_STACK_TOP = 0x3800;\r\n\r\nvar\r\n    // precision, round & infinity control\r\n    /** @const */\r\n    FPU_PC = 3 << 8,\r\n    /** @const */\r\n    FPU_RC = 3 << 10,\r\n    /** @const */\r\n    FPU_IF = 1 << 12;\r\n\r\n// exception bits in the status word\r\nvar\r\n    /** @const */\r\n    FPU_EX_SF = 1 << 6,\r\n    /** @const */\r\n    FPU_EX_P = 1 << 5,\r\n    /** @const */\r\n    FPU_EX_U = 1 << 4,\r\n    /** @const */\r\n    FPU_EX_O = 1 << 3,\r\n    /** @const */\r\n    FPU_EX_Z = 1 << 2,\r\n    /** @const */\r\n    FPU_EX_D = 1 << 1,\r\n    /** @const */\r\n    FPU_EX_I = 1 << 0;\r\n\r\nvar\r\n    /** @const */\r\n    TWO_POW_63 =  0x8000000000000000;\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n */\r\nfunction FPU(cpu)\r\n{\r\n    // TODO:\r\n    // - Precision Control\r\n    // - QNaN, unordered comparison\r\n    // - Exceptions\r\n\r\n    this.cpu = cpu;\r\n\r\n    // Why no Float80Array :-(\r\n    this.st = new Float64Array(8);\r\n\r\n    // used for conversion\r\n    /** @const */ this.float32 = new Float32Array(1);\r\n    /** @const */ this.float32_byte = new Uint8Array(this.float32.buffer);\r\n    /** @const */ this.float32_int = new Int32Array(this.float32.buffer);\r\n    /** @const */ this.float64 = new Float64Array(1);\r\n    /** @const */ this.float64_byte = new Uint8Array(this.float64.buffer);\r\n    /** @const */ this.float64_int = new Int32Array(this.float64.buffer);\r\n\r\n    /** @const */ this.st8 = new Uint8Array(this.st.buffer);\r\n    /** @const */ this.st32 = new Int32Array(this.st.buffer);\r\n\r\n\r\n    // bitmap of which stack registers are empty\r\n    this.stack_empty = 0xff;\r\n    this.stack_ptr = 0;\r\n\r\n    this.control_word = 0x37F;\r\n    this.status_word = 0;\r\n    this.fpu_ip = 0;\r\n    this.fpu_ip_selector = 0;\r\n    this.fpu_opcode = 0;\r\n    this.fpu_dp = 0;\r\n    this.fpu_dp_selector = 0;\r\n\r\n    /** @const */\r\n    this.indefinite_nan = NaN;\r\n\r\n    /** @const */\r\n    this.constants = new Float64Array([\r\n        1, Math.log(10) / Math.LN2, Math.LOG2E, Math.PI,\r\n        Math.log(2) / Math.LN10, Math.LN2, 0\r\n    ]);\r\n\r\n}\r\n\r\nFPU.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.st;\r\n    state[1] = this.stack_empty;\r\n    state[2] = this.stack_ptr;\r\n    state[3] = this.control_word;\r\n    state[4] = this.fpu_dp_selector;\r\n    state[5] = this.fpu_ip;\r\n    state[6] = this.fpu_ip_selector;\r\n    state[7] = this.fpu_dp;\r\n    state[8] = this.fpu_dp_selector;\r\n    state[9] = this.fpu_opcode;\r\n\r\n    return state;\r\n};\r\n\r\nFPU.prototype.set_state = function(state)\r\n{\r\n    this.st.set(state[0]);\r\n    this.stack_empty = state[1];\r\n    this.stack_ptr = state[2];\r\n    this.control_word = state[3];\r\n    this.fpu_dp_selector = state[4];\r\n    this.fpu_ip = state[5];\r\n    this.fpu_ip_selector = state[6];\r\n    this.fpu_dp = state[7];\r\n    this.fpu_dp_selector = state[8];\r\n    this.fpu_opcode = state[9];\r\n};\r\n\r\nFPU.prototype.fpu_unimpl = function()\r\n{\r\n    dbg_trace();\r\n    if(DEBUG) throw \"fpu: unimplemented\";\r\n    else this.cpu.trigger_ud();\r\n}\r\n\r\nFPU.prototype.stack_fault = function()\r\n{\r\n    // TODO: Interrupt\r\n    this.status_word |= FPU_EX_SF | FPU_EX_I;\r\n}\r\n\r\nFPU.prototype.invalid_arithmatic = function()\r\n{\r\n    this.status_word |= FPU_EX_I;\r\n}\r\n\r\nFPU.prototype.fcom = function(y)\r\n{\r\n    var x = this.get_st0();\r\n\r\n    this.status_word &= ~FPU_RESULT_FLAGS;\r\n\r\n    if(x > y)\r\n    {\r\n    }\r\n    else if(y > x)\r\n    {\r\n        this.status_word |= FPU_C0;\r\n    }\r\n    else if(x === y)\r\n    {\r\n        this.status_word |= FPU_C3;\r\n    }\r\n    else\r\n    {\r\n        this.status_word |= FPU_C0 | FPU_C2 | FPU_C3;\r\n    }\r\n}\r\n\r\nFPU.prototype.fucom = function(y)\r\n{\r\n    // TODO\r\n    this.fcom(y);\r\n}\r\n\r\n\r\nFPU.prototype.fcomi = function(y)\r\n{\r\n    var x = this.st[this.stack_ptr];\r\n\r\n    this.cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\r\n    this.cpu.flags &= ~(1 | flag_parity | flag_zero);\r\n\r\n    if(x > y)\r\n    {\r\n    }\r\n    else if(y > x)\r\n    {\r\n        this.cpu.flags |= 1;\r\n    }\r\n    else if(x === y)\r\n    {\r\n        this.cpu.flags |= flag_zero;\r\n    }\r\n    else\r\n    {\r\n        this.cpu.flags |= 1 | flag_parity | flag_zero;\r\n    }\r\n}\r\n\r\nFPU.prototype.fucomi = function(y)\r\n{\r\n    // TODO\r\n    this.fcomi(y);\r\n}\r\n\r\nFPU.prototype.ftst = function(x)\r\n{\r\n    this.status_word &= ~FPU_RESULT_FLAGS;\r\n\r\n    if(isNaN(x))\r\n    {\r\n        this.status_word |= FPU_C3 | FPU_C2 | FPU_C0;\r\n    }\r\n    else if(x === 0)\r\n    {\r\n        this.status_word |= FPU_C3;\r\n    }\r\n    else if(x < 0)\r\n    {\r\n        this.status_word |= FPU_C0;\r\n    }\r\n\r\n    // TODO: unordered (x is nan, etc)\r\n}\r\n\r\nFPU.prototype.fxam = function(x)\r\n{\r\n    this.status_word &= ~FPU_RESULT_FLAGS;\r\n    this.status_word |= this.sign(0) << 9;\r\n\r\n    if(this.stack_empty >> this.stack_ptr & 1)\r\n    {\r\n        this.status_word |= FPU_C3 | FPU_C0;\r\n    }\r\n    else if(isNaN(x))\r\n    {\r\n        this.status_word |= FPU_C0;\r\n    }\r\n    else if(x === 0)\r\n    {\r\n        this.status_word |= FPU_C3;\r\n    }\r\n    else if(x === Infinity || x === -Infinity)\r\n    {\r\n        this.status_word |= FPU_C2 | FPU_C0;\r\n    }\r\n    else\r\n    {\r\n        this.status_word |= FPU_C2;\r\n    }\r\n    // TODO:\r\n    // Unsupported, Denormal\r\n}\r\n\r\nFPU.prototype.finit = function()\r\n{\r\n    this.control_word = 0x37F;\r\n    this.status_word = 0;\r\n    this.fpu_ip = 0;\r\n    this.fpu_dp = 0;\r\n    this.fpu_opcode = 0;\r\n\r\n    this.stack_empty = 0xFF;\r\n    this.stack_ptr = 0;\r\n}\r\n\r\nFPU.prototype.load_status_word = function()\r\n{\r\n    return this.status_word & ~(7 << 11) | this.stack_ptr << 11;\r\n}\r\n\r\nFPU.prototype.set_status_word = function(sw)\r\n{\r\n    this.status_word = sw & ~(7 << 11);\r\n    this.stack_ptr = sw >> 11 & 7;\r\n}\r\n\r\nFPU.prototype.load_tag_word = function()\r\n{\r\n    var tag_word = 0,\r\n        value;\r\n\r\n    for(var i = 0; i < 8; i++)\r\n    {\r\n        value = this.st[i];\r\n\r\n        if(this.stack_empty >> i & 1)\r\n        {\r\n            tag_word |= 3 << (i << 1);\r\n        }\r\n        else if(value === 0)\r\n        {\r\n            tag_word |= 1 << (i << 1);\r\n        }\r\n        else if(!isFinite(value))\r\n        {\r\n            tag_word |= 2 << (i << 1);\r\n        }\r\n    }\r\n\r\n    //dbg_log(\"load  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty) + \" sp=\" + this.stack_ptr, LOG_FPU);\r\n\r\n    return tag_word;\r\n}\r\n\r\nFPU.prototype.set_tag_word = function(tag_word)\r\n{\r\n    this.stack_empty = 0;\r\n\r\n    for(var i = 0; i < 8; i++)\r\n    {\r\n        this.stack_empty |= (tag_word >> i) & (tag_word >> i + 1) & 1 << i;\r\n    }\r\n\r\n    //dbg_log(\"set_tag_word  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty), LOG_FPU);\r\n}\r\n\r\nFPU.prototype.fstenv = function(addr)\r\n{\r\n    if(this.cpu.is_osize_32())\r\n    {\r\n        this.cpu.writable_or_pagefault(addr, 26);\r\n\r\n        this.cpu.safe_write16(addr, this.control_word);\r\n\r\n        this.cpu.safe_write16(addr + 4, this.load_status_word());\r\n        this.cpu.safe_write16(addr + 8, this.load_tag_word());\r\n\r\n        this.cpu.safe_write32(addr + 12, this.fpu_ip);\r\n        this.cpu.safe_write16(addr + 16, this.fpu_ip_selector);\r\n        this.cpu.safe_write16(addr + 18, this.fpu_opcode);\r\n        this.cpu.safe_write32(addr + 20, this.fpu_dp);\r\n        this.cpu.safe_write16(addr + 24, this.fpu_dp_selector);\r\n    }\r\n    else\r\n    {\r\n        this.fpu_unimpl();\r\n    }\r\n}\r\n\r\nFPU.prototype.fldenv = function(addr)\r\n{\r\n    if(this.cpu.is_osize_32())\r\n    {\r\n        this.control_word = this.cpu.safe_read16(addr);\r\n\r\n        this.set_status_word(this.cpu.safe_read16(addr + 4));\r\n        this.set_tag_word(this.cpu.safe_read16(addr + 8));\r\n\r\n        this.fpu_ip = this.cpu.safe_read32s(addr + 12);\r\n        this.fpu_ip_selector = this.cpu.safe_read16(addr + 16);\r\n        this.fpu_opcode = this.cpu.safe_read16(addr + 18);\r\n        this.fpu_dp = this.cpu.safe_read32s(addr + 20);\r\n        this.fpu_dp_selector = this.cpu.safe_read16(addr + 24);\r\n    }\r\n    else\r\n    {\r\n        this.fpu_unimpl();\r\n    }\r\n}\r\n\r\nFPU.prototype.fsave = function(addr)\r\n{\r\n    this.cpu.writable_or_pagefault(addr, 108);\r\n\r\n    this.fstenv(addr);\r\n    addr += 28;\r\n\r\n    for(var i = 0; i < 8; i++)\r\n    {\r\n        this.store_m80(addr, this.st[this.stack_ptr + i & 7]);\r\n        addr += 10;\r\n    }\r\n\r\n    //dbg_log(\"save st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\r\n\r\n    this.finit();\r\n}\r\n\r\nFPU.prototype.frstor = function(addr)\r\n{\r\n    this.fldenv(addr);\r\n    addr += 28;\r\n\r\n    for(var i = 0; i < 8; i++)\r\n    {\r\n        this.st[(i + this.stack_ptr) & 7] = this.load_m80(addr);\r\n        addr += 10;\r\n    }\r\n\r\n    //dbg_log(\"rstor st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\r\n}\r\n\r\nFPU.prototype.fxtract = function()\r\n{\r\n    this.float64[0] = this.get_st0();\r\n\r\n    var exponent = ((this.float64_byte[7] & 0x7F) << 4 | this.float64_byte[6] >> 4) - 0x3FF;\r\n\r\n    this.float64_byte[7] = 0x3F | (this.float64_byte[7] & 0x80);\r\n    this.float64_byte[6] |= 0xF0;\r\n\r\n    this.st[this.stack_ptr] = exponent;\r\n    this.push(this.float64[0]);\r\n};\r\n\r\nFPU.prototype.integer_round = function(f)\r\n{\r\n    var rc = this.control_word >> 10 & 3;\r\n    return this.cpu.integer_round(f, rc);\r\n}\r\n\r\nFPU.prototype.truncate = function(x)\r\n{\r\n    return x > 0 ? Math.floor(x) : Math.ceil(x);\r\n}\r\n\r\nFPU.prototype.push = function(x)\r\n{\r\n    this.stack_ptr = this.stack_ptr - 1 & 7;\r\n\r\n    if(this.stack_empty >> this.stack_ptr & 1)\r\n    {\r\n        this.status_word &= ~FPU_C1;\r\n        this.stack_empty &= ~(1 << this.stack_ptr);\r\n        this.st[this.stack_ptr] = x;\r\n    }\r\n    else\r\n    {\r\n        this.status_word |= FPU_C1;\r\n        this.stack_fault();\r\n        this.st[this.stack_ptr] = this.indefinite_nan;\r\n    }\r\n}\r\n\r\nFPU.prototype.pop = function()\r\n{\r\n    this.stack_empty |= 1 << this.stack_ptr;\r\n    this.stack_ptr = this.stack_ptr + 1 & 7;\r\n}\r\n\r\nFPU.prototype.get_sti = function(i)\r\n{\r\n    dbg_assert(typeof i === \"number\" && i >= 0 && i < 8);\r\n\r\n    i = i + this.stack_ptr & 7;\r\n\r\n    if(this.stack_empty >> i & 1)\r\n    {\r\n        this.status_word &= ~FPU_C1;\r\n        this.stack_fault();\r\n        return this.indefinite_nan;\r\n    }\r\n    else\r\n    {\r\n        return this.st[i];\r\n    }\r\n}\r\n\r\nFPU.prototype.get_st0 = function()\r\n{\r\n    if(this.stack_empty >> this.stack_ptr & 1)\r\n    {\r\n        this.status_word &= ~FPU_C1;\r\n        this.stack_fault();\r\n        return this.indefinite_nan;\r\n    }\r\n    else\r\n    {\r\n        return this.st[this.stack_ptr];\r\n    }\r\n}\r\n\r\nFPU.prototype.load_m80 = function(addr)\r\n{\r\n    var exponent = this.cpu.safe_read16(addr + 8),\r\n        sign,\r\n        low = this.cpu.safe_read32s(addr) >>> 0,\r\n        high = this.cpu.safe_read32s(addr + 4) >>> 0;\r\n\r\n    sign = exponent >> 15;\r\n    exponent &= ~0x8000;\r\n\r\n    if(exponent === 0)\r\n    {\r\n        // TODO: denormal numbers\r\n        return 0;\r\n    }\r\n\r\n    if(exponent < 0x7FFF)\r\n    {\r\n        exponent -= 0x3FFF;\r\n    }\r\n    else\r\n    {\r\n        // TODO: NaN, Infinity\r\n        //dbg_log(\"Load m80 TODO\", LOG_FPU);\r\n        this.float64_byte[7] = 0x7F | sign << 7;\r\n        this.float64_byte[6] = 0xF0 | high >> 30 << 3 & 0x08;\r\n\r\n        this.float64_byte[5] = 0;\r\n        this.float64_byte[4] = 0;\r\n\r\n        this.float64_int[0] = 0;\r\n\r\n        return this.float64[0];\r\n    }\r\n\r\n    // Note: some bits might be lost at this point\r\n    var mantissa = low + 0x100000000 * high;\r\n\r\n    if(sign)\r\n    {\r\n        mantissa = -mantissa;\r\n    }\r\n\r\n    //console.log(\"m: \" + mantissa);\r\n    //console.log(\"e: \" + exponent);\r\n    //console.log(\"s: \" + this.sign);\r\n    //console.log(\"f: \" + mantissa * Math.pow(2, exponent - 63));\r\n\r\n    // Simply compute the 64 bit floating point number.\r\n    // An alternative write the mantissa, sign and exponent in the\r\n    // float64_byte and return float64[0]\r\n\r\n    return mantissa * Math.pow(2, exponent - 63);\r\n}\r\n\r\nFPU.prototype.store_m80 = function(addr, n)\r\n{\r\n    this.float64[0] = n;\r\n\r\n    var sign = this.float64_byte[7] & 0x80,\r\n        exponent = (this.float64_byte[7] & 0x7f) << 4 | this.float64_byte[6] >> 4,\r\n        low,\r\n        high;\r\n\r\n    if(exponent === 0x7FF)\r\n    {\r\n        // all bits set (NaN and infinity)\r\n        exponent = 0x7FFF;\r\n        low = 0;\r\n        high = 0x80000000 | (this.float64_int[1] & 0x80000) << 11;\r\n    }\r\n    else if(exponent === 0)\r\n    {\r\n        // zero and denormal numbers\r\n        // Just assume zero for now\r\n        low = 0;\r\n        high = 0;\r\n    }\r\n    else\r\n    {\r\n        exponent += 0x3FFF - 0x3FF;\r\n\r\n        // does the mantissa need to be adjusted?\r\n        low = this.float64_int[0] << 11;\r\n        high = 0x80000000 | (this.float64_int[1] & 0xFFFFF) << 11 | (this.float64_int[0] >>> 21);\r\n    }\r\n\r\n    dbg_assert(exponent >= 0 && exponent < 0x8000);\r\n\r\n    this.cpu.safe_write32(addr, low);\r\n    this.cpu.safe_write32(addr + 4, high);\r\n\r\n    this.cpu.safe_write16(addr + 8, sign << 8 | exponent);\r\n}\r\n\r\nFPU.prototype.load_m64 = function(addr)\r\n{\r\n    var low = this.cpu.safe_read32s(addr),\r\n        high = this.cpu.safe_read32s(addr + 4);\r\n\r\n    this.float64_int[0] = low;\r\n    this.float64_int[1] = high;\r\n\r\n    return this.float64[0];\r\n};\r\n\r\nFPU.prototype.store_m64 = function(addr, i)\r\n{\r\n    this.cpu.writable_or_pagefault(addr, 8);\r\n\r\n    this.float64[0] = this.get_sti(i);\r\n\r\n    this.cpu.safe_write32(addr, this.float64_int[0]);\r\n    this.cpu.safe_write32(addr + 4, this.float64_int[1]);\r\n};\r\n\r\nFPU.prototype.load_m32 = function(addr)\r\n{\r\n    this.float32_int[0] = this.cpu.safe_read32s(addr);\r\n\r\n    return this.float32[0];\r\n};\r\n\r\nFPU.prototype.store_m32 = function(addr, x)\r\n{\r\n    this.float32[0] = x;\r\n\r\n    this.cpu.safe_write32(addr, this.float32_int[0]);\r\n};\r\n\r\n// sign of a number on the stack\r\nFPU.prototype.sign = function(i)\r\n{\r\n    return this.st8[(this.stack_ptr + i & 7) << 3 | 7] >> 7;\r\n};\r\n\r\n\r\nFPU.prototype.dbg_log_fpu_op = function(op, imm8)\r\n{\r\n    if(!FPU_LOG_OP)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(imm8 >= 0xC0)\r\n    {\r\n        dbg_log(h(op, 2) + \" \" + h(imm8, 2) + \"/\" + (imm8 >> 3 & 7) + \"/\" + (imm8 & 7) +\r\n                \" @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\r\n    }\r\n    else\r\n    {\r\n        dbg_log(h(op, 2) + \" /\" + (imm8 >> 3 & 7) +\r\n                \"     @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\r\n    }\r\n}\r\n\r\n\r\nFPU.prototype.fwait = function()\r\n{\r\n    // NOP unless FPU instructions run in parallel with CPU instructions\r\n};\r\n\r\n\r\nFPU.prototype.op_D8_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xD8, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7,\r\n        sti = this.get_sti(low),\r\n        st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[this.stack_ptr] = st0 + sti;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[this.stack_ptr] = st0 * sti;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(sti);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(sti);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsub\r\n            this.st[this.stack_ptr] = st0 - sti;\r\n            break;\r\n        case 5:\r\n            // fsubr\r\n            this.st[this.stack_ptr] = sti - st0;\r\n            break;\r\n        case 6:\r\n            // fdiv\r\n            this.st[this.stack_ptr] = st0 / sti;\r\n            break;\r\n        case 7:\r\n            // fdivr\r\n            this.st[this.stack_ptr] = sti / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_D8_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xD8, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        m32 = this.load_m32(addr);\r\n\r\n    var st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[this.stack_ptr] = st0 + m32;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[this.stack_ptr] = st0 * m32;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(m32);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(m32);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsub\r\n            this.st[this.stack_ptr] = st0 - m32;\r\n            break;\r\n        case 5:\r\n            // fsubr\r\n            this.st[this.stack_ptr] = m32 - st0;\r\n            break;\r\n        case 6:\r\n            // fdiv\r\n            this.st[this.stack_ptr] = st0 / m32;\r\n            break;\r\n        case 7:\r\n            // fdivr\r\n            this.st[this.stack_ptr] = m32 / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_D9_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xD9, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fld\r\n            var sti = this.get_sti(low);\r\n            this.push(sti);\r\n            break;\r\n        case 1:\r\n            // fxch\r\n            var sti = this.get_sti(low);\r\n\r\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\r\n            this.st[this.stack_ptr] = sti;\r\n            break;\r\n        case 2:\r\n            switch(low)\r\n            {\r\n                case 0:\r\n                    // fnop\r\n                    break;\r\n                default:\r\n                    dbg_log(low);\r\n                    this.fpu_unimpl();\r\n            }\r\n            break;\r\n        case 3:\r\n            // fstp1\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 4:\r\n            var st0 = this.get_st0();\r\n\r\n            switch(low)\r\n            {\r\n                case 0:\r\n                    // fchs\r\n                    this.st[this.stack_ptr] = -st0;\r\n                    break;\r\n                case 1:\r\n                    // fabs\r\n                    this.st[this.stack_ptr] = Math.abs(st0);\r\n                    break;\r\n                case 4:\r\n                    this.ftst(st0);\r\n                    break;\r\n                case 5:\r\n                    this.fxam(st0);\r\n                    break;\r\n                default:\r\n                    dbg_log(low);\r\n                    this.fpu_unimpl();\r\n            }\r\n            break;\r\n        case 5:\r\n            this.push(this.constants[low]);\r\n            break;\r\n        case 6:\r\n            var st0 = this.get_st0();\r\n\r\n            switch(low)\r\n            {\r\n                case 0:\r\n                    // f2xm1\r\n                    this.st[this.stack_ptr] = Math.pow(2, st0) - 1;\r\n                    break;\r\n                case 1:\r\n                    // fyl2x\r\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0) / Math.LN2;\r\n                    this.pop();\r\n                    break;\r\n                case 2:\r\n                    // fptan\r\n                    this.st[this.stack_ptr] = Math.tan(st0);\r\n                    this.push(1); // no bug: push constant 1\r\n                    break;\r\n                case 3:\r\n                    // fpatan\r\n                    this.st[this.stack_ptr + 1 & 7] = Math.atan2(this.get_sti(1), st0);\r\n                    this.pop();\r\n                    break;\r\n                case 4:\r\n                    this.fxtract();\r\n                    break;\r\n                case 5:\r\n                    // fprem1\r\n                    this.st[this.stack_ptr] = st0 % this.get_sti(1);\r\n                    break;\r\n                case 6:\r\n                    // fdecstp\r\n                    this.stack_ptr = this.stack_ptr - 1 & 7;\r\n                    this.status_word &= ~FPU_C1;\r\n                    break;\r\n                case 7:\r\n                    // fincstp\r\n                    this.stack_ptr = this.stack_ptr + 1 & 7;\r\n                    this.status_word &= ~FPU_C1;\r\n                    break;\r\n                default:\r\n                    dbg_assert(false);\r\n            }\r\n            break;\r\n        case 7:\r\n            var st0 = this.get_st0();\r\n\r\n            switch(low)\r\n            {\r\n                case 0:\r\n                    // fprem\r\n                    var st1 = this.get_sti(1);\r\n                    var fprem_quotient = Math.trunc(st0 / st1);\r\n                    this.st[this.stack_ptr] = st0 % st1;\r\n\r\n                    this.status_word &= ~(FPU_C0 | FPU_C1 | FPU_C3);\r\n                    if (fprem_quotient & 1) {\r\n                        this.status_word |= FPU_C1;\r\n                    }\r\n                    if (fprem_quotient & (1 << 1)) {\r\n                        this.status_word |= FPU_C3;\r\n                    }\r\n                    if (fprem_quotient & (1 << 2)) {\r\n                        this.status_word |= FPU_C0;\r\n                    }\r\n\r\n                    this.status_word &= ~FPU_C2;\r\n                    break;\r\n                case 1:\r\n                    // fyl2xp1: y * log2(x+1) and pop\r\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0 + 1) / Math.LN2;\r\n                    this.pop();\r\n                    break;\r\n                case 2:\r\n                    this.st[this.stack_ptr] = Math.sqrt(st0);\r\n                    break;\r\n                case 3:\r\n                    this.st[this.stack_ptr] = Math.sin(st0);\r\n                    this.push(Math.cos(st0));\r\n                    break;\r\n                case 4:\r\n                    // frndint\r\n                    this.st[this.stack_ptr] = this.integer_round(st0);\r\n                    break;\r\n                case 5:\r\n                    // fscale\r\n                    this.st[this.stack_ptr] = st0 * Math.pow(2, this.truncate(this.get_sti(1)));\r\n                    break;\r\n                case 6:\r\n                    this.st[this.stack_ptr] = Math.sin(st0);\r\n                    break;\r\n                case 7:\r\n                    this.st[this.stack_ptr] = Math.cos(st0);\r\n                    break;\r\n                default:\r\n                    dbg_assert(false);\r\n            }\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_D9_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xD9, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fld\r\n            var data = this.load_m32(addr);\r\n            this.push(data);\r\n            break;\r\n        case 1:\r\n            // not defined\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 2:\r\n            // fst\r\n            this.store_m32(addr, this.get_st0());\r\n            break;\r\n        case 3:\r\n            // fstp\r\n            this.store_m32(addr, this.get_st0());\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            this.fldenv(addr);\r\n            break;\r\n        case 5:\r\n            // fldcw\r\n            var word = this.cpu.safe_read16(addr);\r\n            this.control_word = word;\r\n            break;\r\n        case 6:\r\n            this.fstenv(addr);\r\n            break;\r\n        case 7:\r\n            // fstcw\r\n            this.cpu.safe_write16(addr, this.control_word);\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DA_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDA, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fcmovb\r\n            if(this.cpu.test_b())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 1:\r\n            // fcmove\r\n            if(this.cpu.test_z())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 2:\r\n            // fcmovbe\r\n            if(this.cpu.test_be())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 3:\r\n            // fcmovu\r\n            if(this.cpu.test_p())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 5:\r\n            if(low === 1)\r\n            {\r\n                // fucompp\r\n                this.fucom(this.get_sti(1));\r\n                this.pop();\r\n                this.pop();\r\n            }\r\n            else\r\n            {\r\n                dbg_log(mod); this.fpu_unimpl();\r\n            }\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            this.fpu_unimpl();\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DA_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDA, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        m32 = this.cpu.safe_read32s(addr);\r\n\r\n    var st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[this.stack_ptr] = st0 + m32;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[this.stack_ptr] = st0 * m32;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(m32);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(m32);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsub\r\n            this.st[this.stack_ptr] = st0 - m32;\r\n            break;\r\n        case 5:\r\n            // fsubr\r\n            this.st[this.stack_ptr] = m32 - st0;\r\n            break;\r\n        case 6:\r\n            // fdiv\r\n            this.st[this.stack_ptr] = st0 / m32;\r\n            break;\r\n        case 7:\r\n            // fdivr\r\n            this.st[this.stack_ptr] = m32 / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DB_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDB, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fcmovnb\r\n            if(!this.cpu.test_b())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 1:\r\n            // fcmovne\r\n            if(!this.cpu.test_z())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 2:\r\n            // fcmovnbe\r\n            if(!this.cpu.test_be())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 3:\r\n            // fcmovnu\r\n            if(!this.cpu.test_p())\r\n            {\r\n                this.st[this.stack_ptr] = this.get_sti(low);\r\n                this.stack_empty &= ~(1 << this.stack_ptr);\r\n            }\r\n            break;\r\n        case 4:\r\n            if(imm8 === 0xE3)\r\n            {\r\n                this.finit();\r\n            }\r\n            else if(imm8 === 0xE4)\r\n            {\r\n                // fsetpm\r\n                // treat as nop\r\n            }\r\n            else if(imm8 === 0xE1)\r\n            {\r\n                // fdisi\r\n                // also treat as nop\r\n            }\r\n            else if(imm8 === 0xE2)\r\n            {\r\n                // fclex\r\n                this.status_word = 0;\r\n            }\r\n            else\r\n            {\r\n                dbg_log(h(imm8));\r\n                this.fpu_unimpl();\r\n            }\r\n            break;\r\n        case 5:\r\n            this.fucomi(this.get_sti(low));\r\n            break;\r\n        case 6:\r\n            this.fcomi(this.get_sti(low));\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            this.fpu_unimpl();\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DB_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDB, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fild\r\n            var int32 = this.cpu.safe_read32s(addr);\r\n            this.push(int32);\r\n            break;\r\n        case 2:\r\n            // fist\r\n            var st0 = this.integer_round(this.get_st0());\r\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\r\n            {\r\n                // TODO: Invalid operation\r\n                this.cpu.safe_write32(addr, st0);\r\n            }\r\n            else\r\n            {\r\n                this.invalid_arithmatic();\r\n                this.cpu.safe_write32(addr, 0x80000000|0);\r\n            }\r\n            break;\r\n        case 3:\r\n            // fistp\r\n            var st0 = this.integer_round(this.get_st0());\r\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\r\n            {\r\n                this.cpu.safe_write32(addr, st0);\r\n            }\r\n            else\r\n            {\r\n                this.invalid_arithmatic();\r\n                this.cpu.safe_write32(addr, 0x80000000|0);\r\n            }\r\n            this.pop();\r\n            break;\r\n        case 5:\r\n            // fld\r\n            this.push(this.load_m80(addr));\r\n            break;\r\n        case 7:\r\n            // fstp\r\n            this.cpu.writable_or_pagefault(addr, 10);\r\n            this.store_m80(addr, this.get_st0());\r\n            this.pop();\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            this.fpu_unimpl();\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DC_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDC, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7,\r\n        low_ptr = this.stack_ptr + low & 7,\r\n        sti = this.get_sti(low),\r\n        st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[low_ptr] = sti + st0;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[low_ptr] = sti * st0;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(sti);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(sti);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsubr\r\n            this.st[low_ptr] = st0 - sti;\r\n            break;\r\n        case 5:\r\n            // fsub\r\n            this.st[low_ptr] = sti - st0;\r\n            break;\r\n        case 6:\r\n            // fdivr\r\n            this.st[low_ptr] = st0 / sti;\r\n            break;\r\n        case 7:\r\n            // fdiv\r\n            this.st[low_ptr] = sti / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DC_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDC, imm8);\r\n\r\n    var\r\n        mod = imm8 >> 3 & 7,\r\n        m64 = this.load_m64(addr);\r\n\r\n    var st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[this.stack_ptr] = st0 + m64;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[this.stack_ptr] = st0 * m64;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(m64);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(m64);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsub\r\n            this.st[this.stack_ptr] = st0 - m64;\r\n            break;\r\n        case 5:\r\n            // fsubr\r\n            this.st[this.stack_ptr] = m64 - st0;\r\n            break;\r\n        case 6:\r\n            // fdiv\r\n            this.st[this.stack_ptr] = st0 / m64;\r\n            break;\r\n        case 7:\r\n            // fdivr\r\n            this.st[this.stack_ptr] = m64 / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DD_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDD, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // ffree\r\n            this.stack_empty |= 1 << (this.stack_ptr + low & 7);\r\n            break;\r\n        case 2:\r\n            // fst\r\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\r\n            break;\r\n        case 3:\r\n            // fstp\r\n            if(low === 0)\r\n            {\r\n                this.pop();\r\n            }\r\n            else\r\n            {\r\n                this.st[this.stack_ptr + low & 7] = this.get_st0();\r\n                this.pop();\r\n            }\r\n            break;\r\n        case 4:\r\n            this.fucom(this.get_sti(low));\r\n            break;\r\n        case 5:\r\n            // fucomp\r\n            this.fucom(this.get_sti(low));\r\n            this.pop();\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            this.fpu_unimpl();\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DD_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDD, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fld\r\n            var data = this.load_m64(addr);\r\n            this.push(data);\r\n            break;\r\n        case 1:\r\n            // fisttp\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 2:\r\n            // fst\r\n            this.store_m64(addr, 0);\r\n            break;\r\n        case 3:\r\n            // fstp\r\n            this.store_m64(addr, 0);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            this.frstor(addr);\r\n            break;\r\n        case 5:\r\n            // nothing\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 6:\r\n            // fsave\r\n            this.fsave(addr);\r\n            break;\r\n        case 7:\r\n            // fnstsw / store status word\r\n            this.cpu.safe_write16(addr, this.load_status_word());\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\n\r\nFPU.prototype.op_DE_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDE, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7,\r\n        low_ptr = this.stack_ptr + low & 7,\r\n        sti = this.get_sti(low),\r\n        st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // faddp\r\n            this.st[low_ptr] = sti + st0;\r\n            break;\r\n        case 1:\r\n            // fmulp\r\n            this.st[low_ptr] = sti * st0;\r\n            break;\r\n        case 2:\r\n            // fcomp\r\n            this.fcom(sti);\r\n            break;\r\n        case 3:\r\n            // fcompp\r\n            if(low === 1)\r\n            {\r\n                this.fcom(this.st[low_ptr]);\r\n                this.pop();\r\n            }\r\n            else\r\n            {\r\n                // not a valid encoding\r\n                dbg_log(mod);\r\n                this.fpu_unimpl();\r\n            }\r\n            break;\r\n        case 4:\r\n            // fsubrp\r\n            this.st[low_ptr] = st0 - sti;\r\n            break;\r\n        case 5:\r\n            // fsubp\r\n            this.st[low_ptr] = sti - st0;\r\n            break;\r\n        case 6:\r\n            // fdivrp\r\n            this.st[low_ptr] = st0 / sti;\r\n            break;\r\n        case 7:\r\n            // fdivp\r\n            this.st[low_ptr] = sti / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n\r\n    this.pop();\r\n};\r\n\r\nFPU.prototype.op_DE_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDE, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        m16 = this.cpu.safe_read16(addr) << 16 >> 16;\r\n\r\n    var st0 = this.get_st0();\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // fadd\r\n            this.st[this.stack_ptr] = st0 + m16;\r\n            break;\r\n        case 1:\r\n            // fmul\r\n            this.st[this.stack_ptr] = st0 * m16;\r\n            break;\r\n        case 2:\r\n            // fcom\r\n            this.fcom(m16);\r\n            break;\r\n        case 3:\r\n            // fcomp\r\n            this.fcom(m16);\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fsub\r\n            this.st[this.stack_ptr] = st0 - m16;\r\n            break;\r\n        case 5:\r\n            // fsubr\r\n            this.st[this.stack_ptr] = m16 - st0;\r\n            break;\r\n        case 6:\r\n            // fdiv\r\n            this.st[this.stack_ptr] = st0 / m16;\r\n            break;\r\n        case 7:\r\n            // fdivr\r\n            this.st[this.stack_ptr] = m16 / st0;\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DF_reg = function(imm8)\r\n{\r\n    this.dbg_log_fpu_op(0xDF, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7,\r\n        low = imm8 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 4:\r\n            if(imm8 === 0xE0)\r\n            {\r\n                // fnstsw\r\n                this.cpu.reg16[reg_ax] = this.load_status_word();\r\n            }\r\n            else\r\n            {\r\n                dbg_log(imm8);\r\n                this.fpu_unimpl();\r\n            }\r\n            break;\r\n        case 5:\r\n            // fucomip\r\n            this.fucomi(this.get_sti(low));\r\n            this.pop();\r\n            break;\r\n        case 6:\r\n            // fcomip\r\n            this.fcomi(this.get_sti(low));\r\n            this.pop();\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            this.fpu_unimpl();\r\n    }\r\n};\r\n\r\nFPU.prototype.op_DF_mem = function(imm8, addr)\r\n{\r\n    this.dbg_log_fpu_op(0xDF, imm8);\r\n\r\n    var mod = imm8 >> 3 & 7;\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            var m16 = this.cpu.safe_read16(addr) << 16 >> 16;\r\n\r\n            this.push(m16);\r\n            break;\r\n        case 1:\r\n            // fisttp\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 2:\r\n            // fist\r\n            var st0 = this.integer_round(this.get_st0());\r\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\r\n            {\r\n                this.cpu.safe_write16(addr, st0);\r\n            }\r\n            else\r\n            {\r\n                this.invalid_arithmatic();\r\n                this.cpu.safe_write16(addr, 0x8000);\r\n            }\r\n            break;\r\n        case 3:\r\n            // fistp\r\n            var st0 = this.integer_round(this.get_st0());\r\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\r\n            {\r\n                this.cpu.safe_write16(addr, st0);\r\n            }\r\n            else\r\n            {\r\n                this.invalid_arithmatic();\r\n                this.cpu.safe_write16(addr, 0x8000);\r\n            }\r\n            this.pop();\r\n            break;\r\n        case 4:\r\n            // fbld\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 5:\r\n            // fild\r\n            var low = this.cpu.safe_read32s(addr) >>> 0,\r\n                high = this.cpu.safe_read32s(addr + 4);\r\n\r\n            var m64 = low + 0x100000000 * high;\r\n\r\n            this.push(m64);\r\n            break;\r\n        case 6:\r\n            // fbstp\r\n            this.fpu_unimpl();\r\n            break;\r\n        case 7:\r\n            this.cpu.writable_or_pagefault(addr, 8);\r\n\r\n            // fistp\r\n            var st0 = this.integer_round(this.get_st0()),\r\n                st0_low,\r\n                st0_high;\r\n\r\n            if(st0 < TWO_POW_63 && st0 >= -TWO_POW_63)\r\n            {\r\n                st0_low = st0 | 0;\r\n                st0_high = st0 / 0x100000000 | 0;\r\n\r\n                if(st0_high === 0 && st0 < 0)\r\n                    st0_high = -1;\r\n            }\r\n            else\r\n            {\r\n                // write 0x8000000000000000\r\n                st0_low  = 0;\r\n                st0_high = 0x80000000 | 0;\r\n                this.invalid_arithmatic();\r\n            }\r\n\r\n            this.cpu.safe_write32(addr, st0_low);\r\n            this.cpu.safe_write32(addr + 4, st0_high);\r\n\r\n            this.pop();\r\n            break;\r\n        default:\r\n            dbg_assert(false);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/** @param {number=} length */\r\nfunction hex_dump(buffer, length)\r\n{\r\n    var result = [];\r\n    length = length || buffer.byteLength;\r\n    var addr = 0;\r\n    var line, byt;\r\n\r\n    for(var i = 0; i < length >> 4; i++)\r\n    {\r\n        line = h(addr + (i << 4), 5) + \"   \";\r\n\r\n        for(var j = 0; j < 0x10; j++)\r\n        {\r\n            byt = buffer[addr + (i << 4) + j];\r\n            line += h(byt, 2) + \" \";\r\n        }\r\n\r\n        line += \"  \";\r\n\r\n        for(j = 0; j < 0x10; j++)\r\n        {\r\n            byt = buffer[addr + (i << 4) + j];\r\n            line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\r\n        }\r\n\r\n        result.push(line);\r\n    }\r\n\r\n    return \"\\n\" + result.join(\"\\n\");\r\n}\r\n\r\n/** @const */\r\nvar CDROM_SECTOR_SIZE = 2048;\r\n/** @const */\r\nvar HD_SECTOR_SIZE = 512;\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {boolean} is_cd\r\n * @param {number} nr\r\n * @param {BusConnector} bus\r\n * */\r\nfunction IDEDevice(cpu, master_buffer, slave_buffer, is_cd, nr, bus)\r\n{\r\n    this.master = new IDEInterface(this, cpu, master_buffer, is_cd, nr, 0, bus);\r\n    this.slave = new IDEInterface(this, cpu, slave_buffer, is_cd, nr, 1, bus);\r\n\r\n    this.current_interface = this.master;\r\n\r\n    this.cpu = cpu;\r\n\r\n    // gets set via PCI in seabios, likely doesn't matter\r\n    if(nr === 0)\r\n    {\r\n        this.ata_port = 0x1F0;\r\n        this.irq = 14;\r\n\r\n        this.pci_id = 0x1E << 3;\r\n    }\r\n    else if(nr === 1)\r\n    {\r\n        this.ata_port = 0x170;\r\n        this.irq = 15;\r\n\r\n        this.pci_id = 0x1F << 3;\r\n    }\r\n    else\r\n    {\r\n        dbg_assert(false, \"IDE device with nr \" + nr + \" ignored\", LOG_DISK);\r\n    }\r\n\r\n    // alternate status, starting at 3f4/374\r\n    /** @type {number} */\r\n    this.ata_port_high = this.ata_port | 0x204;\r\n\r\n    /** @type {number} */\r\n    this.master_port = 0xB400;\r\n\r\n    this.pci_space = [\r\n        0x86, 0x80, 0x10, 0x70, 0x05, 0x00, 0xA0, 0x02,\r\n        0x00, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,\r\n        this.ata_port & 0xFF | 1,      this.ata_port >> 8, 0x00, 0x00,\r\n        this.ata_port_high & 0xFF | 1, this.ata_port_high >> 8, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, // second device\r\n        0x00, 0x00, 0x00, 0x00, // second device\r\n        this.master_port & 0xFF | 1,   this.master_port >> 8, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00,\r\n        0x43, 0x10, 0xD4, 0x82,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, this.irq, 0x01, 0x00, 0x00,\r\n\r\n        // 0x40\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        // 0x80\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n    ];\r\n    this.pci_bars = [\r\n        {\r\n            size: 8,\r\n        },\r\n        {\r\n            size: 4,\r\n        },\r\n        undefined,\r\n        undefined,\r\n        {\r\n            size: 0x10,\r\n        },\r\n    ];\r\n    this.name = \"ide\" + nr;\r\n\r\n    /** @type {number} */\r\n    this.device_control = 2;\r\n\r\n    // status\r\n    cpu.io.register_read(this.ata_port | 7, this, function() {\r\n        dbg_log(\"lower irq\", LOG_DISK);\r\n        this.cpu.device_lower_irq(this.irq);\r\n        return this.read_status();\r\n    });\r\n    cpu.io.register_read(this.ata_port_high | 2, this, this.read_status);\r\n\r\n    cpu.io.register_write(this.ata_port_high | 2, this, this.write_control);\r\n    cpu.io.register_read(this.ata_port | 0, this, function()\r\n    {\r\n        return this.current_interface.read_data(1);\r\n    }, function()\r\n    {\r\n        return this.current_interface.read_data(2);\r\n    }, function()\r\n    {\r\n        return this.current_interface.read_data(4);\r\n    });\r\n\r\n    cpu.io.register_read(this.ata_port | 1, this, function()\r\n    {\r\n        dbg_log(\"Read error: \" + h(this.current_interface.error & 0xFF) +\r\n                \" slave=\" + (this.current_interface === this.slave), LOG_DISK);\r\n        return this.current_interface.error;\r\n    });\r\n    cpu.io.register_read(this.ata_port | 2, this, function()\r\n    {\r\n        dbg_log(\"Read bytecount: \" + h(this.current_interface.bytecount & 0xFF), LOG_DISK);\r\n        return this.current_interface.bytecount & 0xFF;\r\n    });\r\n    cpu.io.register_read(this.ata_port | 3, this, function()\r\n    {\r\n        dbg_log(\"Read sector: \" + h(this.current_interface.sector & 0xFF), LOG_DISK);\r\n        return this.current_interface.sector & 0xFF;\r\n    });\r\n\r\n    cpu.io.register_read(this.ata_port | 4, this, function()\r\n    {\r\n        dbg_log(\"Read 1F4: \" + h(this.current_interface.cylinder_low & 0xFF), LOG_DISK);\r\n        return this.current_interface.cylinder_low & 0xFF;\r\n    });\r\n    cpu.io.register_read(this.ata_port | 5, this, function()\r\n    {\r\n        dbg_log(\"Read 1F5: \" + h(this.current_interface.cylinder_high & 0xFF), LOG_DISK);\r\n        return this.current_interface.cylinder_high & 0xFF;\r\n    });\r\n    cpu.io.register_read(this.ata_port | 6, this, function()\r\n    {\r\n        dbg_log(\"Read 1F6\", LOG_DISK);\r\n        return this.current_interface.drive_head;\r\n    });\r\n\r\n    cpu.io.register_write(this.ata_port | 0, this, function(data)\r\n    {\r\n        this.current_interface.write_data_port8(data);\r\n    }, function(data)\r\n    {\r\n        this.current_interface.write_data_port16(data);\r\n    }, function(data)\r\n    {\r\n        this.current_interface.write_data_port32(data);\r\n    });\r\n\r\n    cpu.io.register_write(this.ata_port | 1, this, function(data)\r\n    {\r\n        dbg_log(\"1F1/lba_count: \" + h(data), LOG_DISK);\r\n        this.master.lba_count = (this.master.lba_count << 8 | data) & 0xFFFF;\r\n        this.slave.lba_count = (this.slave.lba_count << 8 | data) & 0xFFFF;\r\n    });\r\n    cpu.io.register_write(this.ata_port | 2, this, function(data)\r\n    {\r\n        dbg_log(\"1F2/bytecount: \" + h(data), LOG_DISK);\r\n        this.master.bytecount = (this.master.bytecount << 8 | data) & 0xFFFF;\r\n        this.slave.bytecount = (this.slave.bytecount << 8 | data) & 0xFFFF;\r\n    });\r\n    cpu.io.register_write(this.ata_port | 3, this, function(data)\r\n    {\r\n        dbg_log(\"1F3/sector: \" + h(data), LOG_DISK);\r\n        this.master.sector = (this.master.sector << 8 | data) & 0xFFFF;\r\n        this.slave.sector = (this.slave.sector << 8 | data) & 0xFFFF;\r\n    });\r\n\r\n    cpu.io.register_write(this.ata_port | 4, this, function(data)\r\n    {\r\n        dbg_log(\"1F4/sector low: \" + h(data), LOG_DISK);\r\n        this.master.cylinder_low = (this.master.cylinder_low << 8 | data) & 0xFFFF;\r\n        this.slave.cylinder_low = (this.slave.cylinder_low << 8 | data) & 0xFFFF;\r\n    });\r\n    cpu.io.register_write(this.ata_port | 5, this, function(data)\r\n    {\r\n        dbg_log(\"1F5/sector high: \" + h(data), LOG_DISK);\r\n        this.master.cylinder_high = (this.master.cylinder_high << 8 | data) & 0xFFFF;\r\n        this.slave.cylinder_high = (this.slave.cylinder_high << 8 | data) & 0xFFFF;\r\n    });\r\n    cpu.io.register_write(this.ata_port | 6, this, function(data)\r\n    {\r\n        var slave = data & 0x10;\r\n        var mode = data & 0xE0;\r\n\r\n        dbg_log(\"1F6/drive: \" + h(data, 2), LOG_DISK);\r\n\r\n        if(slave)\r\n        {\r\n            dbg_log(\"Slave\", LOG_DISK);\r\n            this.current_interface = this.slave;\r\n        }\r\n        else\r\n        {\r\n            this.current_interface = this.master;\r\n        }\r\n\r\n        this.master.drive_head = data;\r\n        this.slave.drive_head = data;\r\n        this.master.is_lba = this.slave.is_lba = data >> 6 & 1;\r\n        this.master.head = this.slave.head = data & 0xF;\r\n    });\r\n\r\n    /** @type {number} */\r\n    this.prdt_addr = 0;\r\n\r\n    /** @type {number} */\r\n    this.dma_status = 0;\r\n\r\n    /** @type {number} */\r\n    this.dma_command = 0;\r\n\r\n    cpu.io.register_write(this.ata_port | 7, this, function(data)\r\n    {\r\n        dbg_log(\"lower irq\", LOG_DISK);\r\n        this.cpu.device_lower_irq(this.irq);\r\n        this.current_interface.ata_command(data);\r\n    });\r\n\r\n    cpu.io.register_read(this.master_port | 4, this, undefined, undefined, this.dma_read_addr);\r\n    cpu.io.register_write(this.master_port | 4, this, undefined, undefined, this.dma_set_addr);\r\n\r\n    cpu.io.register_read(this.master_port, this,\r\n                         this.dma_read_command8, undefined, this.dma_read_command);\r\n    cpu.io.register_write(this.master_port, this,\r\n                          this.dma_write_command8, undefined, this.dma_write_command);\r\n\r\n    cpu.io.register_read(this.master_port | 2, this, this.dma_read_status);\r\n    cpu.io.register_write(this.master_port | 2, this, this.dma_write_status);\r\n\r\n    cpu.io.register_read(this.master_port | 0x8, this, function() {\r\n        dbg_log(\"DMA read 0x8\", LOG_DISK); return 0;\r\n    });\r\n    cpu.io.register_read(this.master_port | 0xA, this, function() {\r\n        dbg_log(\"DMA read 0xA\", LOG_DISK); return 0;\r\n    });\r\n\r\n    cpu.devices.pci.register_device(this);\r\n\r\n    DEBUG && Object.seal(this);\r\n}\r\n\r\nIDEDevice.prototype.read_status = function()\r\n{\r\n    if(this.current_interface.buffer)\r\n    {\r\n        var ret = this.current_interface.status;\r\n        dbg_log(\"ATA read status: \" + h(ret, 2), LOG_DISK);\r\n        return ret;\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n};\r\n\r\nIDEDevice.prototype.write_control = function(data)\r\n{\r\n    dbg_log(\"set device control: \" + h(data, 2) + \" interrupts \" +\r\n            ((data & 2) ? \"disabled\" : \"enabled\"), LOG_DISK);\r\n\r\n    if(data & 4)\r\n    {\r\n        dbg_log(\"Reset via control port\", LOG_DISK);\r\n\r\n        this.cpu.device_lower_irq(this.irq);\r\n\r\n        this.master.device_reset();\r\n        this.slave.device_reset();\r\n    }\r\n\r\n    this.device_control = data;\r\n};\r\n\r\nIDEDevice.prototype.dma_read_addr = function()\r\n{\r\n    dbg_log(\"dma get address: \" + h(this.prdt_addr, 8), LOG_DISK);\r\n    return this.prdt_addr;\r\n};\r\n\r\nIDEDevice.prototype.dma_set_addr = function(data)\r\n{\r\n    dbg_log(\"dma set address: \" + h(data, 8), LOG_DISK);\r\n    this.prdt_addr = data;\r\n};\r\n\r\nIDEDevice.prototype.dma_read_status = function()\r\n{\r\n    dbg_log(\"DMA read status: \" + h(this.dma_status), LOG_DISK);\r\n    return this.dma_status;\r\n};\r\n\r\nIDEDevice.prototype.dma_write_status = function(value)\r\n{\r\n    dbg_log(\"DMA set status: \" + h(value), LOG_DISK);\r\n    this.dma_status &= ~(value & 6);\r\n};\r\n\r\nIDEDevice.prototype.dma_read_command = function()\r\n{\r\n    return this.dma_read_command8() | this.dma_read_status() << 16;\r\n};\r\n\r\nIDEDevice.prototype.dma_read_command8 = function()\r\n{\r\n    dbg_log(\"DMA read command: \" + h(this.dma_command), LOG_DISK);\r\n    return this.dma_command;\r\n};\r\n\r\nIDEDevice.prototype.dma_write_command = function(value)\r\n{\r\n    dbg_log(\"DMA write command: \" + h(value), LOG_DISK);\r\n\r\n    this.dma_write_command8(value & 0xFF);\r\n    this.dma_write_status(value >> 16 & 0xFF);\r\n};\r\n\r\nIDEDevice.prototype.dma_write_command8 = function(value)\r\n{\r\n    dbg_log(\"DMA write command8: \" + h(value), LOG_DISK);\r\n\r\n    let old_command = this.dma_command;\r\n    this.dma_command = value & 0x9;\r\n\r\n    if((old_command & 1) === (value & 1))\r\n    {\r\n        return;\r\n    }\r\n\r\n    if((value & 1) === 0)\r\n    {\r\n        this.dma_status &= ~1;\r\n        return;\r\n    }\r\n\r\n    this.dma_status |= 1;\r\n\r\n    switch(this.current_interface.current_command)\r\n    {\r\n        case 0x25:\r\n        case 0xC8:\r\n            this.current_interface.do_ata_read_sectors_dma();\r\n            break;\r\n\r\n        case 0xCA:\r\n        case 0x35:\r\n            this.current_interface.do_ata_write_sectors_dma();\r\n            break;\r\n\r\n        case 0xA0:\r\n            this.current_interface.do_atapi_dma();\r\n            break;\r\n\r\n        default:\r\n            dbg_log(\"Spurious dma command write, current command: \" +\r\n                    h(this.current_interface.current_command), LOG_DISK);\r\n            dbg_assert(false);\r\n    }\r\n};\r\n\r\nIDEDevice.prototype.push_irq = function()\r\n{\r\n    if((this.device_control & 2) === 0)\r\n    {\r\n        dbg_log(\"push irq\", LOG_DISK);\r\n        this.dma_status |= 4;\r\n        this.cpu.device_raise_irq(this.irq);\r\n    }\r\n};\r\n\r\nIDEDevice.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n    state[0] = this.master;\r\n    state[1] = this.slave;\r\n    state[2] = this.ata_port;\r\n    state[3] = this.irq;\r\n    state[4] = this.pci_id;\r\n    state[5] = this.ata_port_high;\r\n    state[6] = this.master_port;\r\n    state[7] = this.name;\r\n    state[8] = this.device_control;\r\n    state[9] = this.prdt_addr;\r\n    state[10] = this.dma_status;\r\n    state[11] = this.current_interface === this.master;\r\n    state[12] = this.dma_command;\r\n    return state;\r\n};\r\n\r\nIDEDevice.prototype.set_state = function(state)\r\n{\r\n    this.master = state[0];\r\n    this.slave = state[1];\r\n    this.ata_port = state[2];\r\n    this.irq = state[3];\r\n    this.pci_id = state[4];\r\n    this.ata_port_high = state[5];\r\n    this.master_port = state[6];\r\n    this.name = state[7];\r\n    this.device_control = state[8];\r\n    this.prdt_addr = state[9];\r\n    this.dma_status = state[10];\r\n    this.current_interface = state[11] ? this.master : this.slave;\r\n    this.dma_command = state[12];\r\n};\r\n\r\n\r\n/**\r\n * @constructor\r\n */\r\nfunction IDEInterface(device, cpu, buffer, is_cd, device_nr, interface_nr, bus)\r\n{\r\n    this.device = device;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    /**\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.nr = device_nr;\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    this.buffer = buffer;\r\n\r\n    /** @type {number} */\r\n    this.sector_size = is_cd ? CDROM_SECTOR_SIZE : HD_SECTOR_SIZE;\r\n\r\n    /** @type {boolean} */\r\n    this.is_atapi = is_cd;\r\n\r\n    /** @type {number} */\r\n    this.sector_count = 0;\r\n\r\n    /** @type {number} */\r\n    this.head_count = 0;\r\n\r\n    /** @type {number} */\r\n    this.sectors_per_track = 0;\r\n\r\n    /** @type {number} */\r\n    this.cylinder_count = 0;\r\n\r\n    if(this.buffer)\r\n    {\r\n        this.sector_count = this.buffer.byteLength / this.sector_size;\r\n\r\n        if(this.sector_count !== (this.sector_count | 0))\r\n        {\r\n            dbg_log(\"Warning: Disk size not aligned with sector size\", LOG_DISK);\r\n            this.sector_count = Math.ceil(this.sector_count);\r\n        }\r\n\r\n        if(is_cd)\r\n        {\r\n            this.head_count = 1;\r\n            this.sectors_per_track = 0;\r\n        }\r\n        else\r\n        {\r\n            // \"default\" values: 16/63\r\n            // common: 255, 63\r\n            this.head_count = 16;\r\n            this.sectors_per_track = 63;\r\n        }\r\n\r\n\r\n        this.cylinder_count = this.sector_count / this.head_count / this.sectors_per_track;\r\n\r\n        if(this.cylinder_count !== (this.cylinder_count | 0))\r\n        {\r\n            dbg_log(\"Warning: Rounding up cylinder count. Choose different head number\", LOG_DISK);\r\n            this.cylinder_count = Math.floor(this.cylinder_count);\r\n            //this.sector_count = this.cylinder_count * this.head_count *\r\n            //                        this.sectors_per_track * this.sector_size;\r\n        }\r\n\r\n        //if(this.cylinder_count > 16383)\r\n        //{\r\n        //    this.cylinder_count = 16383;\r\n        //}\r\n\r\n        // disk translation: lba\r\n        var rtc = cpu.devices.rtc;\r\n\r\n        // master\r\n        rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\r\n            rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << this.nr * 4);\r\n        rtc.cmos_write(CMOS_DISK_DATA, rtc.cmos_read(CMOS_DISK_DATA) & 0x0F | 0xF0);\r\n\r\n        var reg = CMOS_DISK_DRIVE1_CYL;\r\n        rtc.cmos_write(reg + 0, this.cylinder_count & 0xFF);\r\n        rtc.cmos_write(reg + 1, this.cylinder_count >> 8 & 0xFF);\r\n        rtc.cmos_write(reg + 2, this.head_count & 0xFF);\r\n        rtc.cmos_write(reg + 3, 0xFF);\r\n        rtc.cmos_write(reg + 4, 0xFF);\r\n        rtc.cmos_write(reg + 5, 0xC8);\r\n        rtc.cmos_write(reg + 6, this.cylinder_count & 0xFF);\r\n        rtc.cmos_write(reg + 7, this.cylinder_count >> 8 & 0xFF);\r\n        rtc.cmos_write(reg + 8, this.sectors_per_track & 0xFF);\r\n\r\n        //rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\r\n        //    rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << (nr * 4 + 2)); // slave\r\n    }\r\n\r\n    /** @const */\r\n    this.stats = {\r\n        sectors_read: 0,\r\n        sectors_written: 0,\r\n        bytes_read: 0,\r\n        bytes_written: 0,\r\n        loading: false,\r\n    };\r\n\r\n\r\n    this.buffer = buffer;\r\n\r\n    /** @type {number} */\r\n    this.is_lba = 0;\r\n\r\n    /** @type {number} */\r\n    this.bytecount = 0;\r\n\r\n    /** @type {number} */\r\n    this.sector = 0;\r\n\r\n    /** @type {number} */\r\n    this.lba_count = 0;\r\n\r\n    /** @type {number} */\r\n    this.cylinder_low = 0;\r\n\r\n    /** @type {number} */\r\n    this.cylinder_high = 0;\r\n\r\n    /** @type {number} */\r\n    this.head = 0;\r\n\r\n    /** @type {number} */\r\n    this.drive_head = 0;\r\n\r\n    /** @type {number} */\r\n    this.status = 0x50;\r\n\r\n    /** @type {number} */\r\n    this.sectors_per_drq = 0x80;\r\n\r\n    /** @type {number} */\r\n    this.error = 0;\r\n\r\n    /** @type {number} */\r\n    this.data_pointer = 0;\r\n\r\n    this.data = new Uint8Array(64 * 1024);\r\n    this.data16 = new Uint16Array(this.data.buffer);\r\n    this.data32 = new Int32Array(this.data.buffer);\r\n\r\n    /** @type {number} */\r\n    this.data_length = 0;\r\n\r\n    /** @type {number} */\r\n    this.data_end = 0;\r\n\r\n    /** @type {number} */\r\n    this.current_command = -1;\r\n\r\n    /** @type {number} */\r\n    this.current_atapi_command = -1;\r\n\r\n    /** @type {number} */\r\n    this.write_dest = 0;\r\n\r\n    Object.seal(this);\r\n}\r\n\r\nIDEInterface.prototype.device_reset = function()\r\n{\r\n    if(this.is_atapi)\r\n    {\r\n        this.status = 0;\r\n        this.bytecount = 1;\r\n        this.error = 1;\r\n        this.sector = 1; // lba_low\r\n        this.cylinder_low = 0x14; // lba_mid\r\n        this.cylinder_high = 0xEB; // lba_high\r\n    }\r\n    else\r\n    {\r\n        this.status = 0x50 | 1;\r\n        this.bytecount = 1;\r\n        this.error = 1;\r\n        this.sector = 1; // lba_low\r\n\r\n        // 0, 0 needed by bochs bios\r\n        this.cylinder_low = 0; // lba_mid\r\n        this.cylinder_high = 0; // lba_high\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.push_irq = function()\r\n{\r\n    this.device.push_irq();\r\n};\r\n\r\nIDEInterface.prototype.ata_command = function(cmd)\r\n{\r\n    dbg_log(\"ATA Command: \" + h(cmd) + \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\r\n\r\n    if(!this.buffer)\r\n    {\r\n        dbg_log(\"abort: No buffer\", LOG_DISK);\r\n        this.error = 4;\r\n        this.status = 0x41;\r\n        this.push_irq();\r\n        return;\r\n    }\r\n\r\n    this.current_command = cmd;\r\n    this.error = 0;\r\n\r\n    switch(cmd)\r\n    {\r\n        case 0x08:\r\n            dbg_log(\"ATA device reset\", LOG_DISK);\r\n            this.data_pointer = 0;\r\n            this.data_end = 0;\r\n            this.data_length = 0;\r\n            this.device_reset();\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0x10:\r\n            // calibrate drive\r\n            this.status = 0x50;\r\n            this.cylinder_low = 0;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xF8:\r\n            // read native max address\r\n            this.status = 0x50;\r\n            var last_sector = this.sector_count - 1;\r\n            this.sector = last_sector & 0xFF;\r\n            this.cylinder_low = last_sector >> 8 & 0xFF;\r\n            this.cylinder_high = last_sector >> 16 & 0xFF;\r\n            this.drive_head = this.drive_head & 0xF0 | last_sector >> 24 & 0x0F;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0x27:\r\n            // read native max address ext\r\n            this.status = 0x50;\r\n            var last_sector = this.sector_count - 1;\r\n            this.sector = last_sector & 0xFF;\r\n            this.cylinder_low = last_sector >> 8 & 0xFF;\r\n            this.cylinder_high = last_sector >> 16 & 0xFF;\r\n            this.sector |= last_sector >> 24 << 8 & 0xFF00;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0x20:\r\n        case 0x24:\r\n        case 0x29:\r\n        case 0xC4:\r\n            // 0x20 read sectors\r\n            // 0x24 read sectors ext\r\n            // 0xC4 read multiple\r\n            // 0x29 read multiple ext\r\n            this.ata_read_sectors(cmd);\r\n            break;\r\n\r\n        case 0x30:\r\n        case 0x34:\r\n        case 0x39:\r\n        case 0xC5:\r\n            // 0x30 write sectors\r\n            // 0x34 write sectors ext\r\n            // 0xC5 write multiple\r\n            // 0x39 write multiple ext\r\n            this.ata_write_sectors(cmd);\r\n            break;\r\n\r\n        case 0x90:\r\n            // execute device diagnostic\r\n            this.push_irq();\r\n            this.error = 0x101;\r\n            this.status = 0x50;\r\n            break;\r\n\r\n        case 0x91:\r\n            // initialize device parameters\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xA0:\r\n            // ATA packet\r\n            if(this.is_atapi)\r\n            {\r\n                this.status = 0x58;\r\n                this.data_allocate(12);\r\n                this.data_end = 12;\r\n                this.bytecount = 1;\r\n                this.push_irq();\r\n            }\r\n            break;\r\n\r\n        case 0xA1:\r\n            dbg_log(\"ATA identify packet device\", LOG_DISK);\r\n\r\n            if(this.is_atapi)\r\n            {\r\n                this.create_identify_packet();\r\n                this.status = 0x58;\r\n\r\n                this.cylinder_low = 0x14;\r\n                this.cylinder_high = 0xEB;\r\n\r\n                this.push_irq();\r\n            }\r\n            else\r\n            {\r\n                this.status = 0x41;\r\n                this.push_irq();\r\n            }\r\n            break;\r\n\r\n        case 0xC6:\r\n            // set multiple mode\r\n            // Logical sectors per DRQ Block in word 1\r\n            dbg_log(\"Logical sectors per DRQ Block: \" + h(this.bytecount & 0xFF), LOG_DISK);\r\n            this.sectors_per_drq = this.bytecount & 0xFF;\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0x25: // read dma ext\r\n        case 0xC8: // read dma\r\n            this.ata_read_sectors_dma(cmd);\r\n            break;\r\n\r\n        case 0x35: // write dma ext\r\n        case 0xCA: // write dma\r\n            this.ata_write_sectors_dma(cmd);\r\n            break;\r\n\r\n        case 0x40:\r\n            dbg_log(\"read verify sectors\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xDA:\r\n            dbg_log(\"Unimplemented: get media status\", LOG_DISK);\r\n            this.status = 0x41;\r\n            this.error = 4;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xE0:\r\n            dbg_log(\"ATA standby immediate\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xE1:\r\n            dbg_log(\"ATA idle immediate\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xE7:\r\n            dbg_log(\"ATA flush cache\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xEC:\r\n            dbg_log(\"ATA identify device\", LOG_DISK);\r\n\r\n            if(this.is_atapi)\r\n            {\r\n                this.status = 0x41;\r\n                this.error = 4;\r\n                this.push_irq();\r\n                return;\r\n            }\r\n\r\n            this.create_identify_packet();\r\n            this.status = 0x58;\r\n\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xEA:\r\n            dbg_log(\"flush cache ext\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xEF:\r\n            dbg_log(\"set features: \" + h(this.bytecount & 0xFF), LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xF5:\r\n            dbg_log(\"security freeze lock\", LOG_DISK);\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n            break;\r\n\r\n        case 0xF9:\r\n            dbg_log(\"Unimplemented: set max address\", LOG_DISK);\r\n            this.status = 0x41;\r\n            this.error = 4;\r\n            break;\r\n\r\n        default:\r\n            dbg_assert(false, \"New ATA cmd on 1F7: \" + h(cmd), LOG_DISK);\r\n\r\n            this.status = 0x41;\r\n            // abort bit set\r\n            this.error = 4;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.atapi_handle = function()\r\n{\r\n    dbg_log(\"ATAPI Command: \" + h(this.data[0]) +\r\n            \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\r\n\r\n    this.data_pointer = 0;\r\n    this.current_atapi_command = this.data[0];\r\n\r\n    switch(this.current_atapi_command)\r\n    {\r\n        case 0x00:\r\n            dbg_log(\"test unit ready\", LOG_DISK);\r\n            // test unit ready\r\n            this.data_allocate(0);\r\n            this.data_end = this.data_length;\r\n            this.status = 0x50;\r\n            break;\r\n\r\n        case 0x03:\r\n            // request sense\r\n            this.data_allocate(this.data[4]);\r\n            this.data_end = this.data_length;\r\n            this.status = 0x58;\r\n\r\n            this.data[0] = 0x80 | 0x70;\r\n            this.data[2] = 5; // illegal request\r\n            this.data[7] = 8;\r\n            break;\r\n\r\n        case 0x12:\r\n            // inquiry\r\n            var length = this.data[4];\r\n            this.status = 0x58;\r\n\r\n            dbg_log(\"inquiry: \" + h(this.data[1], 2) + \" length=\" + length, LOG_DISK);\r\n\r\n            // http://www.t10.org/ftp/x3t9.2/document.87/87-106r0.txt\r\n            //this.data_allocate(36);\r\n            this.data.set([\r\n                0x05, 0x80, 0x01, 0x31,\r\n                // additional length\r\n                31,\r\n                0, 0, 0,\r\n\r\n                // 8\r\n                0x53, 0x4F, 0x4E, 0x59,\r\n                0x20, 0x20, 0x20, 0x20,\r\n\r\n                // 16\r\n                0x43, 0x44, 0x2D, 0x52,\r\n                0x4F, 0x4D, 0x20, 0x43,\r\n                0x44, 0x55, 0x2D, 0x31,\r\n                0x30, 0x30, 0x30, 0x20,\r\n\r\n                // 32\r\n                0x31, 0x2E, 0x31, 0x61,\r\n            ]);\r\n            this.data_end = this.data_length = Math.min(36, length);\r\n            break;\r\n\r\n        case 0x1A:\r\n            // mode sense (6)\r\n            this.data_allocate(this.data[4]);\r\n            this.data_end = this.data_length;\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x1E:\r\n            // prevent/allow medium removal\r\n            this.data_allocate(0);\r\n            this.data_end = this.data_length;\r\n            this.status = 0x50;\r\n            break;\r\n\r\n        case 0x25:\r\n            // read capacity\r\n            var count = this.sector_count - 1;\r\n            this.data_set(new Uint8Array([\r\n                count >> 24 & 0xFF,\r\n                count >> 16 & 0xFF,\r\n                count >> 8 & 0xFF,\r\n                count & 0xFF,\r\n                0,\r\n                0,\r\n                this.sector_size >> 8 & 0xFF,\r\n                this.sector_size & 0xFF,\r\n            ]));\r\n            this.data_end = this.data_length;\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x28:\r\n            // read\r\n            if(this.lba_count & 1)\r\n            {\r\n                this.atapi_read_dma(this.data);\r\n            }\r\n            else\r\n            {\r\n                this.atapi_read(this.data);\r\n            }\r\n            break;\r\n\r\n        case 0x42:\r\n            var length = this.data[8];\r\n            this.data_allocate(Math.min(8, length));\r\n            this.data_end = this.data_length;\r\n            dbg_log(\"read q subcode: length=\" + length, LOG_DISK);\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x43:\r\n            // read toc\r\n            var length = this.data[8] | this.data[7] << 8;\r\n            var format = this.data[9] >> 6;\r\n\r\n            this.data_allocate(length);\r\n            this.data_end = this.data_length;\r\n            dbg_log(\"read toc: \" + h(format, 2) +\r\n                    \" length=\" + length +\r\n                    \" \" + (this.data[1] & 2) +\r\n                    \" \" + h(this.data[6]), LOG_DISK);\r\n\r\n            if(format === 0)\r\n            {\r\n                var sector_count = this.sector_count;\r\n                this.data.set(new Uint8Array([\r\n                    0, 18, // length\r\n                    1, 1, // first and last session\r\n\r\n                    0,\r\n                    0x14,\r\n                    1, // track number\r\n                    0,\r\n                    0, 0, 0, 0,\r\n\r\n                    0,\r\n                    0x16,\r\n                    0xAA, // track number\r\n                    0,\r\n                    sector_count >> 24,\r\n                    sector_count >> 16 & 0xFF,\r\n                    sector_count >> 8 & 0xFF,\r\n                    sector_count & 0xFF,\r\n                ]));\r\n            }\r\n            else if(format === 1)\r\n            {\r\n                this.data.set(new Uint8Array([\r\n                    0, 10, // length\r\n                    1, 1, // first and last session\r\n                    0, 0,\r\n                    0, 0,\r\n                    0, 0,\r\n                    0, 0,\r\n                ]));\r\n            }\r\n            else\r\n            {\r\n                dbg_assert(false, \"Unimplemented format: \" + format);\r\n            }\r\n\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x46:\r\n            // get configuration\r\n            var length = this.data[8] | this.data[7] << 8;\r\n            length = Math.min(length, 32);\r\n            this.data_allocate(length);\r\n            this.data_end = this.data_length;\r\n            this.data[0] = length - 4 >> 24 & 0xFF;\r\n            this.data[1] = length - 4 >> 16 & 0xFF;\r\n            this.data[2] = length - 4 >> 8 & 0xFF;\r\n            this.data[3] = length - 4 & 0xFF;\r\n            this.data[6] = 0x08;\r\n            this.data[10] = 3;\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x51:\r\n            // read disk information\r\n            this.data_allocate(0);\r\n            this.data_end = this.data_length;\r\n            this.status = 0x50;\r\n            break;\r\n\r\n        case 0x52:\r\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\r\n            this.status = 0x51;\r\n            this.data_length = 0;\r\n            this.error = 5 << 4;\r\n            break;\r\n\r\n        case 0x5A:\r\n            // mode sense\r\n            var length = this.data[8] | this.data[7] << 8;\r\n            var page_code = this.data[2];\r\n            dbg_log(\"mode sense: \" + h(page_code) + \" length=\" + length, LOG_DISK);\r\n            if(page_code === 0x2A)\r\n            {\r\n                this.data_allocate(Math.min(30, length));\r\n            }\r\n            this.data_end = this.data_length;\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0xBD:\r\n            // mechanism status\r\n            this.data_allocate(this.data[9] | this.data[8] << 8);\r\n            this.data_end = this.data_length;\r\n            this.data[5] = 1;\r\n            this.status = 0x58;\r\n            break;\r\n\r\n        case 0x4A:\r\n            this.status = 0x51;\r\n            this.data_length = 0;\r\n            this.error = 5 << 4;\r\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\r\n            break;\r\n\r\n        default:\r\n            this.status = 0x51;\r\n            this.data_length = 0;\r\n            this.error = 5 << 4;\r\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\r\n            dbg_assert(false);\r\n    }\r\n\r\n    this.bytecount = this.bytecount & ~7 | 2;\r\n\r\n    if((this.status & 0x80) === 0)\r\n    {\r\n        this.push_irq();\r\n    }\r\n\r\n    if((this.status & 0x80) === 0 && this.data_length === 0)\r\n    {\r\n        this.bytecount |= 1;\r\n        this.status &= ~8;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.do_write = function()\r\n{\r\n    this.status = 0x50;\r\n\r\n    dbg_assert(this.data_length <= this.data.length);\r\n    var data = this.data.subarray(0, this.data_length);\r\n\r\n    //dbg_log(hex_dump(data), LOG_DISK);\r\n    dbg_assert(this.data_length % 512 === 0);\r\n    this.ata_advance(this.current_command, this.data_length / 512);\r\n    this.push_irq();\r\n\r\n    this.buffer.set(this.write_dest, data, function()\r\n    {\r\n    });\r\n\r\n    this.report_write(this.data_length);\r\n};\r\n\r\nIDEInterface.prototype.atapi_read = function(cmd)\r\n{\r\n    // Note: Big Endian\r\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\r\n    var count = cmd[7] << 8 | cmd[8];\r\n    var flags = cmd[1];\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"CD read lba=\" + h(lba) +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count) +\r\n            \" flags=\" + h(flags), LOG_DISK);\r\n\r\n    this.data_length = 0;\r\n    var req_length = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\r\n    dbg_log(h(this.cylinder_high, 2) + \" \" + h(this.cylinder_low, 2), LOG_DISK);\r\n    this.cylinder_low = this.cylinder_high = 0; // oak technology driver (windows 3.0)\r\n\r\n    if(req_length === 0xFFFF)\r\n        req_length--;\r\n\r\n    if(req_length > byte_count)\r\n    {\r\n        req_length = byte_count;\r\n    }\r\n\r\n    if(start >= this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\r\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n    }\r\n    else if(byte_count === 0)\r\n    {\r\n        this.status = 0x50;\r\n\r\n        this.data_pointer = 0;\r\n        //this.push_irq();\r\n    }\r\n    else\r\n    {\r\n        byte_count = Math.min(byte_count, this.buffer.byteLength - start);\r\n        this.status = 0x50 | 0x80;\r\n        this.report_read_start();\r\n\r\n        this.buffer.get(start, byte_count, (data) =>\r\n        {\r\n            //setTimeout(() => {\r\n            dbg_log(\"cd read: data arrived\", LOG_DISK);\r\n            this.data_set(data);\r\n            this.status = 0x58;\r\n            this.bytecount = this.bytecount & ~7 | 2;\r\n\r\n            this.push_irq();\r\n\r\n            req_length &= ~3;\r\n\r\n            this.data_end = req_length;\r\n            if(this.data_end > this.data_length)\r\n            {\r\n                this.data_end = this.data_length;\r\n            }\r\n            this.cylinder_low = this.data_end & 0xFF;\r\n            this.cylinder_high = this.data_end >> 8 & 0xFF;\r\n\r\n            this.report_read_end(byte_count);\r\n            //}, 10);\r\n        });\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.atapi_read_dma = function(cmd)\r\n{\r\n    // Note: Big Endian\r\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\r\n    var count = cmd[7] << 8 | cmd[8];\r\n    var flags = cmd[1];\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"CD read DMA lba=\" + h(lba) +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count) +\r\n            \" flags=\" + h(flags), LOG_DISK);\r\n\r\n    if(start >= this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\r\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n    }\r\n    else\r\n    {\r\n        this.status = 0x50 | 0x80;\r\n        this.report_read_start();\r\n\r\n        this.buffer.get(start, byte_count, (data) =>\r\n        {\r\n            dbg_log(\"atapi_read_dma: Data arrived\");\r\n            this.report_read_end(byte_count);\r\n            this.status = 0x58;\r\n            this.bytecount = this.bytecount & ~7 | 2;\r\n            this.data_set(data);\r\n\r\n            this.do_atapi_dma();\r\n        });\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.do_atapi_dma = function()\r\n{\r\n    if((this.device.dma_status & 1) === 0)\r\n    {\r\n        dbg_log(\"do_atapi_dma: Status not set\", LOG_DISK);\r\n        return;\r\n    }\r\n\r\n    if((this.status & 0x8) === 0)\r\n    {\r\n        dbg_log(\"do_atapi_dma: DRQ not set\", LOG_DISK);\r\n        return;\r\n    }\r\n\r\n    dbg_log(\"atapi dma transfer len=\" + this.data_length, LOG_DISK);\r\n\r\n    var prdt_start = this.device.prdt_addr;\r\n    var offset = 0;\r\n\r\n    var data = this.data;\r\n\r\n    do {\r\n        var addr = this.cpu.read32s(prdt_start);\r\n        var count = this.cpu.read16(prdt_start + 4);\r\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\r\n\r\n        if(!count)\r\n        {\r\n            count = 0x10000;\r\n        }\r\n\r\n        dbg_log(\"dma read dest=\" + h(addr) + \" count=\" + h(count) + \" datalen=\" + h(this.data_length), LOG_DISK);\r\n        this.cpu.write_blob(data.subarray(offset,\r\n            Math.min(offset + count, this.data_length)), addr);\r\n\r\n        offset += count;\r\n        prdt_start += 8;\r\n\r\n        if(offset >= this.data_length && !end)\r\n        {\r\n            dbg_log(\"leave early end=\" + (+end) +\r\n                    \" offset=\" + h(offset) +\r\n                    \" data_length=\" + h(this.data_length) +\r\n                    \" cmd=\" + h(this.current_command), LOG_DISK);\r\n            break;\r\n        }\r\n    }\r\n    while(!end);\r\n\r\n    dbg_log(\"end offset=\" + offset, LOG_DISK);\r\n\r\n    this.status = 0x50;\r\n    this.device.dma_status &= ~1;\r\n    this.bytecount = this.bytecount & ~7 | 3;\r\n    this.push_irq();\r\n};\r\n\r\nIDEInterface.prototype.read_data = function(length)\r\n{\r\n    if(this.data_pointer < this.data_end)\r\n    {\r\n        dbg_assert(this.data_pointer + length - 1 < this.data_end);\r\n        dbg_assert(this.data_pointer % length === 0, h(this.data_pointer) + \" \" + length);\r\n\r\n        if(length === 1)\r\n        {\r\n            var result = this.data[this.data_pointer];\r\n        }\r\n        else if(length === 2)\r\n        {\r\n            var result = this.data16[this.data_pointer >>> 1];\r\n        }\r\n        else\r\n        {\r\n            var result = this.data32[this.data_pointer >>> 2];\r\n        }\r\n\r\n        this.data_pointer += length;\r\n\r\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\r\n        if((this.data_pointer & align) === 0)\r\n        {\r\n            dbg_log(\"Read 1F0: \" + h(this.data[this.data_pointer], 2) +\r\n                        \" cur=\" + h(this.data_pointer) +\r\n                        \" cnt=\" + h(this.data_length), LOG_DISK);\r\n        }\r\n\r\n        if(this.data_pointer >= this.data_end)\r\n        {\r\n            this.read_end();\r\n        }\r\n\r\n        return result;\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"Read 1F0: empty\", LOG_DISK);\r\n\r\n        this.data_pointer += length;\r\n        return 0;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.read_end = function()\r\n{\r\n    dbg_log(\"read_end cmd=\" + h(this.current_command) + \" data_pointer=\" + h(this.data_pointer) +\r\n            \" end=\" + h(this.data_end) + \" length=\" + h(this.data_length), LOG_DISK);\r\n\r\n    if(this.current_command === 0xA0)\r\n    {\r\n        if(this.data_end === this.data_length)\r\n        {\r\n            this.status = 0x50;\r\n            this.bytecount = this.bytecount & ~7 | 3;\r\n            this.push_irq();\r\n        }\r\n        else\r\n        {\r\n            this.status = 0x58;\r\n            this.bytecount = this.bytecount & ~7 | 2;\r\n            this.push_irq();\r\n            var byte_count = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\r\n\r\n            if(this.data_end + byte_count > this.data_length)\r\n            {\r\n                this.cylinder_low = (this.data_length - this.data_end) & 0xFF;\r\n                this.cylinder_high = (this.data_length - this.data_end) >> 8 & 0xFF;\r\n                this.data_end = this.data_length;\r\n            }\r\n            else\r\n            {\r\n                this.data_end += byte_count;\r\n            }\r\n            dbg_log(\"data_end=\" + h(this.data_end), LOG_DISK);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.error = 0;\r\n        if(this.data_pointer >= this.data_length)\r\n        {\r\n            this.status = 0x50;\r\n            this.push_irq();\r\n        }\r\n        else\r\n        {\r\n            if(this.current_command === 0xC4 || this.current_command === 0x29)\r\n            {\r\n                var sector_count = Math.min(this.sectors_per_drq,\r\n                    (this.data_length - this.data_end) / 512);\r\n                dbg_assert(sector_count % 1 === 0);\r\n            }\r\n            else\r\n            {\r\n                dbg_assert(this.current_command === 0x20 || this.current_command === 0x24);\r\n                var sector_count = 1;\r\n            }\r\n            this.ata_advance(this.current_command, sector_count);\r\n            this.data_end += 512 * sector_count;\r\n            this.status = 0x58;\r\n            this.push_irq();\r\n        }\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.write_data_port = function(data, length)\r\n{\r\n    dbg_assert(this.data_pointer % length === 0);\r\n\r\n    if(this.data_pointer >= this.data_end)\r\n    {\r\n        dbg_log(\"Redundant write to data port: \" + h(data) + \" count=\" + h(this.data_end) +\r\n                \" cur=\" + h(this.data_pointer), LOG_DISK);\r\n    }\r\n    else\r\n    {\r\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\r\n        if((this.data_pointer + length & align) === 0 || this.data_end < 20)\r\n        {\r\n            dbg_log(\"Data port: \" + h(data >>> 0) + \" count=\" + h(this.data_end) +\r\n                    \" cur=\" + h(this.data_pointer), LOG_DISK);\r\n        }\r\n\r\n        if(length === 1)\r\n        {\r\n            this.data[this.data_pointer++] = data;\r\n        }\r\n        else if(length === 2)\r\n        {\r\n            this.data16[this.data_pointer >>> 1] = data;\r\n            this.data_pointer += 2;\r\n        }\r\n        else\r\n        {\r\n            this.data32[this.data_pointer >>> 2] = data;\r\n            this.data_pointer += 4;\r\n        }\r\n\r\n        dbg_assert(this.data_pointer <= this.data_end);\r\n        if(this.data_pointer === this.data_end)\r\n        {\r\n            this.write_end();\r\n        }\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.write_data_port8 = function(data)\r\n{\r\n    this.write_data_port(data, 1);\r\n};\r\n\r\nIDEInterface.prototype.write_data_port16 = function(data)\r\n{\r\n    this.write_data_port(data, 2);\r\n};\r\n\r\nIDEInterface.prototype.write_data_port32 = function(data)\r\n{\r\n    this.write_data_port(data, 4);\r\n};\r\n\r\nIDEInterface.prototype.write_end = function()\r\n{\r\n    if(this.current_command === 0xA0)\r\n    {\r\n        this.atapi_handle();\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"write_end data_pointer=\" + h(this.data_pointer) +\r\n                \" data_length=\" + h(this.data_length), LOG_DISK);\r\n\r\n        if(this.data_pointer >= this.data_length)\r\n        {\r\n            this.do_write();\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(this.current_command === 0x30 || this.current_command === 0x34);\r\n            // XXX: Should advance here, but do_write does all the advancing\r\n            //this.ata_advance(this.current_command, 1);\r\n            this.status = 0x58;\r\n            this.data_end += 512;\r\n            this.push_irq();\r\n        }\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.ata_advance = function(cmd, sectors)\r\n{\r\n    dbg_log(\"Advance sectors=\" + sectors + \" old_bytecount=\" + this.bytecount, LOG_DISK);\r\n    this.bytecount -= sectors;\r\n\r\n    if(cmd === 0x24 || cmd === 0x29 || cmd === 0x34 || cmd === 0x39 ||\r\n       cmd === 0x25 || cmd === 0x35)\r\n    {\r\n        var new_sector = sectors + this.get_lba48();\r\n        this.sector = new_sector & 0xFF | new_sector >> 16 & 0xFF00;\r\n        this.cylinder_low = new_sector >> 8 & 0xFF;\r\n        this.cylinder_high = new_sector >> 16 & 0xFF;\r\n    }\r\n    else if(this.is_lba)\r\n    {\r\n        var new_sector = sectors + this.get_lba28();\r\n        this.sector = new_sector & 0xFF;\r\n        this.cylinder_low = new_sector >> 8 & 0xFF;\r\n        this.cylinder_high = new_sector >> 16 & 0xFF;\r\n        this.head = this.head & ~0xF | new_sector & 0xF;\r\n    }\r\n    else // chs\r\n    {\r\n        var new_sector = sectors + this.get_chs();\r\n\r\n        var c = new_sector / (this.head_count * this.sectors_per_track) | 0;\r\n        this.cylinder_low = c & 0xFF;\r\n        this.cylinder_high = c >> 8 & 0xFF;\r\n        this.head = (new_sector / this.sectors_per_track | 0) % this.head_count & 0xF;\r\n        this.sector = (new_sector % this.sectors_per_track + 1) & 0xFF;\r\n\r\n        dbg_assert(new_sector === this.get_chs());\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.ata_read_sectors = function(cmd)\r\n{\r\n    var is_lba48 = cmd === 0x24 || cmd === 0x29;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var is_single = cmd === 0x20 || cmd === 0x24;\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"ATA read cmd=\" + h(cmd) +\r\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\r\n            \" lba=\" + h(lba) +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count), LOG_DISK);\r\n\r\n    if(start + byte_count > this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n    }\r\n    else\r\n    {\r\n        this.status = 0x80 | 0x40;\r\n        this.report_read_start();\r\n\r\n        this.buffer.get(start, byte_count, (data) =>\r\n        {\r\n            //setTimeout(() => {\r\n            dbg_log(\"ata_read: Data arrived\", LOG_DISK);\r\n\r\n            this.data_set(data);\r\n            this.status = 0x58;\r\n            this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\r\n            this.ata_advance(cmd, is_single ? 1 : Math.min(count, this.sectors_per_track));\r\n\r\n            this.push_irq();\r\n            this.report_read_end(byte_count);\r\n            //}, 10);\r\n        });\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.ata_read_sectors_dma = function(cmd)\r\n{\r\n    var is_lba48 = cmd === 0x25;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"ATA DMA read lba=\" + h(lba) +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count), LOG_DISK);\r\n\r\n    if(start + byte_count > this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n        return;\r\n    }\r\n\r\n    this.status = 0x58;\r\n    this.device.dma_status |= 1;\r\n};\r\n\r\nIDEInterface.prototype.do_ata_read_sectors_dma = function()\r\n{\r\n    var cmd = this.current_command;\r\n\r\n    var is_lba48 = cmd === 0x25;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_assert(lba < this.buffer.byteLength);\r\n\r\n    this.report_read_start();\r\n\r\n    var orig_prdt_start = this.device.prdt_addr;\r\n\r\n    this.buffer.get(start, byte_count, (data) =>\r\n    {\r\n        //setTimeout(function() {\r\n        dbg_log(\"do_ata_read_sectors_dma: Data arrived\", LOG_DISK);\r\n        var prdt_start = this.device.prdt_addr;\r\n        var offset = 0;\r\n\r\n        dbg_assert(orig_prdt_start === prdt_start);\r\n\r\n        do {\r\n            var prd_addr = this.cpu.read32s(prdt_start);\r\n            var prd_count = this.cpu.read16(prdt_start + 4);\r\n            var end = this.cpu.read8(prdt_start + 7) & 0x80;\r\n\r\n            if(!prd_count)\r\n            {\r\n                prd_count = 0x10000;\r\n                dbg_log(\"dma: prd count was 0\", LOG_DISK);\r\n            }\r\n\r\n            dbg_log(\"dma read transfer dest=\" + h(prd_addr) +\r\n                    \" prd_count=\" + h(prd_count), LOG_DISK);\r\n            this.cpu.write_blob(data.subarray(offset, offset + prd_count), prd_addr);\r\n\r\n            offset += prd_count;\r\n            prdt_start += 8;\r\n        }\r\n        while(!end);\r\n\r\n        dbg_assert(offset === byte_count);\r\n\r\n        this.ata_advance(this.current_command, count);\r\n        this.status = 0x50;\r\n        this.device.dma_status &= ~1;\r\n        this.current_command = -1;\r\n\r\n        this.push_irq();\r\n\r\n        this.report_read_end(byte_count);\r\n        //}.bind(this), 10);\r\n    });\r\n};\r\n\r\nIDEInterface.prototype.ata_write_sectors = function(cmd)\r\n{\r\n    var is_lba48 = cmd === 0x34 || cmd === 0x39;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var is_single = cmd === 0x30 || cmd === 0x34;\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"ATA write lba=\" + h(lba) +\r\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count), LOG_DISK);\r\n\r\n    if(start + byte_count > this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"ATA write: Outside of disk\", LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n    }\r\n    else\r\n    {\r\n        this.status = 0x58;\r\n        this.data_allocate_noclear(byte_count);\r\n        this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\r\n        this.write_dest = start;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.ata_write_sectors_dma = function(cmd)\r\n{\r\n    var is_lba48 = cmd === 0x35;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    dbg_log(\"ATA DMA write lba=\" + h(lba) +\r\n            \" lbacount=\" + h(count) +\r\n            \" bytecount=\" + h(byte_count), LOG_DISK);\r\n\r\n    if(start + byte_count > this.buffer.byteLength)\r\n    {\r\n        dbg_assert(false, \"ATA DMA write: Outside of disk\", LOG_DISK);\r\n\r\n        this.status = 0xFF;\r\n        this.push_irq();\r\n        return;\r\n    }\r\n\r\n    this.status = 0x58;\r\n    this.device.dma_status |= 1;\r\n};\r\n\r\nIDEInterface.prototype.do_ata_write_sectors_dma = function()\r\n{\r\n    var cmd = this.current_command;\r\n\r\n    var is_lba48 = cmd === 0x35;\r\n    var count = this.get_count(is_lba48);\r\n    var lba = this.get_lba(is_lba48);\r\n\r\n    var byte_count = count * this.sector_size;\r\n    var start = lba * this.sector_size;\r\n\r\n    var prdt_start = this.device.prdt_addr;\r\n    var prdt_count = 0;\r\n    var prdt_write_count = 0;\r\n    var offset = 0;\r\n\r\n    dbg_log(\"prdt addr: \" + h(prdt_start, 8), LOG_DISK);\r\n\r\n    do {\r\n        var prd_addr = this.cpu.read32s(prdt_start);\r\n        var prd_count = this.cpu.read16(prdt_start + 4);\r\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\r\n\r\n        if(!prd_count)\r\n        {\r\n            prd_count = 0x10000;\r\n            dbg_log(\"dma: prd count was 0\", LOG_DISK);\r\n        }\r\n\r\n        dbg_log(\"dma write transfer dest=\" + h(prd_addr) + \" prd_count=\" + h(prd_count), LOG_DISK);\r\n\r\n        var slice = this.cpu.mem8.subarray(prd_addr, prd_addr + prd_count);\r\n        dbg_assert(slice.length === prd_count);\r\n\r\n        //if(DEBUG)\r\n        //{\r\n        //    dbg_log(hex_dump(slice), LOG_DISK);\r\n        //}\r\n\r\n        this.buffer.set(start + offset, slice, function()\r\n        {\r\n            prdt_write_count++;\r\n        });\r\n\r\n        offset += prd_count;\r\n        prdt_start += 8;\r\n        prdt_count++;\r\n    }\r\n    while(!end);\r\n\r\n    if(prdt_write_count === prdt_count)\r\n    {\r\n        //setTimeout(function() {\r\n        dbg_log(\"dma write completed\", LOG_DISK);\r\n        this.ata_advance(this.current_command, count);\r\n        this.status = 0x50;\r\n        this.push_irq();\r\n        this.device.dma_status &= ~1;\r\n        this.current_command = -1;\r\n        //}, 10);\r\n    }\r\n    else\r\n    {\r\n        // fails when writes don't happen synchronously, which isn't currently\r\n        // the case, but might be in the future\r\n        dbg_assert(false, \"dma write not completed\", LOG_DISK);\r\n    }\r\n\r\n    this.report_write(byte_count);\r\n};\r\n\r\nIDEInterface.prototype.get_chs = function()\r\n{\r\n    var c = this.cylinder_low & 0xFF | this.cylinder_high << 8 & 0xFF00;\r\n    var h = this.head;\r\n    var s = this.sector & 0xFF;\r\n\r\n    dbg_log(\"get_chs: c=\" + c + \" h=\" + h + \" s=\" + s, LOG_DISK);\r\n\r\n    return (c * this.head_count + h) * this.sectors_per_track + s - 1;\r\n};\r\n\r\nIDEInterface.prototype.get_lba28 = function()\r\n{\r\n    return this.sector & 0xFF |\r\n            this.cylinder_low << 8 & 0xFF00 |\r\n            this.cylinder_high << 16 & 0xFF0000 |\r\n            (this.head & 0xF) << 24;\r\n};\r\n\r\nIDEInterface.prototype.get_lba48 = function()\r\n{\r\n    // Note: Bits over 32 missing\r\n    return (this.sector & 0xFF |\r\n            this.cylinder_low << 8 & 0xFF00 |\r\n            this.cylinder_high << 16 & 0xFF0000 |\r\n            (this.sector >> 8) << 24 & 0xFF000000) >>> 0;\r\n};\r\n\r\nIDEInterface.prototype.get_lba = function(is_lba48)\r\n{\r\n    if(is_lba48)\r\n    {\r\n        return this.get_lba48();\r\n    }\r\n    else if(this.is_lba)\r\n    {\r\n        return this.get_lba28();\r\n    }\r\n    else\r\n    {\r\n        return this.get_chs();\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.get_count = function(is_lba48)\r\n{\r\n    if(is_lba48)\r\n    {\r\n        var count = this.bytecount;\r\n        if(count === 0) count = 0x10000;\r\n        return count;\r\n    }\r\n    else\r\n    {\r\n        var count = this.bytecount & 0xFF;\r\n        if(count === 0) count = 0x100;\r\n        return count;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.create_identify_packet = function()\r\n{\r\n    // http://bochs.sourceforge.net/cgi-bin/lxr/source/iodev/harddrv.cc#L2821\r\n\r\n    if(this.drive_head & 0x10)\r\n    {\r\n        // slave\r\n        this.data_allocate(0);\r\n        return;\r\n    }\r\n\r\n    for(var i = 0; i < 512; i++)\r\n    {\r\n        this.data[i] = 0;\r\n    }\r\n\r\n    var cylinder_count = Math.min(16383, this.cylinder_count);\r\n\r\n    this.data_set([\r\n        0x40, this.is_atapi ? 0x85 : 0,\r\n        // 1 cylinders\r\n        cylinder_count, cylinder_count >> 8,\r\n        0, 0,\r\n\r\n        // 3 heads\r\n        this.head_count, this.head_count >> 8,\r\n        this.sectors_per_track / 512, this.sectors_per_track / 512 >> 8,\r\n        // 5\r\n        0, 512 >> 8,\r\n        // sectors per track\r\n        this.sectors_per_track, this.sectors_per_track >> 8,\r\n        0, 0, 0, 0, 0, 0,\r\n        // 10-19 serial number\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        // 15\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        // 20\r\n        3, 0,\r\n        0, 2,\r\n        4, 0,\r\n        // 23-26 firmware revision\r\n        0, 0, 0, 0, 0, 0, 0, 0,\r\n\r\n        // 27 model number\r\n        56, 118, 32, 54, 68, 72, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\r\n        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\r\n\r\n        // 47 max value for set multiple mode\r\n        0x80, 0,\r\n        1, 0,\r\n        //0, 3,  // capabilities, 2: Only LBA / 3: LBA and DMA\r\n        0, 2,  // capabilities, 2: Only LBA / 3: LBA and DMA\r\n        // 50\r\n        0, 0,\r\n        0, 2,\r\n        0, 2,\r\n        7, 0,\r\n\r\n        // 54 cylinders\r\n        cylinder_count, cylinder_count >> 8,\r\n        // 55 heads\r\n        this.head_count, this.head_count >> 8,\r\n        // 56 sectors per track\r\n        this.sectors_per_track, 0,\r\n        // capacity in sectors\r\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\r\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\r\n\r\n        0, 0,\r\n        // 60\r\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\r\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\r\n\r\n        0, 0,\r\n        // 63, dma supported mode, dma selected mode\r\n        this.current_command === 0xA0 ? 0 : 7, this.current_command === 0xA0 ? 0 : 4,\r\n        //0, 0, // no DMA\r\n\r\n        0, 0,\r\n        // 65\r\n        30, 0, 30, 0, 30, 0, 30, 0, 0, 0,\r\n        // 70\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        // 75\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        // 80\r\n        0x7E, 0, 0, 0, 0, 0, 0, 0x74, 0, 0x40,\r\n        // 85\r\n        0, 0x40, 0, 0x74, 0, 0x40, 0, 0, 0, 0,\r\n        // 90\r\n        0, 0, 0, 0, 0, 0, 1, 0x60, 0, 0,\r\n        // 95\r\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\r\n        // 100\r\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\r\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\r\n    ]);\r\n\r\n    this.data_length = 512;\r\n    this.data_end = 512;\r\n};\r\n\r\nIDEInterface.prototype.data_allocate = function(len)\r\n{\r\n    this.data_allocate_noclear(len);\r\n\r\n    for(var i = 0; i < (len + 3 >> 2); i++)\r\n    {\r\n        this.data32[i] = 0;\r\n    }\r\n};\r\n\r\nIDEInterface.prototype.data_allocate_noclear = function(len)\r\n{\r\n    if(this.data.length < len)\r\n    {\r\n        this.data = new Uint8Array(len + 3 & ~3);\r\n        this.data16 = new Uint16Array(this.data.buffer);\r\n        this.data32 = new Int32Array(this.data.buffer);\r\n    }\r\n\r\n    this.data_length = len;\r\n    this.data_pointer = 0;\r\n};\r\n\r\nIDEInterface.prototype.data_set = function(data)\r\n{\r\n    this.data_allocate_noclear(data.length);\r\n    this.data.set(data);\r\n};\r\n\r\nIDEInterface.prototype.report_read_start = function()\r\n{\r\n    this.stats.loading = true;\r\n    this.bus.send(\"ide-read-start\");\r\n};\r\n\r\nIDEInterface.prototype.report_read_end = function(byte_count)\r\n{\r\n    this.stats.loading = false;\r\n\r\n    var sector_count = byte_count / this.sector_size | 0;\r\n    this.stats.sectors_read += sector_count;\r\n    this.stats.bytes_read += byte_count;\r\n\r\n    this.bus.send(\"ide-read-end\", [this.nr, byte_count, sector_count]);\r\n};\r\n\r\nIDEInterface.prototype.report_write = function(byte_count)\r\n{\r\n    var sector_count = byte_count / this.sector_size | 0;\r\n    this.stats.sectors_written += sector_count;\r\n    this.stats.bytes_written += byte_count;\r\n\r\n    this.bus.send(\"ide-write-end\", [this.nr, byte_count, sector_count]);\r\n};\r\n\r\nIDEInterface.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n    state[0] = this.bytecount;\r\n    state[1] = this.cylinder_count;\r\n    state[2] = this.cylinder_high;\r\n    state[3] = this.cylinder_low;\r\n    state[4] = this.data_pointer;\r\n    state[5] = 0;\r\n    state[6] = 0;\r\n    state[7] = 0;\r\n    state[8] = 0;\r\n    state[9] = this.drive_head;\r\n    state[10] = this.error;\r\n    state[11] = this.head;\r\n    state[12] = this.head_count;\r\n    state[13] = this.is_atapi;\r\n    state[14] = this.is_lba;\r\n    state[15] = this.lba_count;\r\n    state[16] = this.data;\r\n    state[17] = this.data_length;\r\n    state[18] = this.sector;\r\n    state[19] = this.sector_count;\r\n    state[20] = this.sector_size;\r\n    state[21] = this.sectors_per_drq;\r\n    state[22] = this.sectors_per_track;\r\n    state[23] = this.status;\r\n    state[24] = this.write_dest;\r\n    state[25] = this.current_command;\r\n    state[26] = this.data_end;\r\n    state[27] = this.current_atapi_command;\r\n    return state;\r\n};\r\n\r\nIDEInterface.prototype.set_state = function(state)\r\n{\r\n    this.bytecount = state[0];\r\n    this.cylinder_count = state[1];\r\n    this.cylinder_high = state[2];\r\n    this.cylinder_low = state[3];\r\n    this.data_pointer = state[4];\r\n\r\n    this.drive_head = state[9];\r\n    this.error = state[10];\r\n    this.head = state[11];\r\n    this.head_count = state[12];\r\n    this.is_atapi = state[13];\r\n    this.is_lba = state[14];\r\n    this.lba_count = state[15];\r\n    this.data = state[16];\r\n    this.data_length = state[17];\r\n    this.sector = state[18];\r\n    this.sector_count = state[19];\r\n    this.sector_size = state[20];\r\n    this.sectors_per_drq = state[21];\r\n    this.sectors_per_track = state[22];\r\n    this.status = state[23];\r\n    this.write_dest = state[24];\r\n    this.current_command = state[25];\r\n\r\n    this.data_end = state[26];\r\n    this.current_atapi_command = state[27];\r\n\r\n    this.data16 = new Uint16Array(this.data.buffer);\r\n    this.data32 = new Int32Array(this.data.buffer);\r\n};\r\n","\"use strict\";\r\n\r\n/** @const */ var CMOS_RTC_SECONDS = 0x00;\r\n/** @const */ var CMOS_RTC_SECONDS_ALARM = 0x01;\r\n/** @const */ var CMOS_RTC_MINUTES = 0x02;\r\n/** @const */ var CMOS_RTC_MINUTES_ALARM = 0x03;\r\n/** @const */ var CMOS_RTC_HOURS = 0x04;\r\n/** @const */ var CMOS_RTC_HOURS_ALARM = 0x05;\r\n/** @const */ var CMOS_RTC_DAY_WEEK = 0x06;\r\n/** @const */ var CMOS_RTC_DAY_MONTH = 0x07;\r\n/** @const */ var CMOS_RTC_MONTH = 0x08;\r\n/** @const */ var CMOS_RTC_YEAR = 0x09;\r\n/** @const */ var CMOS_STATUS_A = 0x0a;\r\n/** @const */ var CMOS_STATUS_B = 0x0b;\r\n/** @const */ var CMOS_STATUS_C = 0x0c;\r\n/** @const */ var CMOS_STATUS_D = 0x0d;\r\n/** @const */ var CMOS_RESET_CODE = 0x0f;\r\n\r\n/** @const */ var CMOS_FLOPPY_DRIVE_TYPE = 0x10;\r\n/** @const */ var CMOS_DISK_DATA = 0x12;\r\n/** @const */ var CMOS_EQUIPMENT_INFO = 0x14;\r\n/** @const */ var CMOS_MEM_BASE_LOW = 0x15;\r\n/** @const */ var CMOS_MEM_BASE_HIGH = 0x16;\r\n/** @const */ var CMOS_MEM_OLD_EXT_LOW = 0x17;\r\n/** @const */ var CMOS_MEM_OLD_EXT_HIGH = 0x18;\r\n/** @const */ var CMOS_DISK_DRIVE1_TYPE = 0x19;\r\n/** @const */ var CMOS_DISK_DRIVE2_TYPE = 0x1a;\r\n/** @const */ var CMOS_DISK_DRIVE1_CYL = 0x1b;\r\n/** @const */ var CMOS_DISK_DRIVE2_CYL = 0x24;\r\n/** @const */ var CMOS_MEM_EXTMEM_LOW = 0x30;\r\n/** @const */ var CMOS_MEM_EXTMEM_HIGH = 0x31;\r\n/** @const */ var CMOS_CENTURY = 0x32;\r\n/** @const */ var CMOS_MEM_EXTMEM2_LOW = 0x34;\r\n/** @const */ var CMOS_MEM_EXTMEM2_HIGH = 0x35;\r\n/** @const */ var CMOS_BIOS_BOOTFLAG1 = 0x38;\r\n/** @const */ var CMOS_BIOS_DISKTRANSFLAG = 0x39;\r\n/** @const */ var CMOS_BIOS_BOOTFLAG2 = 0x3d;\r\n/** @const */ var CMOS_MEM_HIGHMEM_LOW = 0x5b;\r\n/** @const */ var CMOS_MEM_HIGHMEM_MID = 0x5c;\r\n/** @const */ var CMOS_MEM_HIGHMEM_HIGH = 0x5d;\r\n/** @const */ var CMOS_BIOS_SMP_COUNT = 0x5f;\r\n\r\n\r\n/**\r\n * RTC (real time clock) and CMOS\r\n * @constructor\r\n * @param {CPU} cpu\r\n */\r\nfunction RTC(cpu)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    this.cmos_index = 0;\r\n    this.cmos_data = new Uint8Array(128);\r\n\r\n    // used for cmos entries\r\n    this.rtc_time = Date.now();\r\n    this.last_update = this.rtc_time;\r\n\r\n    // used for periodic interrupt\r\n    this.next_interrupt = 0;\r\n\r\n    // next alarm interrupt\r\n    this.next_interrupt_alarm = 0;\r\n\r\n    this.periodic_interrupt = false;\r\n\r\n    // corresponds to default value for cmos_a\r\n    this.periodic_interrupt_time = 1000 / 1024;\r\n\r\n    this.cmos_a = 0x26;\r\n    this.cmos_b = 2;\r\n    this.cmos_c = 0;\r\n\r\n    this.nmi_disabled = 0;\r\n\r\n    cpu.io.register_write(0x70, this, function(out_byte)\r\n    {\r\n        this.cmos_index = out_byte & 0x7F;\r\n        this.nmi_disabled = out_byte >> 7;\r\n    });\r\n    cpu.io.register_read(0x70, this, function()\r\n\t{\r\n\t\treturn 0xFF;\r\n\t});\r\n\r\n    cpu.io.register_write(0x71, this, this.cmos_port_write);\r\n    cpu.io.register_read(0x71, this, this.cmos_port_read);\r\n}\r\n\r\nRTC.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.cmos_index;\r\n    state[1] = this.cmos_data;\r\n    state[2] = this.rtc_time;\r\n    state[3] = this.last_update;\r\n    state[4] = this.next_interrupt;\r\n    state[5] = this.next_interrupt_alarm;\r\n    state[6] = this.periodic_interrupt;\r\n    state[7] = this.periodic_interrupt_time;\r\n    state[8] = this.cmos_a;\r\n    state[9] = this.cmos_b;\r\n    state[10] = this.cmos_c;\r\n    state[11] = this.nmi_disabled;\r\n\r\n    return state;\r\n};\r\n\r\nRTC.prototype.set_state = function(state)\r\n{\r\n    this.cmos_index = state[0];\r\n    this.cmos_data = state[1];\r\n    this.rtc_time = state[2];\r\n    this.last_update = state[3];\r\n    this.next_interrupt = state[4];\r\n    this.next_interrupt_alarm = state[5];\r\n    this.periodic_interrupt = state[6];\r\n    this.periodic_interrupt_time = state[7];\r\n    this.cmos_a = state[8];\r\n    this.cmos_b = state[9];\r\n    this.cmos_c = state[10];\r\n    this.nmi_disabled = state[11];\r\n};\r\n\r\nRTC.prototype.timer = function(time, legacy_mode)\r\n{\r\n    time = Date.now(); // XXX\r\n    this.rtc_time += time - this.last_update;\r\n    this.last_update = time;\r\n\r\n    if(this.periodic_interrupt && this.next_interrupt < time)\r\n    {\r\n        this.cpu.device_raise_irq(8);\r\n        this.cmos_c |= 1 << 6 | 1 << 7;\r\n\r\n        this.next_interrupt += this.periodic_interrupt_time *\r\n                Math.ceil((time - this.next_interrupt) / this.periodic_interrupt_time);\r\n    }\r\n    else if(this.next_interrupt_alarm && this.next_interrupt_alarm < time)\r\n    {\r\n        this.cpu.device_raise_irq(8);\r\n        this.cmos_c |= 1 << 5 | 1 << 7;\r\n\r\n        this.next_interrupt_alarm = 0;\r\n    }\r\n\r\n    let t = 100;\r\n\r\n    if(this.periodic_interrupt && this.next_interrupt)\r\n    {\r\n        t = Math.min(t, Math.max(0, this.next_interrupt - time));\r\n    }\r\n    if(this.next_interrupt_alarm)\r\n    {\r\n        t = Math.min(t, Math.max(0, this.next_interrupt_alarm - time));\r\n    }\r\n\r\n    return t;\r\n};\r\n\r\nRTC.prototype.bcd_pack = function(n)\r\n{\r\n    var i = 0,\r\n        result = 0,\r\n        digit;\r\n\r\n    while(n)\r\n    {\r\n        digit = n % 10;\r\n\r\n        result |= digit << (4 * i);\r\n        i++;\r\n        n = (n - digit) / 10;\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nRTC.prototype.bcd_unpack = function(n)\r\n{\r\n    const low = n & 0xF;\r\n    const high = n >> 4 & 0xF;\r\n\r\n    dbg_assert(n < 0x100);\r\n    dbg_assert(low < 10);\r\n    dbg_assert(high < 10);\r\n\r\n    return low + 10 * high;\r\n};\r\n\r\nRTC.prototype.encode_time = function(t)\r\n{\r\n    if(this.cmos_b & 4)\r\n    {\r\n        // binary mode\r\n        return t;\r\n    }\r\n    else\r\n    {\r\n        return this.bcd_pack(t);\r\n    }\r\n};\r\n\r\nRTC.prototype.decode_time = function(t)\r\n{\r\n    if(this.cmos_b & 4)\r\n    {\r\n        // binary mode\r\n        return t;\r\n    }\r\n    else\r\n    {\r\n        return this.bcd_unpack(t);\r\n    }\r\n};\r\n\r\n// TODO\r\n// - interrupt on update\r\n// - countdown\r\n// - letting bios/os set values\r\n// (none of these are used by seabios or the OSes we're\r\n// currently testing)\r\nRTC.prototype.cmos_port_read = function()\r\n{\r\n    var index = this.cmos_index;\r\n\r\n    //this.cmos_index = 0xD;\r\n\r\n    switch(index)\r\n    {\r\n        case CMOS_RTC_SECONDS:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCSeconds());\r\n        case CMOS_RTC_MINUTES:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCMinutes());\r\n        case CMOS_RTC_HOURS:\r\n            // TODO: 12 hour mode\r\n            return this.encode_time(new Date(this.rtc_time).getUTCHours());\r\n        case CMOS_RTC_DAY_MONTH:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCDate());\r\n        case CMOS_RTC_MONTH:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCMonth() + 1);\r\n        case CMOS_RTC_YEAR:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() % 100);\r\n\r\n        case CMOS_STATUS_A:\r\n            return this.cmos_a;\r\n        case CMOS_STATUS_B:\r\n            //dbg_log(\"cmos read from index \" + h(index));\r\n            return this.cmos_b;\r\n\r\n        case CMOS_STATUS_C:\r\n            // It is important to know that upon a IRQ 8, Status Register C\r\n            // will contain a bitmask telling which interrupt happened.\r\n            // What is important is that if register C is not read after an\r\n            // IRQ 8, then the interrupt will not happen again.\r\n            this.cpu.device_lower_irq(8);\r\n\r\n            dbg_log(\"cmos reg C read\", LOG_RTC);\r\n            // Missing IRQF flag\r\n            //return cmos_b & 0x70;\r\n            var c = this.cmos_c;\r\n\r\n            this.cmos_c &= ~0xF0;\r\n\r\n            return c;\r\n\r\n        case CMOS_STATUS_D:\r\n            return 0;\r\n\r\n        case CMOS_CENTURY:\r\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() / 100 | 0);\r\n\r\n        default:\r\n            dbg_log(\"cmos read from index \" + h(index), LOG_RTC);\r\n            return this.cmos_data[this.cmos_index];\r\n    }\r\n};\r\n\r\nRTC.prototype.cmos_port_write = function(data_byte)\r\n{\r\n    switch(this.cmos_index)\r\n    {\r\n        case 0xA:\r\n            this.cmos_a = data_byte & 0x7F;\r\n            this.periodic_interrupt_time = 1000 / (32768 >> (this.cmos_a & 0xF) - 1);\r\n\r\n            dbg_log(\"Periodic interrupt, a=\" + h(this.cmos_a, 2) + \" t=\" + this.periodic_interrupt_time , LOG_RTC);\r\n            break;\r\n        case 0xB:\r\n            this.cmos_b = data_byte;\r\n            if(this.cmos_b & 0x40)\r\n            {\r\n                this.next_interrupt = Date.now();\r\n            }\r\n\r\n            if(this.cmos_b & 0x20)\r\n            {\r\n                const now = new Date();\r\n\r\n                const seconds = this.decode_time(this.cmos_data[CMOS_RTC_SECONDS_ALARM]);\r\n                const minutes = this.decode_time(this.cmos_data[CMOS_RTC_MINUTES_ALARM]);\r\n                const hours = this.decode_time(this.cmos_data[CMOS_RTC_HOURS_ALARM]);\r\n\r\n                const alarm_date = new Date(Date.UTC(\r\n                    now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(),\r\n                    hours, minutes, seconds\r\n                ));\r\n\r\n                const ms_from_now = alarm_date - now;\r\n                dbg_log(\"RTC alarm scheduled for \" + alarm_date +\r\n                        \" hh:mm:ss=\" + hours + \":\" + minutes + \":\" + seconds +\r\n                        \" ms_from_now=\" + ms_from_now, LOG_RTC);\r\n\r\n                this.next_interrupt_alarm = +alarm_date;\r\n            }\r\n\r\n            if(this.cmos_b & 0x10) dbg_log(\"Unimplemented: updated interrupt\", LOG_RTC);\r\n\r\n            dbg_log(\"cmos b=\" + h(this.cmos_b, 2), LOG_RTC);\r\n            break;\r\n\r\n        case CMOS_RTC_SECONDS_ALARM:\r\n        case CMOS_RTC_MINUTES_ALARM:\r\n        case CMOS_RTC_HOURS_ALARM:\r\n            this.cmos_write(this.cmos_index, data_byte);\r\n            break;\r\n\r\n        default:\r\n            dbg_log(\"cmos write index \" + h(this.cmos_index) + \": \" + h(data_byte), LOG_RTC);\r\n    }\r\n\r\n    this.periodic_interrupt = (this.cmos_b & 0x40) === 0x40 && (this.cmos_a & 0xF) > 0;\r\n};\r\n\r\n/**\r\n * @param {number} index\r\n */\r\nRTC.prototype.cmos_read = function(index)\r\n{\r\n    dbg_assert(index < 128);\r\n    return this.cmos_data[index];\r\n};\r\n\r\n/**\r\n * @param {number} index\r\n * @param {number} value\r\n */\r\nRTC.prototype.cmos_write = function(index, value)\r\n{\r\n    dbg_log(\"cmos \" + h(index) + \" <- \" + h(value), LOG_RTC);\r\n    dbg_assert(index < 128);\r\n    this.cmos_data[index] = value;\r\n};\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar A20_MASK = ~(1 << 20);\r\n/** @const */\r\nvar A20_MASK16 = ~(1 << 20 - 1);\r\n/** @const */\r\nvar A20_MASK32 = ~(1 << 20 - 2);\r\n\r\n/** @const */\r\nvar USE_A20 = false;\r\n\r\n\r\n// called by all memory writes\r\nCPU.prototype.debug_write = function(addr, size, value)\r\n{\r\n    if(!DEBUG)\r\n    {\r\n        return;\r\n    }\r\n\r\n    dbg_assert(typeof value === \"number\" && !isNaN(value));\r\n    dbg_assert(value >= -0x80000000 && addr < 0x80000000);\r\n\r\n    this.debug_read(addr, size, true);\r\n}\r\n\r\n/**\r\n * @param {boolean=} is_write\r\n */\r\nCPU.prototype.debug_read = function(addr, size, is_write)\r\n{\r\n    if(!DEBUG)\r\n    {\r\n        return;\r\n    }\r\n\r\n    dbg_assert(typeof addr === \"number\");\r\n    dbg_assert(!isNaN(addr));\r\n};\r\n\r\n\r\nCPU.prototype.mmap_read8 = function(addr)\r\n{\r\n    return this.memory_map_read8[addr >>> MMAP_BLOCK_BITS](addr);\r\n};\r\n\r\nCPU.prototype.mmap_write8 = function(addr, value)\r\n{\r\n    this.memory_map_write8[addr >>> MMAP_BLOCK_BITS](addr, value);\r\n};\r\n\r\nCPU.prototype.mmap_read16 = function(addr)\r\n{\r\n    var fn = this.memory_map_read8[addr >>> MMAP_BLOCK_BITS];\r\n\r\n    return fn(addr) | fn(addr + 1 | 0) << 8;\r\n};\r\n\r\nCPU.prototype.mmap_write16 = function(addr, value)\r\n{\r\n    var fn = this.memory_map_write8[addr >>> MMAP_BLOCK_BITS];\r\n\r\n    fn(addr, value & 0xFF);\r\n    fn(addr + 1 | 0, value >> 8 & 0xFF);\r\n};\r\n\r\nCPU.prototype.mmap_read32 = function(addr)\r\n{\r\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\r\n\r\n    return this.memory_map_read32[aligned_addr](addr);\r\n}\r\n\r\nCPU.prototype.mmap_write32 = function(addr, value)\r\n{\r\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\r\n\r\n    this.memory_map_write32[aligned_addr](addr, value);\r\n}\r\n\r\nCPU.prototype.in_mapped_range = function(addr)\r\n{\r\n    return (addr | 0) >= 0xA0000 && (addr | 0) < 0xC0000 || (addr >>> 0) >= (this.memory_size >>> 0);\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n */\r\nCPU.prototype.read8 = function(addr)\r\n{\r\n    this.debug_read(addr, 1);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        return this.mmap_read8(addr);\r\n    }\r\n    else\r\n    {\r\n        return this.mem8[addr];\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n */\r\nCPU.prototype.read16 = function(addr)\r\n{\r\n    this.debug_read(addr, 2);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        return this.mmap_read16(addr);\r\n    }\r\n    else\r\n    {\r\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n */\r\nCPU.prototype.read_aligned16 = function(addr)\r\n{\r\n    dbg_assert(addr >= 0 && addr < 0x80000000);\r\n    this.debug_read(addr << 1, 2);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\r\n\r\n    if(this.in_mapped_range(addr << 1))\r\n    {\r\n        return this.mmap_read16(addr << 1);\r\n    }\r\n    else\r\n    {\r\n        return this.mem16[addr];\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n */\r\nCPU.prototype.read32s = function(addr)\r\n{\r\n    this.debug_read(addr, 4);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        return this.mmap_read32(addr);\r\n    }\r\n    else\r\n    {\r\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8 |\r\n            this.mem8[addr + 2 | 0] << 16 | this.mem8[addr + 3 | 0] << 24;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n */\r\nCPU.prototype.read_aligned32 = function(addr)\r\n{\r\n    dbg_assert(addr >= 0 && addr < 0x40000000);\r\n    this.debug_read(addr << 2, 4);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\r\n\r\n    if(this.in_mapped_range(addr << 2))\r\n    {\r\n        return this.mmap_read32(addr << 2);\r\n    }\r\n    else\r\n    {\r\n        return this.mem32s[addr];\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n * @param {number} value\r\n */\r\nCPU.prototype.write8 = function(addr, value)\r\n{\r\n    this.debug_write(addr, 1, value);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        this.mmap_write8(addr, value);\r\n    }\r\n    else\r\n    {\r\n        this.mem8[addr] = value;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n * @param {number} value\r\n */\r\nCPU.prototype.write16 = function(addr, value)\r\n{\r\n    this.debug_write(addr, 2, value);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        this.mmap_write16(addr, value);\r\n    }\r\n    else\r\n    {\r\n        this.mem8[addr] = value;\r\n        this.mem8[addr + 1 | 0] = value >> 8;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n * @param {number} value\r\n */\r\nCPU.prototype.write_aligned16 = function(addr, value)\r\n{\r\n    dbg_assert(addr >= 0 && addr < 0x80000000);\r\n    this.debug_write(addr << 1, 2, value);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\r\n\r\n    if(this.in_mapped_range(addr << 1))\r\n    {\r\n        this.mmap_write16(addr << 1, value);\r\n    }\r\n    else\r\n    {\r\n        this.mem16[addr] = value;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {number} addr\r\n * @param {number} value\r\n */\r\nCPU.prototype.write32 = function(addr, value)\r\n{\r\n    this.debug_write(addr, 4, value);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\r\n\r\n    if(this.in_mapped_range(addr))\r\n    {\r\n        this.mmap_write32(addr, value);\r\n    }\r\n    else\r\n    {\r\n        this.mem8[addr] = value;\r\n        this.mem8[addr + 1 | 0] = value >> 8;\r\n        this.mem8[addr + 2 | 0] = value >> 16;\r\n        this.mem8[addr + 3 | 0] = value >> 24;\r\n    }\r\n};\r\n\r\nCPU.prototype.write_aligned32 = function(addr, value)\r\n{\r\n    dbg_assert(addr >= 0 && addr < 0x40000000);\r\n    this.debug_write(addr << 2, 4, value);\r\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\r\n\r\n    if(this.in_mapped_range(addr << 2))\r\n    {\r\n        this.mmap_write32(addr << 2, value);\r\n    }\r\n    else\r\n    {\r\n        this.mem32s[addr] = value;\r\n    }\r\n};\r\n\r\n/**\r\n * @param {Array.<number>|Uint8Array} blob\r\n * @param {number} offset\r\n */\r\nCPU.prototype.write_blob = function(blob, offset)\r\n{\r\n    this.debug_write(offset, blob.length, 0)\r\n    dbg_assert(blob && blob.length >= 0);\r\n\r\n    this.mem8.set(blob, offset);\r\n};\r\n\r\n/**\r\n * @param {Array.<number>|Int32Array} blob\r\n * @param {number} offset\r\n */\r\nCPU.prototype.write_blob32 = function(blob, offset)\r\n{\r\n    dbg_assert(blob && blob.length);\r\n    this.debug_write(offset, blob.length << 2, 0);\r\n    this.mem32s.set(blob, offset);\r\n};\r\n","\"use strict\";\r\n\r\n// http://wiki.osdev.org/PCI\r\n\r\nvar\r\n/** @const */ PCI_CONFIG_ADDRESS = 0xCF8,\r\n/** @const */ PCI_CONFIG_DATA = 0xCFC;\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n */\r\nfunction PCI(cpu)\r\n{\r\n    this.pci_addr = new Uint8Array(4);\r\n    this.pci_value = new Uint8Array(4);\r\n    this.pci_response = new Uint8Array(4);\r\n    this.pci_status = new Uint8Array(4);\r\n\r\n    this.pci_addr32 = new Int32Array(this.pci_addr.buffer);\r\n    this.pci_value32 = new Int32Array(this.pci_value.buffer);\r\n    this.pci_response32 = new Int32Array(this.pci_response.buffer);\r\n    this.pci_status32 = new Int32Array(this.pci_status.buffer);\r\n\r\n    this.device_spaces = [];\r\n    this.devices = [];\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    for(var i = 0; i < 256; i++)\r\n    {\r\n        this.device_spaces[i] = undefined;\r\n        this.devices[i] = undefined;\r\n    }\r\n\r\n    this.io = cpu.io;\r\n\r\n    cpu.io.register_write(PCI_CONFIG_DATA, this,\r\n        function(value)\r\n        {\r\n            this.pci_write8(this.pci_addr32[0], value);\r\n        },\r\n        function(value)\r\n        {\r\n            this.pci_write16(this.pci_addr32[0], value);\r\n        },\r\n        function(value)\r\n        {\r\n            this.pci_write32(this.pci_addr32[0], value);\r\n        });\r\n\r\n    cpu.io.register_write(PCI_CONFIG_DATA + 1, this,\r\n        function(value)\r\n        {\r\n            this.pci_write8(this.pci_addr32[0] + 1 | 0, value);\r\n        });\r\n\r\n    cpu.io.register_write(PCI_CONFIG_DATA + 2, this,\r\n        function(value)\r\n        {\r\n            this.pci_write8(this.pci_addr32[0] + 2 | 0, value);\r\n        },\r\n        function(value)\r\n        {\r\n            this.pci_write16(this.pci_addr32[0] + 2 | 0, value);\r\n        });\r\n\r\n    cpu.io.register_write(PCI_CONFIG_DATA + 3, this,\r\n        function(value)\r\n        {\r\n            this.pci_write8(this.pci_addr32[0] + 3 | 0, value);\r\n        });\r\n\r\n    cpu.io.register_read_consecutive(PCI_CONFIG_DATA, this,\r\n        function()\r\n        {\r\n            return this.pci_response[0];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_response[1];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_response[2];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_response[3];\r\n        }\r\n    );\r\n\r\n    cpu.io.register_read_consecutive(PCI_CONFIG_ADDRESS, this,\r\n        function()\r\n        {\r\n            return this.pci_status[0];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_status[1];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_status[2];\r\n        },\r\n        function()\r\n        {\r\n            return this.pci_status[3];\r\n        }\r\n    );\r\n\r\n    cpu.io.register_write_consecutive(PCI_CONFIG_ADDRESS, this,\r\n        function(out_byte)\r\n        {\r\n            this.pci_addr[0] = out_byte & 0xFC;\r\n        },\r\n        function(out_byte)\r\n        {\r\n            if((this.pci_addr[1] & 0x06) === 0x02 && (out_byte & 0x06) === 0x06)\r\n            {\r\n                dbg_log(\"CPU reboot via PCI\");\r\n                cpu.reboot_internal();\r\n                return;\r\n            }\r\n\r\n            this.pci_addr[1] = out_byte;\r\n        },\r\n        function(out_byte)\r\n        {\r\n            this.pci_addr[2] = out_byte;\r\n        },\r\n        function(out_byte)\r\n        {\r\n            this.pci_addr[3] = out_byte;\r\n            this.pci_query();\r\n        }\r\n    );\r\n\r\n\r\n    // Some experimental PCI devices taken from my PC:\r\n\r\n    // 00:00.0 Host bridge: Intel Corporation 4 Series Chipset DRAM Controller (rev 02)\r\n    //var host_bridge = {\r\n    //    pci_id: 0,\r\n    //    pci_space: [\r\n    //        0x86, 0x80, 0x20, 0x2e, 0x06, 0x00, 0x90, 0x20, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\r\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x10, 0xd3, 0x82,\r\n    //        0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n    //    ],\r\n    //    pci_bars: [],\r\n    //};\r\n\r\n    // This needs to be set in order for seabios to not execute code outside of\r\n    // mapped memory. While we map the BIOS into high memory, we don't allow\r\n    // executing code there, which enables optimisations in read_imm8.\r\n    // See [make_bios_writable_intel] in src/fw/shadow.c in seabios for details\r\n    const PAM0 = 0x10;\r\n\r\n    var host_bridge = {\r\n        pci_id: 0,\r\n        pci_space: [\r\n            // 00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)\r\n            0x86, 0x80, 0x37, 0x12, 0x00, 0x00, 0x00, 0x00,  0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, PAM0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        ],\r\n        pci_bars: [],\r\n        name: \"82441FX PMC\",\r\n    };\r\n    this.register_device(host_bridge);\r\n\r\n    this.isa_bridge = {\r\n        pci_id: 1 << 3,\r\n        pci_space: [\r\n            // 00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]\r\n            0x86, 0x80, 0x00, 0x70, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x80, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        ],\r\n        pci_bars: [],\r\n        name: \"82371SB PIIX3 ISA\",\r\n    };\r\n    this.isa_bridge_space = this.register_device(this.isa_bridge);\r\n    this.isa_bridge_space8 = new Uint8Array(this.isa_bridge_space.buffer);\r\n\r\n    // 00:1e.0 PCI bridge: Intel Corporation 82801 PCI Bridge (rev 90)\r\n    //this.register_device([\r\n    //    0x86, 0x80, 0x4e, 0x24, 0x07, 0x01, 0x10, 0x00, 0x90, 0x01, 0x04, 0x06, 0x00, 0x00, 0x01, 0x00,\r\n    //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x20, 0xe0, 0xe0, 0x80, 0x22,\r\n    //    0xb0, 0xfe, 0xb0, 0xfe, 0xf1, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n    //    0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x02, 0x00,\r\n    //], 0x1e << 3);\r\n}\r\n\r\nPCI.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    for(var i = 0; i < 256; i++)\r\n    {\r\n        state[i] = this.device_spaces[i];\r\n    }\r\n\r\n    state[256] = this.pci_addr;\r\n    state[257] = this.pci_value;\r\n    state[258] = this.pci_response;\r\n    state[259] = this.pci_status;\r\n\r\n    return state;\r\n};\r\n\r\nPCI.prototype.set_state = function(state)\r\n{\r\n    for(var i = 0; i < 256; i++)\r\n    {\r\n        var device = this.devices[i];\r\n        var space = state[i];\r\n\r\n        if(!device || !space)\r\n        {\r\n            if(device)\r\n            {\r\n                dbg_log(\"Warning: While restoring PCI device: Device exists in current \" +\r\n                        \"configuration but not in snapshot (\" + device.name + \")\");\r\n            }\r\n            if(space)\r\n            {\r\n                dbg_log(\"Warning: While restoring PCI device: Device doesn't exist in current \" +\r\n                        \"configuration but does in snapshot (device \" + h(i, 2) + \")\");\r\n            }\r\n            continue;\r\n        }\r\n\r\n        for(var bar_nr = 0; bar_nr < device.pci_bars.length; bar_nr++)\r\n        {\r\n            var value = space[(0x10 >> 2) + bar_nr];\r\n\r\n            if(value & 1)\r\n            {\r\n                var bar = device.pci_bars[bar_nr];\r\n                var from = bar.original_bar & ~1 & 0xFFFF;\r\n                var to = value & ~1 & 0xFFFF;\r\n                this.set_io_bars(bar, from, to);\r\n            }\r\n            else\r\n            {\r\n                // memory, cannot be changed\r\n            }\r\n        }\r\n\r\n        this.device_spaces[i].set(space);\r\n    }\r\n\r\n    this.pci_addr.set(state[256]);\r\n    this.pci_value.set(state[257]);\r\n    this.pci_response.set(state[258]);\r\n    this.pci_status.set(state[259]);\r\n};\r\n\r\nPCI.prototype.pci_query = function()\r\n{\r\n    var dbg_line = \"query\";\r\n\r\n    // Bit | .31                     .0\r\n    // Fmt | EBBBBBBBBDDDDDFFFRRRRRR00\r\n\r\n    var bdf = this.pci_addr[2] << 8 | this.pci_addr[1],\r\n        addr = this.pci_addr[0] & 0xFC,\r\n        //devfn = bdf & 0xFF,\r\n        //bus = bdf >> 8,\r\n        dev = bdf >> 3 & 0x1F,\r\n        //fn = bdf & 7,\r\n        enabled = this.pci_addr[3] >> 7;\r\n\r\n    dbg_line += \" enabled=\" + enabled;\r\n    dbg_line += \" bdf=\" + h(bdf, 4);\r\n    dbg_line += \" dev=\" + h(dev, 2);\r\n    dbg_line += \" addr=\" + h(addr, 2);\r\n\r\n    var device = this.device_spaces[bdf];\r\n\r\n    if(device !== undefined)\r\n    {\r\n        this.pci_status32[0] = 0x80000000 | 0;\r\n\r\n        if(addr < device.byteLength)\r\n        {\r\n            this.pci_response32[0] = device[addr >> 2];\r\n        }\r\n        else\r\n        {\r\n            // required by freebsd-9.1\r\n            this.pci_response32[0] = 0;\r\n        }\r\n\r\n        dbg_line += \" \" + h(this.pci_addr32[0] >>> 0, 8) + \" -> \" + h(this.pci_response32[0] >>> 0, 8);\r\n\r\n        if(addr >= device.byteLength)\r\n        {\r\n            dbg_line += \" (undef)\";\r\n        }\r\n\r\n        dbg_line += \" (\" + this.devices[bdf].name + \")\";\r\n\r\n        dbg_log(dbg_line, LOG_PCI);\r\n    }\r\n    else\r\n    {\r\n        this.pci_response32[0] = -1;\r\n        this.pci_status32[0] = 0;\r\n    }\r\n};\r\n\r\nPCI.prototype.pci_write8 = function(address, written)\r\n{\r\n    var bdf = address >> 8 & 0xFFFF;\r\n    var addr = address & 0xFF;\r\n\r\n    var space = new Uint8Array(this.device_spaces[bdf].buffer);\r\n    var device = this.devices[bdf];\r\n\r\n    if(!space)\r\n    {\r\n        return;\r\n    }\r\n\r\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\r\n               \"PCI: Expected 32-bit write, got 8-bit (addr: \" + h(addr) + \")\");\r\n\r\n    dbg_log(\"PCI write8 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\r\n            \" value=\" + h(written, 2), LOG_PCI);\r\n\r\n    space[addr] = written;\r\n};\r\n\r\nPCI.prototype.pci_write16 = function(address, written)\r\n{\r\n    dbg_assert((address & 1) === 0);\r\n\r\n    var bdf = address >> 8 & 0xFFFF;\r\n    var addr = address & 0xFF;\r\n\r\n    var space = new Uint16Array(this.device_spaces[bdf].buffer);\r\n    var device = this.devices[bdf];\r\n\r\n    if(!space)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(addr >= 0x10 && addr < 0x2C)\r\n    {\r\n        // Bochs bios\r\n        dbg_log(\"Warning: PCI: Expected 32-bit write, got 16-bit (addr: \" + h(addr) + \")\");\r\n        return;\r\n    }\r\n\r\n    dbg_assert(!(addr >= 0x30 && addr < 0x34),\r\n        \"PCI: Expected 32-bit write, got 16-bit (addr: \" + h(addr) + \")\");\r\n\r\n    dbg_log(\"PCI writ16 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\r\n            \" value=\" + h(written, 4), LOG_PCI);\r\n\r\n    space[addr >>> 1] = written;\r\n};\r\n\r\nPCI.prototype.pci_write32 = function(address, written)\r\n{\r\n    dbg_assert((address & 3) === 0);\r\n\r\n    var bdf = address >> 8 & 0xFFFF;\r\n    var addr = address & 0xFF;\r\n\r\n    var space = this.device_spaces[bdf];\r\n    var device = this.devices[bdf];\r\n\r\n    if(!space)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(addr >= 0x10 && addr < 0x28)\r\n    {\r\n        var bar_nr = addr - 0x10 >> 2;\r\n        var bar = device.pci_bars[bar_nr];\r\n\r\n        dbg_log(\"BAR\" + bar_nr + \" exists=\" + (bar ? \"y\" : \"n\") + \" changed to \" +\r\n                h(written >>> 0) + \" dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") \", LOG_PCI);\r\n\r\n        if(bar)\r\n        {\r\n            dbg_assert(!(bar.size & bar.size - 1), \"bar size should be power of 2\");\r\n\r\n            var space_addr = addr >> 2;\r\n            var type = space[space_addr] & 1;\r\n\r\n            if((written | 3 | bar.size - 1)  === -1) // size check\r\n            {\r\n                written = ~(bar.size - 1) | type;\r\n\r\n                if(type === 0)\r\n                {\r\n                    space[space_addr] = written;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if(type === 0)\r\n                {\r\n                    // memory\r\n                    var original_bar = bar.original_bar;\r\n\r\n                    if((written & ~0xF) !== (original_bar & ~0xF))\r\n                    {\r\n                        // seabios\r\n                        dbg_log(\"Warning: Changing memory bar not supported, ignored\", LOG_PCI);\r\n                    }\r\n\r\n                    // changing isn't supported yet, reset to default\r\n                    space[space_addr] = original_bar;\r\n                }\r\n            }\r\n\r\n            if(type === 1)\r\n            {\r\n                // io\r\n                dbg_assert(type === 1);\r\n\r\n                var from = space[space_addr] & ~1 & 0xFFFF;\r\n                var to = written & ~1 & 0xFFFF;\r\n                dbg_log(\"io bar changed from \" + h(from >>> 0, 8) +\r\n                        \" to \" + h(to >>> 0, 8) + \" size=\" + bar.size, LOG_PCI);\r\n                this.set_io_bars(bar, from, to);\r\n                space[space_addr] = written | 1;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            space[addr >> 2] = 0;\r\n        }\r\n\r\n        dbg_log(\"BAR effective value: \" + h(space[addr >> 2] >>> 0), LOG_PCI);\r\n    }\r\n    else if(addr === 0x30)\r\n    {\r\n        dbg_log(\"PCI write rom address dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \")\" +\r\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\r\n\r\n        if(device.pci_rom_size)\r\n        {\r\n            if((written | 0x7FF) === (0xFFFFFFFF|0))\r\n            {\r\n                space[addr >> 2] = -device.pci_rom_size | 0;\r\n            }\r\n            else\r\n            {\r\n                space[addr >> 2] = device.pci_rom_address | 0;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            space[addr >> 2] = 0;\r\n        }\r\n    }\r\n    else if(addr === 0x04)\r\n    {\r\n        dbg_log(\"PCI write dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\r\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"PCI write dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\r\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\r\n        space[addr >>> 2] = written;\r\n    }\r\n};\r\n\r\nPCI.prototype.register_device = function(device)\r\n{\r\n    dbg_assert(device.pci_id !== undefined);\r\n    dbg_assert(device.pci_space !== undefined);\r\n    dbg_assert(device.pci_bars !== undefined);\r\n\r\n    var device_id = device.pci_id;\r\n\r\n    dbg_log(\"PCI register bdf=\" + h(device_id) + \" (\" + device.name + \")\", LOG_PCI);\r\n\r\n    dbg_assert(!this.devices[device_id]);\r\n    dbg_assert(device.pci_space.length >= 64);\r\n    dbg_assert(device_id < this.devices.length);\r\n\r\n    // convert bytewise notation from lspci to double words\r\n    var space = new Int32Array(64);\r\n    space.set(new Int32Array(new Uint8Array(device.pci_space).buffer));\r\n    this.device_spaces[device_id] = space;\r\n    this.devices[device_id] = device;\r\n\r\n    var bar_space = space.slice(4, 10);\r\n\r\n    for(var i = 0; i < device.pci_bars.length; i++)\r\n    {\r\n        var bar = device.pci_bars[i];\r\n\r\n        if(!bar)\r\n        {\r\n            continue;\r\n        }\r\n\r\n        var bar_base = bar_space[i];\r\n        var type = bar_base & 1;\r\n\r\n        bar.original_bar = bar_base;\r\n        bar.entries = [];\r\n\r\n        if(type === 0)\r\n        {\r\n            // memory, not needed currently\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(type === 1);\r\n            var port = bar_base & ~1;\r\n\r\n            for(var j = 0; j < bar.size; j++)\r\n            {\r\n                bar.entries[j] = this.io.ports[port + j];\r\n            }\r\n        }\r\n    }\r\n\r\n    return space;\r\n};\r\n\r\nPCI.prototype.set_io_bars = function(bar, from, to)\r\n{\r\n    var count = bar.size;\r\n    dbg_log(\"Move io bars: from=\" + h(from) + \" to=\" + h(to) + \" count=\" + count, LOG_PCI);\r\n\r\n    var ports = this.io.ports;\r\n\r\n    for(var i = 0; i < count; i++)\r\n    {\r\n        var old_entry = ports[from + i];\r\n        ports[from + i] = this.io.create_empty_entry();\r\n\r\n        if(old_entry.read8 === this.io.empty_port_read8 &&\r\n           old_entry.read16 === this.io.empty_port_read16 &&\r\n           old_entry.read32 === this.io.empty_port_read32 &&\r\n           old_entry.write8 === this.io.empty_port_write &&\r\n           old_entry.write16 === this.io.empty_port_write &&\r\n           old_entry.write32 === this.io.empty_port_write)\r\n        {\r\n            dbg_log(\"Warning: Bad IO bar: Source not mapped, port=\" + h(from + i, 4), LOG_PCI);\r\n        }\r\n\r\n        var entry = bar.entries[i];\r\n        var empty_entry = ports[to + i];\r\n        dbg_assert(entry && empty_entry);\r\n\r\n        ports[to + i] = entry;\r\n\r\n        if(empty_entry.read8 === this.io.empty_port_read8 ||\r\n            empty_entry.read16 === this.io.empty_port_read16 ||\r\n            empty_entry.read32 === this.io.empty_port_read32 ||\r\n            empty_entry.write8 === this.io.empty_port_write ||\r\n            empty_entry.write16 === this.io.empty_port_write ||\r\n            empty_entry.write32 === this.io.empty_port_write)\r\n        {\r\n            // These can fail if the os maps an io port in multiple bars (indicating a bug)\r\n            // XXX: Fails during restore_state\r\n            dbg_log(\"Warning: Bad IO bar: Target already mapped, port=\" + h(to + i, 4), LOG_PCI);\r\n        }\r\n    }\r\n};\r\n\r\nPCI.prototype.raise_irq = function(pci_id)\r\n{\r\n    var space = this.device_spaces[pci_id];\r\n    dbg_assert(space);\r\n\r\n    var pin = (space[0x3C >>> 2] >> 8 & 0xFF) - 1;\r\n    var device = (pci_id >> 3) - 1 & 0xFF;\r\n    var parent_pin = pin + device & 3;\r\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\r\n\r\n    //dbg_log(\"PCI raise irq \" + h(irq) + \" dev=\" + h(device, 2) +\r\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\r\n    this.cpu.device_raise_irq(irq);\r\n};\r\n\r\nPCI.prototype.lower_irq = function(pci_id)\r\n{\r\n    var space = this.device_spaces[pci_id];\r\n    dbg_assert(space);\r\n\r\n    var pin = space[0x3C >>> 2] >> 8 & 0xFF;\r\n    var device = pci_id >> 3 & 0xFF;\r\n    var parent_pin = pin + device - 2 & 3;\r\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\r\n\r\n    //dbg_log(\"PCI lower irq \" + h(irq) + \" dev=\" + h(device, 2) +\r\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\r\n    this.cpu.device_lower_irq(irq);\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n *\r\n * @param {CPU} cpu\r\n */\r\nfunction FloppyController(cpu, fda_image, fdb_image)\r\n{\r\n    /** @const @type {IO|undefined} */\r\n    this.io = cpu.io;\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    /** @const @type {DMA} */\r\n    this.dma = cpu.devices.dma;\r\n\r\n    this.bytes_expecting = 0;\r\n    this.receiving_command = new Uint8Array(10);\r\n    this.receiving_index = 0;\r\n    this.next_command = null;\r\n\r\n    this.response_data = new Uint8Array(10);\r\n    this.response_index = 0;\r\n    this.response_length = 0;\r\n\r\n    this.floppy_size = 0;\r\n\r\n    /* const */\r\n    this.fda_image = fda_image;\r\n\r\n    /* const */\r\n    this.fdb_image = fdb_image;\r\n\r\n\r\n    this.status_reg0 = 0;\r\n    this.status_reg1 = 0;\r\n    this.status_reg2 = 0;\r\n    this.drive = 0;\r\n\r\n    this.last_cylinder = 0;\r\n    this.last_head = 0;\r\n    this.last_sector = 1;\r\n\r\n    // this should actually be write-only ... but people read it anyway\r\n    this.dor = 0;\r\n\r\n    if(!fda_image)\r\n    {\r\n        // Needed for CD emulation provided by seabios\r\n        cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, 4 << 4);\r\n\r\n        this.sectors_per_track = 0;\r\n        this.number_of_heads = 0;\r\n        this.number_of_cylinders = 0;\r\n\r\n        this.floppy_size = 0;\r\n    }\r\n    else\r\n    {\r\n        this.floppy_size = fda_image.byteLength;\r\n\r\n        var floppy_types = {\r\n            160  : { type: 1, tracks: 40, sectors: 8 , heads: 1 },\r\n            180  : { type: 1, tracks: 40, sectors: 9 , heads: 1 },\r\n            200  : { type: 1, tracks: 40, sectors: 10, heads: 1 },\r\n            320  : { type: 1, tracks: 40, sectors: 8 , heads: 2 },\r\n            360  : { type: 1, tracks: 40, sectors: 9 , heads: 2 },\r\n            400  : { type: 1, tracks: 40, sectors: 10, heads: 2 },\r\n            720  : { type: 3, tracks: 80, sectors: 9 , heads: 2 },\r\n            1200 : { type: 2, tracks: 80, sectors: 15, heads: 2 },\r\n            1440 : { type: 4, tracks: 80, sectors: 18, heads: 2 },\r\n            1722 : { type: 5, tracks: 82, sectors: 21, heads: 2 },\r\n            2880 : { type: 5, tracks: 80, sectors: 36, heads: 2 },\r\n        };\r\n\r\n        var number_of_cylinders,\r\n            sectors_per_track,\r\n            number_of_heads,\r\n            floppy_type = floppy_types[this.floppy_size >> 10];\r\n\r\n        if(floppy_type && (this.floppy_size & 0x3FF) === 0)\r\n        {\r\n            cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, floppy_type.type << 4);\r\n\r\n            sectors_per_track = floppy_type.sectors;\r\n            number_of_heads = floppy_type.heads;\r\n            number_of_cylinders = floppy_type.tracks;\r\n        }\r\n        else\r\n        {\r\n            throw \"Unknown floppy size: \" + h(fda_image.byteLength);\r\n        }\r\n\r\n        this.sectors_per_track = sectors_per_track;\r\n        this.number_of_heads = number_of_heads;\r\n        this.number_of_cylinders = number_of_cylinders;\r\n    }\r\n\r\n    this.io.register_read(0x3F0, this, this.port3F0_read);\r\n    this.io.register_read(0x3F2, this, this.port3F2_read);\r\n    this.io.register_read(0x3F4, this, this.port3F4_read);\r\n    this.io.register_read(0x3F5, this, this.port3F5_read);\r\n    this.io.register_read(0x3F7, this, this.port3F7_read);\r\n\r\n    this.io.register_write(0x3F2, this, this.port3F2_write);\r\n    this.io.register_write(0x3F5, this, this.port3F5_write);\r\n}\r\n\r\nFloppyController.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.bytes_expecting;\r\n    state[1] = this.receiving_command;\r\n    state[2] = this.receiving_index;\r\n    //state[3] = this.next_command;\r\n    state[4] = this.response_data;\r\n    state[5] = this.response_index;\r\n    state[6] = this.response_length;\r\n    state[7] = this.floppy_size;\r\n    state[8] = this.status_reg0;\r\n    state[9] = this.status_reg1;\r\n    state[10] = this.status_reg2;\r\n    state[11] = this.drive;\r\n    state[12] = this.last_cylinder;\r\n    state[13] = this.last_head;\r\n    state[14] = this.last_sector;\r\n    state[15] = this.dor;\r\n    state[16] = this.sectors_per_track;\r\n    state[17] = this.number_of_heads;\r\n    state[18] = this.number_of_cylinders;\r\n\r\n    return state;\r\n};\r\n\r\nFloppyController.prototype.set_state = function(state)\r\n{\r\n    this.bytes_expecting = state[0];\r\n    this.receiving_command = state[1];\r\n    this.receiving_index = state[2];\r\n    this.next_command = state[3];\r\n    this.response_data = state[4];\r\n    this.response_index = state[5];\r\n    this.response_length = state[6];\r\n    this.floppy_size = state[7];\r\n    this.status_reg0 = state[8];\r\n    this.status_reg1 = state[9];\r\n    this.status_reg2 = state[10];\r\n    this.drive = state[11];\r\n    this.last_cylinder = state[12];\r\n    this.last_head = state[13];\r\n    this.last_sector = state[14];\r\n    this.dor = state[15];\r\n    this.sectors_per_track = state[16];\r\n    this.number_of_heads = state[17];\r\n    this.number_of_cylinders = state[18];\r\n};\r\n\r\nFloppyController.prototype.port3F0_read = function()\r\n{\r\n    dbg_log(\"3F0 read\", LOG_FLOPPY);\r\n\r\n    return 0;\r\n};\r\n\r\n\r\nFloppyController.prototype.port3F4_read = function()\r\n{\r\n    dbg_log(\"3F4 read\", LOG_FLOPPY);\r\n\r\n    var return_byte = 0x80;\r\n\r\n    if(this.response_index < this.response_length)\r\n    {\r\n        return_byte |= 0x40 | 0x10;\r\n    }\r\n\r\n    if((this.dor & 8) === 0)\r\n    {\r\n        return_byte |= 0x20;\r\n    }\r\n\r\n    return return_byte;\r\n};\r\n\r\nFloppyController.prototype.port3F7_read = function()\r\n{\r\n    dbg_log(\"3F7 read\", LOG_FLOPPY);\r\n    return 0x00;\r\n}\r\n\r\nFloppyController.prototype.port3F5_read = function()\r\n{\r\n    if(this.response_index < this.response_length)\r\n    {\r\n        dbg_log(\"3F5 read: \" + this.response_data[this.response_index], LOG_FLOPPY);\r\n        this.cpu.device_lower_irq(6);\r\n        return this.response_data[this.response_index++];\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"3F5 read, empty\", LOG_FLOPPY);\r\n        return 0xFF;\r\n    }\r\n};\r\n\r\nFloppyController.prototype.port3F5_write = function(reg_byte)\r\n{\r\n    if(!this.fda_image) return;\r\n\r\n    dbg_log(\"3F5 write \" + h(reg_byte), LOG_FLOPPY);\r\n\r\n    if(this.bytes_expecting > 0)\r\n    {\r\n        this.receiving_command[this.receiving_index++] = reg_byte;\r\n\r\n        this.bytes_expecting--;\r\n\r\n        if(this.bytes_expecting === 0)\r\n        {\r\n            if(DEBUG)\r\n            {\r\n                var log = \"3F5 command received: \";\r\n                for(var i = 0; i < this.receiving_index; i++)\r\n                    log += h(this.receiving_command[i]) + \" \";\r\n                dbg_log(log, LOG_FLOPPY);\r\n            }\r\n\r\n            this.next_command.call(this, this.receiving_command);\r\n        }\r\n    }\r\n    else\r\n    {\r\n        switch(reg_byte)\r\n        {\r\n            // TODO\r\n            //case 2:\r\n                //this.next_command = read_complete_track;\r\n                //this.bytes_expecting = 8;\r\n                //break;\r\n            case 0x03:\r\n                this.next_command = this.fix_drive_data;\r\n                this.bytes_expecting = 2;\r\n                break;\r\n            case 0x04:\r\n                this.next_command = this.check_drive_status;\r\n                this.bytes_expecting = 1;\r\n                break;\r\n            case 0x05:\r\n            case 0xC5:\r\n                this.next_command = function(args) { this.do_sector(true, args); };\r\n                this.bytes_expecting = 8;\r\n                break;\r\n            case 0xE6:\r\n                this.next_command = function(args) { this.do_sector(false, args); };\r\n                this.bytes_expecting = 8;\r\n                break;\r\n            case 0x07:\r\n                this.next_command = this.calibrate;\r\n                this.bytes_expecting = 1;\r\n                break;\r\n            case 0x08:\r\n                this.check_interrupt_status();\r\n                break;\r\n            case 0x4A:\r\n                this.next_command = this.read_sector_id;\r\n                this.bytes_expecting = 1;\r\n                break;\r\n            case 0x0F:\r\n                this.bytes_expecting = 2;\r\n                this.next_command = this.seek;\r\n                break;\r\n            case 0x0E:\r\n                // dump regs\r\n                dbg_log(\"dump registers\", LOG_FLOPPY);\r\n                this.response_data[0] = 0x80;\r\n                this.response_index = 0;\r\n                this.response_length = 1;\r\n\r\n                this.bytes_expecting = 0;\r\n                break;\r\n\r\n            default:\r\n                dbg_assert(false, \"Unimplemented floppy command call \" + h(reg_byte));\r\n        }\r\n\r\n        this.receiving_index = 0;\r\n    }\r\n};\r\n\r\nFloppyController.prototype.port3F2_read = function()\r\n{\r\n    dbg_log(\"read 3F2: DOR\", LOG_FLOPPY);\r\n    return this.dor;\r\n}\r\n\r\nFloppyController.prototype.port3F2_write = function(value)\r\n{\r\n    if((value & 4) === 4 && (this.dor & 4) === 0)\r\n    {\r\n        // reset\r\n        this.cpu.device_raise_irq(6);\r\n    }\r\n\r\n    dbg_log(\"start motors: \" + h(value >> 4), LOG_FLOPPY);\r\n    dbg_log(\"enable dma: \" + !!(value & 8), LOG_FLOPPY);\r\n    dbg_log(\"reset fdc: \" + !!(value & 4), LOG_FLOPPY);\r\n    dbg_log(\"drive select: \" + (value & 3), LOG_FLOPPY);\r\n    dbg_log(\"DOR = \" + h(value), LOG_FLOPPY);\r\n\r\n    this.dor = value;\r\n}\r\n\r\nFloppyController.prototype.check_drive_status = function(args)\r\n{\r\n    dbg_log(\"check drive status\", LOG_FLOPPY);\r\n\r\n    this.response_index = 0;\r\n    this.response_length = 1;\r\n    this.response_data[0] = 1 << 5;\r\n}\r\n\r\nFloppyController.prototype.seek = function(args)\r\n{\r\n    dbg_log(\"seek\", LOG_FLOPPY);\r\n    dbg_assert((args[0] & 3) === 0, \"Unhandled seek drive\");\r\n\r\n    this.last_cylinder = args[1];\r\n    this.last_head = args[0] >> 2 & 1;\r\n\r\n    this.raise_irq();\r\n}\r\n\r\nFloppyController.prototype.calibrate = function(args)\r\n{\r\n    dbg_log(\"floppy calibrate\", LOG_FLOPPY);\r\n\r\n    this.raise_irq();\r\n}\r\n\r\nFloppyController.prototype.check_interrupt_status = function()\r\n{\r\n    // do not trigger an interrupt here\r\n    dbg_log(\"floppy check interrupt status\", LOG_FLOPPY);\r\n\r\n    this.response_index = 0;\r\n    this.response_length = 2;\r\n\r\n    this.response_data[0] = 1 << 5;\r\n    this.response_data[1] = this.last_cylinder;\r\n}\r\n\r\nFloppyController.prototype.do_sector = function(is_write, args)\r\n{\r\n    var head = args[2],\r\n        cylinder = args[1],\r\n        sector = args[3],\r\n        sector_size = 128 << args[4],\r\n        read_count = args[5] - args[3] + 1,\r\n\r\n        read_offset = ((head + this.number_of_heads * cylinder) * this.sectors_per_track + sector - 1) * sector_size;\r\n\r\n    dbg_log(\"Floppy \" + (is_write ? \"Write\" : \"Read\"), LOG_FLOPPY);\r\n    dbg_log(\"from \" + h(read_offset) + \" length \" + h(read_count * sector_size), LOG_FLOPPY);\r\n    dbg_log(cylinder + \" / \" + head + \" / \" + sector, LOG_FLOPPY);\r\n\r\n    if(!args[4])\r\n    {\r\n        dbg_log(\"FDC: sector count is zero, use data length instead\", LOG_FLOPPY);\r\n    }\r\n\r\n    if(!this.fda_image)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(is_write)\r\n    {\r\n        this.dma.do_write(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\r\n    }\r\n    else\r\n    {\r\n        this.dma.do_read(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\r\n    }\r\n};\r\n\r\nFloppyController.prototype.done = function(args, cylinder, head, sector, error)\r\n{\r\n    if(error)\r\n    {\r\n        // TODO: Set appropriate bits\r\n        return;\r\n    }\r\n\r\n    sector++;\r\n\r\n    if(sector > this.sectors_per_track)\r\n    {\r\n        sector = 1;\r\n        head++;\r\n\r\n        if(head >= this.number_of_heads)\r\n        {\r\n            head = 0;\r\n            cylinder++;\r\n        }\r\n    }\r\n\r\n    this.last_cylinder = cylinder;\r\n    this.last_head = head;\r\n    this.last_sector = sector;\r\n\r\n    this.response_index = 0;\r\n    this.response_length = 7;\r\n\r\n    this.response_data[0] = head << 2 | 0x20;\r\n    this.response_data[1] = 0;\r\n    this.response_data[2] = 0;\r\n    this.response_data[3] = cylinder;\r\n    this.response_data[4] = head;\r\n    this.response_data[5] = sector;\r\n    this.response_data[6] = args[4];\r\n\r\n    this.raise_irq();\r\n}\r\n\r\nFloppyController.prototype.fix_drive_data = function(args)\r\n{\r\n    dbg_log(\"floppy fix drive data \" + args, LOG_FLOPPY);\r\n}\r\n\r\nFloppyController.prototype.read_sector_id = function(args)\r\n{\r\n    dbg_log(\"floppy read sector id \" + args, LOG_FLOPPY);\r\n\r\n    this.response_index = 0;\r\n    this.response_length = 7;\r\n\r\n    this.response_data[0] = 0;\r\n    this.response_data[1] = 0;\r\n    this.response_data[2] = 0;\r\n    this.response_data[3] = 0;\r\n    this.response_data[4] = 0;\r\n    this.response_data[5] = 0;\r\n    this.response_data[6] = 0;\r\n\r\n    this.raise_irq();\r\n}\r\n\r\nFloppyController.prototype.raise_irq = function()\r\n{\r\n    if(this.dor & 8)\r\n    {\r\n        this.cpu.device_raise_irq(6);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n */\r\nfunction DMA(cpu)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    this.channel_page = new Uint8Array(8);\r\n    this.channel_pagehi = new Uint8Array(8);\r\n    this.channel_addr = new Uint16Array(8);\r\n    this.channel_addr_init = new Uint16Array(8);\r\n    this.channel_count = new Uint16Array(8);\r\n    this.channel_count_init = new Uint16Array(8);\r\n    this.channel_mask = new Uint8Array(8);\r\n    this.channel_mode = new Uint8Array(8);\r\n    this.unmask_listeners = [];\r\n\r\n    this.lsb_msb_flipflop = 0;\r\n\r\n    var io = cpu.io;\r\n\r\n    io.register_write(0x00, this, this.port_addr_write.bind(this, 0));\r\n    io.register_write(0x02, this, this.port_addr_write.bind(this, 1));\r\n    io.register_write(0x04, this, this.port_addr_write.bind(this, 2));\r\n    io.register_write(0x06, this, this.port_addr_write.bind(this, 3));\r\n    io.register_write(0x01, this, this.port_count_write.bind(this, 0));\r\n    io.register_write(0x03, this, this.port_count_write.bind(this, 1));\r\n    io.register_write(0x05, this, this.port_count_write.bind(this, 2));\r\n    io.register_write(0x07, this, this.port_count_write.bind(this, 3));\r\n\r\n    io.register_read(0x00, this, this.port_addr_read.bind(this, 0));\r\n    io.register_read(0x02, this, this.port_addr_read.bind(this, 1));\r\n    io.register_read(0x04, this, this.port_addr_read.bind(this, 2));\r\n    io.register_read(0x06, this, this.port_addr_read.bind(this, 3));\r\n    io.register_read(0x01, this, this.port_count_read.bind(this, 0));\r\n    io.register_read(0x03, this, this.port_count_read.bind(this, 1));\r\n    io.register_read(0x05, this, this.port_count_read.bind(this, 2));\r\n    io.register_read(0x07, this, this.port_count_read.bind(this, 3));\r\n\r\n    io.register_write(0xC0, this, this.port_addr_write.bind(this, 4));\r\n    io.register_write(0xC4, this, this.port_addr_write.bind(this, 5));\r\n    io.register_write(0xC8, this, this.port_addr_write.bind(this, 6));\r\n    io.register_write(0xCC, this, this.port_addr_write.bind(this, 7));\r\n    io.register_write(0xC2, this, this.port_count_write.bind(this, 4));\r\n    io.register_write(0xC6, this, this.port_count_write.bind(this, 5));\r\n    io.register_write(0xCA, this, this.port_count_write.bind(this, 6));\r\n    io.register_write(0xCE, this, this.port_count_write.bind(this, 7));\r\n\r\n    io.register_read(0xC0, this, this.port_addr_read.bind(this, 4));\r\n    io.register_read(0xC4, this, this.port_addr_read.bind(this, 5));\r\n    io.register_read(0xC8, this, this.port_addr_read.bind(this, 6));\r\n    io.register_read(0xCC, this, this.port_addr_read.bind(this, 7));\r\n    io.register_read(0xC2, this, this.port_count_read.bind(this, 4));\r\n    io.register_read(0xC6, this, this.port_count_read.bind(this, 5));\r\n    io.register_read(0xCA, this, this.port_count_read.bind(this, 6));\r\n    io.register_read(0xCE, this, this.port_count_read.bind(this, 7));\r\n\r\n    io.register_write(0x87, this, this.port_page_write.bind(this, 0));\r\n    io.register_write(0x83, this, this.port_page_write.bind(this, 1));\r\n    io.register_write(0x81, this, this.port_page_write.bind(this, 2));\r\n    io.register_write(0x82, this, this.port_page_write.bind(this, 3));\r\n    io.register_write(0x8F, this, this.port_page_write.bind(this, 4));\r\n    io.register_write(0x8B, this, this.port_page_write.bind(this, 5));\r\n    io.register_write(0x89, this, this.port_page_write.bind(this, 6));\r\n    io.register_write(0x8A, this, this.port_page_write.bind(this, 7));\r\n\r\n    io.register_read(0x87, this, this.port_page_read.bind(this, 0));\r\n    io.register_read(0x83, this, this.port_page_read.bind(this, 1));\r\n    io.register_read(0x81, this, this.port_page_read.bind(this, 2));\r\n    io.register_read(0x82, this, this.port_page_read.bind(this, 3));\r\n    io.register_read(0x8F, this, this.port_page_read.bind(this, 4));\r\n    io.register_read(0x8B, this, this.port_page_read.bind(this, 5));\r\n    io.register_read(0x89, this, this.port_page_read.bind(this, 6));\r\n    io.register_read(0x8A, this, this.port_page_read.bind(this, 7));\r\n\r\n    io.register_write(0x487, this, this.port_pagehi_write.bind(this, 0));\r\n    io.register_write(0x483, this, this.port_pagehi_write.bind(this, 1));\r\n    io.register_write(0x481, this, this.port_pagehi_write.bind(this, 2));\r\n    io.register_write(0x482, this, this.port_pagehi_write.bind(this, 3));\r\n    io.register_write(0x48B, this, this.port_pagehi_write.bind(this, 5));\r\n    io.register_write(0x489, this, this.port_pagehi_write.bind(this, 6));\r\n    io.register_write(0x48A, this, this.port_pagehi_write.bind(this, 7));\r\n\r\n    io.register_read(0x487, this, this.port_pagehi_read.bind(this, 0));\r\n    io.register_read(0x483, this, this.port_pagehi_read.bind(this, 1));\r\n    io.register_read(0x481, this, this.port_pagehi_read.bind(this, 2));\r\n    io.register_read(0x482, this, this.port_pagehi_read.bind(this, 3));\r\n    io.register_read(0x48B, this, this.port_pagehi_read.bind(this, 5));\r\n    io.register_read(0x489, this, this.port_pagehi_read.bind(this, 6));\r\n    io.register_read(0x48A, this, this.port_pagehi_read.bind(this, 7));\r\n\r\n    io.register_write(0x0A, this, this.port_singlemask_write.bind(this, 0));\r\n    io.register_write(0xD4, this, this.port_singlemask_write.bind(this, 4));\r\n    io.register_write(0x0F, this, this.port_multimask_write.bind(this, 0));\r\n    io.register_write(0xDE, this, this.port_multimask_write.bind(this, 4));\r\n\r\n    io.register_read(0x0F, this, this.port_multimask_read.bind(this, 0));\r\n    io.register_read(0xDE, this, this.port_multimask_read.bind(this, 4));\r\n\r\n    io.register_write(0x0B, this, this.port_mode_write.bind(this, 0));\r\n    io.register_write(0xD6, this, this.port_mode_write.bind(this, 4));\r\n\r\n    io.register_write(0x0C, this, this.portC_write);\r\n    io.register_write(0xD8, this, this.portC_write);\r\n}\r\n\r\nDMA.prototype.get_state = function()\r\n{\r\n    return [\r\n        this.channel_page,\r\n        this.channel_pagehi,\r\n        this.channel_addr,\r\n        this.channel_addr_init,\r\n        this.channel_count,\r\n        this.channel_count_init,\r\n        this.channel_mask,\r\n        this.channel_mode,\r\n        this.lsb_msb_flipflop,\r\n    ];\r\n};\r\n\r\nDMA.prototype.set_state = function(state)\r\n{\r\n    this.channel_page = state[0];\r\n    this.channel_pagehi = state[1];\r\n    this.channel_addr = state[2];\r\n    this.channel_addr_init = state[3];\r\n    this.channel_count = state[4];\r\n    this.channel_count_init = state[5];\r\n    this.channel_mask = state[6];\r\n    this.channel_mode = state[7];\r\n    this.lsb_msb_flipflop = state[8];\r\n};\r\n\r\nDMA.prototype.port_count_write = function(channel, data_byte)\r\n{\r\n    dbg_log(\"count write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\r\n\r\n    this.channel_count[channel] =\r\n        this.flipflop_get(this.channel_count[channel], data_byte, false);\r\n\r\n    this.channel_count_init[channel] =\r\n        this.flipflop_get(this.channel_count_init[channel], data_byte, true);\r\n};\r\n\r\nDMA.prototype.port_count_read = function(channel)\r\n{\r\n    dbg_log(\"count read [\" + channel + \"] -> \" + h(this.channel_count[channel]), LOG_DMA);\r\n    return this.flipflop_read(this.channel_count[channel]);\r\n};\r\n\r\nDMA.prototype.port_addr_write = function(channel, data_byte)\r\n{\r\n    dbg_log(\"addr write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\r\n\r\n    this.channel_addr[channel] =\r\n        this.flipflop_get(this.channel_addr[channel], data_byte, false);\r\n\r\n    this.channel_addr_init[channel] =\r\n        this.flipflop_get(this.channel_addr_init[channel], data_byte, true);\r\n};\r\n\r\nDMA.prototype.port_addr_read = function(channel)\r\n{\r\n    dbg_log(\"addr read [\" + channel + \"] -> \" + h(this.channel_addr[channel]), LOG_DMA);\r\n    return this.flipflop_read(this.channel_addr[channel]);\r\n};\r\n\r\nDMA.prototype.port_pagehi_write = function(channel, data_byte)\r\n{\r\n    dbg_log(\"pagehi write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\r\n    this.channel_pagehi[channel] = data_byte;\r\n};\r\n\r\nDMA.prototype.port_pagehi_read = function(channel)\r\n{\r\n    dbg_log(\"pagehi read [\" + channel + \"]\", LOG_DMA);\r\n    return this.channel_pagehi[channel];\r\n};\r\n\r\nDMA.prototype.port_page_write = function(channel, data_byte)\r\n{\r\n    dbg_log(\"page write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\r\n    this.channel_page[channel] = data_byte;\r\n};\r\n\r\nDMA.prototype.port_page_read = function(channel)\r\n{\r\n    dbg_log(\"page read [\" + channel + \"]\", LOG_DMA);\r\n    return this.channel_page[channel];\r\n};\r\n\r\nDMA.prototype.port_singlemask_write = function(channel_offset, data_byte)\r\n{\r\n    var channel = (data_byte & 0x3) + channel_offset;\r\n    var value = data_byte & 0x4 ? 1 : 0;\r\n    dbg_log(\"singlechannel mask write [\" + channel + \"] = \" + value, LOG_DMA);\r\n    this.update_mask(channel, value);\r\n};\r\n\r\nDMA.prototype.port_multimask_write = function(channel_offset, data_byte)\r\n{\r\n    dbg_log(\"multichannel mask write: \" + h(data_byte), LOG_DMA);\r\n    for(var i = 0; i < 4; i++)\r\n    {\r\n        this.update_mask(channel_offset + i, data_byte & (1 << i));\r\n    }\r\n};\r\n\r\nDMA.prototype.port_multimask_read = function(channel_offset)\r\n{\r\n    var value = 0;\r\n    value |= this.channel_mask[channel_offset + 0];\r\n    value |= this.channel_mask[channel_offset + 1] << 1;\r\n    value |= this.channel_mask[channel_offset + 2] << 2;\r\n    value |= this.channel_mask[channel_offset + 3] << 3;\r\n    dbg_log(\"multichannel mask read: \" + h(value), LOG_DMA);\r\n    return value;\r\n};\r\n\r\nDMA.prototype.port_mode_write = function(channel_offset, data_byte)\r\n{\r\n    var channel = (data_byte & 0x3) + channel_offset;\r\n    dbg_log(\"mode write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\r\n    this.channel_mode[channel] = data_byte;\r\n};\r\n\r\nDMA.prototype.portC_write = function(data_byte)\r\n{\r\n    dbg_log(\"flipflop reset\", LOG_DMA);\r\n    this.lsb_msb_flipflop = 0;\r\n};\r\n\r\nDMA.prototype.on_unmask = function(fn, this_value)\r\n{\r\n    this.unmask_listeners.push({\r\n        fn: fn,\r\n        this_value: this_value,\r\n    });\r\n};\r\n\r\nDMA.prototype.update_mask = function(channel, value)\r\n{\r\n    if(this.channel_mask[channel] !== value)\r\n    {\r\n        this.channel_mask[channel] = value;\r\n\r\n        if(!value)\r\n        {\r\n            dbg_log(\"firing on_unmask(\" + channel + \")\", LOG_DMA);\r\n            for(var i = 0; i < this.unmask_listeners.length; i++)\r\n            {\r\n                this.unmask_listeners[i].fn.call(\r\n                    this.unmask_listeners[i].this_value,\r\n                    channel\r\n                );\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n// read data, write to memory\r\nDMA.prototype.do_read = function(buffer, start, len, channel, fn)\r\n{\r\n    var read_count = this.count_get_8bit(channel),\r\n        addr = this.address_get_8bit(channel);\r\n\r\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\r\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_count), LOG_DMA);\r\n\r\n    if(len < read_count)\r\n    {\r\n        dbg_log(\"DMA should read more than provided: \" + h(len) + \" \" + h(read_count), LOG_DMA);\r\n    }\r\n\r\n    if(start + read_count > buffer.byteLength)\r\n    {\r\n        dbg_log(\"DMA read outside of buffer\", LOG_DMA);\r\n        fn(true);\r\n    }\r\n    else\r\n    {\r\n        var cpu = this.cpu;\r\n        this.channel_addr[channel] += read_count;\r\n\r\n        buffer.get(start, read_count, function(data)\r\n        {\r\n            cpu.write_blob(data, addr);\r\n            fn(false);\r\n        });\r\n    }\r\n};\r\n\r\n// write data, read memory\r\n// start and len in bytes\r\nDMA.prototype.do_write = function(buffer, start, len, channel, fn)\r\n{\r\n    var read_count = (this.channel_count[channel] + 1) & 0xFFFF,\r\n        bytes_per_count = channel >= 5 ? 2 : 1,\r\n        read_bytes = read_count * bytes_per_count,\r\n        addr = this.address_get_8bit(channel),\r\n        unfinished = false,\r\n        want_more = false,\r\n        autoinit = this.channel_mode[channel] & 0x10;\r\n\r\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\r\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_bytes), LOG_DMA);\r\n\r\n    if(len < read_bytes)\r\n    {\r\n        dbg_log(\"DMA should read more than provided\", LOG_DMA);\r\n        read_count = Math.floor(len / bytes_per_count);\r\n        read_bytes = read_count * bytes_per_count;\r\n        unfinished = true;\r\n    }\r\n    else if(len > read_bytes)\r\n    {\r\n        dbg_log(\"DMA attempted to read more than provided\", LOG_DMA);\r\n        want_more = true;\r\n    }\r\n\r\n    if(start + read_bytes > buffer.byteLength)\r\n    {\r\n        dbg_log(\"DMA write outside of buffer\", LOG_DMA);\r\n        fn(true);\r\n    }\r\n    else\r\n    {\r\n        this.channel_addr[channel] += read_count;\r\n        this.channel_count[channel] -= read_count;\r\n        // when complete, counter should underflow to 0xFFFF\r\n\r\n        if(!unfinished && autoinit)\r\n        {\r\n            dbg_log(\"DMA autoinit\", LOG_DMA);\r\n            this.channel_addr[channel] = this.channel_addr_init[channel];\r\n            this.channel_count[channel] = this.channel_count_init[channel];\r\n        }\r\n\r\n        buffer.set(start,\r\n                this.cpu.mem8.subarray(addr, addr + read_bytes),\r\n                () =>\r\n                {\r\n                    if(want_more && autoinit)\r\n                    {\r\n                        dbg_log(\"DMA continuing from start\", LOG_DMA);\r\n                        this.do_write(buffer, start + read_bytes, len - read_bytes, channel, fn);\r\n                    }\r\n                    else\r\n                    {\r\n                        fn(false);\r\n                    }\r\n                }\r\n            );\r\n    }\r\n};\r\n\r\nDMA.prototype.address_get_8bit = function(channel)\r\n{\r\n    var addr = this.channel_addr[channel];\r\n\r\n    // http://wiki.osdev.org/ISA_DMA#16_bit_issues\r\n    if(channel >= 5)\r\n    {\r\n        addr = (addr << 1);\r\n    }\r\n\r\n    addr &= 0xFFFF;\r\n    addr |= this.channel_page[channel] << 16;\r\n    addr |= this.channel_pagehi[channel] << 24;\r\n\r\n    return addr;\r\n};\r\n\r\nDMA.prototype.count_get_8bit = function(channel)\r\n{\r\n    var count = this.channel_count[channel] + 1;\r\n\r\n    if(channel >= 5)\r\n    {\r\n        count *= 2;\r\n    }\r\n\r\n    return count;\r\n};\r\n\r\nDMA.prototype.flipflop_get = function(old_dword, new_byte, continuing)\r\n{\r\n    if(!continuing)\r\n    {\r\n        this.lsb_msb_flipflop ^= 1;\r\n    }\r\n\r\n    if(this.lsb_msb_flipflop)\r\n    {\r\n        // low byte\r\n        return old_dword & ~0xFF | new_byte;\r\n    }\r\n    else\r\n    {\r\n        // high byte\r\n        return old_dword & ~0xFF00 | new_byte << 8;\r\n    }\r\n};\r\n\r\nDMA.prototype.flipflop_read = function(dword)\r\n{\r\n    this.lsb_msb_flipflop ^= 1;\r\n\r\n    if(this.lsb_msb_flipflop)\r\n    {\r\n        // low byte\r\n        return dword & 0xFF;\r\n    }\r\n    else\r\n    {\r\n        // high byte\r\n        return (dword >> 8) & 0xFF;\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * @const\r\n * In kHz\r\n */\r\nvar OSCILLATOR_FREQ = 1193.1816666; // 1.193182 MHz\r\n\r\n/**\r\n * @constructor\r\n *\r\n * Programmable Interval Timer\r\n */\r\nfunction PIT(cpu, bus)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    this.bus = bus;\r\n\r\n    this.counter_start_time = new Float64Array(3);\r\n    this.counter_start_value = new Uint16Array(3);\r\n\r\n    this.counter_next_low = new Uint8Array(4);\r\n    this.counter_enabled = new Uint8Array(4);\r\n    this.counter_mode = new Uint8Array(4);\r\n    this.counter_read_mode = new Uint8Array(4);\r\n\r\n    // 2 = latch low, 1 = latch high, 0 = no latch\r\n    this.counter_latch = new Uint8Array(4);\r\n    this.counter_latch_value = new Uint16Array(3);\r\n\r\n    this.counter_reload = new Uint16Array(3);\r\n\r\n    // TODO:\r\n    // - counter2 can be controlled by an input\r\n\r\n    cpu.io.register_read(0x61, this, function()\r\n    {\r\n        var now = v86.microtick();\r\n\r\n        var ref_toggle = (now * (1000 * 1000 / 15000)) & 1;\r\n        var counter2_out = this.did_rollover(2, now);\r\n\r\n        return ref_toggle << 4 | counter2_out << 5;\r\n    });\r\n    cpu.io.register_write(0x61, this, function(data)\r\n    {\r\n        if(data & 1)\r\n        {\r\n            this.bus.send(\"pcspeaker-enable\");\r\n        }\r\n        else\r\n        {\r\n            this.bus.send(\"pcspeaker-disable\");\r\n        }\r\n    });\r\n\r\n    cpu.io.register_read(0x40, this, function() { return this.counter_read(0); });\r\n    cpu.io.register_read(0x41, this, function() { return this.counter_read(1); });\r\n    cpu.io.register_read(0x42, this, function() { return this.counter_read(2); });\r\n\r\n    cpu.io.register_write(0x40, this, function(data) { this.counter_write(0, data); });\r\n    cpu.io.register_write(0x41, this, function(data) { this.counter_write(1, data); });\r\n    cpu.io.register_write(0x42, this, function(data) { this.counter_write(2, data); });\r\n\r\n    cpu.io.register_write(0x43, this, this.port43_write);\r\n}\r\n\r\nPIT.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.counter_next_low;\r\n    state[1] = this.counter_enabled;\r\n    state[2] = this.counter_mode;\r\n    state[3] = this.counter_read_mode;\r\n    state[4] = this.counter_latch;\r\n    state[5] = this.counter_latch_value;\r\n    state[6] = this.counter_reload;\r\n    state[7] = this.counter_start_time;\r\n    state[8] = this.counter_start_value;\r\n\r\n    return state;\r\n};\r\n\r\nPIT.prototype.set_state = function(state)\r\n{\r\n    this.counter_next_low = state[0];\r\n    this.counter_enabled = state[1];\r\n    this.counter_mode = state[2];\r\n    this.counter_read_mode = state[3];\r\n    this.counter_latch = state[4];\r\n    this.counter_latch_value = state[5];\r\n    this.counter_reload = state[6];\r\n    this.counter_start_time = state[7];\r\n    this.counter_start_value = state[8];\r\n};\r\n\r\nPIT.prototype.timer = function(now, no_irq)\r\n{\r\n    var time_to_next_interrupt = 100;\r\n\r\n    // counter 0 produces interrupts\r\n    if(!no_irq)\r\n    {\r\n        if(this.counter_enabled[0] && this.did_rollover(0, now))\r\n        {\r\n            time_to_next_interrupt = 0;\r\n\r\n            this.counter_start_value[0] = this.get_counter_value(0, now);\r\n            this.counter_start_time[0] = now;\r\n\r\n            dbg_log(\"pit interrupt. new value: \" + this.counter_start_value[0], LOG_PIT);\r\n\r\n            this.cpu.device_raise_irq(0);\r\n            var mode = this.counter_mode[0];\r\n\r\n            if(mode === 0)\r\n            {\r\n                this.counter_enabled[0] = 0;\r\n            }\r\n        }\r\n        else\r\n        {\r\n            this.cpu.device_lower_irq(0);\r\n        }\r\n    }\r\n    time_to_next_interrupt = 0;\r\n\r\n    return time_to_next_interrupt;\r\n};\r\n\r\nPIT.prototype.get_counter_value = function(i, now)\r\n{\r\n    if(!this.counter_enabled[i])\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    var diff = now - this.counter_start_time[i];\r\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\r\n\r\n    var value = this.counter_start_value[i] - diff_in_ticks;\r\n\r\n    dbg_log(\"diff=\" + diff + \" dticks=\" + diff_in_ticks + \" value=\" + value + \" reload=\" + this.counter_reload[i], LOG_PIT);\r\n\r\n    var reload = this.counter_reload[i];\r\n\r\n    if(value >= reload)\r\n    {\r\n        dbg_log(\"Warning: Counter\" + i + \" value \" + value  + \" is larger than reload \" + reload, LOG_PIT);\r\n        value %= reload;\r\n    }\r\n    else if(value < 0)\r\n    {\r\n        value = value % reload + reload;\r\n    }\r\n\r\n    return value;\r\n};\r\n\r\nPIT.prototype.did_rollover = function(i, now)\r\n{\r\n    var diff = now - this.counter_start_time[i];\r\n\r\n    if(diff < 0)\r\n    {\r\n        // should only happen after restore_state\r\n        dbg_log(\"Warning: PIT timer difference is negative, resetting\");\r\n        return true;\r\n    }\r\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\r\n    //dbg_log(i + \": diff=\" + diff + \" start_time=\" + this.counter_start_time[i] + \" diff_in_ticks=\" + diff_in_ticks + \" (\" + diff * OSCILLATOR_FREQ + \") start_value=\" + this.counter_start_value[i] + \" did_rollover=\" + (this.counter_start_value[i] < diff_in_ticks), LOG_PIT);\r\n\r\n    return this.counter_start_value[i] < diff_in_ticks;\r\n};\r\n\r\nPIT.prototype.counter_read = function(i)\r\n{\r\n    var latch = this.counter_latch[i];\r\n\r\n    if(latch)\r\n    {\r\n        this.counter_latch[i]--;\r\n\r\n        if(latch === 2)\r\n        {\r\n            return this.counter_latch_value[i] & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            return this.counter_latch_value[i] >> 8;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        var next_low = this.counter_next_low[i];\r\n\r\n        if(this.counter_mode[i] === 3)\r\n        {\r\n            this.counter_next_low[i] ^= 1;\r\n        }\r\n\r\n        var value = this.get_counter_value(i, v86.microtick());\r\n\r\n        if(next_low)\r\n        {\r\n            return value & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            return value >> 8;\r\n        }\r\n    }\r\n};\r\n\r\nPIT.prototype.counter_write = function(i, value)\r\n{\r\n    if(this.counter_next_low[i])\r\n    {\r\n        this.counter_reload[i] = this.counter_reload[i] & ~0xFF | value;\r\n    }\r\n    else\r\n    {\r\n        this.counter_reload[i] = this.counter_reload[i] & 0xFF | value << 8;\r\n    }\r\n\r\n    if(this.counter_read_mode[i] !== 3 || !this.counter_next_low[i])\r\n    {\r\n        if(!this.counter_reload[i])\r\n        {\r\n            this.counter_reload[i] = 0xFFFF;\r\n        }\r\n\r\n        // depends on the mode, should actually\r\n        // happen on the first tick\r\n        this.counter_start_value[i] = this.counter_reload[i];\r\n\r\n        this.counter_enabled[i] = true;\r\n\r\n        this.counter_start_time[i] = v86.microtick();\r\n\r\n        dbg_log(\"counter\" + i + \" reload=\" + h(this.counter_reload[i]) +\r\n                \" tick=\" + (this.counter_reload[i] || 0x10000) / OSCILLATOR_FREQ + \"ms\", LOG_PIT);\r\n    }\r\n\r\n    if(this.counter_read_mode[i] === 3)\r\n    {\r\n        this.counter_next_low[i] ^= 1;\r\n    }\r\n\r\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\r\n};\r\n\r\nPIT.prototype.port43_write = function(reg_byte)\r\n{\r\n    var mode = reg_byte >> 1 & 7,\r\n        binary_mode = reg_byte & 1,\r\n        i = reg_byte >> 6 & 3,\r\n        read_mode = reg_byte >> 4 & 3;\r\n\r\n    if(i === 1)\r\n    {\r\n        dbg_log(\"Unimplemented timer1\", LOG_PIT);\r\n    }\r\n\r\n    if(i === 3)\r\n    {\r\n        dbg_log(\"Unimplemented read back\", LOG_PIT);\r\n        return;\r\n    }\r\n\r\n    if(read_mode === 0)\r\n    {\r\n        // latch\r\n        this.counter_latch[i] = 2;\r\n        var value = this.get_counter_value(i, v86.microtick());\r\n        dbg_log(\"latch: \" + value, LOG_PIT);\r\n        this.counter_latch_value[i] = value ? value - 1 : 0\r\n\r\n        return;\r\n    }\r\n\r\n    if(mode >= 6)\r\n    {\r\n        // 6 and 7 are aliased to 2 and 3\r\n        mode &= ~4;\r\n    }\r\n\r\n    dbg_log(\"Control: mode=\" + mode + \" ctr=\" + i +\r\n            \" read_mode=\" + read_mode + \" bcd=\" + binary_mode, LOG_PIT);\r\n\r\n    if(read_mode === 1)\r\n    {\r\n        // msb\r\n        this.counter_next_low[i] = 0;\r\n    }\r\n    else if(read_mode === 2)\r\n    {\r\n        // lsb\r\n        this.counter_next_low[i] = 1;\r\n    }\r\n    else\r\n    {\r\n        // first lsb then msb\r\n        this.counter_next_low[i] = 1;\r\n    }\r\n\r\n    if(i === 0)\r\n    {\r\n        this.cpu.device_lower_irq(0);\r\n    }\r\n\r\n    if(mode === 0)\r\n    {\r\n    }\r\n    else if(mode === 3 || mode === 2)\r\n    {\r\n        // what is the difference\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"Unimplemented counter mode: \" + h(mode), LOG_PIT);\r\n    }\r\n\r\n    this.counter_mode[i] = mode;\r\n    this.counter_read_mode[i] = read_mode;\r\n\r\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\r\n};\r\n","\"use strict\";\r\n\r\n\r\nvar\r\n    /**\r\n     * Always 64k\r\n     * @const\r\n     */\r\n    VGA_BANK_SIZE = 64 * 1024,\r\n\r\n    /** @const */\r\n    MAX_XRES = 2560,\r\n\r\n    /** @const */\r\n    MAX_YRES = 1600,\r\n\r\n    /** @const */\r\n    MAX_BPP = 32;\r\n\r\n/** @const */\r\n//var VGA_LFB_ADDRESS = 0xFE000000; // set by seabios\r\nvar VGA_LFB_ADDRESS = 0xE0000000;\r\n\r\n/** @const */\r\nvar VGA_PIXEL_BUFFER_START = 4 * VGA_BANK_SIZE;\r\n\r\n/**\r\n * @const\r\n * Equals the maximum number of pixels for non svga.\r\n * 8 pixels per byte.\r\n */\r\nvar VGA_PIXEL_BUFFER_SIZE = 8 * VGA_BANK_SIZE;\r\n\r\n/** @const */\r\nvar VGA_MIN_MEMORY_SIZE = VGA_PIXEL_BUFFER_START + VGA_PIXEL_BUFFER_SIZE;\r\n\r\n/**\r\n * @const\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\r\n */\r\nvar VGA_HOST_MEMORY_SPACE_START = Uint32Array.from([\r\n    0xA0000,\r\n    0xA0000,\r\n    0xB0000,\r\n    0xB8000,\r\n]);\r\n\r\n/**\r\n * @const\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\r\n */\r\nvar VGA_HOST_MEMORY_SPACE_SIZE = Uint32Array.from([\r\n    0x20000, // 128K\r\n    0x10000, // 64K\r\n    0x8000, // 32K\r\n    0x8000, // 32K\r\n]);\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {BusConnector} bus\r\n * @param {number} vga_memory_size\r\n */\r\nfunction VGAScreen(cpu, bus, vga_memory_size)\r\n{\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    this.vga_memory_size = vga_memory_size;\r\n\r\n    /** @type {number} */\r\n    this.cursor_address = 0;\r\n\r\n    /** @type {number} */\r\n    this.cursor_scanline_start = 0xE;\r\n\r\n    /** @type {number} */\r\n    this.cursor_scanline_end = 0xF;\r\n\r\n    /**\r\n     * Number of columns in text mode\r\n     * @type {number}\r\n     */\r\n    this.max_cols = 80;\r\n\r\n    /**\r\n     * Number of rows in text mode\r\n     * @type {number}\r\n     */\r\n    this.max_rows = 25;\r\n\r\n    /**\r\n     * Width in pixels in graphical mode\r\n     * @type {number}\r\n     */\r\n    this.screen_width = 0;\r\n\r\n    /**\r\n     * Height in pixels in graphical mode\r\n     * @type {number}\r\n     */\r\n    this.screen_height = 0;\r\n\r\n    /**\r\n     * Logical width in pixels of virtual buffer available for panning\r\n     * @type {number}\r\n     */\r\n    this.virtual_width = 0;\r\n\r\n    /**\r\n     * Logical height in pixels of virtual buffer available for panning\r\n     * @type {number}\r\n     */\r\n    this.virtual_height = 0;\r\n\r\n    /**\r\n     * The rectangular fragments of the image buffer, and their destination\r\n     * locations, to be drawn every screen_fill_buffer during VGA modes.\r\n     * @type {Array<Object<string, number>>}\r\n     */\r\n    this.layers = [];\r\n\r\n    /**\r\n     * video memory start address\r\n     * @type {number}\r\n     */\r\n    this.start_address = 0;\r\n\r\n    /**\r\n     * Start address - a copy of start_address that only gets updated\r\n     * during VSync, used for panning and page flipping\r\n     * @type {number}\r\n     */\r\n    this.start_address_latched = 0;\r\n\r\n    /**\r\n     * Unimplemented CRTC registers go here\r\n     */\r\n    this.crtc = new Uint8Array(0x19);\r\n\r\n    // Implemented CRTC registers:\r\n\r\n    /** @type {number} */\r\n    this.crtc_mode = 0;\r\n\r\n    /** @type {number} */\r\n    this.horizontal_display_enable_end = 0;\r\n\r\n    /** @type {number} */\r\n    this.horizontal_blank_start = 0;\r\n\r\n    /** @type {number} */\r\n    this.vertical_display_enable_end = 0;\r\n\r\n    /** @type {number} */\r\n    this.vertical_blank_start = 0;\r\n\r\n    /** @type {number} */\r\n    this.underline_location_register = 0;\r\n\r\n    /** @type {number} */\r\n    this.preset_row_scan = 0;\r\n\r\n    /** @type {number} */\r\n    this.offset_register = 0;\r\n\r\n    /** @type {number} */\r\n    this.line_compare = 0;\r\n\r\n    // End of CRTC registers\r\n\r\n    /**\r\n     * Used for svga, e.g. banked modes\r\n     * @type{boolean}\r\n     */\r\n    this.graphical_mode_is_linear = true;\r\n\r\n    /** @type {boolean} */\r\n    this.graphical_mode = false;\r\n    setTimeout(() => { bus.send(\"screen-set-mode\", this.graphical_mode); }, 0);\r\n\r\n    /*\r\n     * VGA palette containing 256 colors for video mode 13, svga 8bpp, etc.\r\n     * Needs to be initialised by the BIOS\r\n     */\r\n    this.vga256_palette = new Int32Array(256);\r\n\r\n    /**\r\n     * VGA read latches\r\n     * @type{number}\r\n     */\r\n    this.latch_dword = 0;\r\n\r\n    /** @type {number} */\r\n    this.svga_width = 0;\r\n\r\n    /** @type {number} */\r\n    this.svga_height = 0;\r\n\r\n    this.svga_enabled = false;\r\n\r\n    /** @type {number} */\r\n    this.svga_bpp = 32;\r\n\r\n    /** @type {number} */\r\n    this.svga_bank_offset = 0;\r\n\r\n    /**\r\n     * The video buffer offset created by VBE_DISPI_INDEX_Y_OFFSET\r\n     * In bytes\r\n     * @type {number}\r\n     */\r\n    this.svga_offset = 0;\r\n\r\n    // Experimental, could probably need some changes\r\n    // 01:00.0 VGA compatible controller: NVIDIA Corporation GT216 [GeForce GT 220] (rev a2)\r\n    this.pci_space = [\r\n        0xde, 0x10, 0x20, 0x0a, 0x07, 0x00, 0x00, 0x00,  0xa2, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00,\r\n        0x08, VGA_LFB_ADDRESS >>> 8, VGA_LFB_ADDRESS >>> 16, VGA_LFB_ADDRESS >>> 24,\r\n                                0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00,\r\n    ];\r\n    this.pci_id = 0x12 << 3;\r\n    this.pci_bars = [\r\n        {\r\n            size: vga_memory_size,\r\n        },\r\n    ];\r\n\r\n    // TODO: Should be matched with vga bios size and mapping address\r\n    // Seabios config for this device:\r\n    // CONFIG_VGA_PCI=y\r\n    // CONFIG_OVERRIDE_PCI_ID=y\r\n    // CONFIG_VGA_VID=0x10de\r\n    // CONFIG_VGA_DID=0x0a20\r\n\r\n    this.pci_rom_size = 0x10000;\r\n    this.pci_rom_address = 0xFEB00000;\r\n\r\n    this.name = \"vga\";\r\n\r\n    this.stats = {\r\n        is_graphical: false,\r\n        res_x: 0,\r\n        res_y: 0,\r\n        bpp: 0,\r\n    };\r\n\r\n    this.index_crtc = 0;\r\n\r\n    // index for setting colors through port 3C9h\r\n    this.dac_color_index_write = 0;\r\n    this.dac_color_index_read = 0;\r\n    this.dac_state = 0;\r\n\r\n    this.dac_mask = 0xFF;\r\n\r\n    this.dac_map = new Uint8Array(0x10);\r\n\r\n    this.attribute_controller_index = -1;\r\n    this.palette_source = 0x20;\r\n    this.attribute_mode = 0;\r\n    this.color_plane_enable = 0;\r\n    this.horizontal_panning = 0;\r\n    this.color_select = 0;\r\n\r\n    this.sequencer_index = -1;\r\n\r\n    // bitmap of planes 0-3\r\n    this.plane_write_bm = 0xF;\r\n    this.sequencer_memory_mode = 0;\r\n    this.clocking_mode = 0;\r\n    this.graphics_index = -1;\r\n\r\n    this.plane_read = 0, // value 0-3, which plane to read\r\n    this.planar_mode = 0;\r\n    this.planar_rotate_reg = 0;\r\n    this.planar_bitmap = 0xFF;\r\n    this.planar_setreset = 0;\r\n    this.planar_setreset_enable = 0;\r\n    this.miscellaneous_graphics_register = 0;\r\n\r\n    this.color_compare = 0;\r\n    this.color_dont_care = 0;\r\n\r\n    this.max_scan_line = 0;\r\n\r\n    this.miscellaneous_output_register = 0xff;\r\n    this.port_3DA_value = 0xFF;\r\n\r\n\r\n    var io = cpu.io;\r\n\r\n    io.register_write(0x3C0, this, this.port3C0_write);\r\n    io.register_read(0x3C0, this, this.port3C0_read, this.port3C0_read16);\r\n\r\n    io.register_read(0x3C1, this, this.port3C1_read);\r\n    io.register_write(0x3C2, this, this.port3C2_write);\r\n\r\n    io.register_write_consecutive(0x3C4, this, this.port3C4_write, this.port3C5_write);\r\n\r\n    io.register_read(0x3C4, this, this.port3C4_read);\r\n    io.register_read(0x3C5, this, this.port3C5_read);\r\n\r\n    io.register_write_consecutive(0x3CE, this, this.port3CE_write, this.port3CF_write);\r\n\r\n    io.register_read(0x3CE, this, this.port3CE_read);\r\n    io.register_read(0x3CF, this, this.port3CF_read);\r\n\r\n    io.register_read(0x3C6, this, this.port3C6_read);\r\n    io.register_write(0x3C6, this, this.port3C6_write);\r\n    io.register_write(0x3C7, this, this.port3C7_write);\r\n    io.register_read(0x3C7, this, this.port3C7_read);\r\n    io.register_write(0x3C8, this, this.port3C8_write);\r\n    io.register_read(0x3C8, this, this.port3C8_read);\r\n    io.register_write(0x3C9, this, this.port3C9_write);\r\n    io.register_read(0x3C9, this, this.port3C9_read);\r\n\r\n    io.register_read(0x3CC, this, this.port3CC_read);\r\n\r\n    io.register_write_consecutive(0x3D4, this, this.port3D4_write, this.port3D5_write);\r\n    io.register_read(0x3D4, this, this.port3D4_read);\r\n    io.register_read(0x3D5, this, this.port3D5_read);\r\n\r\n    io.register_read(0x3CA, this, function() { dbg_log(\"3CA read\", LOG_VGA); return 0; });\r\n\r\n    io.register_read(0x3DA, this, this.port3DA_read);\r\n    io.register_read(0x3BA, this, this.port3DA_read);\r\n\r\n\r\n    // Bochs VBE Extensions\r\n    // http://wiki.osdev.org/Bochs_VBE_Extensions\r\n    this.dispi_index = -1;\r\n    this.dispi_enable_value = 0;\r\n\r\n    io.register_write(0x1CE, this, undefined, this.port1CE_write);\r\n\r\n    io.register_write(0x1CF, this, undefined, this.port1CF_write);\r\n    io.register_read(0x1CF, this, undefined, this.port1CF_read);\r\n\r\n    if(this.vga_memory_size === undefined || this.vga_memory_size < VGA_MIN_MEMORY_SIZE)\r\n    {\r\n        this.vga_memory_size = VGA_MIN_MEMORY_SIZE;\r\n        dbg_log(\"vga memory size rounded up to \" + this.vga_memory_size, LOG_VGA);\r\n    }\r\n    else if(this.vga_memory_size & (VGA_BANK_SIZE - 1))\r\n    {\r\n        // round up to next 64k\r\n        this.vga_memory_size |= VGA_BANK_SIZE - 1;\r\n        this.vga_memory_size++;\r\n    }\r\n\r\n    this.svga_memory = new Uint8Array(this.vga_memory_size);\r\n\r\n    this.diff_addr_min = this.vga_memory_size;\r\n    this.diff_addr_max = 0;\r\n    this.diff_plot_min = this.vga_memory_size;\r\n    this.diff_plot_max = 0;\r\n\r\n    this.dest_buffer = undefined;\r\n\r\n    bus.register(\"screen-tell-buffer\", function(data)\r\n    {\r\n        if(this.dest_buffer && data[0])\r\n        {\r\n            data[0].set(this.dest_buffer.subarray(0, data[0].length));\r\n        }\r\n        this.dest_buffer = data[0];\r\n    }, this);\r\n\r\n    bus.register(\"screen-fill-buffer\", function()\r\n    {\r\n        this.screen_fill_buffer();\r\n    }, this);\r\n\r\n\r\n    this.svga_memory16 = new Uint16Array(this.svga_memory.buffer);\r\n    this.svga_memory32 = new Int32Array(this.svga_memory.buffer);\r\n    this.vga_memory = new Uint8Array(this.svga_memory.buffer, 0, 4 * VGA_BANK_SIZE);\r\n    this.plane0 = new Uint8Array(this.svga_memory.buffer, 0 * VGA_BANK_SIZE, VGA_BANK_SIZE);\r\n    this.plane1 = new Uint8Array(this.svga_memory.buffer, 1 * VGA_BANK_SIZE, VGA_BANK_SIZE);\r\n    this.plane2 = new Uint8Array(this.svga_memory.buffer, 2 * VGA_BANK_SIZE, VGA_BANK_SIZE);\r\n    this.plane3 = new Uint8Array(this.svga_memory.buffer, 3 * VGA_BANK_SIZE, VGA_BANK_SIZE);\r\n    this.pixel_buffer = new Uint8Array(this.svga_memory.buffer,\r\n        VGA_PIXEL_BUFFER_START, VGA_PIXEL_BUFFER_SIZE);\r\n\r\n    var me = this;\r\n    io.mmap_register(0xA0000, 0x20000,\r\n        function(addr) { return me.vga_memory_read(addr); },\r\n        function(addr, value) { me.vga_memory_write(addr, value); }\r\n    );\r\n    io.mmap_register(VGA_LFB_ADDRESS, this.vga_memory_size,\r\n        function(addr) { return me.svga_memory_read8(addr); },\r\n        function(addr, value) { me.svga_memory_write8(addr, value); },\r\n        function(addr) { return me.svga_memory_read32(addr); },\r\n        function(addr, value) { me.svga_memory_write32(addr, value); }\r\n    );\r\n\r\n    cpu.devices.pci.register_device(this);\r\n}\r\n\r\nVGAScreen.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.vga_memory_size;\r\n    state[1] = this.cursor_address;\r\n    state[2] = this.cursor_scanline_start;\r\n    state[3] = this.cursor_scanline_end;\r\n    state[4] = this.max_cols;\r\n    state[5] = this.max_rows;\r\n    state[6] = this.layers;\r\n    state[7] = this.dac_state;\r\n    state[8] = this.start_address;\r\n    state[9] = this.graphical_mode;\r\n    state[10] = this.vga256_palette;\r\n    state[11] = this.latch_dword;\r\n    state[12] = this.color_compare;\r\n    state[13] = this.color_dont_care;\r\n    state[14] = this.miscellaneous_graphics_register;\r\n    state[15] = this.svga_width;\r\n    state[16] = this.svga_height;\r\n    state[17] = this.crtc_mode;\r\n    state[18] = this.svga_enabled;\r\n    state[19] = this.svga_bpp;\r\n    state[20] = this.svga_bank_offset;\r\n    state[21] = this.svga_offset;\r\n    state[22] = this.index_crtc;\r\n    state[23] = this.dac_color_index_write;\r\n    state[24] = this.dac_color_index_read;\r\n    state[25] = this.dac_map;\r\n    state[26] = this.sequencer_index;\r\n    state[27] = this.plane_write_bm;\r\n    state[28] = this.sequencer_memory_mode;\r\n    state[29] = this.graphics_index;\r\n    state[30] = this.plane_read;\r\n    state[31] = this.planar_mode;\r\n    state[32] = this.planar_rotate_reg;\r\n    state[33] = this.planar_bitmap;\r\n    state[34] = this.max_scan_line;\r\n    state[35] = this.miscellaneous_output_register;\r\n    state[36] = this.port_3DA_value;\r\n    state[37] = this.dispi_index;\r\n    state[38] = this.dispi_enable_value;\r\n    state[39] = this.svga_memory;\r\n    state[40] = this.graphical_mode_is_linear;\r\n    state[41] = this.attribute_controller_index;\r\n    state[42] = this.offset_register;\r\n    state[43] = this.planar_setreset;\r\n    state[44] = this.planar_setreset_enable;\r\n    state[45] = this.start_address_latched;\r\n    state[46] = this.crtc;\r\n    state[47] = this.horizontal_display_enable_end;\r\n    state[48] = this.horizontal_blank_start;\r\n    state[49] = this.vertical_display_enable_end;\r\n    state[50] = this.vertical_blank_start;\r\n    state[51] = this.underline_location_register;\r\n    state[52] = this.preset_row_scan;\r\n    state[53] = this.offset_register;\r\n    state[54] = this.palette_source;\r\n    state[55] = this.attribute_mode;\r\n    state[56] = this.color_plane_enable;\r\n    state[57] = this.horizontal_panning;\r\n    state[58] = this.color_select;\r\n    state[59] = this.clocking_mode;\r\n    state[60] = this.line_compare;\r\n    state[61] = this.dac_mask;\r\n\r\n    return state;\r\n};\r\n\r\nVGAScreen.prototype.set_state = function(state)\r\n{\r\n    this.vga_memory_size = state[0];\r\n    this.cursor_address = state[1];\r\n    this.cursor_scanline_start = state[2];\r\n    this.cursor_scanline_end = state[3];\r\n    this.max_cols = state[4];\r\n    this.max_rows = state[5];\r\n    this.layers = state[6];\r\n    this.dac_state = state[7];\r\n    this.start_address = state[8];\r\n    this.graphical_mode = state[9];\r\n    this.vga256_palette = state[10];\r\n    this.latch_dword = state[11];\r\n    this.color_compare = state[12];\r\n    this.color_dont_care = state[13];\r\n    this.miscellaneous_graphics_register = state[14];\r\n    this.svga_width = state[15];\r\n    this.svga_height = state[16];\r\n    this.crtc_mode = state[17];\r\n    this.svga_enabled = state[18];\r\n    this.svga_bpp = state[19];\r\n    this.svga_bank_offset = state[20];\r\n    this.svga_offset = state[21];\r\n    this.index_crtc = state[22];\r\n    this.dac_color_index_write = state[23];\r\n    this.dac_color_index_read = state[24];\r\n    this.dac_map = state[25];\r\n    this.sequencer_index = state[26];\r\n    this.plane_write_bm = state[27];\r\n    this.sequencer_memory_mode = state[28];\r\n    this.graphics_index = state[29];\r\n    this.plane_read = state[30];\r\n    this.planar_mode = state[31];\r\n    this.planar_rotate_reg = state[32];\r\n    this.planar_bitmap = state[33];\r\n    this.max_scan_line = state[34];\r\n    this.miscellaneous_output_register = state[35];\r\n    this.port_3DA_value = state[36];\r\n    this.dispi_index = state[37];\r\n    this.dispi_enable_value = state[38];\r\n    this.svga_memory.set(state[39]);\r\n    this.graphical_mode_is_linear = state[40];\r\n    this.attribute_controller_index = state[41];\r\n    this.offset_register = state[42];\r\n    this.planar_setreset = state[43];\r\n    this.planar_setreset_enable = state[44];\r\n    this.start_address_latched = state[45];\r\n    this.crtc.set(state[46]);\r\n    this.horizontal_display_enable_end = state[47];\r\n    this.horizontal_blank_start = state[48];\r\n    this.vertical_display_enable_end = state[49];\r\n    this.vertical_blank_start = state[50];\r\n    this.underline_location_register = state[51];\r\n    this.preset_row_scan = state[52];\r\n    this.offset_register = state[53];\r\n    this.palette_source = state[54];\r\n    this.attribute_mode = state[55];\r\n    this.color_plane_enable = state[56];\r\n    this.horizontal_panning = state[57];\r\n    this.color_select = state[58];\r\n    this.clocking_mode = state[59];\r\n    this.line_compare = state[60];\r\n    this.dac_mask = state[61];\r\n\r\n    this.bus.send(\"screen-set-mode\", this.graphical_mode);\r\n\r\n    if(this.graphical_mode)\r\n    {\r\n        // Ensure set_size_graphical will update\r\n        this.screen_width = 0;\r\n        this.screen_height = 0;\r\n\r\n        if(this.svga_enabled)\r\n        {\r\n            this.set_size_graphical(this.svga_width, this.svga_height,\r\n                this.svga_bpp, this.svga_width, this.svga_height);\r\n            this.update_layers();\r\n        }\r\n        else\r\n        {\r\n            this.update_vga_size();\r\n            this.complete_replot();\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.set_size_text(this.max_cols, this.max_rows);\r\n        this.update_cursor_scanline();\r\n        this.update_cursor();\r\n    }\r\n    this.complete_redraw();\r\n};\r\n\r\nVGAScreen.prototype.vga_memory_read = function(addr)\r\n{\r\n    if(this.svga_enabled && this.graphical_mode_is_linear)\r\n    {\r\n        addr -= 0xA0000;\r\n        addr |= this.svga_bank_offset;\r\n\r\n        return this.svga_memory[addr];\r\n    }\r\n\r\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\r\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\r\n\r\n    // VGA chip only decodes addresses within the selected memory space.\r\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\r\n    {\r\n        dbg_log(\"vga read outside memory space: addr:\" + h(addr), LOG_VGA);\r\n        return 0;\r\n    }\r\n\r\n    this.latch_dword = this.plane0[addr];\r\n    this.latch_dword |= this.plane1[addr] << 8;\r\n    this.latch_dword |= this.plane2[addr] << 16;\r\n    this.latch_dword |= this.plane3[addr] << 24;\r\n\r\n    if(this.planar_mode & 0x08)\r\n    {\r\n        // read mode 1\r\n        var reading = 0xFF;\r\n\r\n        if(this.color_dont_care & 0x1)\r\n        {\r\n            reading &= this.plane0[addr] ^ ~(this.color_compare & 0x1 ? 0xFF : 0x00);\r\n        }\r\n        if(this.color_dont_care & 0x2)\r\n        {\r\n            reading &= this.plane1[addr] ^ ~(this.color_compare & 0x2 ? 0xFF : 0x00);\r\n        }\r\n        if(this.color_dont_care & 0x4)\r\n        {\r\n            reading &= this.plane2[addr] ^ ~(this.color_compare & 0x4 ? 0xFF : 0x00);\r\n        }\r\n        if(this.color_dont_care & 0x8)\r\n        {\r\n            reading &= this.plane3[addr] ^ ~(this.color_compare & 0x8 ? 0xFF : 0x00);\r\n        }\r\n\r\n        return reading;\r\n    }\r\n    else\r\n    {\r\n        // read mode 0\r\n\r\n        var plane = this.plane_read;\r\n        if(!this.graphical_mode)\r\n        {\r\n            // We currently put all text data linearly\r\n            plane = 0;\r\n        }\r\n        else if(this.sequencer_memory_mode & 0x8)\r\n        {\r\n            // Chain 4\r\n            plane = addr & 0x3;\r\n            addr &= ~0x3;\r\n        }\r\n        else if(this.planar_mode & 0x10)\r\n        {\r\n            // Odd/Even host read\r\n            plane = addr & 0x1;\r\n            addr &= ~0x1;\r\n        }\r\n        return this.vga_memory[plane << 16 | addr];\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.vga_memory_write = function(addr, value)\r\n{\r\n    if(this.svga_enabled && this.graphical_mode && this.graphical_mode_is_linear)\r\n    {\r\n        // vbe banked mode\r\n        addr -= 0xA0000;\r\n        this.vga_memory_write_graphical_linear(addr, value);\r\n        return;\r\n    }\r\n\r\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\r\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\r\n\r\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\r\n    {\r\n        dbg_log(\"vga write outside memory space: addr:\" + h(addr) + \", value:\" + h(value), LOG_VGA);\r\n        return;\r\n    }\r\n\r\n    if(this.graphical_mode)\r\n    {\r\n        this.vga_memory_write_graphical(addr, value);\r\n    }\r\n    else\r\n    {\r\n        if(!(this.plane_write_bm & 0x3))\r\n        {\r\n            // Ignore writes to font planes.\r\n            return;\r\n        }\r\n        this.vga_memory_write_text_mode(addr, value);\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.vga_memory_write_graphical_linear = function(addr, value)\r\n{\r\n    addr |= this.svga_bank_offset;\r\n\r\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\r\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\r\n\r\n    this.svga_memory[addr] = value;\r\n};\r\n\r\nVGAScreen.prototype.vga_memory_write_graphical = function(addr, value)\r\n{\r\n    var plane_dword;\r\n    var write_mode = this.planar_mode & 3;\r\n    var bitmask = this.apply_feed(this.planar_bitmap);\r\n    var setreset_dword = this.apply_expand(this.planar_setreset);\r\n    var setreset_enable_dword = this.apply_expand(this.planar_setreset_enable);\r\n\r\n    // Write modes - see http://www.osdever.net/FreeVGA/vga/graphreg.htm#05\r\n    switch(write_mode)\r\n    {\r\n        case 0:\r\n            value = this.apply_rotate(value);\r\n            plane_dword = this.apply_feed(value);\r\n            plane_dword = this.apply_setreset(plane_dword, setreset_enable_dword);\r\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\r\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\r\n            break;\r\n        case 1:\r\n            plane_dword = this.latch_dword;\r\n            break;\r\n        case 2:\r\n            plane_dword = this.apply_expand(value);\r\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\r\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\r\n            break;\r\n        case 3:\r\n            value = this.apply_rotate(value);\r\n            bitmask &= this.apply_feed(value);\r\n            plane_dword = setreset_dword;\r\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\r\n            break;\r\n    }\r\n\r\n    var plane_select = 0xF;\r\n\r\n    switch(this.sequencer_memory_mode & 0xC)\r\n    {\r\n        // Odd/Even (aka chain 2)\r\n        case 0x0:\r\n            plane_select = 0x5 << (addr & 0x1);\r\n            addr &= ~0x1;\r\n            break;\r\n\r\n        // Chain 4\r\n        // Note: FreeVGA may have mistakenly stated that this bit field is\r\n        // for system read only, yet the IBM Open Source Graphics Programmer's\r\n        // Reference Manual explicitly states \"both read and write\".\r\n        case 0x8:\r\n        case 0xC:\r\n            plane_select = 1 << (addr & 0x3);\r\n            addr &= ~0x3;\r\n            break;\r\n    }\r\n\r\n    // Plane masks take precedence\r\n    // See: http://www.osdever.net/FreeVGA/vga/seqreg.htm#02\r\n    plane_select &= this.plane_write_bm;\r\n\r\n    if(plane_select & 0x1) this.plane0[addr] = (plane_dword >> 0) & 0xFF;\r\n    if(plane_select & 0x2) this.plane1[addr] = (plane_dword >> 8) & 0xFF;\r\n    if(plane_select & 0x4) this.plane2[addr] = (plane_dword >> 16) & 0xFF;\r\n    if(plane_select & 0x8) this.plane3[addr] = (plane_dword >> 24) & 0xFF;\r\n\r\n    var pixel_addr = this.vga_addr_to_pixel(addr);\r\n    this.partial_replot(pixel_addr, pixel_addr + 7);\r\n};\r\n\r\n/**\r\n * Copies data_byte into the four planes, with each plane\r\n * represented by an 8-bit field inside the dword.\r\n * @param {number} data_byte\r\n * @return {number} 32-bit number representing the bytes for each plane.\r\n */\r\nVGAScreen.prototype.apply_feed = function(data_byte)\r\n{\r\n    var dword = data_byte;\r\n    dword |= data_byte << 8;\r\n    dword |= data_byte << 16;\r\n    dword |= data_byte << 24;\r\n    return dword;\r\n};\r\n\r\n/**\r\n * Expands bits 0 to 3 to ocupy bits 0 to 31. Each\r\n * bit is expanded to 0xFF if set or 0x00 if clear.\r\n * @param {number} data_byte\r\n * @return {number} 32-bit number representing the bytes for each plane.\r\n */\r\nVGAScreen.prototype.apply_expand = function(data_byte)\r\n{\r\n    var dword = data_byte & 0x1 ? 0xFF : 0x00;\r\n    dword |= (data_byte & 0x2 ? 0xFF : 0x00) << 8;\r\n    dword |= (data_byte & 0x4 ? 0xFF : 0x00) << 16;\r\n    dword |= (data_byte & 0x8 ? 0xFF : 0x00) << 24;\r\n    return dword;\r\n};\r\n\r\n/**\r\n * Planar Write - Barrel Shifter\r\n * @param {number} data_byte\r\n * @return {number}\r\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading3}\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\r\n */\r\nVGAScreen.prototype.apply_rotate = function(data_byte)\r\n{\r\n    var wrapped = data_byte | (data_byte << 8);\r\n    var count = this.planar_rotate_reg & 0x7;\r\n    var shifted = wrapped >>> count;\r\n    return shifted & 0xFF;\r\n};\r\n\r\n/**\r\n * Planar Write - Set / Reset Circuitry\r\n * @param {number} data_dword\r\n * @param {number} enable_dword\r\n * @return {number}\r\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-03.html#Heading5}\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#00}\r\n */\r\nVGAScreen.prototype.apply_setreset = function(data_dword, enable_dword)\r\n{\r\n    var setreset_dword = this.apply_expand(this.planar_setreset);\r\n    data_dword |= enable_dword & setreset_dword;\r\n    data_dword &= ~enable_dword | setreset_dword;\r\n    return data_dword;\r\n};\r\n\r\n/**\r\n * Planar Write - ALU Unit\r\n * @param {number} data_dword\r\n * @param {number} latch_dword\r\n * @return {number}\r\n * @see {@link http://www.phatcode.net/res/224/files/html/ch24/24-01.html#Heading3}\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\r\n */\r\nVGAScreen.prototype.apply_logical = function(data_dword, latch_dword)\r\n{\r\n    switch(this.planar_rotate_reg & 0x18)\r\n    {\r\n        case 0x08:\r\n            return data_dword & latch_dword;\r\n        case 0x10:\r\n            return data_dword | latch_dword;\r\n        case 0x18:\r\n            return data_dword ^ latch_dword;\r\n    }\r\n    return data_dword;\r\n};\r\n\r\n/**\r\n * Planar Write - Bitmask Unit\r\n * @param {number} data_dword\r\n * @param {number} bitmask_dword\r\n * @return {number}\r\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading2}\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#08}\r\n */\r\nVGAScreen.prototype.apply_bitmask = function(data_dword, bitmask_dword)\r\n{\r\n    var plane_dword = bitmask_dword & data_dword;\r\n    plane_dword |= ~bitmask_dword & this.latch_dword;\r\n    return plane_dword;\r\n};\r\n\r\nVGAScreen.prototype.text_mode_redraw = function()\r\n{\r\n    var addr = this.start_address << 1,\r\n        chr,\r\n        color;\r\n\r\n    for(var row = 0; row < this.max_rows; row++)\r\n    {\r\n        for(var col = 0; col < this.max_cols; col++)\r\n        {\r\n            chr = this.vga_memory[addr];\r\n            color = this.vga_memory[addr | 1];\r\n\r\n            this.bus.send(\"screen-put-char\", [row, col, chr,\r\n                this.vga256_palette[this.dac_mask & this.dac_map[color >> 4 & 0xF]],\r\n                this.vga256_palette[this.dac_mask & this.dac_map[color & 0xF]]]);\r\n\r\n            addr += 2;\r\n        }\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.vga_memory_write_text_mode = function(addr, value)\r\n{\r\n    var memory_start = (addr >> 1) - this.start_address,\r\n        row = memory_start / this.max_cols | 0,\r\n        col = memory_start % this.max_cols,\r\n        chr,\r\n        color;\r\n\r\n    // XXX: Should handle 16 bit write if possible\r\n    if(addr & 1)\r\n    {\r\n        color = value;\r\n        chr = this.vga_memory[addr & ~1];\r\n    }\r\n    else\r\n    {\r\n        chr = value;\r\n        color = this.vga_memory[addr | 1];\r\n    }\r\n\r\n    this.bus.send(\"screen-put-char\", [row, col, chr,\r\n        this.vga256_palette[this.dac_mask & this.dac_map[color >> 4 & 0xF]],\r\n        this.vga256_palette[this.dac_mask & this.dac_map[color & 0xF]]]);\r\n\r\n    this.vga_memory[addr] = value;\r\n};\r\n\r\nVGAScreen.prototype.update_cursor = function()\r\n{\r\n    var row = (this.cursor_address - this.start_address) / this.max_cols | 0,\r\n        col = (this.cursor_address - this.start_address) % this.max_cols;\r\n\r\n    row = Math.min(this.max_rows - 1, row);\r\n\r\n    this.bus.send(\"screen-update-cursor\", [row, col]);\r\n};\r\n\r\nVGAScreen.prototype.svga_memory_read8 = function(addr)\r\n{\r\n    return this.svga_memory[addr & 0xFFFFFFF];\r\n};\r\n\r\nVGAScreen.prototype.svga_memory_read32 = function(addr)\r\n{\r\n    addr &= 0xFFFFFFF;\r\n\r\n    if(addr & 3)\r\n    {\r\n        return this.svga_memory[addr] | this.svga_memory[addr + 1] << 8 |\r\n               this.svga_memory[addr + 2] << 16 | this.svga_memory[addr + 3] << 24;\r\n    }\r\n    else\r\n    {\r\n        return this.svga_memory32[addr >> 2];\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.svga_memory_write8 = function(addr, value)\r\n{\r\n    addr &= 0xFFFFFFF;\r\n    this.svga_memory[addr] = value;\r\n\r\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\r\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\r\n};\r\n\r\nVGAScreen.prototype.svga_memory_write32 = function(addr, value)\r\n{\r\n    addr &= 0xFFFFFFF;\r\n\r\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\r\n    this.diff_addr_max = addr + 3 > this.diff_addr_max ? addr + 3 : this.diff_addr_max;\r\n\r\n    this.svga_memory[addr] = value;\r\n    this.svga_memory[addr + 1] = value >> 8;\r\n    this.svga_memory[addr + 2] = value >> 16;\r\n    this.svga_memory[addr + 3] = value >> 24;\r\n};\r\n\r\nVGAScreen.prototype.complete_redraw = function()\r\n{\r\n    dbg_log(\"complete redraw\", LOG_VGA);\r\n\r\n    if(this.graphical_mode)\r\n    {\r\n        this.diff_addr_min = 0;\r\n\r\n        if(this.svga_enabled)\r\n        {\r\n            this.diff_addr_max = this.vga_memory_size;\r\n        }\r\n        else\r\n        {\r\n            this.diff_addr_max = VGA_PIXEL_BUFFER_SIZE;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        this.text_mode_redraw();\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.complete_replot = function()\r\n{\r\n    dbg_log(\"complete replot\", LOG_VGA);\r\n\r\n    if(!this.graphical_mode || this.svga_enabled)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.diff_plot_min = 0;\r\n    this.diff_plot_max = VGA_PIXEL_BUFFER_SIZE;\r\n\r\n    this.complete_redraw();\r\n};\r\n\r\nVGAScreen.prototype.partial_redraw = function(min, max)\r\n{\r\n    if(min < this.diff_addr_min) this.diff_addr_min = min;\r\n    if(max > this.diff_addr_max) this.diff_addr_max = max;\r\n};\r\n\r\nVGAScreen.prototype.partial_replot = function(min, max)\r\n{\r\n    if(min < this.diff_plot_min) this.diff_plot_min = min;\r\n    if(max > this.diff_plot_max) this.diff_plot_max = max;\r\n\r\n    this.partial_redraw(min, max);\r\n};\r\n\r\nVGAScreen.prototype.reset_diffs = function()\r\n{\r\n    this.diff_addr_min = this.vga_memory_size;\r\n    this.diff_addr_max = 0;\r\n    this.diff_plot_min = this.vga_memory_size;\r\n    this.diff_plot_max = 0;\r\n};\r\n\r\nVGAScreen.prototype.destroy = function()\r\n{\r\n\r\n};\r\n\r\nVGAScreen.prototype.vga_bytes_per_line = function()\r\n{\r\n    var bytes_per_line = this.offset_register << 2;\r\n    if(this.underline_location_register & 0x40) bytes_per_line <<= 1;\r\n    else if(this.crtc_mode & 0x40) bytes_per_line >>>= 1;\r\n    return bytes_per_line;\r\n};\r\n\r\nVGAScreen.prototype.vga_addr_shift_count = function()\r\n{\r\n    // Count in multiples of 0x40 for convenience\r\n    // Left shift 2 for word mode - 2 bytes per dot clock\r\n    var shift_count = 0x80;\r\n\r\n    // Left shift 3 for byte mode - 1 byte per dot clock\r\n    shift_count += ~this.underline_location_register & this.crtc_mode & 0x40;\r\n\r\n    // Left shift 1 for doubleword mode - 4 bytes per dot clock\r\n    shift_count -= this.underline_location_register & 0x40;\r\n\r\n    // But shift one less if PEL width mode - 2 dot clocks per pixel\r\n    shift_count -= this.attribute_mode & 0x40;\r\n\r\n    return shift_count >>> 6;\r\n};\r\n\r\nVGAScreen.prototype.vga_addr_to_pixel = function(addr)\r\n{\r\n    var shift_count = this.vga_addr_shift_count();\r\n\r\n    // Undo effects of substituted bits 13 and 14\r\n    // Assumptions:\r\n    //  - max_scan_line register is set to the values shown below\r\n    //  - Each scan line stays within the offset alignment\r\n    //  - No panning and no page flipping after drawing\r\n    if(~this.crtc_mode & 0x3)\r\n    {\r\n        var pixel_addr = addr - this.start_address;\r\n\r\n        // Remove substituted bits\r\n        pixel_addr &= this.crtc_mode << 13 | ~0x6000;\r\n\r\n        // Convert to 1 pixel per address\r\n        pixel_addr <<= shift_count;\r\n\r\n        // Decompose address\r\n        var row = pixel_addr / this.virtual_width | 0;\r\n        var col = pixel_addr % this.virtual_width;\r\n\r\n        switch(this.crtc_mode & 0x3)\r\n        {\r\n            case 0x2:\r\n                // Alternating rows using bit 13\r\n                // Assumes max scan line = 1\r\n                row = row << 1 | (addr >> 13 & 0x1);\r\n                break;\r\n            case 0x1:\r\n                // Alternating rows using bit 14\r\n                // Assumes max scan line = 3\r\n                row = row << 1 | (addr >> 14 & 0x1);\r\n                break;\r\n            case 0x0:\r\n                // Cycling through rows using bit 13 and 14\r\n                // Assumes max scan line = 3\r\n                row = row << 2 | (addr >> 13 & 0x3);\r\n                break;\r\n        }\r\n\r\n        // Reassemble address\r\n        return row * this.virtual_width + col + (this.start_address << shift_count);\r\n    }\r\n    else\r\n    {\r\n        // Convert to 1 pixel per address\r\n        return addr << shift_count;\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.scan_line_to_screen_row = function(scan_line)\r\n{\r\n    // Double scanning. The clock to the row scan counter is halved\r\n    // so it is not affected by the memory address bit substitutions below\r\n    if(this.max_scan_line & 0x80)\r\n    {\r\n        scan_line >>>= 1;\r\n    }\r\n\r\n    // Maximum scan line, aka scan lines per character row\r\n    // This is the number of repeats - 1 for graphic modes\r\n    var repeat_factor = 1 + (this.max_scan_line & 0x1F);\r\n    scan_line = Math.ceil(scan_line / repeat_factor);\r\n\r\n    // Odd and Even Row Scan Counter\r\n    // Despite repeated address counter values, because bit 13 of the shifted\r\n    // address is substituted with bit 0 of the row scan counter, a different\r\n    // display buffer address is generated instead of repeated\r\n    // Assumes maximum scan line register is set to 2 or 4.\r\n    // Note: can't assert this as register values may not be fully programmed.\r\n    if(!(this.crtc_mode & 0x1))\r\n    {\r\n        scan_line <<= 1;\r\n    }\r\n\r\n    // Undo effects of substituted bit 14\r\n    // Assumes maximum scan line register is set to 2 or 4\r\n    // Note: can't assert this as register values may not be fully programmed.\r\n    // Other maximum scan line register values would result in weird addressing\r\n    // anyway\r\n    if(!(this.crtc_mode & 0x2))\r\n    {\r\n        scan_line <<= 1;\r\n    }\r\n\r\n    return scan_line;\r\n};\r\n\r\n/**\r\n * @param {number} cols_count\r\n * @param {number} rows_count\r\n */\r\nVGAScreen.prototype.set_size_text = function(cols_count, rows_count)\r\n{\r\n    this.max_cols = cols_count;\r\n    this.max_rows = rows_count;\r\n\r\n    this.bus.send(\"screen-set-size-text\", [cols_count, rows_count]);\r\n};\r\n\r\nVGAScreen.prototype.set_size_graphical = function(width, height, bpp, virtual_width, virtual_height)\r\n{\r\n    var needs_update = !this.stats.is_graphical ||\r\n        this.stats.bpp !== bpp ||\r\n        this.screen_width !== width ||\r\n        this.screen_height !== height ||\r\n        this.virtual_width !== virtual_width ||\r\n        this.virtual_height !== virtual_height;\r\n\r\n    if(needs_update)\r\n    {\r\n        this.screen_width = width;\r\n        this.screen_height = height;\r\n        this.virtual_width = virtual_width;\r\n        this.virtual_height = virtual_height;\r\n\r\n        this.stats.bpp = bpp;\r\n        this.stats.is_graphical = true;\r\n        this.stats.res_x = width;\r\n        this.stats.res_y = height;\r\n\r\n        this.bus.send(\"screen-set-size-graphical\", [width, height, virtual_width, virtual_height, bpp]);\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.update_vga_size = function()\r\n{\r\n    if(this.svga_enabled)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var horizontal_characters = Math.min(1 + this.horizontal_display_enable_end,\r\n        this.horizontal_blank_start);\r\n    var vertical_scans = Math.min(1 + this.vertical_display_enable_end,\r\n        this.vertical_blank_start);\r\n\r\n    if(!horizontal_characters || !vertical_scans)\r\n    {\r\n        // Don't update if width or height is zero.\r\n        // These happen when registers are not fully configured yet.\r\n        return;\r\n    }\r\n\r\n    if(this.graphical_mode)\r\n    {\r\n        var screen_width = horizontal_characters << 3;\r\n\r\n        // Offset is half the number of bytes/words/dwords (depending on clocking mode)\r\n        // of display memory that each logical line occupies.\r\n        // However, the number of pixels latched, regardless of addressing mode,\r\n        // should always 8 pixels per character clock (except for 8 bit PEL width, in which\r\n        // case 4 pixels).\r\n        var virtual_width = this.offset_register << 4;\r\n\r\n        // Pixel Width / PEL Width / Clock Select\r\n        if(this.attribute_mode & 0x40)\r\n        {\r\n            screen_width >>>= 1;\r\n            virtual_width >>>= 1;\r\n        }\r\n\r\n        var screen_height = this.scan_line_to_screen_row(vertical_scans);\r\n\r\n        // The virtual buffer height is however many rows of data that can fit.\r\n        // Previously drawn graphics outside of current memory address space can\r\n        // still be drawn by setting start_address. The address at\r\n        // VGA_HOST_MEMORY_SPACE_START[memory_space_select] is mapped to the first\r\n        // byte of the frame buffer. Verified on some hardware.\r\n        // Depended on by: Windows 98 start screen\r\n        var available_bytes = VGA_HOST_MEMORY_SPACE_SIZE[0];\r\n\r\n        var virtual_height = Math.ceil(available_bytes / this.vga_bytes_per_line());\r\n\r\n        this.set_size_graphical(screen_width, screen_height, 8,\r\n            virtual_width, virtual_height);\r\n\r\n        this.update_vertical_retrace();\r\n        this.update_layers();\r\n    }\r\n    else\r\n    {\r\n        if(this.max_scan_line & 0x80)\r\n        {\r\n            // Double scanning means that half of those scan lines\r\n            // are just repeats\r\n            vertical_scans >>>= 1;\r\n        }\r\n\r\n        var height = vertical_scans / (1 + (this.max_scan_line & 0x1F)) | 0;\r\n\r\n        if(horizontal_characters && height)\r\n        {\r\n            this.set_size_text(horizontal_characters, height);\r\n        }\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.update_layers = function()\r\n{\r\n    if(!this.graphical_mode)\r\n    {\r\n        this.text_mode_redraw();\r\n    }\r\n\r\n    if(this.svga_enabled)\r\n    {\r\n        this.layers = [];\r\n        return;\r\n    }\r\n\r\n    if(!this.virtual_width || !this.screen_width)\r\n    {\r\n        // Avoid division by zero\r\n        return;\r\n    }\r\n\r\n    if(!this.palette_source || (this.clocking_mode & 0x20))\r\n    {\r\n        // Palette source and screen disable bits = draw nothing\r\n        // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\r\n        // and http://www.osdever.net/FreeVGA/vga/seqreg.htm#01\r\n        this.layers = [];\r\n        this.bus.send(\"screen-clear\");\r\n        return;\r\n    }\r\n\r\n    var start_addr = this.start_address_latched;\r\n\r\n    var pixel_panning = this.horizontal_panning;\r\n    if(this.attribute_mode & 0x40)\r\n    {\r\n        pixel_panning >>>= 1;\r\n    }\r\n\r\n    var byte_panning = this.preset_row_scan >> 5 & 0x3;\r\n    var pixel_addr_start = this.vga_addr_to_pixel(start_addr + byte_panning);\r\n\r\n    var start_buffer_row = pixel_addr_start / this.virtual_width | 0;\r\n    var start_buffer_col = pixel_addr_start % this.virtual_width + pixel_panning;\r\n\r\n    var split_screen_row = this.scan_line_to_screen_row(1 + this.line_compare);\r\n    split_screen_row = Math.min(split_screen_row, this.screen_height);\r\n\r\n    var split_buffer_height = this.screen_height - split_screen_row;\r\n\r\n    this.layers = [];\r\n\r\n    for(var x = -start_buffer_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\r\n    {\r\n        this.layers.push({\r\n            screen_x: x,\r\n            screen_y: 0,\r\n            buffer_x: 0,\r\n            buffer_y: start_buffer_row + y,\r\n            buffer_width: this.virtual_width,\r\n            buffer_height: split_screen_row,\r\n        });\r\n    }\r\n\r\n    var start_split_col = 0;\r\n    if(!(this.attribute_mode & 0x20))\r\n    {\r\n        // Pixel panning mode. Allow panning for the lower split screen\r\n        start_split_col = this.vga_addr_to_pixel(byte_panning) + pixel_panning;\r\n    }\r\n\r\n    for(var x = -start_split_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\r\n    {\r\n        this.layers.push({\r\n            screen_x: x,\r\n            screen_y: split_screen_row,\r\n            buffer_x: 0,\r\n            buffer_y: y,\r\n            buffer_width: this.virtual_width,\r\n            buffer_height: split_buffer_height,\r\n        });\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.update_vertical_retrace = function()\r\n{\r\n    // Emulate behaviour during VSync/VRetrace\r\n    this.port_3DA_value |= 0x8;\r\n    if(this.start_address_latched !== this.start_address)\r\n    {\r\n        this.start_address_latched = this.start_address;\r\n        this.update_layers();\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.update_cursor_scanline = function()\r\n{\r\n    this.bus.send(\"screen-update-cursor-scanline\", [this.cursor_scanline_start, this.cursor_scanline_end]);\r\n};\r\n\r\n/**\r\n * Attribute controller register / index write\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/attrreg.htm}\r\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 89\r\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 48\r\n */\r\nVGAScreen.prototype.port3C0_write = function(value)\r\n{\r\n    if(this.attribute_controller_index === -1)\r\n    {\r\n        dbg_log(\"attribute controller index register: \" + h(value), LOG_VGA);\r\n        this.attribute_controller_index = value & 0x1F;\r\n        dbg_log(\"attribute actual index: \" + h(this.attribute_controller_index), LOG_VGA);\r\n\r\n        if(this.palette_source !== (value & 0x20))\r\n        {\r\n            // A method of blanking the screen.\r\n            // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\r\n            this.palette_source = value & 0x20;\r\n            this.update_layers();\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if(this.attribute_controller_index < 0x10)\r\n        {\r\n            dbg_log(\"internal palette: \" + h(this.attribute_controller_index) + \" -> \" + h(value), LOG_VGA);\r\n            this.dac_map[this.attribute_controller_index] = value;\r\n\r\n            if(!(this.attribute_mode & 0x40))\r\n            {\r\n                this.complete_redraw();\r\n            }\r\n        }\r\n        else\r\n        switch(this.attribute_controller_index)\r\n        {\r\n            case 0x10:\r\n                dbg_log(\"3C0 / attribute mode control: \" + h(value), LOG_VGA);\r\n                if(this.attribute_mode !== value)\r\n                {\r\n                    var previous_mode = this.attribute_mode;\r\n                    this.attribute_mode = value;\r\n\r\n                    var is_graphical = (value & 0x1) > 0;\r\n                    if(!this.svga_enabled && this.graphical_mode !== is_graphical)\r\n                    {\r\n                        this.graphical_mode = is_graphical;\r\n                        this.bus.send(\"screen-set-mode\", this.graphical_mode);\r\n                    }\r\n\r\n                    if((previous_mode ^ value) & 0x40)\r\n                    {\r\n                        // PEL width changed. Pixel Buffer now invalidated\r\n                        this.complete_replot();\r\n                    }\r\n\r\n                    this.update_vga_size();\r\n\r\n                    // Data stored in image buffer are invalidated\r\n                    this.complete_redraw();\r\n                }\r\n                break;\r\n            case 0x12:\r\n                dbg_log(\"3C0 / color plane enable: \" + h(value), LOG_VGA);\r\n                if(this.color_plane_enable !== value)\r\n                {\r\n                    this.color_plane_enable = value;\r\n\r\n                    // Data stored in image buffer are invalidated\r\n                    this.complete_redraw();\r\n                }\r\n                break;\r\n            case 0x13:\r\n                dbg_log(\"3C0 / horizontal panning: \" + h(value), LOG_VGA);\r\n                if(this.horizontal_panning !== value)\r\n                {\r\n                    this.horizontal_panning = value & 0xF;\r\n                    this.update_layers();\r\n                }\r\n                break;\r\n            case 0x14:\r\n                dbg_log(\"3C0 / color select: \" + h(value), LOG_VGA);\r\n                if(this.color_select !== value)\r\n                {\r\n                    this.color_select = value;\r\n\r\n                    // Data stored in image buffer are invalidated\r\n                    this.complete_redraw();\r\n                }\r\n                break;\r\n            default:\r\n                dbg_log(\"3C0 / attribute controller write \" + h(this.attribute_controller_index) + \": \" + h(value), LOG_VGA);\r\n        }\r\n\r\n        this.attribute_controller_index = -1;\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.port3C0_read = function()\r\n{\r\n    dbg_log(\"3C0 read\", LOG_VGA);\r\n    var result = this.attribute_controller_index | this.palette_source;\r\n    return result;\r\n};\r\n\r\nVGAScreen.prototype.port3C0_read16 = function()\r\n{\r\n    dbg_log(\"3C0 read16\", LOG_VGA);\r\n    return this.port3C0_read() & 0xFF | this.port3C1_read() << 8 & 0xFF00;\r\n};\r\n\r\nVGAScreen.prototype.port3C1_read = function()\r\n{\r\n    if(this.attribute_controller_index < 0x10)\r\n    {\r\n        dbg_log(\"3C1 / internal palette read: \" + h(this.attribute_controller_index) +\r\n            \" -> \" + h(this.dac_map[this.attribute_controller_index]), LOG_VGA);\r\n        return this.dac_map[this.attribute_controller_index];\r\n    }\r\n\r\n    switch(this.attribute_controller_index)\r\n    {\r\n        case 0x10:\r\n            dbg_log(\"3C1 / attribute mode read: \" + h(this.attribute_mode), LOG_VGA);\r\n            return this.attribute_mode;\r\n        case 0x12:\r\n            dbg_log(\"3C1 / color plane enable read: \" + h(this.color_plane_enable), LOG_VGA);\r\n            return this.color_plane_enable;\r\n        case 0x13:\r\n            dbg_log(\"3C1 / horizontal panning read: \" + h(this.horizontal_panning), LOG_VGA);\r\n            return this.horizontal_panning;\r\n        case 0x14:\r\n            dbg_log(\"3C1 / color select read: \" + h(this.color_select), LOG_VGA);\r\n            return this.color_select;\r\n        default:\r\n            dbg_log(\"3C1 / attribute controller read \" + h(this.attribute_controller_index), LOG_VGA);\r\n    }\r\n    return -1;\r\n\r\n};\r\n\r\nVGAScreen.prototype.port3C2_write = function(value)\r\n{\r\n    dbg_log(\"3C2 / miscellaneous output register = \" + h(value), LOG_VGA);\r\n    this.miscellaneous_output_register = value;\r\n};\r\n\r\nVGAScreen.prototype.port3C4_write = function(value)\r\n{\r\n    this.sequencer_index = value;\r\n};\r\n\r\nVGAScreen.prototype.port3C4_read = function()\r\n{\r\n    return this.sequencer_index;\r\n};\r\n\r\n/**\r\n * Sequencer register writes\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/seqreg.htm}\r\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 47\r\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 19\r\n */\r\nVGAScreen.prototype.port3C5_write = function(value)\r\n{\r\n    switch(this.sequencer_index)\r\n    {\r\n        case 0x01:\r\n            dbg_log(\"clocking mode: \" + h(value), LOG_VGA);\r\n            var previous_clocking_mode = this.clocking_mode;\r\n            this.clocking_mode = value;\r\n            if((previous_clocking_mode ^ value) & 0x20)\r\n            {\r\n                // Screen disable bit modified\r\n                this.update_layers();\r\n            }\r\n            break;\r\n        case 0x02:\r\n            dbg_log(\"plane write mask: \" + h(value), LOG_VGA);\r\n            this.plane_write_bm = value;\r\n            break;\r\n        case 0x04:\r\n            dbg_log(\"sequencer memory mode: \" + h(value), LOG_VGA);\r\n            this.sequencer_memory_mode = value;\r\n            break;\r\n        default:\r\n            dbg_log(\"3C5 / sequencer write \" + h(this.sequencer_index) + \": \" + h(value), LOG_VGA);\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.port3C5_read = function()\r\n{\r\n    dbg_log(\"3C5 / sequencer read \" + h(this.sequencer_index), LOG_VGA);\r\n\r\n    switch(this.sequencer_index)\r\n    {\r\n        case 0x01:\r\n            return this.clocking_mode;\r\n        case 0x02:\r\n            return this.plane_write_bm;\r\n        case 0x04:\r\n            return this.sequencer_memory_mode;\r\n        case 0x06:\r\n            return 0x12;\r\n        default:\r\n    }\r\n    return 0;\r\n};\r\n\r\nVGAScreen.prototype.port3C6_write = function(data)\r\n{\r\n    this.dac_mask = data;\r\n};\r\n\r\nVGAScreen.prototype.port3C6_read = function()\r\n{\r\n    return this.dac_mask;\r\n};\r\n\r\nVGAScreen.prototype.port3C7_write = function(index)\r\n{\r\n    // index for reading the DAC\r\n    dbg_log(\"3C7 write: \" + h(index), LOG_VGA);\r\n    this.dac_color_index_read = index * 3;\r\n    this.dac_state &= 0x0;\r\n};\r\n\r\nVGAScreen.prototype.port3C7_read = function()\r\n{\r\n    // prepared to accept reads or writes\r\n    return this.dac_state;\r\n};\r\n\r\nVGAScreen.prototype.port3C8_write = function(index)\r\n{\r\n    this.dac_color_index_write = index * 3;\r\n    this.dac_state |= 0x3;\r\n};\r\n\r\nVGAScreen.prototype.port3C8_read = function()\r\n{\r\n    return this.dac_color_index_write / 3 | 0;\r\n};\r\n\r\n/**\r\n * DAC color palette register writes\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/colorreg.htm}\r\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 104\r\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 57\r\n */\r\nVGAScreen.prototype.port3C9_write = function(color_byte)\r\n{\r\n    var index = this.dac_color_index_write / 3 | 0,\r\n        offset = this.dac_color_index_write % 3,\r\n        color = this.vga256_palette[index];\r\n\r\n    if((this.dispi_enable_value & 0x20) === 0)\r\n    {\r\n        color_byte &= 0x3F;\r\n        const b = color_byte & 1;\r\n        color_byte = color_byte << 2 | b << 1 | b;\r\n    }\r\n\r\n    if(offset === 0)\r\n    {\r\n        color = color & ~0xFF0000 | color_byte << 16;\r\n    }\r\n    else if(offset === 1)\r\n    {\r\n        color = color & ~0xFF00 | color_byte << 8;\r\n    }\r\n    else\r\n    {\r\n        color = color & ~0xFF | color_byte;\r\n        dbg_log(\"dac set color, index=\" + h(index) + \" value=\" + h(color), LOG_VGA);\r\n    }\r\n\r\n    if(this.vga256_palette[index] !== color)\r\n    {\r\n        this.vga256_palette[index] = color;\r\n        this.complete_redraw();\r\n    }\r\n    this.dac_color_index_write++;\r\n};\r\n\r\nVGAScreen.prototype.port3C9_read = function()\r\n{\r\n    dbg_log(\"3C9 read\", LOG_VGA);\r\n\r\n    var index = this.dac_color_index_read / 3 | 0;\r\n    var offset = this.dac_color_index_read % 3;\r\n    var color = this.vga256_palette[index];\r\n    var color8 = color >> (2 - offset) * 8 & 0xFF;\r\n\r\n    this.dac_color_index_read++;\r\n\r\n    if(this.dispi_enable_value & 0x20)\r\n    {\r\n        return color8;\r\n    }\r\n    else\r\n    {\r\n        return color8 >> 2;\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.port3CC_read = function()\r\n{\r\n    dbg_log(\"3CC read\", LOG_VGA);\r\n    return this.miscellaneous_output_register;\r\n};\r\n\r\nVGAScreen.prototype.port3CE_write = function(value)\r\n{\r\n    this.graphics_index = value;\r\n};\r\n\r\nVGAScreen.prototype.port3CE_read = function()\r\n{\r\n    return this.graphics_index;\r\n};\r\n\r\n/**\r\n * Graphics controller register writes\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm}\r\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 78\r\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 29\r\n */\r\nVGAScreen.prototype.port3CF_write = function(value)\r\n{\r\n    switch(this.graphics_index)\r\n    {\r\n        case 0:\r\n            this.planar_setreset = value;\r\n            dbg_log(\"plane set/reset: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 1:\r\n            this.planar_setreset_enable = value;\r\n            dbg_log(\"plane set/reset enable: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 2:\r\n            this.color_compare = value;\r\n            dbg_log(\"color compare: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 3:\r\n            this.planar_rotate_reg = value;\r\n            dbg_log(\"plane rotate: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 4:\r\n            this.plane_read = value;\r\n            dbg_log(\"plane read: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 5:\r\n            var previous_planar_mode = this.planar_mode;\r\n            this.planar_mode = value;\r\n            dbg_log(\"planar mode: \" + h(value), LOG_VGA);\r\n            if((previous_planar_mode ^ value) & 0x60)\r\n            {\r\n                // Shift mode modified. Pixel buffer invalidated\r\n                this.complete_replot();\r\n            }\r\n            break;\r\n        case 6:\r\n            dbg_log(\"miscellaneous graphics register: \" + h(value), LOG_VGA);\r\n            if(this.miscellaneous_graphics_register !== value)\r\n            {\r\n                this.miscellaneous_graphics_register = value;\r\n                this.update_vga_size();\r\n            }\r\n            break;\r\n        case 7:\r\n            this.color_dont_care = value;\r\n            dbg_log(\"color don't care: \" + h(value), LOG_VGA);\r\n            break;\r\n        case 8:\r\n            this.planar_bitmap = value;\r\n            dbg_log(\"planar bitmap: \" + h(value), LOG_VGA);\r\n            break;\r\n        default:\r\n            dbg_log(\"3CF / graphics write \" + h(this.graphics_index) + \": \" + h(value), LOG_VGA);\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.port3CF_read = function()\r\n{\r\n    dbg_log(\"3CF / graphics read \" + h(this.graphics_index), LOG_VGA);\r\n\r\n    switch(this.graphics_index)\r\n    {\r\n        case 0:\r\n            return this.planar_setreset;\r\n        case 1:\r\n            return this.planar_setreset_enable;\r\n        case 2:\r\n            return this.color_compare;\r\n        case 3:\r\n            return this.planar_rotate_reg;\r\n        case 4:\r\n            return this.plane_read;\r\n        case 5:\r\n            return this.planar_mode;\r\n        case 6:\r\n            return this.miscellaneous_graphics_register;\r\n        case 7:\r\n            return this.color_dont_care;\r\n        case 8:\r\n            return this.planar_bitmap;\r\n        default:\r\n    }\r\n    return 0;\r\n};\r\n\r\nVGAScreen.prototype.port3D4_write = function(register)\r\n{\r\n    dbg_log(\"3D4 / crtc index: \" + register, LOG_VGA);\r\n    this.index_crtc = register;\r\n};\r\n\r\nVGAScreen.prototype.port3D4_read = function()\r\n{\r\n    dbg_log(\"3D4 read / crtc index: \" + this.index_crtc, LOG_VGA);\r\n    return this.index_crtc;\r\n};\r\n\r\n/**\r\n * CRT controller register writes\r\n * @see {@link http://www.osdever.net/FreeVGA/vga/crtcreg.htm}\r\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 55\r\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 63\r\n */\r\nVGAScreen.prototype.port3D5_write = function(value)\r\n{\r\n    switch(this.index_crtc)\r\n    {\r\n        case 0x1:\r\n            dbg_log(\"3D5 / hdisp enable end write: \" + h(value), LOG_VGA);\r\n            if(this.horizontal_display_enable_end !== value)\r\n            {\r\n                this.horizontal_display_enable_end = value;\r\n                this.update_vga_size();\r\n            }\r\n            break;\r\n        case 0x2:\r\n            if(this.horizontal_blank_start !== value)\r\n            {\r\n                this.horizontal_blank_start = value;\r\n                this.update_vga_size();\r\n            }\r\n            break;\r\n        case 0x7:\r\n            dbg_log(\"3D5 / overflow register write: \" + h(value), LOG_VGA);\r\n            var previous_vertical_display_enable_end = this.vertical_display_enable_end;\r\n            this.vertical_display_enable_end &= 0xFF;\r\n            this.vertical_display_enable_end |= (value << 3 & 0x200) | (value << 7 & 0x100);\r\n            if(previous_vertical_display_enable_end != this.vertical_display_enable_end)\r\n            {\r\n                this.update_vga_size();\r\n            }\r\n            this.line_compare = (this.line_compare & 0x2FF) | (value << 4 & 0x100);\r\n\r\n            var previous_vertical_blank_start = this.vertical_blank_start;\r\n            this.vertical_blank_start = (this.vertical_blank_start & 0x2FF) | (value << 5 & 0x100);\r\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\r\n            {\r\n                this.update_vga_size();\r\n            }\r\n            this.update_layers();\r\n            break;\r\n        case 0x8:\r\n            dbg_log(\"3D5 / preset row scan write: \" + h(value), LOG_VGA);\r\n            this.preset_row_scan = value;\r\n            this.update_layers();\r\n            break;\r\n        case 0x9:\r\n            dbg_log(\"3D5 / max scan line write: \" + h(value), LOG_VGA);\r\n            this.max_scan_line = value;\r\n            this.line_compare = (this.line_compare & 0x1FF) | (value << 3 & 0x200);\r\n\r\n            var previous_vertical_blank_start = this.vertical_blank_start;\r\n            this.vertical_blank_start = (this.vertical_blank_start & 0x1FF) | (value << 4 & 0x200);\r\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\r\n            {\r\n                this.update_vga_size();\r\n            }\r\n\r\n            this.update_layers();\r\n            break;\r\n        case 0xA:\r\n            dbg_log(\"3D5 / cursor scanline start write: \" + h(value), LOG_VGA);\r\n            this.cursor_scanline_start = value;\r\n            this.update_cursor_scanline();\r\n            break;\r\n        case 0xB:\r\n            dbg_log(\"3D5 / cursor scanline end write: \" + h(value), LOG_VGA);\r\n            this.cursor_scanline_end = value;\r\n            this.update_cursor_scanline();\r\n            break;\r\n        case 0xC:\r\n            if((this.start_address >> 8 & 0xFF) !== value)\r\n            {\r\n                this.start_address = this.start_address & 0xff | value << 8;\r\n                this.update_layers();\r\n                if(~this.crtc_mode &  0x3)\r\n                {\r\n                    // Address substitution implementation depends on the\r\n                    // starting row and column, so the pixel buffer is invalidated.\r\n                    this.complete_replot();\r\n                }\r\n            }\r\n            dbg_log(\"3D5 / start addr hi write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\r\n            break;\r\n        case 0xD:\r\n            if((this.start_address & 0xFF) !== value)\r\n            {\r\n                this.start_address = this.start_address & 0xff00 | value;\r\n                this.update_layers();\r\n                if(~this.crtc_mode &  0x3)\r\n                {\r\n                    // Address substitution implementation depends on the\r\n                    // starting row and column, so the pixel buffer is invalidated.\r\n                    this.complete_replot();\r\n                }\r\n            }\r\n            dbg_log(\"3D5 / start addr lo write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\r\n            break;\r\n        case 0xE:\r\n            dbg_log(\"3D5 / cursor address hi write: \" + h(value), LOG_VGA);\r\n            this.cursor_address = this.cursor_address & 0xFF | value << 8;\r\n            this.update_cursor();\r\n            break;\r\n        case 0xF:\r\n            dbg_log(\"3D5 / cursor address lo write: \" + h(value), LOG_VGA);\r\n            this.cursor_address = this.cursor_address & 0xFF00 | value;\r\n            this.update_cursor();\r\n            break;\r\n        case 0x12:\r\n            dbg_log(\"3D5 / vdisp enable end write: \" + h(value), LOG_VGA);\r\n            if((this.vertical_display_enable_end & 0xFF) !== value)\r\n            {\r\n                this.vertical_display_enable_end = (this.vertical_display_enable_end & 0x300) | value;\r\n                this.update_vga_size();\r\n            }\r\n            break;\r\n        case 0x13:\r\n            dbg_log(\"3D5 / offset register write: \" + h(value), LOG_VGA);\r\n            if(this.offset_register !== value)\r\n            {\r\n                this.offset_register = value;\r\n                this.update_vga_size();\r\n\r\n                if(~this.crtc_mode & 0x3)\r\n                {\r\n                    // Address substitution implementation depends on the\r\n                    // virtual width, so the pixel buffer is invalidated.\r\n                    this.complete_replot();\r\n                }\r\n            }\r\n            break;\r\n        case 0x14:\r\n            dbg_log(\"3D5 / underline location write: \" + h(value), LOG_VGA);\r\n            if(this.underline_location_register !== value)\r\n            {\r\n                var previous_underline = this.underline_location_register;\r\n\r\n                this.underline_location_register = value;\r\n                this.update_vga_size();\r\n\r\n                if((previous_underline ^ value) & 0x40)\r\n                {\r\n                    // Doubleword addressing changed. Pixel buffer invalidated.\r\n                    this.complete_replot();\r\n                }\r\n            }\r\n            break;\r\n        case 0x15:\r\n            dbg_log(\"3D5 / vertical blank start write: \" + h(value), LOG_VGA);\r\n            if((this.vertical_blank_start & 0xFF) !== value)\r\n            {\r\n                this.vertical_blank_start = (this.vertical_blank_start & 0x300) | value;\r\n                this.update_vga_size();\r\n            }\r\n            break;\r\n        case 0x17:\r\n            dbg_log(\"3D5 / crtc mode write: \" + h(value), LOG_VGA);\r\n            if(this.crtc_mode !== value)\r\n            {\r\n                var previous_mode = this.crtc_mode;\r\n\r\n                this.crtc_mode = value;\r\n                this.update_vga_size();\r\n\r\n                if((previous_mode ^ value) & 0x43)\r\n                {\r\n                    // Word/byte addressing changed or address substitution changed.\r\n                    // Pixel buffer invalidated.\r\n                    this.complete_replot();\r\n                }\r\n            }\r\n            break;\r\n        case 0x18:\r\n            dbg_log(\"3D5 / line compare write: \" + h(value), LOG_VGA);\r\n            this.line_compare = (this.line_compare & 0x300) | value;\r\n            this.update_layers();\r\n            break;\r\n        default:\r\n            if(this.index_crtc < this.crtc.length)\r\n            {\r\n                this.crtc[this.index_crtc] = value;\r\n            }\r\n            dbg_log(\"3D5 / CRTC write \" + h(this.index_crtc) + \": \" + h(value), LOG_VGA);\r\n    }\r\n\r\n};\r\n\r\nVGAScreen.prototype.port3D5_read = function()\r\n{\r\n    dbg_log(\"3D5 read \" + h(this.index_crtc), LOG_VGA);\r\n\r\n    switch(this.index_crtc)\r\n    {\r\n        case 0x1:\r\n            return this.horizontal_display_enable_end;\r\n        case 0x2:\r\n            return this.horizontal_blank_start;\r\n        case 0x7:\r\n            return (this.vertical_display_enable_end >> 7 & 0x2) |\r\n                (this.vertical_blank_start >> 5 & 0x8) |\r\n                (this.line_compare >> 4 & 0x10) |\r\n                (this.vertical_display_enable_end >> 3 & 0x40);\r\n        case 0x8:\r\n            return this.preset_row_scan;\r\n        case 0x9:\r\n            return this.max_scan_line;\r\n        case 0xA:\r\n            return this.cursor_scanline_start;\r\n        case 0xB:\r\n            return this.cursor_scanline_end;\r\n        case 0xC:\r\n            return this.start_address & 0xFF;\r\n        case 0xD:\r\n            return this.start_address >> 8;\r\n        case 0xE:\r\n            return this.cursor_address >> 8;\r\n        case 0xF:\r\n            return this.cursor_address & 0xFF;\r\n        case 0x12:\r\n            return this.vertical_display_enable_end & 0xFF;\r\n        case 0x13:\r\n            return this.offset_register;\r\n        case 0x14:\r\n            return this.underline_location_register;\r\n        case 0x15:\r\n            return this.vertical_blank_start & 0xFF;\r\n        case 0x17:\r\n            return this.crtc_mode;\r\n        case 0x18:\r\n            return this.line_compare & 0xFF;\r\n    }\r\n\r\n    if(this.index_crtc < this.crtc.length)\r\n    {\r\n        return this.crtc[this.index_crtc];\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.port3DA_read = function()\r\n{\r\n    dbg_log(\"3DA read - status 1 and clear attr index\", LOG_VGA);\r\n\r\n    var value = this.port_3DA_value;\r\n\r\n    // Status register, bit 3 set by update_vertical_retrace\r\n    // during screen-fill-buffer\r\n    if(!this.graphical_mode)\r\n    {\r\n        // But screen-fill-buffer may not get triggered in text mode\r\n        // so toggle it manually here\r\n        if(this.port_3DA_value & 1)\r\n        {\r\n            this.port_3DA_value ^= 8;\r\n        }\r\n        this.port_3DA_value ^= 1;\r\n    }\r\n    else\r\n    {\r\n        this.port_3DA_value ^= 1;\r\n        this.port_3DA_value &= 1;\r\n    }\r\n    this.attribute_controller_index = -1;\r\n    return value;\r\n};\r\n\r\nVGAScreen.prototype.svga_bytes_per_line = function()\r\n{\r\n    var bits = this.svga_bpp === 15 ? 16 : this.svga_bpp;\r\n\r\n    return this.svga_width * bits / 8;\r\n};\r\n\r\nVGAScreen.prototype.port1CE_write = function(value)\r\n{\r\n    this.dispi_index = value;\r\n};\r\n\r\nVGAScreen.prototype.port1CF_write = function(value)\r\n{\r\n    dbg_log(\"1CF / dispi write \" + h(this.dispi_index) + \": \" + h(value), LOG_VGA);\r\n\r\n    switch(this.dispi_index)\r\n    {\r\n        case 1:\r\n            this.svga_width = value;\r\n            if(this.svga_width > MAX_XRES)\r\n            {\r\n                dbg_log(\"svga_width reduced from \" + this.svga_width + \" to \" + MAX_XRES, LOG_VGA);\r\n                this.svga_width = MAX_XRES;\r\n            }\r\n            break;\r\n        case 2:\r\n            this.svga_height = value;\r\n            if(this.svga_height > MAX_YRES)\r\n            {\r\n                dbg_log(\"svga_height reduced from \" + this.svga_height + \" to \" + MAX_YRES, LOG_VGA);\r\n                this.svga_height = MAX_YRES;\r\n            }\r\n            break;\r\n        case 3:\r\n            this.svga_bpp = value;\r\n            break;\r\n        case 4:\r\n            // enable, options\r\n            this.svga_enabled = (value & 1) === 1;\r\n            this.dispi_enable_value = value;\r\n            break;\r\n        case 5:\r\n            this.svga_bank_offset = value << 16;\r\n            break;\r\n        case 9:\r\n            // y offset\r\n            this.svga_offset = value * this.svga_bytes_per_line();\r\n            dbg_log(\"SVGA offset: \" + h(this.svga_offset) + \" y=\" + h(value), LOG_VGA);\r\n            this.complete_redraw();\r\n            break;\r\n        default:\r\n    }\r\n\r\n    if(this.svga_enabled && (!this.svga_width || !this.svga_height))\r\n    {\r\n        dbg_log(\"SVGA: disabled because of invalid width/height: \" + this.svga_width + \"x\" + this.svga_height, LOG_VGA);\r\n        this.svga_enabled = false;\r\n    }\r\n\r\n    dbg_assert(this.svga_bpp !== 4, \"unimplemented svga bpp: 4\");\r\n    dbg_assert(this.svga_bpp !== 15, \"unimplemented svga bpp: 15\");\r\n    dbg_assert(this.svga_bpp === 4 || this.svga_bpp === 8 ||\r\n               this.svga_bpp === 15 || this.svga_bpp === 16 ||\r\n               this.svga_bpp === 24 || this.svga_bpp === 32,\r\n               \"unexpected svga bpp: \" + this.svga_bpp);\r\n\r\n    dbg_log(\"SVGA: enabled=\" + this.svga_enabled + \", \" + this.svga_width + \"x\" + this.svga_height + \"x\" + this.svga_bpp, LOG_VGA);\r\n\r\n    if(this.svga_enabled && this.dispi_index === 4)\r\n    {\r\n        this.set_size_graphical(this.svga_width, this.svga_height, this.svga_bpp, this.svga_width, this.svga_height);\r\n        this.bus.send(\"screen-set-mode\", true);\r\n        this.graphical_mode = true;\r\n        this.graphical_mode_is_linear = true;\r\n    }\r\n\r\n    if(!this.svga_enabled)\r\n    {\r\n        this.svga_bank_offset = 0;\r\n    }\r\n\r\n    this.update_layers();\r\n};\r\n\r\nVGAScreen.prototype.port1CF_read = function()\r\n{\r\n    dbg_log(\"1CF / dispi read \" + h(this.dispi_index), LOG_VGA);\r\n    return this.svga_register_read(this.dispi_index);\r\n};\r\n\r\nVGAScreen.prototype.svga_register_read = function(n)\r\n{\r\n    switch(n)\r\n    {\r\n        case 0:\r\n            // id\r\n            return 0xB0C0;\r\n        case 1:\r\n            return this.dispi_enable_value & 2 ? MAX_XRES : this.svga_width;\r\n        case 2:\r\n            return this.dispi_enable_value & 2 ? MAX_YRES : this.svga_height;\r\n        case 3:\r\n            return this.dispi_enable_value & 2 ? MAX_BPP : this.svga_bpp;\r\n        case 4:\r\n            return this.dispi_enable_value;\r\n        case 5:\r\n            return this.svga_bank_offset >>> 16;\r\n        case 6:\r\n            // virtual width\r\n            if(this.screen_width)\r\n            {\r\n                return this.screen_width;\r\n            }\r\n            else\r\n            {\r\n                return 1; // seabios/windows98 divide exception\r\n            }\r\n            break;\r\n\r\n        case 8:\r\n            // x offset\r\n            return 0;\r\n        case 0x0A:\r\n            // memory size in 64 kilobyte banks\r\n            return this.vga_memory_size / VGA_BANK_SIZE | 0;\r\n    }\r\n\r\n    return 0xFF;\r\n};\r\n\r\n/**\r\n * Transfers graphics from VGA Planes to the Pixel Buffer\r\n * VGA Planes represent data stored on actual hardware.\r\n * Pixel Buffer caches the 4-bit or 8-bit color indices for each pixel.\r\n */\r\nVGAScreen.prototype.vga_replot = function()\r\n{\r\n    // Round to multiple of 8 towards extreme\r\n    var start = this.diff_plot_min & ~0xF;\r\n    var end = Math.min((this.diff_plot_max | 0xF), VGA_PIXEL_BUFFER_SIZE - 1);\r\n\r\n    var addr_shift = this.vga_addr_shift_count();\r\n    var addr_substitution = ~this.crtc_mode & 0x3;\r\n\r\n    var shift_mode = this.planar_mode & 0x60\r\n    var pel_width = this.attribute_mode & 0x40;\r\n\r\n    for(var pixel_addr = start; pixel_addr <= end;)\r\n    {\r\n        var addr = pixel_addr >>> addr_shift;\r\n        if(addr_substitution)\r\n        {\r\n            var row = pixel_addr / this.virtual_width | 0;\r\n            var col = pixel_addr - this.virtual_width * row;\r\n\r\n            switch(addr_substitution)\r\n            {\r\n                case 0x1:\r\n                    // Alternating rows using bit 13\r\n                    // Assumes max scan line = 1\r\n                    addr = (row & 0x1) << 13;\r\n                    row >>>= 1;\r\n                    break;\r\n                case 0x2:\r\n                    // Alternating rows using bit 14\r\n                    // Assumes max scan line = 3\r\n                    addr = (row & 0x1) << 14;\r\n                    row >>>= 1;\r\n                    break;\r\n                case 0x3:\r\n                    // Cycling through rows using bit 13 and 14\r\n                    // Assumes max scan line = 3\r\n                    addr = (row & 0x3) << 13;\r\n                    row >>>= 2;\r\n                    break;\r\n            }\r\n\r\n            addr |= (row * this.virtual_width + col >>> addr_shift) + this.start_address;\r\n        }\r\n\r\n        var byte0 = this.plane0[addr];\r\n        var byte1 = this.plane1[addr];\r\n        var byte2 = this.plane2[addr];\r\n        var byte3 = this.plane3[addr];\r\n\r\n        var shift_loads = new Uint8Array(8);\r\n        switch(shift_mode)\r\n        {\r\n            // Planar Shift Mode\r\n            // See http://www.osdever.net/FreeVGA/vga/vgaseq.htm\r\n            case 0x00:\r\n                // Shift these, so that the bits for the color are in\r\n                // the correct position in the for loop\r\n                byte0 <<= 0;\r\n                byte1 <<= 1;\r\n                byte2 <<= 2;\r\n                byte3 <<= 3;\r\n\r\n                for(var i = 7; i >= 0; i--)\r\n                {\r\n                    shift_loads[7 - i] =\r\n                            byte0 >> i & 1 |\r\n                            byte1 >> i & 2 |\r\n                            byte2 >> i & 4 |\r\n                            byte3 >> i & 8;\r\n                }\r\n                break;\r\n\r\n            // Packed Shift Mode, aka Interleaved Shift Mode\r\n            // Video Modes 4h and 5h\r\n            case 0x20:\r\n                shift_loads[0] = (byte0 >> 6 & 0x3) | (byte2 >> 4 & 0xC);\r\n                shift_loads[1] = (byte0 >> 4 & 0x3) | (byte2 >> 2 & 0xC);\r\n                shift_loads[2] = (byte0 >> 2 & 0x3) | (byte2 >> 0 & 0xC);\r\n                shift_loads[3] = (byte0 >> 0 & 0x3) | (byte2 << 2 & 0xC);\r\n\r\n                shift_loads[4] = (byte1 >> 6 & 0x3) | (byte3 >> 4 & 0xC);\r\n                shift_loads[5] = (byte1 >> 4 & 0x3) | (byte3 >> 2 & 0xC);\r\n                shift_loads[6] = (byte1 >> 2 & 0x3) | (byte3 >> 0 & 0xC);\r\n                shift_loads[7] = (byte1 >> 0 & 0x3) | (byte3 << 2 & 0xC);\r\n                break;\r\n\r\n            // 256-Color Shift Mode\r\n            // Video Modes 13h and unchained 256 color\r\n            case 0x40:\r\n            case 0x60:\r\n                shift_loads[0] = byte0 >> 4 & 0xF;\r\n                shift_loads[1] = byte0 >> 0 & 0xF;\r\n                shift_loads[2] = byte1 >> 4 & 0xF;\r\n                shift_loads[3] = byte1 >> 0 & 0xF;\r\n                shift_loads[4] = byte2 >> 4 & 0xF;\r\n                shift_loads[5] = byte2 >> 0 & 0xF;\r\n                shift_loads[6] = byte3 >> 4 & 0xF;\r\n                shift_loads[7] = byte3 >> 0 & 0xF;\r\n                break;\r\n        }\r\n\r\n        if(pel_width)\r\n        {\r\n            // Assemble from two sets of 4 bits.\r\n            for(var i = 0, j = 0; i < 4; i++, pixel_addr++, j += 2)\r\n            {\r\n                this.pixel_buffer[pixel_addr] = (shift_loads[j] << 4) | shift_loads[j + 1];\r\n            }\r\n        }\r\n        else\r\n        {\r\n            for(var i = 0; i < 8; i++, pixel_addr++)\r\n            {\r\n                this.pixel_buffer[pixel_addr] = shift_loads[i];\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Transfers graphics from Pixel Buffer to Destination Image Buffer.\r\n * The 4-bit/8-bit color indices in the Pixel Buffer are passed through\r\n * the internal palette (dac_map) and the DAC palette (vga256_palette) to\r\n * obtain the final 32 bit color that the Canvas API uses.\r\n */\r\nVGAScreen.prototype.vga_redraw = function()\r\n{\r\n    var start = this.diff_addr_min;\r\n    var end = Math.min(this.diff_addr_max, VGA_PIXEL_BUFFER_SIZE - 1);\r\n    var buffer = this.dest_buffer;\r\n\r\n    // Closure compiler\r\n    if(!buffer) return;\r\n\r\n    var mask = 0xFF;\r\n    var colorset = 0x00;\r\n    if(this.attribute_mode & 0x80)\r\n    {\r\n        // Palette bits 5/4 select\r\n        mask &= 0xCF;\r\n        colorset |= this.color_select << 4 & 0x30;\r\n    }\r\n\r\n    if(this.attribute_mode & 0x40)\r\n    {\r\n        // 8 bit mode\r\n\r\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\r\n        {\r\n            var color256 = (this.pixel_buffer[pixel_addr] & mask) | colorset;\r\n            var color = this.vga256_palette[color256];\r\n\r\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // 4 bit mode\r\n\r\n        // Palette bits 7/6 select\r\n        mask &= 0x3F;\r\n        colorset |= this.color_select << 4 & 0xC0;\r\n\r\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\r\n        {\r\n            var color16 = this.pixel_buffer[pixel_addr] & this.color_plane_enable;\r\n            var color256 = (this.dac_map[color16] & mask) | colorset;\r\n            var color = this.vga256_palette[color256];\r\n\r\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\r\n        }\r\n    }\r\n};\r\n\r\nVGAScreen.prototype.screen_fill_buffer = function()\r\n{\r\n    if(!this.graphical_mode)\r\n    {\r\n        // text mode\r\n        // Update retrace behaviour anyway - programs waiting for signal before\r\n        // changing to graphical mode\r\n        this.update_vertical_retrace();\r\n        return;\r\n    }\r\n\r\n    if(!this.dest_buffer)\r\n    {\r\n        dbg_log(\"Cannot fill buffer: No destination buffer\", LOG_VGA);\r\n        // Update retrace behaviour anyway\r\n        this.update_vertical_retrace();\r\n        return;\r\n    }\r\n\r\n    if(this.diff_addr_max < this.diff_addr_min && this.diff_plot_max < this.diff_plot_min)\r\n    {\r\n        // No pixels to update\r\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\r\n        this.update_vertical_retrace();\r\n        return;\r\n    }\r\n\r\n    if(this.svga_enabled)\r\n    {\r\n        var bpp = this.svga_bpp;\r\n\r\n        var buffer = this.dest_buffer;\r\n\r\n        var start = this.diff_addr_min;\r\n        var end = this.diff_addr_max;\r\n\r\n        switch(bpp)\r\n        {\r\n            case 32:\r\n                var start_pixel = start >> 2;\r\n                var end_pixel = (end >> 2) + 1;\r\n\r\n                for(var i = start_pixel; i < end_pixel; i++)\r\n                {\r\n                    var dword = this.svga_memory32[i];\r\n\r\n                    buffer[i] = dword << 16 | dword >> 16 & 0xFF | dword & 0xFF00 | 0xFF000000;\r\n                }\r\n                break;\r\n\r\n            case 24:\r\n                var start_pixel = start / 3 | 0;\r\n                var end_pixel = (end / 3 | 0) + 1;\r\n                var addr = start_pixel * 3;\r\n\r\n                for(var i = start_pixel; addr < end; i++)\r\n                {\r\n                    var red = this.svga_memory[addr++];\r\n                    var green = this.svga_memory[addr++];\r\n                    var blue = this.svga_memory[addr++];\r\n\r\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\r\n                }\r\n                break;\r\n\r\n            case 16:\r\n                var start_pixel = start >> 1;\r\n                var end_pixel = (end >> 1) + 1;\r\n\r\n                for(var i = start_pixel; i < end_pixel; i++)\r\n                {\r\n                    var word = this.svga_memory16[i];\r\n\r\n                    var blue = (word >> 11) * 0xFF / 0x1F | 0;\r\n                    var green = (word >> 5 & 0x3F) * 0xFF / 0x3F | 0;\r\n                    var red = (word & 0x1F) * 0xFF / 0x1F | 0;\r\n\r\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\r\n                }\r\n                break;\r\n\r\n            case 8:\r\n                var start_pixel = start;\r\n                var end_pixel = end + 1;\r\n\r\n                for(var i = start; i <= end; i++)\r\n                {\r\n                    var color = this.vga256_palette[this.svga_memory[i]];\r\n                    buffer[i] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                dbg_assert(false, \"Unsupported BPP: \" + bpp);\r\n        }\r\n\r\n        var min_y = start_pixel / this.svga_width | 0;\r\n        var max_y = end_pixel / this.svga_width | 0;\r\n\r\n        this.bus.send(\"screen-fill-buffer-end\", [{\r\n            screen_x: 0, screen_y: min_y,\r\n            buffer_x: 0, buffer_y: min_y,\r\n            buffer_width: this.svga_width,\r\n            buffer_height: max_y - min_y + 1,\r\n        }]);\r\n    }\r\n    else\r\n    {\r\n        this.vga_replot();\r\n        this.vga_redraw();\r\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\r\n    }\r\n\r\n    this.reset_diffs();\r\n    this.update_vertical_retrace();\r\n};\r\n","\"use strict\";\r\n\r\n/** @const */\r\nlet PS2_LOG_VERBOSE = false;\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {BusConnector} bus\r\n */\r\nfunction PS2(cpu, bus)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    /** @type {boolean} */\r\n    this.enable_mouse_stream = false;\r\n\r\n    /** @type {boolean} */\r\n    this.use_mouse = false;\r\n\r\n    /** @type {boolean} */\r\n    this.have_mouse = true;\r\n\r\n    /** @type {number} */\r\n    this.mouse_delta_x = 0;\r\n    /** @type {number} */\r\n    this.mouse_delta_y = 0;\r\n    /** @type {number} */\r\n    this.mouse_clicks = 0;\r\n\r\n    /** @type {boolean} */\r\n    this.have_keyboard = true;\r\n\r\n    /** @type {boolean} */\r\n    this.enable_keyboard_stream = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_is_mouse_command = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_read_sample = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_read_led = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_handle_scan_code_set = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_read_rate = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_read_resolution = false;\r\n\r\n    /**\r\n     * @type {ByteQueue}\r\n     */\r\n    this.kbd_buffer = new ByteQueue(1024);\r\n\r\n    this.last_port60_byte = 0;\r\n\r\n    /** @type {number} */\r\n    this.sample_rate = 100;\r\n\r\n    /** @type {number} */\r\n    this.mouse_detect_state = 0;\r\n\r\n    /** @type {number} */\r\n    this.mouse_id = 0x00;\r\n\r\n    /** @type {boolean} */\r\n    this.mouse_reset_workaround = false;\r\n\r\n    /** @type {number} */\r\n    this.wheel_movement = 0;\r\n\r\n    /** @type {number} */\r\n    this.resolution = 4;\r\n\r\n    /** @type {boolean} */\r\n    this.scaling2 = false;\r\n\r\n    /** @type {number} */\r\n    this.last_mouse_packet = -1;\r\n\r\n    /**\r\n     * @type {ByteQueue}\r\n     */\r\n    this.mouse_buffer = new ByteQueue(1024);\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * Also known as DBBOUT OBF - Output Buffer Full flag\r\n     */\r\n    this.next_byte_is_ready = false;\r\n\r\n    /** @type {boolean} */\r\n    this.next_byte_is_aux = false;\r\n\r\n    this.bus.register(\"keyboard-code\", function(code)\r\n    {\r\n        this.kbd_send_code(code);\r\n    }, this);\r\n\r\n    this.bus.register(\"mouse-click\", function(data)\r\n    {\r\n        this.mouse_send_click(data[0], data[1], data[2]);\r\n    }, this);\r\n\r\n    this.bus.register(\"mouse-delta\", function(data)\r\n    {\r\n        this.mouse_send_delta(data[0], data[1]);\r\n    }, this);\r\n\r\n    this.bus.register(\"mouse-wheel\", function(data)\r\n    {\r\n        this.wheel_movement -= data[0];\r\n        this.wheel_movement -= data[1] * 2; // X Wheel Movement\r\n        this.wheel_movement = Math.min(7, Math.max(-8, this.wheel_movement));\r\n        this.send_mouse_packet(0, 0);\r\n    }, this);\r\n\r\n    this.command_register = 1 | 4;\r\n    // TODO: What should be the initial value?\r\n    this.controller_output_port = 0;\r\n    this.read_output_register = false;\r\n    this.read_command_register = false;\r\n    this.read_controller_output_port = false;\r\n\r\n    cpu.io.register_read(0x60, this, this.port60_read);\r\n    cpu.io.register_read(0x64, this, this.port64_read);\r\n\r\n    cpu.io.register_write(0x60, this, this.port60_write);\r\n    cpu.io.register_write(0x64, this, this.port64_write);\r\n}\r\n\r\nPS2.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.enable_mouse_stream;\r\n    state[1] = this.use_mouse;\r\n    state[2] = this.have_mouse;\r\n    state[3] = this.mouse_delta_x;\r\n    state[4] = this.mouse_delta_y;\r\n    state[5] = this.mouse_clicks;\r\n    state[6] = this.have_keyboard;\r\n    state[7] = this.enable_keyboard_stream;\r\n    state[8] = this.next_is_mouse_command;\r\n    state[9] = this.next_read_sample;\r\n    state[10] = this.next_read_led;\r\n    state[11] = this.next_handle_scan_code_set;\r\n    state[12] = this.next_read_rate;\r\n    state[13] = this.next_read_resolution;\r\n    //state[14] = this.kbd_buffer;\r\n    state[15] = this.last_port60_byte;\r\n    state[16] = this.sample_rate;\r\n    state[17] = this.resolution;\r\n    state[18] = this.scaling2;\r\n    //state[19] = this.mouse_buffer;\r\n    state[20] = this.command_register;\r\n    state[21] = this.read_output_register;\r\n    state[22] = this.read_command_register;\r\n    state[23] = this.controller_output_port;\r\n    state[24] = this.read_controller_output_port;\r\n    state[25] = this.mouse_id;\r\n    state[26] = this.mouse_detect_state;\r\n    state[27] = this.mouse_reset_workaround;\r\n\r\n    return state;\r\n};\r\n\r\nPS2.prototype.set_state = function(state)\r\n{\r\n    this.enable_mouse_stream = state[0];\r\n    this.use_mouse = state[1];\r\n    this.have_mouse = state[2];\r\n    this.mouse_delta_x = state[3];\r\n    this.mouse_delta_y = state[4];\r\n    this.mouse_clicks = state[5];\r\n    this.have_keyboard = state[6];\r\n    this.enable_keyboard_stream = state[7];\r\n    this.next_is_mouse_command = state[8];\r\n    this.next_read_sample = state[9];\r\n    this.next_read_led = state[10];\r\n    this.next_handle_scan_code_set = state[11];\r\n    this.next_read_rate = state[12];\r\n    this.next_read_resolution = state[13];\r\n    //this.kbd_buffer = state[14];\r\n    this.last_port60_byte = state[15];\r\n    this.sample_rate = state[16];\r\n    this.resolution = state[17];\r\n    this.scaling2 = state[18];\r\n    //this.mouse_buffer = state[19];\r\n    this.command_register = state[20];\r\n    this.read_output_register = state[21];\r\n    this.read_command_register = state[22];\r\n    this.controller_output_port = state[23];\r\n    this.read_controller_output_port = state[24];\r\n    this.mouse_id = state[25] || 0;\r\n    this.mouse_detect_state = state[26] || 0;\r\n    this.mouse_reset_workaround = state[27] || false;\r\n\r\n    this.next_byte_is_ready = false;\r\n    this.next_byte_is_aux = false;\r\n    this.kbd_buffer.clear();\r\n    this.mouse_buffer.clear();\r\n\r\n    this.bus.send(\"mouse-enable\", this.use_mouse);\r\n};\r\n\r\nPS2.prototype.raise_irq = function()\r\n{\r\n    if(this.next_byte_is_ready)\r\n    {\r\n        // Wait until previous byte is read\r\n        // http://halicery.com/Hardware/8042/8042_1503033_TXT.htm\r\n        return;\r\n    }\r\n\r\n    // Kbd has priority over aux\r\n    if(this.kbd_buffer.length)\r\n    {\r\n        this.kbd_irq();\r\n    }\r\n    else if(this.mouse_buffer.length)\r\n    {\r\n        this.mouse_irq();\r\n    }\r\n};\r\n\r\nPS2.prototype.mouse_irq = function()\r\n{\r\n    this.next_byte_is_ready = true;\r\n    this.next_byte_is_aux = true;\r\n\r\n    if(this.command_register & 2)\r\n    {\r\n        dbg_log(\"Mouse irq\", LOG_PS2);\r\n\r\n        // Pulse the irq line\r\n        // Note: can't lower immediately after rising, so lower before rising\r\n        // http://www.os2museum.com/wp/ibm-ps2-model-50-keyboard-controller/\r\n        this.cpu.device_lower_irq(12);\r\n        this.cpu.device_raise_irq(12);\r\n    }\r\n};\r\n\r\nPS2.prototype.kbd_irq = function()\r\n{\r\n    this.next_byte_is_ready = true;\r\n    this.next_byte_is_aux = false;\r\n\r\n    if(this.command_register & 1)\r\n    {\r\n        dbg_log(\"Keyboard irq\", LOG_PS2);\r\n\r\n        // Pulse the irq line\r\n        // Note: can't lower immediately after rising, so lower before rising\r\n        // http://www.os2museum.com/wp/ibm-ps2-model-50-keyboard-controller/\r\n        this.cpu.device_lower_irq(1);\r\n        this.cpu.device_raise_irq(1);\r\n    }\r\n};\r\n\r\nPS2.prototype.kbd_send_code = function(code)\r\n{\r\n    if(this.enable_keyboard_stream)\r\n    {\r\n        dbg_log(\"adding kbd code: \" + h(code), LOG_PS2);\r\n        this.kbd_buffer.push(code);\r\n        this.raise_irq();\r\n    }\r\n};\r\n\r\nPS2.prototype.mouse_send_delta = function(delta_x, delta_y)\r\n{\r\n    if(!this.have_mouse || !this.use_mouse)\r\n    {\r\n        return;\r\n    }\r\n\r\n    // note: delta_x or delta_y can be floating point numbers\r\n\r\n    var factor = this.resolution * this.sample_rate / 80;\r\n\r\n    this.mouse_delta_x += delta_x * factor;\r\n    this.mouse_delta_y += delta_y * factor;\r\n\r\n    if(this.enable_mouse_stream)\r\n    {\r\n        var change_x = this.mouse_delta_x | 0,\r\n            change_y = this.mouse_delta_y | 0;\r\n\r\n        if(change_x || change_y)\r\n        {\r\n            var now = Date.now();\r\n\r\n            //if(now - this.last_mouse_packet < 1000 / this.sample_rate)\r\n            //{\r\n            //    // TODO: set timeout\r\n            //    return;\r\n            //}\r\n\r\n            this.mouse_delta_x -= change_x;\r\n            this.mouse_delta_y -= change_y;\r\n\r\n            this.send_mouse_packet(change_x, change_y);\r\n        }\r\n    }\r\n};\r\n\r\nPS2.prototype.mouse_send_click = function(left, middle, right)\r\n{\r\n    if(!this.have_mouse || !this.use_mouse)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.mouse_clicks = left | right << 1 | middle << 2;\r\n\r\n    if(this.enable_mouse_stream)\r\n    {\r\n        this.send_mouse_packet(0, 0);\r\n    }\r\n};\r\n\r\nPS2.prototype.send_mouse_packet = function(dx, dy)\r\n{\r\n    var info_byte =\r\n            (dy < 0) << 5 |\r\n            (dx < 0) << 4 |\r\n            1 << 3 |\r\n            this.mouse_clicks,\r\n        delta_x = dx,\r\n        delta_y = dy;\r\n\r\n    this.last_mouse_packet = Date.now();\r\n\r\n    //if(this.scaling2)\r\n    //{\r\n    //    // only in automatic packets, not 0xEB requests\r\n    //    delta_x = this.apply_scaling2(delta_x);\r\n    //    delta_y = this.apply_scaling2(delta_y);\r\n    //}\r\n\r\n    this.mouse_buffer.push(info_byte);\r\n    this.mouse_buffer.push(delta_x);\r\n    this.mouse_buffer.push(delta_y);\r\n\r\n    if(this.mouse_id === 0x04)\r\n    {\r\n        this.mouse_buffer.push(\r\n            0 << 5 | // TODO: 5th button\r\n            0 << 4 | // TODO: 4th button\r\n            this.wheel_movement & 0x0F\r\n        );\r\n        this.wheel_movement = 0;\r\n    }\r\n    else if(this.mouse_id === 0x03)\r\n    {\r\n        this.mouse_buffer.push(this.wheel_movement & 0xFF); // Byte 4 - Z Movement\r\n        this.wheel_movement = 0;\r\n    }\r\n\r\n    if(PS2_LOG_VERBOSE)\r\n    {\r\n        dbg_log(\"adding mouse packets: \" + [info_byte, dx, dy], LOG_PS2);\r\n    }\r\n\r\n    this.raise_irq();\r\n};\r\n\r\nPS2.prototype.apply_scaling2 = function(n)\r\n{\r\n    // http://www.computer-engineering.org/ps2mouse/#Inputs.2C_Resolution.2C_and_Scaling\r\n    var abs = Math.abs(n),\r\n        sign = n >> 31;\r\n\r\n    switch(abs)\r\n    {\r\n        case 0:\r\n        case 1:\r\n        case 3:\r\n            return n;\r\n        case 2:\r\n            return sign;\r\n        case 4:\r\n            return 6 * sign;\r\n        case 5:\r\n            return 9 * sign;\r\n        default:\r\n            return n << 1;\r\n    }\r\n};\r\n\r\nPS2.prototype.port60_read = function()\r\n{\r\n    //dbg_log(\"port 60 read: \" + (buffer[0] || \"(none)\"));\r\n\r\n    this.next_byte_is_ready = false;\r\n\r\n    if(!this.kbd_buffer.length && !this.mouse_buffer.length)\r\n    {\r\n        // should not happen\r\n        dbg_log(\"Port 60 read: Empty\", LOG_PS2);\r\n        return this.last_port60_byte;\r\n    }\r\n\r\n    if(this.next_byte_is_aux)\r\n    {\r\n        this.cpu.device_lower_irq(12);\r\n        this.last_port60_byte = this.mouse_buffer.shift();\r\n        dbg_log(\"Port 60 read (mouse): \" + h(this.last_port60_byte), LOG_PS2);\r\n    }\r\n    else\r\n    {\r\n        this.cpu.device_lower_irq(1);\r\n        this.last_port60_byte = this.kbd_buffer.shift();\r\n        dbg_log(\"Port 60 read (kbd)  : \" + h(this.last_port60_byte), LOG_PS2);\r\n    }\r\n\r\n    if(this.kbd_buffer.length || this.mouse_buffer.length)\r\n    {\r\n        this.raise_irq();\r\n    }\r\n\r\n    return this.last_port60_byte;\r\n};\r\n\r\nPS2.prototype.port64_read = function()\r\n{\r\n    // status port\r\n\r\n    var status_byte = 0x10;\r\n\r\n    if(this.next_byte_is_ready)\r\n    {\r\n        status_byte |= 0x1;\r\n    }\r\n    if(this.next_byte_is_aux)\r\n    {\r\n        status_byte |= 0x20;\r\n    }\r\n\r\n    dbg_log(\"port 64 read: \" + h(status_byte), LOG_PS2);\r\n\r\n    return status_byte;\r\n};\r\n\r\nPS2.prototype.port60_write = function(write_byte)\r\n{\r\n    dbg_log(\"port 60 write: \" + h(write_byte), LOG_PS2);\r\n\r\n    if(this.read_command_register)\r\n    {\r\n        this.command_register = write_byte;\r\n        this.read_command_register = false;\r\n\r\n        // not sure, causes \"spurious ack\" in Linux\r\n        //this.kbd_buffer.push(0xFA);\r\n        //this.kbd_irq();\r\n\r\n        dbg_log(\"Keyboard command register = \" + h(this.command_register), LOG_PS2);\r\n    }\r\n    else if(this.read_output_register)\r\n    {\r\n        this.read_output_register = false;\r\n\r\n        this.mouse_buffer.clear();\r\n        this.mouse_buffer.push(write_byte);\r\n        this.mouse_irq();\r\n    }\r\n    else if(this.next_read_sample)\r\n    {\r\n        this.next_read_sample = false;\r\n        this.mouse_buffer.clear();\r\n        this.mouse_buffer.push(0xFA);\r\n\r\n        this.sample_rate = write_byte;\r\n\r\n        switch(this.mouse_detect_state)\r\n        {\r\n            case -1:\r\n                if(write_byte === 60)\r\n                {\r\n                    // Detect Windows NT and turn on workaround the bug\r\n                    // 200->100->80->60\r\n                    this.mouse_reset_workaround = true;\r\n                    this.mouse_detect_state = 0;\r\n                }\r\n                else\r\n                {\r\n                    this.mouse_reset_workaround = false;\r\n                    this.mouse_detect_state = (write_byte === 200) ? 1 : 0;\r\n                }\r\n                break;\r\n            case 0:\r\n                if(write_byte === 200) this.mouse_detect_state = 1;\r\n                break;\r\n            case 1:\r\n                if(write_byte === 100) this.mouse_detect_state = 2;\r\n                else if(write_byte === 200) this.mouse_detect_state = 3;\r\n                else this.mouse_detect_state = 0;\r\n                break;\r\n            case 2:\r\n                // Host sends sample rate 200->100->80 to activate Intellimouse wheel\r\n                if(write_byte === 80) this.mouse_id = 0x03;\r\n                this.mouse_detect_state = -1;\r\n                break;\r\n            case 3:\r\n                // Host sends sample rate 200->200->80 to activate Intellimouse 4th, 5th buttons\r\n                if(write_byte === 80) this.mouse_id = 0x04;\r\n                this.mouse_detect_state = -1;\r\n                break;\r\n        }\r\n\r\n        dbg_log(\"mouse sample rate: \" + h(write_byte) + \", mouse id: \" + h(this.mouse_id), LOG_PS2);\r\n\r\n        if(!this.sample_rate)\r\n        {\r\n            dbg_log(\"invalid sample rate, reset to 100\", LOG_PS2);\r\n            this.sample_rate = 100;\r\n        }\r\n\r\n        this.mouse_irq();\r\n    }\r\n    else if(this.next_read_resolution)\r\n    {\r\n        this.next_read_resolution = false;\r\n        this.mouse_buffer.clear();\r\n        this.mouse_buffer.push(0xFA);\r\n\r\n        if(write_byte > 3)\r\n        {\r\n            this.resolution = 4;\r\n            dbg_log(\"invalid resolution, resetting to 4\", LOG_PS2);\r\n        }\r\n        else\r\n        {\r\n            this.resolution = 1 << write_byte;\r\n            dbg_log(\"resolution: \" + this.resolution, LOG_PS2);\r\n        }\r\n        this.mouse_irq();\r\n    }\r\n    else if(this.next_read_led)\r\n    {\r\n        // nope\r\n        this.next_read_led = false;\r\n        this.kbd_buffer.push(0xFA);\r\n        this.kbd_irq();\r\n    }\r\n    else if(this.next_handle_scan_code_set)\r\n    {\r\n        this.next_handle_scan_code_set = false;\r\n\r\n        this.kbd_buffer.push(0xFA);\r\n        this.kbd_irq();\r\n\r\n        if(write_byte)\r\n        {\r\n            // set scan code set\r\n        }\r\n        else\r\n        {\r\n            this.kbd_buffer.push(2);\r\n        }\r\n    }\r\n    else if(this.next_read_rate)\r\n    {\r\n        // nope\r\n        this.next_read_rate = false;\r\n        this.kbd_buffer.push(0xFA);\r\n        this.kbd_irq();\r\n    }\r\n    else if(this.next_is_mouse_command)\r\n    {\r\n        this.next_is_mouse_command = false;\r\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\r\n\r\n        if(!this.have_mouse)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // send ack\r\n        this.kbd_buffer.clear();\r\n        this.mouse_buffer.clear();\r\n        this.mouse_buffer.push(0xFA);\r\n\r\n        switch(write_byte)\r\n        {\r\n        case 0xE6:\r\n            // set scaling to 1:1\r\n            dbg_log(\"Scaling 1:1\", LOG_PS2);\r\n            this.scaling2 = false;\r\n            break;\r\n        case 0xE7:\r\n            // set scaling to 2:1\r\n            dbg_log(\"Scaling 2:1\", LOG_PS2);\r\n            this.scaling2 = true;\r\n            break;\r\n        case 0xE8:\r\n            // set mouse resolution\r\n            this.next_read_resolution = true;\r\n            break;\r\n        case 0xE9:\r\n            // status request - send one packet\r\n            this.send_mouse_packet(0, 0);\r\n            break;\r\n        case 0xEB:\r\n            // request single packet\r\n            dbg_log(\"unimplemented request single packet\", LOG_PS2);\r\n            this.send_mouse_packet(0, 0);\r\n            break;\r\n        case 0xF2:\r\n            //  MouseID Byte\r\n            dbg_log(\"required id: \" + h(this.mouse_id), LOG_PS2);\r\n            this.mouse_buffer.push(this.mouse_id);\r\n\r\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\r\n            // this.send_mouse_packet(0, 0);\r\n            this.raise_irq();\r\n            break;\r\n        case 0xF3:\r\n            // sample rate\r\n            this.next_read_sample = true;\r\n            break;\r\n        case 0xF4:\r\n            // enable streaming\r\n            this.enable_mouse_stream = true;\r\n            this.use_mouse = true;\r\n            this.bus.send(\"mouse-enable\", true);\r\n\r\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\r\n            break;\r\n        case 0xF5:\r\n            // disable streaming\r\n            this.enable_mouse_stream = false;\r\n            break;\r\n        case 0xF6:\r\n            // set defaults\r\n            this.enable_mouse_stream = false;\r\n            this.sample_rate = 100;\r\n            this.scaling2 = false;\r\n            this.resolution = 4;\r\n            break;\r\n        case 0xFF:\r\n            // reset, send completion code\r\n            dbg_log(\"Mouse reset\", LOG_PS2);\r\n            this.mouse_buffer.push(0xAA);\r\n            this.mouse_buffer.push(0);\r\n\r\n            this.use_mouse = true;\r\n            this.bus.send(\"mouse-enable\", true);\r\n\r\n            this.enable_mouse_stream = false;\r\n            this.sample_rate = 100;\r\n            this.scaling2 = false;\r\n            this.resolution = 4;\r\n\r\n            if(!this.mouse_reset_workaround)\r\n            {\r\n                this.mouse_id = 0x00;\r\n            }\r\n\r\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\r\n            break;\r\n\r\n        default:\r\n            dbg_log(\"Unimplemented mouse command: \" + h(write_byte), LOG_PS2);\r\n        }\r\n\r\n        this.mouse_irq();\r\n    }\r\n    else if(this.read_controller_output_port)\r\n    {\r\n        this.read_controller_output_port = false;\r\n        this.controller_output_port = write_byte;\r\n        // If we ever want to implement A20 masking, here is where\r\n        // we should turn the masking off if the second bit is on\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\r\n\r\n        // send ack\r\n        this.mouse_buffer.clear();\r\n        this.kbd_buffer.clear();\r\n        this.kbd_buffer.push(0xFA);\r\n\r\n        switch(write_byte)\r\n        {\r\n        case 0xED:\r\n            this.next_read_led = true;\r\n            break;\r\n        case 0xF0:\r\n            // get/set scan code set\r\n            this.next_handle_scan_code_set = true;\r\n            break;\r\n        case 0xF2:\r\n            // identify\r\n            this.kbd_buffer.push(0xAB);\r\n            this.kbd_buffer.push(83);\r\n            break;\r\n        case 0xF3:\r\n            //  Set typematic rate and delay\r\n            this.next_read_rate = true;\r\n            break;\r\n        case 0xF4:\r\n            // enable scanning\r\n            dbg_log(\"kbd enable scanning\", LOG_PS2);\r\n            this.enable_keyboard_stream = true;\r\n            break;\r\n        case 0xF5:\r\n            // disable scanning\r\n            dbg_log(\"kbd disable scanning\", LOG_PS2);\r\n            this.enable_keyboard_stream = false;\r\n            break;\r\n        case 0xF6:\r\n            // reset defaults\r\n            //this.enable_keyboard_stream = false;\r\n            break;\r\n        case 0xFF:\r\n            this.kbd_buffer.clear();\r\n            this.kbd_buffer.push(0xFA);\r\n            this.kbd_buffer.push(0xAA);\r\n            this.kbd_buffer.push(0);\r\n            break;\r\n        default:\r\n            dbg_log(\"Unimplemented keyboard command: \" + h(write_byte), LOG_PS2);\r\n        }\r\n\r\n        this.kbd_irq();\r\n    }\r\n};\r\n\r\nPS2.prototype.port64_write = function(write_byte)\r\n{\r\n    dbg_log(\"port 64 write: \" + h(write_byte), LOG_PS2);\r\n\r\n    switch(write_byte)\r\n    {\r\n    case 0x20:\r\n        this.kbd_buffer.clear();\r\n        this.mouse_buffer.clear();\r\n        this.kbd_buffer.push(this.command_register);\r\n        this.kbd_irq();\r\n        break;\r\n    case 0x60:\r\n        this.read_command_register = true;\r\n        break;\r\n    case 0xD1:\r\n        this.read_controller_output_port = true;\r\n        break;\r\n    case 0xD3:\r\n        this.read_output_register = true;\r\n        break;\r\n    case 0xD4:\r\n        this.next_is_mouse_command = true;\r\n        break;\r\n    case 0xA7:\r\n        // Disable second port\r\n        dbg_log(\"Disable second port\", LOG_PS2);\r\n        this.command_register |= 0x20;\r\n        break;\r\n    case 0xA8:\r\n        // Enable second port\r\n        dbg_log(\"Enable second port\", LOG_PS2);\r\n        this.command_register &= ~0x20;\r\n        break;\r\n    case 0xA9:\r\n        // test second ps/2 port\r\n        this.kbd_buffer.clear();\r\n        this.mouse_buffer.clear();\r\n        this.kbd_buffer.push(0);\r\n        this.kbd_irq();\r\n        break;\r\n    case 0xAA:\r\n        this.kbd_buffer.clear();\r\n        this.mouse_buffer.clear();\r\n        this.kbd_buffer.push(0x55);\r\n        this.kbd_irq();\r\n        break;\r\n    case 0xAB:\r\n        // Test first PS/2 port\r\n        this.kbd_buffer.clear();\r\n        this.mouse_buffer.clear();\r\n        this.kbd_buffer.push(0);\r\n        this.kbd_irq();\r\n        break;\r\n    case 0xAD:\r\n        // Disable Keyboard\r\n        dbg_log(\"Disable Keyboard\", LOG_PS2);\r\n        this.command_register |= 0x10;\r\n        break;\r\n    case 0xAE:\r\n        // Enable Keyboard\r\n        dbg_log(\"Enable Keyboard\", LOG_PS2);\r\n        this.command_register &= ~0x10;\r\n        break;\r\n    case 0xFE:\r\n        dbg_log(\"CPU reboot via PS2\");\r\n        this.cpu.reboot_internal();\r\n        break;\r\n    default:\r\n        dbg_log(\"port 64: Unimplemented command byte: \" + h(write_byte), LOG_PS2);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar PIC_LOG_VERBOSE = false;\r\n\r\n/**\r\n * Programmable Interrupt Controller\r\n * http://stanislavs.org/helppc/8259.html\r\n *\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {PIC=} master\r\n */\r\nfunction PIC(cpu, master)\r\n{\r\n    /**\r\n     * all irqs off\r\n     * @type {number}\r\n     */\r\n    this.irq_mask = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     *\r\n     * Bogus default value (both master and slave mapped to 0).\r\n     * Will be initialized by the BIOS\r\n     */\r\n    this.irq_map = 0;\r\n\r\n    /**\r\n     * in-service register\r\n     * Holds interrupts that are currently being serviced\r\n     * @type {number}\r\n     */\r\n    this.isr = 0;\r\n\r\n    /**\r\n     * interrupt request register\r\n     * Holds interrupts that have been requested\r\n     * @type {number}\r\n     */\r\n    this.irr = 0;\r\n\r\n    this.irq_value = 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.requested_irq = -1;\r\n\r\n    this.master = master;\r\n    this.is_master = this.master === undefined;\r\n    this.slave = undefined;\r\n\r\n    this.name = this.is_master ? \"master\" : \"slave \";\r\n\r\n    this.expect_icw4 = false;\r\n    this.state = 0;\r\n    this.read_isr = 0;\r\n    this.auto_eoi = 1;\r\n    this.special_mask_mode = 0;\r\n\r\n    this.elcr = 0;\r\n\r\n    this.cpu = cpu;\r\n\r\n    // Checking for callable interrupts:\r\n    // (cpu changes interrupt flag) -> cpu.handle_irqs -> pic.check_irqs -> cpu.pic_call_irq\r\n    // (pic changes isr/irr) -> cpu.handle_irqs -> ...\r\n\r\n    // triggering irqs:\r\n    // (io device has irq) -> cpu.device_raise_irq -> pic.set_irq -> cpu.handle_irqs -> (see above)\r\n\r\n\r\n    if(this.is_master)\r\n    {\r\n        this.slave = new PIC(this.cpu, this);\r\n\r\n        this.check_irqs = function()\r\n        {\r\n            if(this.requested_irq >= 0)\r\n            {\r\n                PIC_LOG_VERBOSE && dbg_log(\"master> Already requested irq: \" + this.requested_irq, LOG_PIC);\r\n                this.cpu.handle_irqs();\r\n                return;\r\n            }\r\n\r\n            var enabled_irr = this.irr & this.irq_mask;\r\n\r\n            if(!enabled_irr)\r\n            {\r\n                if(PIC_LOG_VERBOSE)\r\n                {\r\n                    dbg_log(\"master> no unmasked irrs. irr=\" + h(this.irr, 2) +\r\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\r\n                }\r\n                return;\r\n            }\r\n\r\n            var irq_mask = enabled_irr & -enabled_irr;\r\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\r\n\r\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\r\n            {\r\n                // wait for eoi of higher or same priority interrupt\r\n                dbg_log(\"master> higher prio: isr=\" + h(this.isr, 2) +\r\n                        \" mask=\" + h(this.irq_mask & 0xff, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\r\n                return;\r\n            }\r\n\r\n            dbg_assert(irq_mask !== 0);\r\n            var irq_number = v86util.int_log2_byte(irq_mask);\r\n            dbg_assert(irq_mask === (1 << irq_number));\r\n\r\n            PIC_LOG_VERBOSE && dbg_log(\"master> request irq \" + irq_number, LOG_PIC);\r\n\r\n            this.requested_irq = irq_number;\r\n            this.cpu.handle_irqs();\r\n        };\r\n\r\n        this.acknowledge_irq = function()\r\n        {\r\n            if(this.requested_irq === -1)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(this.irr === 0)\r\n            {\r\n                PIC_LOG_VERBOSE && dbg_log(\"master> spurious requested=\" + this.requested_irq, LOG_PIC);\r\n                this.requested_irq = -1;\r\n                this.cpu.pic_call_irq(this.irq_map | 7);\r\n                return;\r\n            }\r\n            dbg_assert(this.irr); // spurious\r\n            dbg_assert(this.requested_irq >= 0);\r\n\r\n            var irq_mask = 1 << this.requested_irq;\r\n\r\n            if((this.elcr & irq_mask) === 0) // not in level mode\r\n            {\r\n                this.irr &= ~irq_mask;\r\n            }\r\n\r\n            if(!this.auto_eoi)\r\n            {\r\n                this.isr |= irq_mask;\r\n            }\r\n\r\n            PIC_LOG_VERBOSE && dbg_log(\"master> acknowledge \" + this.requested_irq, LOG_PIC);\r\n            if(this.requested_irq === 2)\r\n            {\r\n                this.slave.acknowledge_irq();\r\n            }\r\n            else\r\n            {\r\n                this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\r\n            }\r\n\r\n            this.requested_irq = -1;\r\n            this.check_irqs();\r\n        };\r\n    }\r\n    else\r\n    {\r\n        // is slave\r\n        this.check_irqs = function()\r\n        {\r\n            if(this.requested_irq >= 0)\r\n            {\r\n                PIC_LOG_VERBOSE && dbg_log(\"slave > Already requested irq: \" + this.requested_irq, LOG_PIC);\r\n                this.cpu.handle_irqs();\r\n                return;\r\n            }\r\n\r\n            var enabled_irr = this.irr & this.irq_mask;\r\n\r\n            if(!enabled_irr)\r\n            {\r\n                if(PIC_LOG_VERBOSE)\r\n                {\r\n                    dbg_log(\"slave > no unmasked irrs. irr=\" + h(this.irr, 2) +\r\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\r\n                }\r\n                return;\r\n            }\r\n\r\n            var irq_mask = enabled_irr & -enabled_irr;\r\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\r\n\r\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\r\n            {\r\n                // wait for eoi of higher or same priority interrupt\r\n                PIC_LOG_VERBOSE && dbg_log(\"slave > higher prio: isr=\" + h(this.isr, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\r\n                return;\r\n            }\r\n\r\n            dbg_assert(irq_mask !== 0);\r\n            var irq_number = v86util.int_log2_byte(irq_mask);\r\n            dbg_assert(irq_mask === (1 << irq_number));\r\n\r\n            PIC_LOG_VERBOSE && dbg_log(\"slave > request irq \" + irq_number, LOG_PIC);\r\n            this.requested_irq = irq_number;\r\n            this.master.set_irq(2);\r\n        };\r\n\r\n        this.acknowledge_irq = function()\r\n        {\r\n            if(this.requested_irq === -1)\r\n            {\r\n                return;\r\n            }\r\n\r\n            if(this.irr === 0)\r\n            {\r\n                PIC_LOG_VERBOSE && dbg_log(\"slave > spurious requested=\" + this.requested_irq, LOG_PIC);\r\n                this.requested_irq = -1;\r\n                this.master.irq_value &= ~(1 << 2);\r\n                this.cpu.pic_call_irq(this.irq_map | 7);\r\n                return;\r\n            }\r\n\r\n            dbg_assert(this.irr); // spurious\r\n            dbg_assert(this.requested_irq >= 0);\r\n\r\n            var irq_mask = 1 << this.requested_irq;\r\n\r\n            if((this.elcr & irq_mask) === 0) // not in level mode\r\n            {\r\n                this.irr &= ~irq_mask;\r\n            }\r\n\r\n            if(!this.auto_eoi)\r\n            {\r\n                this.isr |= irq_mask;\r\n            }\r\n\r\n            this.master.irq_value &= ~(1 << 2);\r\n            PIC_LOG_VERBOSE && dbg_log(\"slave > acknowledge \" + this.requested_irq, LOG_PIC);\r\n            this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\r\n\r\n            this.requested_irq = -1;\r\n            this.check_irqs();\r\n        };\r\n    }\r\n\r\n    this.dump = function()\r\n    {\r\n        dbg_log(\"mask: \" + h(this.irq_mask & 0xFF), LOG_PIC);\r\n        dbg_log(\"base: \" + h(this.irq_map), LOG_PIC);\r\n        dbg_log(\"requested: \" + h(this.irr), LOG_PIC);\r\n        dbg_log(\"serviced: \" + h(this.isr), LOG_PIC);\r\n\r\n        if(this.is_master)\r\n        {\r\n            this.slave.dump();\r\n        }\r\n    };\r\n\r\n    var io_base;\r\n    var iobase_high;\r\n    if(this.is_master)\r\n    {\r\n        io_base = 0x20;\r\n        iobase_high = 0x4D0;\r\n    }\r\n    else\r\n    {\r\n        io_base = 0xA0;\r\n        iobase_high = 0x4D1;\r\n    }\r\n\r\n    this.cpu.io.register_write(io_base, this, this.port20_write);\r\n    this.cpu.io.register_read(io_base, this, this.port20_read);\r\n\r\n    this.cpu.io.register_write(io_base | 1, this, this.port21_write);\r\n    this.cpu.io.register_read(io_base | 1, this, this.port21_read);\r\n\r\n    this.cpu.io.register_write(iobase_high, this, this.port4D0_write);\r\n    this.cpu.io.register_read(iobase_high, this, this.port4D0_read);\r\n\r\n\r\n    if(this.is_master)\r\n    {\r\n        this.set_irq = function(irq_number)\r\n        {\r\n            dbg_assert(irq_number >= 0 && irq_number < 16);\r\n\r\n            if(irq_number >= 8)\r\n            {\r\n                this.slave.set_irq(irq_number - 8);\r\n                return;\r\n            }\r\n\r\n            if(PIC_LOG_VERBOSE)\r\n            {\r\n                dbg_log(\"master> set irq \" + irq_number, LOG_PIC);\r\n            }\r\n\r\n            var irq_mask = 1 << irq_number;\r\n            if((this.irq_value & irq_mask) === 0)\r\n            {\r\n                this.irr |= irq_mask;\r\n                this.irq_value |= irq_mask;\r\n                this.check_irqs();\r\n            }\r\n        };\r\n\r\n        this.clear_irq = function(irq_number)\r\n        {\r\n            dbg_assert(irq_number >= 0 && irq_number < 16);\r\n            if(PIC_LOG_VERBOSE)\r\n            {\r\n                dbg_log(\"master> clear irq \" + irq_number, LOG_PIC);\r\n            }\r\n\r\n            if(irq_number >= 8)\r\n            {\r\n                this.slave.clear_irq(irq_number - 8);\r\n                return;\r\n            }\r\n\r\n            var irq_mask = 1 << irq_number;\r\n            if(this.irq_value & irq_mask)\r\n            {\r\n                this.irq_value &= ~irq_mask;\r\n                this.irr &= ~irq_mask;\r\n                this.check_irqs();\r\n            }\r\n        };\r\n    }\r\n    else\r\n    {\r\n        this.set_irq = function(irq_number)\r\n        {\r\n            dbg_assert(irq_number >= 0 && irq_number < 8);\r\n            if(PIC_LOG_VERBOSE)\r\n            {\r\n                dbg_log(\"slave > set irq \" + irq_number, LOG_PIC);\r\n            }\r\n\r\n            var irq_mask = 1 << irq_number;\r\n            if((this.irq_value & irq_mask) === 0)\r\n            {\r\n                this.irr |= irq_mask;\r\n                this.irq_value |= irq_mask;\r\n                this.check_irqs();\r\n            }\r\n        };\r\n\r\n        this.clear_irq = function(irq_number)\r\n        {\r\n            dbg_assert(irq_number >= 0 && irq_number < 8);\r\n            if(PIC_LOG_VERBOSE)\r\n            {\r\n                dbg_log(\"slave > clear irq \" + irq_number, LOG_PIC);\r\n            }\r\n\r\n            var irq_mask = 1 << irq_number;\r\n            if(this.irq_value & irq_mask)\r\n            {\r\n                this.irq_value &= ~irq_mask;\r\n                this.irr &= ~irq_mask;\r\n                this.check_irqs();\r\n            }\r\n        };\r\n    }\r\n\r\n    this.get_isr = function()\r\n    {\r\n        return this.isr;\r\n    };\r\n}\r\n\r\nPIC.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.irq_mask;\r\n    state[1] = this.irq_map;\r\n    state[2] = this.isr;\r\n    state[3] = this.irr;\r\n    state[4] = this.is_master;\r\n    state[5] = this.slave;\r\n    state[6] = this.expect_icw4;\r\n    state[7] = this.state;\r\n    state[8] = this.read_isr;\r\n    state[9] = this.auto_eoi;\r\n    state[10] = this.elcr;\r\n\r\n    return state;\r\n};\r\n\r\nPIC.prototype.set_state = function(state)\r\n{\r\n    this.irq_mask = state[0];\r\n    this.irq_map = state[1];\r\n    this.isr = state[2];\r\n    this.irr = state[3];\r\n    this.is_master = state[4];\r\n    this.slave = state[5];\r\n    this.expect_icw4 = state[6];\r\n    this.state = state[7];\r\n    this.read_isr = state[8];\r\n    this.auto_eoi = state[9];\r\n    this.elcr = state[10];\r\n};\r\n\r\nPIC.prototype.port20_write = function(data_byte)\r\n{\r\n    //dbg_log(\"20 write: \" + h(data_byte), LOG_PIC);\r\n    if(data_byte & 0x10) // xxxx1xxx\r\n    {\r\n        // icw1\r\n        dbg_log(\"icw1 = \" + h(data_byte), LOG_PIC);\r\n        this.isr = 0;\r\n        this.irr = 0;\r\n        this.irq_mask = 0;\r\n        this.irq_value = 0;\r\n        this.auto_eoi = 1;\r\n        this.requested_irq = -1;\r\n\r\n        this.expect_icw4 = data_byte & 1;\r\n        this.state = 1;\r\n    }\r\n    else if(data_byte & 8) // xxx01xxx\r\n    {\r\n        // ocw3\r\n        dbg_log(\"ocw3: \" + h(data_byte), LOG_PIC);\r\n        if(data_byte & 2)\r\n        {\r\n            this.read_isr = data_byte & 1;\r\n        }\r\n        if(data_byte & 4)\r\n        {\r\n            dbg_assert(false, \"unimplemented: polling\", LOG_PIC);\r\n        }\r\n        if(data_byte & 0x40)\r\n        {\r\n            this.special_mask_mode = (data_byte & 0x20) === 0x20;\r\n            dbg_log(\"special mask mode: \" + this.special_mask_mode, LOG_PIC);\r\n        }\r\n    }\r\n    else // xxx00xxx\r\n    {\r\n        // ocw2\r\n        // end of interrupt\r\n        dbg_log(\"eoi: \" + h(data_byte) + \" (\" + this.name + \")\", LOG_PIC);\r\n\r\n        var eoi_type = data_byte >> 5;\r\n\r\n        if(eoi_type === 1)\r\n        {\r\n            // non-specific eoi\r\n            this.isr &= this.isr - 1;\r\n            dbg_log(\"new isr: \" + h(this.isr, 2), LOG_PIC);\r\n        }\r\n        else if(eoi_type === 3)\r\n        {\r\n            // specific eoi\r\n            this.isr &= ~(1 << (data_byte & 7));\r\n        }\r\n        else if((data_byte & 0xC8) === 0xC0)\r\n        {\r\n            // os2 v4\r\n            let priority = data_byte & 7;\r\n            dbg_log(\"lowest priority: \" + h(priority), LOG_PIC);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unknown eoi: \" + h(data_byte), LOG_PIC);\r\n            dbg_assert(false);\r\n            this.isr &= this.isr - 1;\r\n        }\r\n\r\n        this.check_irqs();\r\n    }\r\n};\r\n\r\nPIC.prototype.port20_read = function()\r\n{\r\n    if(this.read_isr)\r\n    {\r\n        dbg_log(\"read port 20h (isr): \" + h(this.isr), LOG_PIC);\r\n        return this.isr;\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"read port 20h (irr): \" + h(this.irr), LOG_PIC);\r\n        return this.irr;\r\n    }\r\n};\r\n\r\nPIC.prototype.port21_write = function(data_byte)\r\n{\r\n    //dbg_log(\"21 write: \" + h(data_byte), LOG_PIC);\r\n    if(this.state === 0)\r\n    {\r\n        if(this.expect_icw4)\r\n        {\r\n            // icw4\r\n            this.expect_icw4 = false;\r\n            this.auto_eoi = data_byte & 2;\r\n            dbg_log(\"icw4: \" + h(data_byte) + \" autoeoi=\" + this.auto_eoi, LOG_PIC);\r\n\r\n            if((data_byte & 1) === 0)\r\n            {\r\n                dbg_assert(false, \"unimplemented: not 8086 mode\", LOG_PIC);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            // ocw1\r\n            this.irq_mask = ~data_byte;\r\n\r\n            if(PIC_LOG_VERBOSE)\r\n            {\r\n                dbg_log(\"interrupt mask: \" + (this.irq_mask & 0xFF).toString(2) +\r\n                        \" (\" + this.name + \")\", LOG_PIC);\r\n            }\r\n\r\n            this.check_irqs();\r\n        }\r\n    }\r\n    else if(this.state === 1)\r\n    {\r\n        // icw2\r\n        this.irq_map = data_byte;\r\n        dbg_log(\"interrupts are mapped to \" + h(this.irq_map) +\r\n                \" (\" + this.name + \")\", LOG_PIC);\r\n        this.state++;\r\n    }\r\n    else if(this.state === 2)\r\n    {\r\n        // icw3\r\n        this.state = 0;\r\n        dbg_log(\"icw3: \" + h(data_byte), LOG_PIC);\r\n    }\r\n};\r\n\r\nPIC.prototype.port21_read = function()\r\n{\r\n    dbg_log(\"21h read \" + h(~this.irq_mask & 0xff), LOG_PIC);\r\n    return ~this.irq_mask & 0xFF;\r\n};\r\n\r\nPIC.prototype.port4D0_read = function()\r\n{\r\n    dbg_log(\"elcr read: \" + h(this.elcr, 2), LOG_PIC);\r\n    return this.elcr;\r\n};\r\n\r\nPIC.prototype.port4D0_write = function(value)\r\n{\r\n    dbg_log(\"elcr write: \" + h(value, 2), LOG_PIC);\r\n    // set by seabios to 00 0C (only set for pci interrupts)\r\n    this.elcr = value;\r\n};\r\n\r\n","\"use strict\";\r\n\r\n/*\r\n * Serial ports\r\n * http://wiki.osdev.org/UART\r\n * https://github.com/s-macke/jor1k/blob/master/js/worker/dev/uart.js\r\n * https://www.freebsd.org/doc/en/articles/serial-uart/\r\n */\r\n\r\n/** @const */\r\nvar DLAB = 0x80;\r\n\r\n\r\n/** @const */ var UART_IER_MSI  = 0x08; /* Modem Status Changed int. */\r\n/** @const */ var UART_IER_THRI = 0x02; /* Enable Transmitter holding register int. */\r\n/** @const */ var UART_IER_RDI = 0x01; /* Enable receiver data interrupt */\r\n\r\n/** @const */var UART_IIR_MSI = 0x00; /* Modem status interrupt (Low priority) */\r\n/** @const */var UART_IIR_NO_INT = 0x01;\r\n/** @const */var UART_IIR_THRI = 0x02; /* Transmitter holding register empty */\r\n/** @const */var UART_IIR_RDI = 0x04; /* Receiver data interrupt */\r\n/** @const */var UART_IIR_RLSI = 0x06; /* Receiver line status interrupt (High p.) */\r\n/** @const */var UART_IIR_CTI = 0x0c; /* Character timeout */\r\n\r\n/** @const */ var UART_LSR_DATA_READY        = 0x1;  // data available\r\n/** @const */ var UART_LSR_TX_EMPTY        = 0x20; // TX (THR) buffer is empty\r\n/** @const */ var UART_LSR_TRANSMITTER_EMPTY = 0x40; // TX empty and line is idle\r\n\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {number} port\r\n * @param {BusConnector} bus\r\n */\r\nfunction UART(cpu, port, bus)\r\n{\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    this.ints = 1 << UART_IIR_THRI;\r\n\r\n    this.baud_rate = 0;\r\n\r\n    this.line_control = 0;\r\n\r\n    // line status register\r\n    this.lsr = UART_LSR_TRANSMITTER_EMPTY | UART_LSR_TX_EMPTY;\r\n\r\n    this.fifo_control = 0;\r\n\r\n    // interrupts enable\r\n    this.ier = 0;\r\n\r\n    // interrupt identification register\r\n    this.iir = UART_IIR_NO_INT;\r\n\r\n    this.modem_control = 0;\r\n    this.modem_status = 0;\r\n\r\n    this.scratch_register = 0;\r\n\r\n    this.irq = 0;\r\n\r\n    this.input = new ByteQueue(4096);\r\n\r\n    this.current_line = [];\r\n\r\n    switch(port)\r\n    {\r\n        case 0x3F8:\r\n            this.com = 0;\r\n            this.irq = 4;\r\n            break;\r\n        case 0x2F8:\r\n            this.com = 1;\r\n            this.irq = 3;\r\n            break;\r\n        case 0x3E8:\r\n            this.com = 2;\r\n            this.irq = 4;\r\n            break;\r\n        case 0x2E8:\r\n            this.com = 3;\r\n            this.irq = 3;\r\n            break;\r\n        default:\r\n            dbg_log(\"Invalid serial port: \" + h(port), LOG_SERIAL);\r\n            this.com = 0;\r\n            this.irq = 4;\r\n    }\r\n\r\n    this.bus.register(\"serial\" + this.com + \"-input\", function(data)\r\n    {\r\n        this.data_received(data);\r\n    }, this);\r\n\r\n    var io = cpu.io;\r\n\r\n    io.register_write(port, this, function(out_byte)\r\n    {\r\n        this.write_data(out_byte);\r\n    }, function(out_word)\r\n    {\r\n        this.write_data(out_word & 0xFF);\r\n        this.write_data(out_word >> 8);\r\n    });\r\n\r\n    io.register_write(port | 1, this, function(out_byte)\r\n    {\r\n        if(this.line_control & DLAB)\r\n        {\r\n            this.baud_rate = this.baud_rate & 0xFF | out_byte << 8;\r\n            dbg_log(\"baud rate: \" + h(this.baud_rate), LOG_SERIAL);\r\n        }\r\n        else\r\n        {\r\n            this.ier = out_byte & 0xF;\r\n            dbg_log(\"interrupt enable: \" + h(out_byte), LOG_SERIAL);\r\n            this.CheckInterrupt();\r\n        }\r\n    });\r\n\r\n    io.register_read(port, this, function()\r\n    {\r\n        if(this.line_control & DLAB)\r\n        {\r\n            return this.baud_rate & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            var data = this.input.shift();\r\n\r\n            if(data === -1)\r\n            {\r\n                dbg_log(\"Read input empty\", LOG_SERIAL);\r\n            }\r\n            else\r\n            {\r\n                dbg_log(\"Read input: \" + h(data), LOG_SERIAL);\r\n            }\r\n\r\n            if(this.input.length === 0)\r\n            {\r\n                this.lsr &= ~UART_LSR_DATA_READY;\r\n                this.ClearInterrupt(UART_IIR_CTI);\r\n            }\r\n\r\n            return data;\r\n        }\r\n    });\r\n\r\n    io.register_read(port | 1, this, function()\r\n    {\r\n        if(this.line_control & DLAB)\r\n        {\r\n            return this.baud_rate >> 8;\r\n        }\r\n        else\r\n        {\r\n            return this.ier & 0xF;\r\n        }\r\n    });\r\n\r\n    io.register_read(port | 2, this, function()\r\n    {\r\n        var ret = this.iir & 0xF | 0xC0;\r\n        dbg_log(\"read interrupt identification: \" + h(this.iir), LOG_SERIAL);\r\n\r\n        if (this.iir == UART_IIR_THRI) {\r\n            this.ClearInterrupt(UART_IIR_THRI);\r\n        }\r\n\r\n        return ret;\r\n    });\r\n    io.register_write(port | 2, this, function(out_byte)\r\n    {\r\n        dbg_log(\"fifo control: \" + h(out_byte), LOG_SERIAL);\r\n        this.fifo_control = out_byte;\r\n    });\r\n\r\n    io.register_read(port | 3, this, function()\r\n    {\r\n        dbg_log(\"read line control: \" + h(this.line_control), LOG_SERIAL);\r\n        return this.line_control;\r\n    });\r\n    io.register_write(port | 3, this, function(out_byte)\r\n    {\r\n        dbg_log(\"line control: \" + h(out_byte), LOG_SERIAL);\r\n        this.line_control = out_byte;\r\n    });\r\n\r\n\r\n    io.register_read(port | 4, this, function()\r\n    {\r\n        return this.modem_control;\r\n    });\r\n    io.register_write(port | 4, this, function(out_byte)\r\n    {\r\n        dbg_log(\"modem control: \" + h(out_byte), LOG_SERIAL);\r\n        this.modem_control = out_byte;\r\n    });\r\n\r\n    io.register_read(port | 5, this, function()\r\n    {\r\n        dbg_log(\"read line status: \" + h(this.lsr), LOG_SERIAL);\r\n        return this.lsr;\r\n    });\r\n    io.register_write(port | 5, this, function(out_byte)\r\n    {\r\n        dbg_log(\"Factory test write\", LOG_SERIAL);\r\n    });\r\n\r\n    io.register_read(port | 6, this, function()\r\n    {\r\n        dbg_log(\"read modem status: \" + h(this.modem_status), LOG_SERIAL);\r\n        return this.modem_status;\r\n    });\r\n    io.register_write(port | 6, this, function(out_byte)\r\n    {\r\n        dbg_log(\"Unkown register write (base+6)\", LOG_SERIAL);\r\n    });\r\n\r\n    io.register_read(port | 7, this, function()\r\n    {\r\n        return this.scratch_register;\r\n    });\r\n    io.register_write(port | 7, this, function(out_byte)\r\n    {\r\n        this.scratch_register = out_byte;\r\n    });\r\n}\r\n\r\nUART.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.ints;\r\n    state[1] = this.baud_rate;\r\n    state[2] = this.line_control;\r\n    state[3] = this.lsr;\r\n    state[4] = this.fifo_control;\r\n    state[5] = this.ier;\r\n    state[6] = this.iir;\r\n    state[7] = this.modem_control;\r\n    state[8] = this.modem_status;\r\n    state[9] = this.scratch_register;\r\n    state[10] = this.irq;\r\n\r\n    return state;\r\n};\r\n\r\nUART.prototype.set_state = function(state)\r\n{\r\n    this.ints = state[0];\r\n    this.baud_rate = state[1];\r\n    this.line_control = state[2];\r\n    this.lsr = state[3];\r\n    this.fifo_control = state[4];\r\n    this.ier = state[5];\r\n    this.iir = state[6];\r\n    this.modem_control = state[7];\r\n    this.modem_status = state[8];\r\n    this.scratch_register = state[9];\r\n    this.irq = state[10];\r\n};\r\n\r\nUART.prototype.CheckInterrupt = function() {\r\n    if ((this.ints & (1 << UART_IIR_CTI))  && (this.ier & UART_IER_RDI)) {\r\n        this.iir = UART_IIR_CTI;\r\n        this.cpu.device_raise_irq(this.irq);\r\n    } else\r\n    if ((this.ints & (1 << UART_IIR_THRI)) && (this.ier & UART_IER_THRI)) {\r\n        this.iir = UART_IIR_THRI;\r\n        this.cpu.device_raise_irq(this.irq);\r\n    } else\r\n    if ((this.ints & (1 << UART_IIR_MSI))  && (this.ier & UART_IER_MSI)) {\r\n        this.iir = UART_IIR_MSI;\r\n        this.cpu.device_raise_irq(this.irq);\r\n    } else {\r\n        this.iir = UART_IIR_NO_INT;\r\n        this.cpu.device_lower_irq(this.irq);\r\n    }\r\n};\r\n\r\nUART.prototype.ThrowInterrupt = function(line) {\r\n    this.ints |= (1 << line);\r\n    this.CheckInterrupt();\r\n};\r\n\r\nUART.prototype.ClearInterrupt = function(line) {\r\n    this.ints &= ~(1 << line);\r\n    this.CheckInterrupt();\r\n};\r\n\r\n/**\r\n * @param {number} data\r\n */\r\nUART.prototype.data_received = function(data)\r\n{\r\n    dbg_log(\"input: \" + h(data), LOG_SERIAL);\r\n    this.input.push(data);\r\n\r\n    this.lsr |= UART_LSR_DATA_READY;\r\n    this.ThrowInterrupt(UART_IIR_CTI);\r\n};\r\n\r\nUART.prototype.write_data = function(out_byte)\r\n{\r\n    if(this.line_control & DLAB)\r\n    {\r\n        this.baud_rate = this.baud_rate & ~0xFF | out_byte;\r\n        return;\r\n    }\r\n\r\n    dbg_log(\"data: \" + h(out_byte), LOG_SERIAL);\r\n\r\n    this.ThrowInterrupt(UART_IIR_THRI);\r\n\r\n    this.bus.send(\"serial\" + this.com + \"-output-byte\", out_byte);\r\n\r\n    if(out_byte === 0xFF)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var char = String.fromCharCode(out_byte);\r\n\r\n    this.bus.send(\"serial\" + this.com + \"-output-char\", char);\r\n\r\n    this.current_line.push(out_byte);\r\n\r\n    if(char === \"\\n\")\r\n    {\r\n        dbg_log(\"SERIAL: \" + String.fromCharCode.apply(\"\", this.current_line).trimRight());\r\n        this.bus.send(\"serial\" + this.com + \"-output-line\", String.fromCharCode.apply(\"\", this.current_line));\r\n        this.current_line = [];\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar STATE_VERSION = 5;\r\n\r\n/** @const */\r\nvar STATE_MAGIC = 0x86768676|0;\r\n\r\n/** @const */\r\nvar STATE_INDEX_MAGIC = 0;\r\n\r\n/** @const */\r\nvar STATE_INDEX_VERSION = 1;\r\n\r\n/** @const */\r\nvar STATE_INDEX_TOTAL_LEN = 2;\r\n\r\n/** @const */\r\nvar STATE_INDEX_INFO_LEN = 3;\r\n\r\n/** @const */\r\nvar STATE_INFO_BLOCK_START = 16;\r\n\r\n\r\n/** @constructor */\r\nfunction StateLoadError(msg)\r\n{\r\n    this.message = msg;\r\n}\r\nStateLoadError.prototype = new Error;\r\n\r\n\r\nfunction save_object(obj, saved_buffers)\r\n{\r\n    if(typeof obj !== \"object\" || obj === null || obj instanceof Array)\r\n    {\r\n        return obj;\r\n    }\r\n\r\n    dbg_assert(obj.constructor !== Object);\r\n\r\n    if(obj.BYTES_PER_ELEMENT)\r\n    {\r\n        // Uint8Array, etc.\r\n        var buffer = new Uint8Array(obj.buffer, obj.byteOffset, obj.length * obj.BYTES_PER_ELEMENT);\r\n\r\n        return {\r\n            \"__state_type__\": obj.constructor.name,\r\n            \"buffer_id\": saved_buffers.push(buffer) - 1,\r\n        };\r\n    }\r\n\r\n    if(DEBUG && !obj.get_state)\r\n    {\r\n        console.log(\"Object without get_state: \", obj);\r\n    }\r\n\r\n    var state = obj.get_state();\r\n    var result = [];\r\n\r\n    for(var i = 0; i < state.length; i++)\r\n    {\r\n        var value = state[i];\r\n\r\n        dbg_assert(typeof value !== \"function\");\r\n\r\n        result[i] = save_object(value, saved_buffers);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction restore_object(base, obj, buffers)\r\n{\r\n    // recursively restore obj into base\r\n\r\n    if(typeof obj !== \"object\" || obj === null)\r\n    {\r\n        return obj;\r\n    }\r\n\r\n    if(base instanceof Array)\r\n    {\r\n        return obj;\r\n    }\r\n\r\n    var type = obj[\"__state_type__\"];\r\n\r\n    if(type === undefined)\r\n    {\r\n        if(DEBUG && base === undefined)\r\n        {\r\n            console.log(\"Cannot restore (base doesn't exist)\", obj);\r\n            dbg_assert(false);\r\n        }\r\n\r\n        if(DEBUG && !base.get_state)\r\n        {\r\n            console.log(\"No get_state:\", base);\r\n        }\r\n\r\n        var current = base.get_state();\r\n\r\n        dbg_assert(current.length === obj.length, \"Cannot restore: Different number of properties\");\r\n\r\n        for(var i = 0; i < obj.length; i++)\r\n        {\r\n            obj[i] = restore_object(current[i], obj[i], buffers);\r\n        }\r\n\r\n        base.set_state(obj);\r\n\r\n        return base;\r\n    }\r\n    else\r\n    {\r\n        var table = {\r\n            \"Uint8Array\": Uint8Array,\r\n            \"Int8Array\": Int8Array,\r\n            \"Uint16Array\": Uint16Array,\r\n            \"Int16Array\": Int16Array,\r\n            \"Uint32Array\": Uint32Array,\r\n            \"Int32Array\": Int32Array,\r\n            \"Float32Array\": Float32Array,\r\n            \"Float64Array\": Float64Array,\r\n        };\r\n\r\n        var constructor = table[type];\r\n        dbg_assert(constructor, \"Unkown type: \" + type);\r\n\r\n        var info = buffers.infos[obj[\"buffer_id\"]];\r\n\r\n        dbg_assert(base);\r\n        dbg_assert(base.constructor === constructor);\r\n\r\n        // restore large buffers by just returning a view on the state blob\r\n        if(info.length >= 1024 * 1024 && constructor === Uint8Array)\r\n        {\r\n            return new Uint8Array(buffers.full, info.offset, info.length);\r\n        }\r\n        // XXX: Disabled, unpredictable since it updates in-place, breaks pci\r\n        //      and possibly also breaks restore -> save -> restore again\r\n        // avoid a new allocation if possible\r\n        //else if(base &&\r\n        //        base.constructor === constructor &&\r\n        //        base.byteOffset === 0 &&\r\n        //        base.byteLength === info.length)\r\n        //{\r\n        //    new Uint8Array(base.buffer).set(\r\n        //        new Uint8Array(buffers.full, info.offset, info.length),\r\n        //        base.byteOffset\r\n        //    );\r\n        //    return base;\r\n        //}\r\n        else\r\n        {\r\n            var buf = buffers.full.slice(info.offset, info.offset + info.length);\r\n            return new constructor(buf);\r\n        }\r\n    }\r\n}\r\n\r\nCPU.prototype.save_state = function()\r\n{\r\n    var saved_buffers = [];\r\n    var state = save_object(this, saved_buffers);\r\n\r\n    var buffer_infos = [];\r\n    var total_buffer_size = 0;\r\n\r\n    for(var i = 0; i < saved_buffers.length; i++)\r\n    {\r\n        var len = saved_buffers[i].byteLength;\r\n\r\n        buffer_infos[i] = {\r\n            offset: total_buffer_size,\r\n            length: len,\r\n        };\r\n\r\n        total_buffer_size += len;\r\n\r\n        // align\r\n        total_buffer_size = total_buffer_size + 3 & ~3;\r\n    }\r\n\r\n    var info_object = JSON.stringify({\r\n        \"buffer_infos\": buffer_infos,\r\n        \"state\": state,\r\n    });\r\n\r\n    var buffer_block_start = STATE_INFO_BLOCK_START + 2 * info_object.length;\r\n    buffer_block_start = buffer_block_start + 3 & ~3;\r\n    var total_size = buffer_block_start + total_buffer_size;\r\n\r\n    //console.log(\"State: json_size=\" + Math.ceil(buffer_block_start / 1024 / 1024) + \"MB \" +\r\n    //               \"buffer_size=\" + Math.ceil(total_buffer_size / 1024 / 1024) + \"MB\");\r\n\r\n    var result = new ArrayBuffer(total_size);\r\n\r\n    var header_block = new Int32Array(\r\n        result,\r\n        0,\r\n        STATE_INFO_BLOCK_START / 4\r\n    );\r\n    var info_block = new Uint16Array(\r\n        result,\r\n        STATE_INFO_BLOCK_START,\r\n        info_object.length\r\n    );\r\n    var buffer_block = new Uint8Array(\r\n        result,\r\n        buffer_block_start\r\n    );\r\n\r\n    header_block[STATE_INDEX_MAGIC] = STATE_MAGIC;\r\n    header_block[STATE_INDEX_VERSION] = STATE_VERSION;\r\n    header_block[STATE_INDEX_TOTAL_LEN] = total_size;\r\n    header_block[STATE_INDEX_INFO_LEN] = info_object.length * 2;\r\n\r\n    for(var i = 0; i < info_object.length; i++)\r\n    {\r\n        info_block[i] = info_object.charCodeAt(i);\r\n    }\r\n\r\n    for(var i = 0; i < saved_buffers.length; i++)\r\n    {\r\n        var buffer = saved_buffers[i];\r\n        dbg_assert(buffer.constructor === Uint8Array);\r\n        buffer_block.set(buffer, buffer_infos[i].offset);\r\n    }\r\n\r\n    return result;\r\n};\r\n\r\nCPU.prototype.restore_state = function(state)\r\n{\r\n    var len = state.byteLength;\r\n\r\n    if(len < STATE_INFO_BLOCK_START)\r\n    {\r\n        throw new StateLoadError(\"Invalid length: \" + len);\r\n    }\r\n\r\n    var header_block = new Int32Array(state, 0, 4);\r\n\r\n    if(header_block[STATE_INDEX_MAGIC] !== STATE_MAGIC)\r\n    {\r\n        throw new StateLoadError(\"Invalid header: \" + h(header_block[STATE_INDEX_MAGIC] >>> 0));\r\n    }\r\n\r\n    if(header_block[STATE_INDEX_VERSION] !== STATE_VERSION)\r\n    {\r\n        throw new StateLoadError(\r\n                \"Version mismatch: dump=\" + header_block[STATE_INDEX_VERSION] +\r\n                \" we=\" + STATE_VERSION);\r\n    }\r\n\r\n    if(header_block[STATE_INDEX_TOTAL_LEN] !== len)\r\n    {\r\n        throw new StateLoadError(\r\n                \"Length doesn't match header: \" +\r\n                \"real=\" + len + \" header=\" + header_block[STATE_INDEX_TOTAL_LEN]);\r\n    }\r\n\r\n    var info_block_len = header_block[STATE_INDEX_INFO_LEN];\r\n\r\n    if(info_block_len < 0 ||\r\n       info_block_len + 12 >= len ||\r\n       info_block_len % 2)\r\n    {\r\n        throw new StateLoadError(\"Invalid info block length: \" + info_block_len);\r\n    }\r\n\r\n    var info_block_str_len = info_block_len / 2;\r\n    var info_block_buffer = new Uint16Array(state, STATE_INFO_BLOCK_START, info_block_str_len);\r\n    var info_block = \"\";\r\n\r\n    for(var i = 0; i < info_block_str_len - 8; )\r\n    {\r\n        info_block += String.fromCharCode(\r\n            info_block_buffer[i++], info_block_buffer[i++],\r\n            info_block_buffer[i++], info_block_buffer[i++],\r\n            info_block_buffer[i++], info_block_buffer[i++],\r\n            info_block_buffer[i++], info_block_buffer[i++]\r\n        );\r\n    }\r\n\r\n    for(; i < info_block_str_len; )\r\n    {\r\n        info_block += String.fromCharCode(info_block_buffer[i++]);\r\n    }\r\n\r\n    var info_block_obj = JSON.parse(info_block);\r\n    var state_object = info_block_obj[\"state\"];\r\n    var buffer_infos = info_block_obj[\"buffer_infos\"];\r\n    var buffer_block_start = STATE_INFO_BLOCK_START + info_block_len;\r\n    buffer_block_start = buffer_block_start + 3 & ~3;\r\n\r\n    for(var i = 0; i < buffer_infos.length; i++)\r\n    {\r\n        buffer_infos[i].offset += buffer_block_start;\r\n    }\r\n\r\n    var buffers = {\r\n        full: state,\r\n        infos: buffer_infos,\r\n    };\r\n\r\n    restore_object(this, state_object, buffers);\r\n};\r\n","\"use strict\";\r\n\r\n// http://www.ethernut.de/pdf/8019asds.pdf\r\n\r\nconst NE2K_LOG_VERBOSE = false;\r\n\r\n/** @const */ var E8390_CMD = 0x00; /* The command register (for all pages) */\r\n\r\n/* Page 0 register offsets. */\r\n/** @const */ var EN0_CLDALO = 0x01; /* Low byte of current local dma addr RD */\r\n/** @const */ var EN0_STARTPG = 0x01; /* Starting page of ring bfr WR */\r\n/** @const */ var EN0_CLDAHI = 0x02; /* High byte of current local dma addr RD */\r\n/** @const */ var EN0_STOPPG = 0x02; /* Ending page +1 of ring bfr WR */\r\n/** @const */ var EN0_BOUNDARY = 0x03; /* Boundary page of ring bfr RD WR */\r\n/** @const */ var EN0_TSR = 0x04; /* Transmit status reg RD */\r\n/** @const */ var EN0_TPSR = 0x04; /* Transmit starting page WR */\r\n/** @const */ var EN0_NCR = 0x05; /* Number of collision reg RD */\r\n/** @const */ var EN0_TCNTLO = 0x05; /* Low byte of tx byte count WR */\r\n/** @const */ var EN0_FIFO = 0x06; /* FIFO RD */\r\n/** @const */ var EN0_TCNTHI = 0x06; /* High byte of tx byte count WR */\r\n/** @const */ var EN0_ISR = 0x07; /* Interrupt status reg RD WR */\r\n/** @const */ var EN0_CRDALO = 0x08; /* low byte of current remote dma address RD */\r\n/** @const */ var EN0_RSARLO = 0x08; /* Remote start address reg 0 */\r\n/** @const */ var EN0_CRDAHI = 0x09; /* high byte, current remote dma address RD */\r\n/** @const */ var EN0_RSARHI = 0x09; /* Remote start address reg 1 */\r\n/** @const */ var EN0_RCNTLO = 0x0a; /* Remote byte count reg WR */\r\n/** @const */ var EN0_RCNTHI = 0x0b; /* Remote byte count reg WR */\r\n/** @const */ var EN0_RSR = 0x0c; /* rx status reg RD */\r\n/** @const */ var EN0_RXCR = 0x0c; /* RX configuration reg WR */\r\n/** @const */ var EN0_TXCR = 0x0d; /* TX configuration reg WR */\r\n/** @const */ var EN0_COUNTER0 = 0x0d; /* Rcv alignment error counter RD */\r\n/** @const */ var EN0_DCFG = 0x0e; /* Data configuration reg WR */\r\n/** @const */ var EN0_COUNTER1 = 0x0e; /* Rcv CRC error counter RD */\r\n/** @const */ var EN0_IMR = 0x0f; /* Interrupt mask reg WR */\r\n/** @const */ var EN0_COUNTER2 = 0x0f; /* Rcv missed frame error counter RD */\r\n\r\n/** @const */ var NE_DATAPORT = 0x10; /* NatSemi-defined port window offset. */\r\n/** @const */ var NE_RESET = 0x1f; /* Issue a read to reset, a write to clear. */\r\n\r\n/* Bits in EN0_ISR - Interrupt status register */\r\n/** @const */ var ENISR_RX = 0x01; /* Receiver, no error */\r\n/** @const */ var ENISR_TX = 0x02; /* Transmitter, no error */\r\n/** @const */ var ENISR_RX_ERR = 0x04; /* Receiver, with error */\r\n/** @const */ var ENISR_TX_ERR = 0x08; /* Transmitter, with error */\r\n/** @const */ var ENISR_OVER = 0x10; /* Receiver overwrote the ring */\r\n/** @const */ var ENISR_COUNTERS = 0x20; /* Counters need emptying */\r\n/** @const */ var ENISR_RDC = 0x40; /* remote dma complete */\r\n/** @const */ var ENISR_RESET = 0x80; /* Reset completed */\r\n/** @const */ var ENISR_ALL = 0x3f; /* Interrupts we will enable */\r\n\r\n/** @const */ var ENRSR_RXOK = 0x01; /* Received a good packet */\r\n\r\n/** @const */ var START_PAGE = 0x40;\r\n/** @const */ var START_RX_PAGE = 0x40 + 12;\r\n/** @const */ var STOP_PAGE = 0x80;\r\n\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {BusConnector} bus\r\n * @param {Boolean} preserve_mac_from_state_image\r\n */\r\nfunction Ne2k(cpu, bus, preserve_mac_from_state_image)\r\n{\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    /** @const @type {PCI} */\r\n    this.pci = cpu.devices.pci;\r\n\r\n    this.preserve_mac_from_state_image = preserve_mac_from_state_image;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n    this.bus.register(\"net0-receive\", function(data)\r\n    {\r\n        this.receive(data);\r\n    }, this);\r\n\r\n    this.port = 0x300;\r\n\r\n    this.name = \"ne2k\";\r\n\r\n    /** @const */\r\n    var use_pci = true;\r\n\r\n    if(use_pci)\r\n    {\r\n        this.pci_space = [\r\n            0xec, 0x10, 0x29, 0x80, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,\r\n            this.port & 0xFF | 1, this.port >> 8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x00, 0x11,\r\n            0x00, 0x00, 0xb8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\r\n        ];\r\n        this.pci_id = 0x05 << 3;\r\n        this.pci_bars = [\r\n            {\r\n                size: 32,\r\n            },\r\n        ];\r\n    }\r\n\r\n    this.isr = 0;\r\n    this.imr = 0; // interrupt mask register\r\n\r\n    this.cr = 1;\r\n\r\n    this.dcfg = 0;\r\n\r\n    this.rcnt = 0;\r\n\r\n    this.tcnt = 0;\r\n    this.tpsr = 0;\r\n    this.memory = new Uint8Array(256 * 0x80);\r\n\r\n    this.rxcr = 0;\r\n    this.txcr = 0;\r\n    this.tsr = 1;\r\n\r\n    // mac address\r\n    this.mac = new Uint8Array([\r\n        0x00, 0x22, 0x15,\r\n        Math.random() * 255 | 0,\r\n        Math.random() * 255 | 0,\r\n        Math.random() * 255 | 0,\r\n    ]);\r\n\r\n    for(var i = 0; i < 6; i++)\r\n    {\r\n        this.memory[i << 1] = this.memory[i << 1 | 1] = this.mac[i];\r\n    }\r\n\r\n    // the PROM signature of 0x57, 0x57 is also doubled\r\n    // resulting in setting the 4 bytes at the end, 28, 29, 30 and 31 to 0x57\r\n    this.memory[14 << 1] = this.memory[14 << 1 | 1] = 0x57;\r\n    this.memory[15 << 1] = this.memory[15 << 1 | 1] = 0x57;\r\n\r\n    dbg_log(\"Mac: \" + h(this.mac[0], 2) + \":\" +\r\n                      h(this.mac[1], 2) + \":\" +\r\n                      h(this.mac[2], 2) + \":\" +\r\n                      h(this.mac[3], 2) + \":\" +\r\n                      h(this.mac[4], 2) + \":\" +\r\n                      h(this.mac[5], 2), LOG_NET);\r\n\r\n    this.rsar = 0;\r\n\r\n    this.pstart = START_PAGE;\r\n    this.pstop = STOP_PAGE;\r\n\r\n    this.curpg = START_RX_PAGE;\r\n    this.boundary = START_RX_PAGE;\r\n\r\n    var io = cpu.io;\r\n\r\n    io.register_read(this.port | E8390_CMD, this, function()\r\n    {\r\n        dbg_log(\"Read cmd\", LOG_NET);\r\n        return this.cr;\r\n    });\r\n\r\n    io.register_write(this.port | E8390_CMD, this, function(data_byte)\r\n    {\r\n        this.cr = data_byte;\r\n        dbg_log(\"Write command: \" + h(data_byte, 2) + \" newpg=\" + (this.cr >> 6) + \" txcr=\" + h(this.txcr, 2), LOG_NET);\r\n\r\n        if(this.cr & 1)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if((data_byte & 0x18) && this.rcnt === 0)\r\n        {\r\n            this.do_interrupt(ENISR_RDC);\r\n        }\r\n\r\n        if(data_byte & 4)\r\n        {\r\n            var start = this.tpsr << 8;\r\n            var data = this.memory.subarray(start, start + this.tcnt);\r\n            this.bus.send(\"net0-send\", data);\r\n            this.bus.send(\"eth-transmit-end\", [data.length]);\r\n            this.cr &= ~4;\r\n            this.do_interrupt(ENISR_TX);\r\n\r\n            dbg_log(\"Command: Transfer. length=\" + h(data.byteLength), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_COUNTER0, this, function()\r\n    {\r\n        dbg_log(\"Read counter0\", LOG_NET);\r\n        return 0;\r\n    });\r\n\r\n    io.register_read(this.port | EN0_COUNTER1, this, function()\r\n    {\r\n        dbg_log(\"Read counter1\", LOG_NET);\r\n        return 0;\r\n    });\r\n\r\n    io.register_read(this.port | EN0_COUNTER2, this, function()\r\n    {\r\n        dbg_log(\"Read counter2\", LOG_NET);\r\n        return 0;\r\n    });\r\n\r\n    io.register_read(this.port | NE_RESET, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Read reset\", LOG_NET);\r\n            this.do_interrupt(ENISR_RESET);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg\" + pg + \"/1f\", LOG_NET);\r\n            dbg_assert(false);\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    io.register_write(this.port | NE_RESET, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write reset: \" + h(data_byte, 2), LOG_NET);\r\n            //this.isr &= ~ENISR_RESET;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg\" + pg + \"/1f: \" + h(data_byte), LOG_NET);\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_STARTPG, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            return this.pstart;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"Read pg1/01 (mac[0])\", LOG_NET);\r\n            return this.mac[0];\r\n        }\r\n        else if(pg === 2)\r\n        {\r\n            return this.pstart;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg\" + pg + \"/01\");\r\n            dbg_assert(false);\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_STARTPG, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"start page: \" + h(data_byte, 2), LOG_NET);\r\n            this.pstart = data_byte;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"mac[0] = \" + h(data_byte), LOG_NET);\r\n            this.mac[0] = data_byte;\r\n        }\r\n        else if(pg === 3)\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg3/01 (9346CR): \" + h(data_byte), LOG_NET);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg\" + pg + \"/01: \" + h(data_byte), LOG_NET);\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n\r\n    io.register_read(this.port | EN0_STOPPG, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            return this.pstop;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"Read pg1/02 (mac[1])\", LOG_NET);\r\n            return this.mac[1];\r\n        }\r\n        else if(pg === 2)\r\n        {\r\n            return this.pstop;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg\" + pg + \"/02\", LOG_NET);\r\n            dbg_assert(false);\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_STOPPG, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"stop page: \" + h(data_byte, 2), LOG_NET);\r\n            if(data_byte > (this.memory.length >> 8))\r\n            {\r\n                data_byte = this.memory.length >> 8;\r\n                dbg_log(\"XXX: Adjusting stop page to \" + h(data_byte), LOG_NET);\r\n            }\r\n            this.pstop = data_byte;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"mac[1] = \" + h(data_byte), LOG_NET);\r\n            this.mac[1] = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg\" + pg + \"/02: \" + h(data_byte), LOG_NET);\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_ISR, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Read isr: \" + h(this.isr, 2), LOG_NET);\r\n            return this.isr;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"Read curpg: \" + h(this.curpg, 2), LOG_NET);\r\n            return this.curpg;\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_ISR, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            // acknowledge interrupts where bit is set\r\n            dbg_log(\"Write isr: \" + h(data_byte, 2), LOG_NET);\r\n            this.isr &= ~data_byte;\r\n            this.update_irq();\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"Write curpg: \" + h(data_byte, 2), LOG_NET);\r\n            this.curpg = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_TXCR, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            this.txcr = data_byte;\r\n            dbg_log(\"Write tx config: \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg\" + pg + \"/0d \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_DCFG, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write data configuration: \" + h(data_byte, 2), LOG_NET);\r\n            this.dcfg = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg\" + pg + \"/0e \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_RCNTLO, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Read pg0/0a\", LOG_NET);\r\n            return 0x50;\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(false, \"TODO\");\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_RCNTLO, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write remote byte count low: \" + h(data_byte, 2), LOG_NET);\r\n            this.rcnt = this.rcnt & 0xFF00 | data_byte & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg\" + pg + \"/0a \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_RCNTHI, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Read pg0/0b\", LOG_NET);\r\n            return 0x43;\r\n        }\r\n        else\r\n        {\r\n            dbg_assert(false, \"TODO\");\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_RCNTHI, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write remote byte count high: \" + h(data_byte, 2), LOG_NET);\r\n            this.rcnt = this.rcnt & 0xFF | data_byte << 8 & 0xFF00;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg\" + pg + \"/0b \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_RSARLO, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Read remote start address low\", LOG_NET);\r\n            return this.rsar & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Read pg\" + pg + \"/08\", LOG_NET);\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_RSARLO, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write remote start address low: \" + h(data_byte, 2), LOG_NET);\r\n            this.rsar = this.rsar & 0xFF00 | data_byte & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg\" + pg + \"/08 \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_RSARHI, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Read remote start address high\", LOG_NET);\r\n            return this.rsar >> 8 & 0xFF;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Read pg\" + pg + \"/09\", LOG_NET);\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_RSARHI, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write remote start address low: \" + h(data_byte, 2), LOG_NET);\r\n            this.rsar = this.rsar & 0xFF | data_byte << 8 & 0xFF00;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg\" + pg + \"/09 \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_IMR, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write interrupt mask register: \" + h(data_byte, 2) + \" isr=\" + h(this.isr, 2), LOG_NET);\r\n            this.imr = data_byte;\r\n            this.update_irq();\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg\" + pg + \"/0f \" + h(data_byte, 2), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_BOUNDARY, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Read boundary: \" + h(this.boundary, 2), LOG_NET);\r\n            return this.boundary;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"Read pg1/03 (mac[2])\", LOG_NET);\r\n            return this.mac[2];\r\n        }\r\n        else if(pg === 3)\r\n        {\r\n            dbg_log(\"Unimplemented: Read pg3/03 (CONFIG0)\", LOG_NET);\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg\" + pg + \"/03\", LOG_NET);\r\n            dbg_assert(false);\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_BOUNDARY, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write boundary: \" + h(data_byte, 2), LOG_NET);\r\n            this.boundary = data_byte;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"mac[2] = \" + h(data_byte), LOG_NET);\r\n            this.mac[2] = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg\" + pg + \"/03: \" + h(data_byte), LOG_NET);\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_TSR, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            return this.tsr;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"Read pg1/04 (mac[3])\", LOG_NET);\r\n            return this.mac[3];\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg\" + pg + \"/04\", LOG_NET);\r\n            dbg_assert(false);\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_TPSR, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write tpsr: \" + h(data_byte, 2), LOG_NET);\r\n            this.tpsr = data_byte;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"mac[3] = \" + h(data_byte), LOG_NET);\r\n            this.mac[3] = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg\" + pg + \"/04: \" + h(data_byte), LOG_NET);\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_TCNTLO, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Unimplemented: Read pg0/05 (NCR: Number of Collisions Register)\", LOG_NET);\r\n            return 0;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"Read pg1/05 (mac[4])\", LOG_NET);\r\n            return this.mac[4];\r\n        }\r\n        else if(pg === 3)\r\n        {\r\n            dbg_log(\"Unimplemented: Read pg3/05 (CONFIG2)\", LOG_NET);\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg\" + pg + \"/05\", LOG_NET);\r\n            dbg_assert(false);\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_TCNTLO, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write tcnt low: \" + h(data_byte, 2), LOG_NET);\r\n            this.tcnt = this.tcnt & ~0xFF | data_byte;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"mac[4] = \" + h(data_byte), LOG_NET);\r\n            this.mac[4] = data_byte;\r\n        }\r\n        else if(pg === 3)\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg3/05 (CONFIG2): \" + h(data_byte), LOG_NET);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg\" + pg + \"/05: \" + h(data_byte), LOG_NET);\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_TCNTHI, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_assert(false, \"TODO\");\r\n            return 0;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"Read pg1/06 (mac[5])\", LOG_NET);\r\n            return this.mac[5];\r\n        }\r\n        else if(pg === 3)\r\n        {\r\n            dbg_log(\"Unimplemented: Read pg3/06 (CONFIG3)\", LOG_NET);\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Read pg\" + pg + \"/06\", LOG_NET);\r\n            dbg_assert(false);\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_TCNTHI, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"Write tcnt high: \" + h(data_byte, 2), LOG_NET);\r\n            this.tcnt = this.tcnt & 0xFF | data_byte << 8;\r\n        }\r\n        else if(pg === 1)\r\n        {\r\n            dbg_log(\"mac[5] = \" + h(data_byte), LOG_NET);\r\n            this.mac[5] = data_byte;\r\n        }\r\n        else if(pg === 3)\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg3/06 (CONFIG3): \" + h(data_byte), LOG_NET);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Write pg\" + pg + \"/06: \" + h(data_byte), LOG_NET);\r\n            dbg_assert(false);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | EN0_RSR, this, function()\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            return 1 | 1 << 3; // receive status ok\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Read pg\" + pg + \"/0c\", LOG_NET);\r\n            dbg_assert(false);\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(this.port | EN0_RXCR, this, function(data_byte)\r\n    {\r\n        var pg = this.get_page();\r\n        if(pg === 0)\r\n        {\r\n            dbg_log(\"RX configuration reg write: \" + h(data_byte, 2), LOG_NET);\r\n            this.rxcr = data_byte;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unimplemented: Write pg\" + pg + \"/0c: \" + h(data_byte), LOG_NET);\r\n        }\r\n    });\r\n\r\n    io.register_read(this.port | NE_DATAPORT | 0, this,\r\n            this.data_port_read8,\r\n            this.data_port_read16,\r\n            this.data_port_read32);\r\n    io.register_write(this.port | NE_DATAPORT | 0, this,\r\n            this.data_port_write16,\r\n            this.data_port_write16,\r\n            this.data_port_write32);\r\n\r\n    if(use_pci)\r\n    {\r\n        cpu.devices.pci.register_device(this);\r\n    }\r\n}\r\n\r\nNe2k.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = this.isr;\r\n    state[1] = this.imr;\r\n    state[2] = this.cr;\r\n    state[3] = this.dcfg;\r\n    state[4] = this.rcnt;\r\n    state[5] = this.tcnt;\r\n    state[6] = this.tpsr;\r\n    state[7] = this.rsar;\r\n    state[8] = this.pstart;\r\n    state[9] = this.curpg;\r\n    state[10] = this.boundary;\r\n    state[11] = this.pstop;\r\n    state[12] = this.rxcr;\r\n    state[13] = this.txcr;\r\n    state[14] = this.tsr;\r\n    state[15] = this.mac;\r\n    state[16] = this.memory;\r\n\r\n    return state;\r\n};\r\n\r\nNe2k.prototype.set_state = function(state)\r\n{\r\n    this.isr = state[0];\r\n    this.imr = state[1];\r\n    this.cr = state[2];\r\n    this.dcfg = state[3];\r\n    this.rcnt = state[4];\r\n    this.tcnt = state[5];\r\n    this.tpsr = state[6];\r\n    this.rsar = state[7];\r\n    this.pstart = state[8];\r\n    this.curpg = state[9];\r\n    this.boundary = state[10];\r\n    this.pstop = state[11];\r\n    this.rxcr = state[12];\r\n    this.txcr = state[13];\r\n    this.tsr = state[14];\r\n\r\n    if(this.preserve_mac_from_state_image)\r\n    {\r\n        this.mac = state[15];\r\n        this.memory = state[16];\r\n    }\r\n};\r\n\r\nNe2k.prototype.do_interrupt = function(ir_mask)\r\n{\r\n    dbg_log(\"Do interrupt \" + h(ir_mask, 2), LOG_NET);\r\n    this.isr |= ir_mask;\r\n    this.update_irq();\r\n};\r\n\r\nNe2k.prototype.update_irq = function()\r\n{\r\n    if(this.imr & this.isr)\r\n    {\r\n        this.pci.raise_irq(this.pci_id);\r\n    }\r\n    else\r\n    {\r\n        this.pci.lower_irq(this.pci_id);\r\n    }\r\n};\r\n\r\nNe2k.prototype.data_port_write = function(data_byte)\r\n{\r\n    if(NE2K_LOG_VERBOSE)\r\n    {\r\n        dbg_log(\"Write data port: data=\" + h(data_byte & 0xFF, 2) +\r\n                                \" rsar=\" + h(this.rsar, 4) +\r\n                                \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\r\n    }\r\n\r\n    if(this.rsar <= 0x10 || this.rsar >= (START_PAGE << 8) && this.rsar < (STOP_PAGE << 8))\r\n    {\r\n        this.memory[this.rsar] = data_byte;\r\n    }\r\n\r\n    this.rsar++;\r\n    this.rcnt--;\r\n\r\n    if(this.rsar >= (this.pstop << 8))\r\n    {\r\n        this.rsar += (this.pstart - this.pstop) << 8;\r\n    }\r\n\r\n    if(this.rcnt === 0)\r\n    {\r\n        this.do_interrupt(ENISR_RDC);\r\n    }\r\n};\r\n\r\nNe2k.prototype.data_port_write16 = function(data)\r\n{\r\n    this.data_port_write(data);\r\n\r\n    if(this.dcfg & 1)\r\n    {\r\n        this.data_port_write(data >> 8);\r\n    }\r\n};\r\n\r\nNe2k.prototype.data_port_write32 = function(data)\r\n{\r\n    this.data_port_write(data);\r\n    this.data_port_write(data >> 8);\r\n    this.data_port_write(data >> 16);\r\n    this.data_port_write(data >> 24);\r\n};\r\n\r\nNe2k.prototype.data_port_read = function()\r\n{\r\n    let data = 0;\r\n\r\n    if(this.rsar < (STOP_PAGE << 8))\r\n    {\r\n        data = this.memory[this.rsar];\r\n    }\r\n\r\n    if(NE2K_LOG_VERBOSE)\r\n    {\r\n        dbg_log(\"Read data port: data=\" + h(data, 2) +\r\n                               \" rsar=\" + h(this.rsar, 4) +\r\n                               \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\r\n    }\r\n\r\n    this.rsar++;\r\n    this.rcnt--;\r\n\r\n    if(this.rsar >= (this.pstop << 8))\r\n    {\r\n        this.rsar += (this.pstart - this.pstop) << 8;\r\n    }\r\n\r\n    if(this.rcnt === 0)\r\n    {\r\n        this.do_interrupt(ENISR_RDC);\r\n    }\r\n\r\n    return data;\r\n};\r\n\r\nNe2k.prototype.data_port_read8 = function()\r\n{\r\n    return this.data_port_read16() & 0xFF;\r\n};\r\n\r\nNe2k.prototype.data_port_read16 = function()\r\n{\r\n    if(this.dcfg & 1)\r\n    {\r\n        return this.data_port_read() | this.data_port_read() << 8;\r\n    }\r\n    else\r\n    {\r\n        return this.data_port_read();\r\n    }\r\n};\r\n\r\nNe2k.prototype.data_port_read32 = function()\r\n{\r\n    return this.data_port_read() | this.data_port_read() << 8 |\r\n            this.data_port_read() << 16 | this.data_port_read() << 24;\r\n};\r\n\r\nNe2k.prototype.receive = function(data)\r\n{\r\n    // called from the adapter when data is received over the network\r\n\r\n    if(this.cr & 1)\r\n    {\r\n        // stop bit set\r\n        return;\r\n    }\r\n\r\n    this.bus.send(\"eth-receive-end\", [data.length]);\r\n\r\n    if(this.rxcr & 0x10)\r\n    {\r\n        // promiscuous\r\n    }\r\n    else if((this.rxcr & 4) &&\r\n            data[0] === 0xFF && data[1] === 0xFF && data[2] === 0xFF &&\r\n            data[3] === 0xFF && data[4] === 0xFF && data[5] === 0xFF)\r\n    {\r\n        // broadcast\r\n    }\r\n    else if((this.rxcr & 8) && (data[0] & 1) === 1)\r\n    {\r\n        // multicast\r\n        // XXX\r\n        return;\r\n    }\r\n    else if(data[0] === this.mac[0] && data[1] === this.mac[1] &&\r\n            data[2] === this.mac[2] && data[3] === this.mac[3] &&\r\n            data[4] === this.mac[4] && data[5] === this.mac[5])\r\n    {\r\n    }\r\n    else\r\n    {\r\n        return;\r\n    }\r\n\r\n    var packet_length = Math.max(60, data.length);\r\n\r\n    var offset = this.curpg << 8;\r\n    var total_length = packet_length + 4;\r\n    var data_start = offset + 4;\r\n    var next = this.curpg + 1 + (total_length >> 8);\r\n\r\n    var end = offset + total_length;\r\n\r\n    const needed = 1 + (total_length >> 8);\r\n\r\n    // boundary == curpg interpreted as ringbuffer empty\r\n    const available = this.boundary > this.curpg ?\r\n        this.boundary - this.curpg :\r\n        this.pstop - this.curpg + this.boundary - this.pstart;\r\n\r\n    if(available < needed &&\r\n        this.boundary !== 0 // XXX: ReactOS sets this to 0 initially and never updates it unless it receives a packet\r\n    )\r\n    {\r\n        dbg_log(\"Buffer full, dropping packet pstart=\" + h(this.pstart) + \" pstop=\" + h(this.pstop) +\r\n            \" curpg=\" + h(this.curpg) + \" needed=\" + h(needed) + \" boundary=\" + h(this.boundary) + \" available=\" + h(available), LOG_NET);\r\n        return;\r\n    }\r\n\r\n    if(end > (this.pstop << 8))\r\n    {\r\n        // Shouldn't happen because at this size it can't cross a page,\r\n        // so we can skip filling with zeroes\r\n        dbg_assert(data.length >= 60);\r\n\r\n        var cut = (this.pstop << 8) - data_start;\r\n        dbg_assert(cut >= 0);\r\n\r\n        this.memory.set(data.subarray(0, cut), data_start);\r\n        this.memory.set(data.subarray(cut), this.pstart << 8);\r\n        dbg_log(\"rcv cut=\" + h(cut), LOG_NET);\r\n    }\r\n    else\r\n    {\r\n        this.memory.set(data, data_start);\r\n\r\n        if(data.length < 60)\r\n        {\r\n            this.memory.fill(0, data_start + data.length, data_start + 60);\r\n        }\r\n    }\r\n\r\n    if(next >= this.pstop)\r\n    {\r\n        next += this.pstart - this.pstop;\r\n    }\r\n\r\n    // write packet header\r\n    this.memory[offset] = ENRSR_RXOK; // status\r\n    this.memory[offset + 1] = next;\r\n    this.memory[offset + 2] = total_length;\r\n    this.memory[offset + 3] = total_length >> 8;\r\n\r\n    this.curpg = next;\r\n\r\n    dbg_log(\"rcv offset=\" + h(offset) + \" len=\" + h(total_length) + \" next=\" + h(next), LOG_NET);\r\n\r\n    this.do_interrupt(ENISR_RX);\r\n};\r\n\r\nNe2k.prototype.get_page = function()\r\n{\r\n    return this.cr >> 6 & 3;\r\n};\r\n","\"use strict\";\r\n\r\n\r\n/**\r\n * @constructor\r\n * @param {CPU} cpu\r\n * @param {BusConnector} bus\r\n * @param {FS} filesystem\r\n */\r\nfunction VirtIO(cpu, bus, filesystem)\r\n{\r\n    // http://ozlabs.org/~rusty/virtio-spec/virtio-0.9.5.pdf\r\n\r\n    this.pci_space = [\r\n        0xf4, 0x1a, 0x09, 0x10, 0x07, 0x05, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x01, 0xa8, 0x00, 0x00, 0x00, 0x10, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x09, 0x00,\r\n        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\r\n    ];\r\n    this.pci_id = 0x06 << 3;\r\n    this.pci_bars = [\r\n        {\r\n            size: 256,\r\n        },\r\n    ];\r\n    this.name = \"virtio\";\r\n\r\n    var io = cpu.io;\r\n\r\n    io.register_read(0xA800, this,\r\n        function() {\r\n            dbg_log(\"Read device features\", LOG_VIRTIO);\r\n            return 1;\r\n        },\r\n        undefined,\r\n        function()\r\n        {\r\n            dbg_log(\"Read device features\", LOG_VIRTIO);\r\n            return 1;\r\n        }\r\n    );\r\n\r\n    io.register_write(0xA804, this, undefined, undefined, function(data)\r\n    {\r\n        // write guest features\r\n        dbg_log(\"Guest feature selection: \" + h(data, 8), LOG_VIRTIO);\r\n    });\r\n\r\n    io.register_write(0xA80E, this, undefined, function(data)\r\n    {\r\n        // rw queue select\r\n        dbg_log(\"Queue select: \" + h(data, 4), LOG_VIRTIO);\r\n        this.queue_select = data;\r\n    }, undefined);\r\n\r\n    io.register_read(0xA80C, this, undefined, function()\r\n    {\r\n        // read queue size\r\n        dbg_log(\"Read queue size\", LOG_VIRTIO);\r\n        return this.queue_size;\r\n    }, undefined);\r\n\r\n    io.register_read(0xA808, this, undefined, undefined, function()\r\n    {\r\n        // rw queue address\r\n        dbg_log(\"Read queue address\", LOG_VIRTIO);\r\n\r\n        if(this.queue_select === 0)\r\n        {\r\n            return this.queue_address;\r\n        }\r\n        else\r\n        {\r\n            // queue does not exist\r\n            return 0;\r\n        }\r\n    });\r\n\r\n    io.register_write(0xA808, this, undefined, undefined, function(data)\r\n    {\r\n        // rw queue address\r\n        dbg_log(\"Write queue address: \" + h(data, 8), LOG_VIRTIO);\r\n        this.queue_address = data;\r\n    });\r\n\r\n    io.register_write(0xA812, this, function(data)\r\n    {\r\n        dbg_log(\"Write device status: \" + h(data, 2), LOG_VIRTIO);\r\n\r\n        if(data === 0)\r\n        {\r\n            dbg_log(\"Reset\", LOG_VIRTIO);\r\n            this.reset();\r\n        }\r\n        else if(data & 0x80)\r\n        {\r\n            dbg_log(\"Warning: Device status failed\", LOG_VIRTIO);\r\n        }\r\n        else\r\n        {\r\n            dbg_log(((data & 1) ? \"ACKNOWLEDGE \" : \"\") +\r\n                    ((data & 2) ? \"DRIVER \" : \"\") +\r\n                    ((data & 4) ? \"DRIVER_OK\" : \"\"),\r\n                    LOG_VIRTIO);\r\n\r\n        }\r\n\r\n        this.device_status = data;\r\n    });\r\n\r\n    io.register_read(0xA812, this, function()\r\n    {\r\n        dbg_log(\"Read device status: \" + h(this.device_status), LOG_VIRTIO);\r\n        return this.device_status;\r\n    });\r\n\r\n    io.register_read(0xA813, this, function()\r\n    {\r\n        dbg_log(\"Read isr\", LOG_VIRTIO);\r\n\r\n        // reading resets the isr\r\n        var isr = this.isr;\r\n        this.isr = 0;\r\n        this.pci.lower_irq(this.pci_id);\r\n        return isr;\r\n    });\r\n\r\n    io.register_write(0xA810, this, undefined, function(data)\r\n    {\r\n        dbg_log(\"Write queue notify: \" + h(data, 4), LOG_VIRTIO);\r\n\r\n        // only queue 0 supported\r\n        dbg_assert(data === 0);\r\n\r\n        var queue_start = this.queue_address << 12;\r\n        var ring_start = queue_start + 16 * this.queue_size;\r\n        var ring_desc_start = ring_start + 4;\r\n\r\n        var //flags = this.cpu.read16(ring_start),\r\n            // index of the next free ring\r\n            idx = this.cpu.read16(ring_start + 2);\r\n\r\n        dbg_log(\"idx=\" + h(idx, 4), LOG_VIRTIO);\r\n        //dbg_assert(idx < this.queue_size);\r\n\r\n        var mask = this.queue_size - 1;\r\n        idx &= mask;\r\n\r\n        while(this.last_idx !== idx)\r\n        {\r\n            var desc_idx = this.cpu.read16(ring_desc_start + this.last_idx * 2);\r\n            this.handle_descriptor(desc_idx);\r\n\r\n            this.last_idx = this.last_idx + 1 & mask;\r\n        }\r\n    });\r\n\r\n    /** @const @type {CPU} */\r\n    this.cpu = cpu;\r\n\r\n    /** @const @type {PCI} */\r\n    this.pci = cpu.devices.pci;\r\n\r\n    /** @const @type {BusConnector} */\r\n    this.bus = bus;\r\n\r\n    this.queue_select = 0;\r\n    this.device_status = 0;\r\n    this.isr = 0;\r\n\r\n    // these should be stored per queue if there is more than one queue\r\n    this.last_idx = 0;\r\n    this.queue_size = 32;\r\n    this.queue_address = 0;\r\n\r\n    for(var i = 0; i < 128; i++)\r\n    {\r\n        io.register_read(0xA814 + i, this, function(port)\r\n        {\r\n            dbg_log(\"Read device \" + h(port), LOG_VIRTIO);\r\n\r\n            if(port < this.device.configspace.length)\r\n            {\r\n                return this.device.configspace[port];\r\n            }\r\n            else\r\n            {\r\n                return 0;\r\n            }\r\n        }.bind(this, i), undefined, undefined);\r\n\r\n        io.register_write(0xA814 + i, this, function(port, data)\r\n        {\r\n            dbg_log(\"Write device \" + h(port) + \": \" + h(data, 2), LOG_VIRTIO);\r\n        }.bind(this, i), undefined, undefined);\r\n    }\r\n\r\n    // should be generalized to support more devices than just the filesystem\r\n    this.device = new Virtio9p(filesystem, bus);\r\n    this.device.SendReply = this.device_reply.bind(this);\r\n\r\n    cpu.devices.pci.register_device(this);\r\n}\r\n\r\nVirtIO.prototype.get_state = function()\r\n{\r\n    var state = [];\r\n\r\n    state[0] = 0; // unused\r\n    state[1] = this.queue_select;\r\n    state[2] = this.device_status;\r\n    state[3] = this.isr;\r\n    state[4] = this.last_idx;\r\n    state[5] = this.queue_size;\r\n    state[6] = this.queue_address;\r\n    state[7] = this.device;\r\n\r\n    return state;\r\n};\r\n\r\nVirtIO.prototype.set_state = function(state)\r\n{\r\n    this.queue_select = state[1];\r\n    this.device_status = state[2];\r\n    this.isr = state[3];\r\n    this.last_idx = state[4];\r\n    this.queue_size = state[5];\r\n    this.queue_address = state[6];\r\n\r\n    this.device = state[7];\r\n    this.device.SendReply = this.device_reply.bind(this);\r\n};\r\n\r\nVirtIO.prototype.reset = function()\r\n{\r\n    this.queue_select = 0;\r\n    this.device_status = 0;\r\n    this.isr = 0;\r\n\r\n    this.last_idx = 0;\r\n    this.queue_size = 32;\r\n    this.queue_address = 0;\r\n};\r\n\r\nVirtIO.prototype.handle_descriptor = function(idx)\r\n{\r\n    var next = idx;\r\n    var desc_start = this.queue_address << 12;\r\n\r\n    var buffer_idx = 0;\r\n    var buffers = [];\r\n\r\n    do\r\n    {\r\n        var addr = desc_start + next * 16;\r\n        var flags = this.cpu.read16(addr + 12);\r\n\r\n        if(flags & VRING_DESC_F_WRITE)\r\n        {\r\n            break;\r\n        }\r\n\r\n        if(flags & VRING_DESC_F_INDIRECT) {\r\n            dbg_assert(false, \"unsupported\");\r\n        }\r\n\r\n        var addr_low = this.cpu.read32s(addr);\r\n        var addr_high = this.cpu.read32s(addr + 4);\r\n        var len = this.cpu.read32s(addr + 8) >>> 0;\r\n\r\n        buffers.push({\r\n            addr_low: addr_low,\r\n            addr_high: addr_high,\r\n            len: len,\r\n        });\r\n\r\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\r\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\r\n\r\n        if(flags & VRING_DESC_F_NEXT)\r\n        {\r\n            next = this.cpu.read16(addr + 14);\r\n            dbg_assert(next < this.queue_size);\r\n        }\r\n        else\r\n        {\r\n            next = -1;\r\n            break;\r\n        }\r\n    }\r\n    while(true);\r\n\r\n    var buffer_len = -1;\r\n    var pointer = 0;\r\n\r\n    var infos = {\r\n        start: idx,\r\n        next: next,\r\n    };\r\n\r\n    this.device.ReceiveRequest(infos, function()\r\n    {\r\n        // return one byte\r\n\r\n        if(pointer >= buffer_len)\r\n        {\r\n            if(buffer_idx === buffers.length)\r\n            {\r\n                dbg_log(\"Read more data than descriptor has\", LOG_VIRTIO);\r\n                return 0;\r\n            }\r\n\r\n            var buf = buffers[buffer_idx++];\r\n\r\n            addr_low = buf.addr_low;\r\n            buffer_len = buf.len;\r\n            pointer = 0;\r\n        }\r\n\r\n        return this.cpu.read8(addr_low + pointer++);\r\n    }.bind(this));\r\n};\r\n\r\nVirtIO.prototype.device_reply = function(queueidx, infos)\r\n{\r\n    if(infos.next === -1)\r\n    {\r\n        dbg_log(\"Reply to invalid index\", LOG_VIRTIO);\r\n        return;\r\n    }\r\n\r\n    var mask = this.queue_size - 1;\r\n    var result_length = this.device.replybuffersize;\r\n\r\n    var next = infos.next;\r\n    var desc_start = this.queue_address << 12;\r\n\r\n    var buffer_idx = 0;\r\n    var buffers = [];\r\n\r\n    do\r\n    {\r\n        var addr = desc_start + next * 16;\r\n        var flags = this.cpu.read16(addr + 12);\r\n\r\n        if((flags & VRING_DESC_F_WRITE) === 0)\r\n        {\r\n            dbg_log(\"Bug: Readonly ring after writeonly ring\", LOG_VIRTIO);\r\n            break;\r\n        }\r\n\r\n        var addr_low = this.cpu.read32s(addr);\r\n        var addr_high = this.cpu.read32s(addr + 4);\r\n        var len = this.cpu.read32s(addr + 8) >>> 0;\r\n\r\n        buffers.push({\r\n            addr_low: addr_low,\r\n            addr_high: addr_high,\r\n            len: len,\r\n        });\r\n\r\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\r\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\r\n\r\n        if(flags & VRING_DESC_F_NEXT)\r\n        {\r\n            next = this.cpu.read16(addr + 14);\r\n            dbg_assert(next < this.queue_size);\r\n        }\r\n        else\r\n        {\r\n            break;\r\n        }\r\n    }\r\n    while(true);\r\n\r\n    var buffer_len = -1;\r\n    var pointer = 0;\r\n\r\n    for(var i = 0; i < result_length; i++)\r\n    {\r\n        var data = this.device.replybuffer[i];\r\n\r\n        if(pointer >= buffer_len)\r\n        {\r\n            if(buffer_idx === buffers.length)\r\n            {\r\n                dbg_log(\"Write more data than descriptor has\", LOG_VIRTIO);\r\n                return 0;\r\n            }\r\n\r\n            var buf = buffers[buffer_idx++];\r\n\r\n            addr_low = buf.addr_low;\r\n            buffer_len = buf.len;\r\n            pointer = 0;\r\n        }\r\n\r\n        this.cpu.write8(addr_low + pointer++, data);\r\n    }\r\n\r\n    var used_desc_start = (this.queue_address << 12) + 16 * this.queue_size + 4 + 2 * this.queue_size;\r\n    used_desc_start = used_desc_start + 4095 & ~4095;\r\n\r\n    var flags = this.cpu.read16(used_desc_start);\r\n    var used_idx = this.cpu.read16(used_desc_start + 2);\r\n    this.cpu.write16(used_desc_start + 2, used_idx + 1);\r\n\r\n    dbg_log(\"used descriptor: addr=\" + h(used_desc_start, 8) + \" flags=\" + h(flags, 4) + \" idx=\" + h(used_idx, 4), LOG_VIRTIO);\r\n\r\n    used_idx &= mask;\r\n    var used_desc_offset = used_desc_start + 4 + used_idx * 8;\r\n    this.cpu.write32(used_desc_offset, infos.start);\r\n    this.cpu.write32(used_desc_offset + 4, result_length);\r\n\r\n    this.isr |= 1;\r\n    this.pci.raise_irq(this.pci_id);\r\n};\r\n","\"use strict\";\r\n\r\n// jor1k compatibility\r\n\r\nvar VIRTIO_MAGIC_REG = 0x0;\r\nvar VIRTIO_VERSION_REG = 0x4;\r\nvar VIRTIO_DEVICE_REG = 0x8;\r\nvar VIRTIO_VENDOR_REG = 0xc;\r\nvar VIRTIO_HOSTFEATURES_REG = 0x10;\r\nvar VIRTIO_HOSTFEATURESSEL_REG = 0x14;\r\nvar VIRTIO_GUESTFEATURES_REG = 0x20;\r\nvar VIRTIO_GUESTFEATURESSEL_REG = 0x24;\r\nvar VIRTIO_GUEST_PAGE_SIZE_REG = 0x28;\r\nvar VIRTIO_QUEUESEL_REG = 0x30;\r\nvar VIRTIO_QUEUENUMMAX_REG = 0x34;\r\nvar VIRTIO_QUEUENUM_REG = 0x38;\r\nvar VIRTIO_QUEUEALIGN_REG = 0x3C;\r\nvar VIRTIO_QUEUEPFN_REG = 0x40;\r\nvar VIRTIO_QUEUENOTIFY_REG = 0x50;\r\nvar VIRTIO_INTERRUPTSTATUS_REG = 0x60;\r\nvar VIRTIO_INTERRUPTACK_REG = 0x64;\r\nvar VIRTIO_STATUS_REG = 0x70;\r\n\r\n/** @const */\r\nvar VRING_DESC_F_NEXT =      1; /* This marks a buffer as continuing via the next field. */\r\n/** @const */\r\nvar VRING_DESC_F_WRITE =     2; /* This marks a buffer as write-only (otherwise read-only). */\r\n/** @const */\r\nvar VRING_DESC_F_INDIRECT =  4; /* This means the buffer contains a list of buffer descriptors. */\r\n\r\n\r\nfunction hex8(n)\r\n{\r\n    return h(n);\r\n}\r\n\r\nvar message = {};\r\n\r\n/** @param {...string} log */\r\nmessage.Debug = function(log)\r\n{\r\n    dbg_log([].slice.apply(arguments).join(\" \"), LOG_9P);\r\n}\r\n\r\nmessage.Abort = function()\r\n{ \r\n    if(DEBUG)\r\n    {\r\n        throw \"abort\"; \r\n    }\r\n}\r\n\r\n\r\n// XXX: Should go through emulator interface\r\nvar LoadBinaryResource;\r\n\r\nif(typeof XMLHttpRequest !== \"undefined\")\r\n{\r\n    LoadBinaryResource = function(url, OnSuccess, OnError) {\r\n        var req = new XMLHttpRequest();\r\n        req.open('GET', url, true);\r\n        req.responseType = \"arraybuffer\";\r\n        req.onreadystatechange = function () {\r\n            if (req.readyState != 4) {\r\n                return;\r\n            }\r\n            if ((req.status != 200) && (req.status != 0)) {\r\n                OnError(\"Error: Could not load file \" + url);\r\n                return;\r\n            }\r\n            var arrayBuffer = req.response;\r\n            if (arrayBuffer) {\r\n                OnSuccess(arrayBuffer);\r\n            } else {\r\n                OnError(\"Error: No data received from: \" + url);\r\n            }\r\n        };\r\n        /*\r\n            req.onload = function(e)\r\n            {\r\n                    var arrayBuffer = req.response;\r\n                    if (arrayBuffer) {\r\n                        OnLoadFunction(arrayBuffer);\r\n                    }\r\n            };\r\n        */\r\n        req.send(null);\r\n    }\r\n}\r\nelse\r\n{\r\n    LoadBinaryResource = function(url, OnSuccess, OnError)\r\n    {\r\n        //console.log(url);\r\n        require(\"fs\")[\"readFile\"](url, function(err, data)\r\n        {\r\n            if(err)\r\n            {\r\n                OnError(err);\r\n            }\r\n            else\r\n            {\r\n                OnSuccess(new Uint8Array(data).buffer);\r\n            }\r\n        });\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\nvar Bus = {};\r\n\r\n/** @constructor */\r\nfunction BusConnector()\r\n{\r\n    this.listeners = {};\r\n    this.pair = undefined;\r\n}\r\n\r\n/**\r\n * @param {string} name\r\n * @param {function(?)} fn\r\n * @param {Object} this_value\r\n */\r\nBusConnector.prototype.register = function(name, fn, this_value)\r\n{\r\n    var listeners = this.listeners[name];\r\n\r\n    if(listeners === undefined)\r\n    {\r\n        listeners = this.listeners[name] = [];\r\n    }\r\n\r\n    listeners.push({\r\n        fn: fn,\r\n        this_value: this_value,\r\n    });\r\n};\r\n\r\n/**\r\n * Unregister one message with the given name and callback\r\n *\r\n * @param {string} name\r\n * @param {function()} fn\r\n */\r\nBusConnector.prototype.unregister = function(name, fn)\r\n{\r\n    var listeners = this.listeners[name];\r\n\r\n    if(listeners === undefined)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.listeners[name] = listeners.filter(function(l)\r\n    {\r\n        return l.fn !== fn;\r\n    });\r\n};\r\n\r\n/**\r\n * Send (\"emit\") a message\r\n *\r\n * @param {string} name\r\n * @param {*=} value\r\n * @param {*=} unused_transfer\r\n */\r\nBusConnector.prototype.send = function(name, value, unused_transfer)\r\n{\r\n    if(!this.pair)\r\n    {\r\n        return;\r\n    }\r\n\r\n    var listeners = this.pair.listeners[name];\r\n\r\n    if(listeners === undefined)\r\n    {\r\n        return;\r\n    }\r\n\r\n    for(var i = 0; i < listeners.length; i++)\r\n    {\r\n        var listener = listeners[i];\r\n        listener.fn.call(listener.this_value, value);\r\n    }\r\n};\r\n\r\n/**\r\n * Send a message, guaranteeing that it is received asynchronously\r\n *\r\n * @param {string} name\r\n * @param {Object=} value\r\n */\r\nBusConnector.prototype.send_async = function(name, value)\r\n{\r\n    dbg_assert(arguments.length === 1 || arguments.length === 2);\r\n\r\n    setTimeout(this.send.bind(this, name, value), 0);\r\n};\r\n\r\nBus.create = function()\r\n{\r\n    var c0 = new BusConnector();\r\n    var c1 = new BusConnector();\r\n\r\n    c0.pair = c1;\r\n    c1.pair = c0;\r\n\r\n    return [c0, c1];\r\n};\r\n\r\n","/**\r\n * This file contains functions to decode the modrm and sib bytes\r\n *\r\n * These functions return a virtual address\r\n *\r\n * @fileoverview .\r\n * @suppress {newCheckTypes}\r\n */\r\n\"use strict\";\r\n(function()\r\n{\r\n    CPU.prototype.modrm_table16 = Array(0xC0);\r\n    CPU.prototype.modrm_table32 = Array(0xC0);\r\n    CPU.prototype.sib_table = Array(0x100);\r\n    CPU.prototype.modrm_table16[0x00 | 0] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 0] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 0] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 1] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 1] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 1] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 2] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 2] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 2] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 3] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 3] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 3] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 4] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 4] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 4] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 5] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 5] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 5] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 6] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 6] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x00 | 7] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x40 | 7] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp8s() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table16[0x80 | 7] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp16() & 0xFFFF) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x00 | 0] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 0] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 0] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 1] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 1] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 1] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 2] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 2] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 2] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 3] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 3] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 3] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 5] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 5] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 6] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 6] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 6] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    CPU.prototype.modrm_table32[0x00 | 7] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 7] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 7] = function(cpu)\r\n    {\r\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp32s() | 0;\r\n    };;\r\n    // special cases\r\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.read_disp16() | 0;\r\n    }\r\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.read_disp32s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x00 | 4] = function(cpu)\r\n    {\r\n        return cpu.sib_resolve(false) | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x40 | 4] = function(cpu)\r\n    {\r\n        return cpu.sib_resolve(true) + cpu.read_disp8s() | 0;\r\n    };\r\n    CPU.prototype.modrm_table32[0x80 | 4] = function(cpu)\r\n    {\r\n        return cpu.sib_resolve(true) + cpu.read_disp32s() | 0;\r\n    };\r\n    for(var low = 0; low < 8; low++)\r\n    {\r\n        for(var high = 0; high < 3; high++)\r\n        {\r\n            var x = low | high << 6;\r\n            for(var i = 1; i < 8; i++)\r\n            {\r\n                CPU.prototype.modrm_table32[x | i << 3] = CPU.prototype.modrm_table32[x];\r\n                CPU.prototype.modrm_table16[x | i << 3] = CPU.prototype.modrm_table16[x];\r\n            }\r\n        }\r\n    }\r\n\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };;\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 0] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 1] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 2] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 3] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 4] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 5] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 6] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\r\n    };\r\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 7] = function(cpu, mod)\r\n    {\r\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\r\n    };\r\n})();\r\n","\"use strict\";\r\n\r\n/*\r\n * string operations\r\n *\r\n *       cmp  si  di\r\n * movs   0    1   1/w    A4\r\n * cmps   1    1   1/r    A6\r\n * stos   0    0   1/w    AA\r\n * lods   0    1   0      AC\r\n * scas   1    0   1/r    AE\r\n * ins    0    0   1/w\r\n * outs   0    1   0\r\n */\r\n\r\n/** @const */\r\nvar MAX_COUNT_PER_CYCLE = 0x1000;\r\n\r\n\r\nfunction string_get_cycle_count(size, address)\r\n{\r\n    dbg_assert(size && size <= 4 && size >= -4);\r\n\r\n    if(size < 0)\r\n    {\r\n        return (address & 0xFFF) >> (-size >> 1);\r\n    }\r\n    else\r\n    {\r\n        return (~address & 0xFFF) >> size;\r\n    }\r\n}\r\n\r\nfunction string_get_cycle_count2(size, addr1, addr2)\r\n{\r\n    dbg_assert(arguments.length === 3);\r\n\r\n    return Math.min(\r\n            string_get_cycle_count(size, addr1),\r\n            string_get_cycle_count(size, addr2));\r\n}\r\n\r\n\r\nCPU.prototype.movsb = function()\r\n{\r\n    var cpu = this;\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_src = cpu.translate_address_read(src);\r\n        var phys_dest = cpu.translate_address_write(dest);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count2(size, src, dest);\r\n        }\r\n        do\r\n        {\r\n            cpu.write8(phys_dest, cpu.read8(phys_src));\r\n            phys_dest += size;\r\n            phys_src += size;\r\n            cont = --count !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_edi, diff);\r\n        cpu.add_reg_asize(reg_esi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write8(dest, cpu.safe_read8(src));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n};\r\n\r\nCPU.prototype.movsw = function()\r\n{\r\n    var cpu = this;\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 1) && !(src & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 1;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count2(size, src, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned16(phys_dest, cpu.read_aligned16(phys_src));\r\n                phys_dest += single_size;\r\n                phys_src += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write16(dest, cpu.safe_read16(src));\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write16(dest, cpu.safe_read16(src));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n};\r\n\r\nCPU.prototype.movsd = function()\r\n{\r\n    var cpu = this;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        // often used by memcpy, well worth optimizing\r\n        //   using cpu.mem32s.set\r\n        var ds = cpu.get_seg_prefix(reg_ds),\r\n            src = ds + cpu.get_reg_asize(reg_esi) | 0,\r\n            es = cpu.get_seg(reg_es),\r\n            dest = es + cpu.get_reg_asize(reg_edi) | 0,\r\n            count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n\r\n        if(!count)\r\n        {\r\n            return;\r\n        }\r\n\r\n        // must be page-aligned if cpu.paging is enabled\r\n        // and dword-aligned in general\r\n        var align_mask = cpu.paging ? 0xFFF : 3;\r\n\r\n        if((dest & align_mask) === 0 &&\r\n           (src & align_mask) === 0 &&\r\n           // If df is set, alignment works a different\r\n           // This should be unlikely\r\n           (cpu.flags & flag_direction) === 0)\r\n        {\r\n            var cont = false;\r\n            if(cpu.paging)\r\n            {\r\n                src = cpu.translate_address_read(src);\r\n                dest = cpu.translate_address_write(dest);\r\n\r\n                if(count > 0x400)\r\n                {\r\n                    count = 0x400;\r\n                    cont = true;\r\n                }\r\n            }\r\n\r\n            if(!cpu.io.in_mmap_range(src, count) &&\r\n                !cpu.io.in_mmap_range(dest, count))\r\n            {\r\n                var diff = count << 2;\r\n                cpu.add_reg_asize(reg_ecx, -count);\r\n                cpu.add_reg_asize(reg_edi, diff);\r\n                cpu.add_reg_asize(reg_esi, diff);\r\n\r\n                dest >>>= 2;\r\n                src >>>= 2;\r\n                cpu.write_blob32(cpu.mem32s.subarray(src, src + count), dest);\r\n\r\n                if(cont)\r\n                {\r\n                    cpu.instruction_pointer = cpu.previous_ip;\r\n                }\r\n\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 3) && !(src & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 2;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count2(size, src, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned32(phys_dest, cpu.read_aligned32(phys_src));\r\n                phys_dest += single_size;\r\n                phys_src += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write32(dest, cpu.safe_read32s(src));\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            this.instruction_pointer = this.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write32(dest, cpu.safe_read32s(src));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n};\r\n\r\nfunction cmpsb(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var data_src, data_dest;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_src = cpu.translate_address_read(src);\r\n        var phys_dest = cpu.translate_address_read(dest);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count2(size, src, dest);\r\n        }\r\n        do\r\n        {\r\n            data_dest = cpu.read8(phys_dest);\r\n            data_src = cpu.read8(phys_src);\r\n            phys_dest += size;\r\n            phys_src += size;\r\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_edi, diff);\r\n        cpu.add_reg_asize(reg_esi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_src = cpu.safe_read8(src);\r\n        data_dest = cpu.safe_read8(dest);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n\r\n    cpu.cmp8(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction cmpsw(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var data_src, data_dest;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 1) && !(src & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 1;\r\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count2(size, src, dest);\r\n            }\r\n            do\r\n            {\r\n                data_dest = cpu.read_aligned16(phys_dest);\r\n                data_src = cpu.read_aligned16(phys_src);\r\n                phys_dest += single_size;\r\n                phys_src += single_size;\r\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                data_dest = cpu.safe_read16(dest);\r\n                data_src = cpu.safe_read16(src);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_dest = cpu.safe_read16(dest);\r\n        data_src = cpu.safe_read16(src);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n\r\n    cpu.cmp16(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction cmpsd(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var data_src, data_dest;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 3) && !(src & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 2;\r\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count2(size, src, dest);\r\n            }\r\n            do\r\n            {\r\n                data_dest = cpu.read_aligned32(phys_dest);\r\n                data_src = cpu.read_aligned32(phys_src);\r\n                phys_dest += single_size;\r\n                phys_src += single_size;\r\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                data_dest = cpu.safe_read32s(dest);\r\n                data_src = cpu.safe_read32s(src);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_dest = cpu.safe_read32s(dest);\r\n        data_src = cpu.safe_read32s(src);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n\r\n    cpu.cmp32(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction stosb(cpu)\r\n{\r\n    var data = cpu.reg8[reg_al];\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_dest = cpu.translate_address_write(dest);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count(size, dest);\r\n        }\r\n        do\r\n        {\r\n            cpu.write8(phys_dest, data);\r\n            phys_dest += size;\r\n            cont = --count !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_edi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write8(dest, data);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction stosw(cpu)\r\n{\r\n    var data = cpu.reg16[reg_ax];\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned16(phys_dest, data);\r\n                phys_dest += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write16(dest, data);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write16(dest, data);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction stosd(cpu)\r\n{\r\n    var data = cpu.reg32s[reg_eax];\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned32(phys_dest, data);\r\n                phys_dest += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write32(dest, data);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.safe_write32(dest, data);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction lodsb(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_src = cpu.translate_address_read(src);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count(size, src);\r\n        }\r\n        do\r\n        {\r\n            cpu.reg8[reg_al] = cpu.read8(phys_src);\r\n            phys_src += size;\r\n            cont = --count !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_esi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.reg8[reg_al] = cpu.safe_read8(src);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction lodsw(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        do\r\n        {\r\n            cpu.reg16[reg_ax] = cpu.safe_read16(src);\r\n            src += size;\r\n            cpu.add_reg_asize(reg_esi, size);\r\n            cont = cpu.decr_ecx_asize() !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.reg16[reg_ax] = cpu.safe_read16(src);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction lodsd(cpu)\r\n{\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        do\r\n        {\r\n            cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\r\n            src += size;\r\n            cpu.add_reg_asize(reg_esi, size);\r\n            cont = cpu.decr_ecx_asize() !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction scasb(cpu)\r\n{\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n    var data_dest;\r\n    var data_src = cpu.reg8[reg_al];\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_dest = cpu.translate_address_read(dest);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count(size, dest);\r\n        }\r\n        do\r\n        {\r\n            data_dest = cpu.read8(phys_dest);\r\n            phys_dest += size;\r\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_edi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_dest = cpu.safe_read8(dest);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n\r\n    cpu.cmp8(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction scasw(cpu)\r\n{\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n    var data_dest;\r\n    var data_src = cpu.reg16[reg_al];\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                data_dest = cpu.read_aligned16(phys_dest);\r\n                phys_dest += single_size;\r\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                data_dest = cpu.safe_read16(dest);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_dest = cpu.safe_read16(dest);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n\r\n    cpu.cmp16(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction scasd(cpu)\r\n{\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n    var data_dest;\r\n    var data_src = cpu.reg32s[reg_eax];\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                data_dest = cpu.read_aligned32(phys_dest);\r\n                phys_dest += single_size;\r\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                data_dest = cpu.safe_read32s(dest);\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        data_dest = cpu.safe_read32s(dest);\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n\r\n    cpu.cmp32(data_src, data_dest);\r\n    cpu.diverged();\r\n}\r\n\r\nfunction insb(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 1);\r\n\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_dest = cpu.translate_address_write(dest);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count(size, dest);\r\n        }\r\n        do\r\n        {\r\n            cpu.write8(phys_dest, cpu.io.port_read8(port));\r\n            phys_dest += size;\r\n            cont = --count !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_edi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.writable_or_pagefault(dest, 1);\r\n        cpu.safe_write8(dest, cpu.io.port_read8(port));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction insw(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 2);\r\n\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned16(phys_dest, cpu.io.port_read16(port));\r\n                phys_dest += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write16(dest, cpu.io.port_read16(port));\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.writable_or_pagefault(dest, 2);\r\n        cpu.safe_write16(dest, cpu.io.port_read16(port));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction insd(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 4);\r\n\r\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(dest & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, dest);\r\n            }\r\n            do\r\n            {\r\n                cpu.write_aligned32(phys_dest, cpu.io.port_read32(port));\r\n                phys_dest += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_edi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.safe_write32(dest, cpu.io.port_read32(port));\r\n                dest += size;\r\n                cpu.add_reg_asize(reg_edi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.writable_or_pagefault(dest, 4);\r\n        cpu.safe_write32(dest, cpu.io.port_read32(port));\r\n        cpu.add_reg_asize(reg_edi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction outsb(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 1);\r\n\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -1 : 1;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        var phys_src = cpu.translate_address_read(src);\r\n        if(cpu.paging)\r\n        {\r\n            cycle_counter = string_get_cycle_count(size, src);\r\n        }\r\n        do\r\n        {\r\n            cpu.io.port_write8(port, cpu.read8(phys_src));\r\n            phys_src += size;\r\n            cont = --count !== 0;\r\n        }\r\n        while(cont && cycle_counter--);\r\n        var diff = size * (start_count - count) | 0;\r\n        cpu.add_reg_asize(reg_esi, diff);\r\n        cpu.set_ecx_asize(count);\r\n        cpu.timestamp_counter += start_count - count;\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.io.port_write8(port, cpu.safe_read8(src));\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction outsw(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 2);\r\n\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -2 : 2;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(src & 1))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 1;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, src);\r\n            }\r\n            do\r\n            {\r\n                cpu.io.port_write16(port, cpu.read_aligned16(phys_src));\r\n                phys_src += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.io.port_write16(port, cpu.safe_read16(src));\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.io.port_write16(port, cpu.safe_read16(src));\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n\r\nfunction outsd(cpu)\r\n{\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 4);\r\n\r\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\r\n    var size = cpu.flags & flag_direction ? -4 : 4;\r\n\r\n    if(cpu.prefixes & PREFIX_MASK_REP)\r\n    {\r\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\r\n        if(count === 0) return;\r\n        var cont = false;\r\n        var start_count = count;\r\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\r\n        if(!(src & 3))\r\n        {\r\n            var single_size = size < 0 ? -1 : 1;\r\n            var phys_src = cpu.translate_address_read(src) >>> 2;\r\n            if(cpu.paging)\r\n            {\r\n                cycle_counter = string_get_cycle_count(size, src);\r\n            }\r\n            do\r\n            {\r\n                cpu.io.port_write32(port, cpu.read_aligned32(phys_src));\r\n                phys_src += single_size;\r\n                cont = --count !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n            var diff = size * (start_count - count) | 0;\r\n            cpu.add_reg_asize(reg_esi, diff);\r\n            cpu.set_ecx_asize(count);\r\n            cpu.timestamp_counter += start_count - count;\r\n        }\r\n        else\r\n        {\r\n            do\r\n            {\r\n                cpu.io.port_write32(port, cpu.safe_read32s(src));\r\n                src += size;\r\n                cpu.add_reg_asize(reg_esi, size);\r\n                cont = cpu.decr_ecx_asize() !== 0;\r\n            }\r\n            while(cont && cycle_counter--);\r\n        }\r\n        if(cont)\r\n        {\r\n            cpu.instruction_pointer = cpu.previous_ip;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        cpu.io.port_write32(port, cpu.safe_read32s(src));\r\n        cpu.add_reg_asize(reg_esi, size);\r\n    }\r\n    cpu.diverged();\r\n}\r\n","/*\r\n * Arithmatic functions\r\n * This file contains:\r\n *\r\n * add, adc, sub, sbc, cmp\r\n * inc, dec\r\n * neg, not\r\n * imul, mul, idiv, div\r\n * xadd\r\n *\r\n * das, daa, aad, aam\r\n *\r\n * and, or, xor, test\r\n * shl, shr, sar, ror, rol, rcr, rcl\r\n * shld, shrd\r\n *\r\n * bts, btr, btc, bt\r\n * bsf, bsr\r\n *\r\n * popcnt\r\n*/\r\n\"use strict\";\r\n\r\nCPU.prototype.add8 = function(dest, src) { return this.add(dest, src, OPSIZE_8); }\r\nCPU.prototype.add16 = function(dest, src) { return this.add(dest, src, OPSIZE_16); }\r\nCPU.prototype.add32 = function(dest, src) { return this.add(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.adc8 = function(dest, src) { return this.adc(dest, src, OPSIZE_8); }\r\nCPU.prototype.adc16 = function(dest, src) { return this.adc(dest, src, OPSIZE_16); }\r\nCPU.prototype.adc32 = function(dest, src) { return this.adc(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.sub8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\r\nCPU.prototype.sub16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\r\nCPU.prototype.sub32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.cmp8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\r\nCPU.prototype.cmp16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\r\nCPU.prototype.cmp32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.sbb8 = function(dest, src) { return this.sbb(dest, src, OPSIZE_8); }\r\nCPU.prototype.sbb16 = function(dest, src) { return this.sbb(dest, src, OPSIZE_16); }\r\nCPU.prototype.sbb32 = function(dest, src) { return this.sbb(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.add = function(dest_operand, source_operand, op_size)\r\n{\r\n    //if(this.safe_read32s(this.instruction_pointer + 1) === 0 && this.safe_read32s(this.instruction_pointer + 5) === 0) throw \"0000000\";\r\n\r\n    this.last_op1 = dest_operand;\r\n    this.last_op2 = source_operand;\r\n    this.last_add_result = this.last_result = dest_operand + source_operand | 0;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags_changed = flags_all;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.adc = function(dest_operand, source_operand, op_size)\r\n{\r\n    var cf = this.getcf();\r\n    this.last_op1 = dest_operand;\r\n    this.last_op2 = source_operand;\r\n    this.last_add_result = this.last_result = (dest_operand + source_operand | 0) + cf | 0;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags_changed = flags_all;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.sub = function(dest_operand, source_operand, op_size)\r\n{\r\n    this.last_add_result = dest_operand;\r\n    this.last_op2 = source_operand;\r\n    this.last_op1 = this.last_result = dest_operand - source_operand | 0;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags_changed = flags_all;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.sbb = function(dest_operand, source_operand, op_size)\r\n{\r\n    var cf = this.getcf();\r\n    this.last_add_result = dest_operand;\r\n    this.last_op2 = source_operand;\r\n    this.last_op1 = this.last_result = dest_operand - source_operand - cf | 0;\r\n    this.last_op_size = op_size;\r\n\r\n    this.flags_changed = flags_all;\r\n\r\n    return this.last_result;\r\n}\r\n\r\n/*\r\n * inc and dec\r\n */\r\n\r\nCPU.prototype.inc8 = function(dest) { return this.inc(dest, OPSIZE_8); }\r\nCPU.prototype.inc16 = function(dest) { return this.inc(dest, OPSIZE_16); }\r\nCPU.prototype.inc32 = function(dest) { return this.inc(dest, OPSIZE_32); }\r\n\r\nCPU.prototype.dec8 = function(dest) { return this.dec(dest, OPSIZE_8); }\r\nCPU.prototype.dec16 = function(dest) { return this.dec(dest, OPSIZE_16); }\r\nCPU.prototype.dec32 = function(dest) { return this.dec(dest, OPSIZE_32); }\r\n\r\nCPU.prototype.inc = function(dest_operand, op_size)\r\n{\r\n    this.flags = (this.flags & ~1) | this.getcf();\r\n    this.last_op1 = dest_operand;\r\n    this.last_op2 = 1;\r\n    this.last_add_result = this.last_result = dest_operand + 1 | 0;\r\n    this.last_op_size = op_size;\r\n\r\n    this.flags_changed = flags_all & ~1;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.dec = function(dest_operand, op_size)\r\n{\r\n    this.flags = (this.flags & ~1) | this.getcf();\r\n    this.last_add_result = dest_operand;\r\n    this.last_op2 = 1;\r\n    this.last_op1 = this.last_result = dest_operand - 1 | 0;\r\n    this.last_op_size = op_size;\r\n\r\n    this.flags_changed = flags_all & ~1;\r\n\r\n    return this.last_result;\r\n}\r\n\r\n\r\n/*\r\n * neg\r\n */\r\nCPU.prototype.neg8 = function(dest) { return this.neg(dest, OPSIZE_8); }\r\nCPU.prototype.neg16 = function(dest) { return this.neg(dest, OPSIZE_16); }\r\nCPU.prototype.neg32 = function(dest) { return this.neg(dest, OPSIZE_32); }\r\n\r\nCPU.prototype.neg = function(dest_operand, op_size)\r\n{\r\n    this.last_op1 = this.last_result = -dest_operand | 0;\r\n\r\n    this.flags_changed = flags_all;\r\n    this.last_add_result = 0;\r\n    this.last_op2 = dest_operand;\r\n    this.last_op_size = op_size;\r\n\r\n    return this.last_result;\r\n}\r\n\r\n\r\n/*\r\n * mul, imul, div, idiv\r\n *\r\n * Note: imul has some extra opcodes\r\n *       while other functions only allow\r\n *       ax * modrm\r\n */\r\n\r\nCPU.prototype.mul8 = function(source_operand)\r\n{\r\n    var result = source_operand * this.reg8[reg_al];\r\n\r\n    this.reg16[reg_ax] = result;\r\n    this.last_result = result & 0xFF;\r\n    this.last_op_size = OPSIZE_8;\r\n\r\n    if(result < 0x100)\r\n    {\r\n        this.flags = this.flags & ~1 & ~flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags = this.flags | 1 | flag_overflow;\r\n    }\r\n\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n}\r\n\r\nCPU.prototype.imul8 = function(source_operand)\r\n{\r\n    var result = source_operand * this.reg8s[reg_al];\r\n\r\n    this.reg16[reg_ax] = result;\r\n    this.last_result = result & 0xFF;\r\n    this.last_op_size = OPSIZE_8;\r\n\r\n    if(result > 0x7F || result < -0x80)\r\n    {\r\n        this.flags = this.flags | 1 | flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags = this.flags & ~1 & ~flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n}\r\n\r\nCPU.prototype.mul16 = function(source_operand)\r\n{\r\n    var result = source_operand * this.reg16[reg_ax],\r\n        high_result = result >>> 16;\r\n    //console.log(h(a) + \" * \" + h(this.reg16[reg_ax]) + \" = \" + h(result));\r\n\r\n    this.reg16[reg_ax] = result;\r\n    this.reg16[reg_dx] = high_result;\r\n\r\n    this.last_result = result & 0xFFFF;\r\n    this.last_op_size = OPSIZE_16;\r\n\r\n    if(high_result === 0)\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n}\r\n\r\n/*\r\n * imul with 1 argument\r\n * ax = ax * r/m\r\n */\r\nCPU.prototype.imul16 = function(source_operand)\r\n{\r\n    var result = source_operand * this.reg16s[reg_ax];\r\n\r\n    this.reg16[reg_ax] = result;\r\n    this.reg16[reg_dx] = result >> 16;\r\n\r\n    this.last_result = result & 0xFFFF;\r\n    this.last_op_size = OPSIZE_16;\r\n\r\n    if(result > 0x7FFF || result < -0x8000)\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n}\r\n\r\n/*\r\n * imul with 2 or 3 arguments\r\n * reg = reg * r/m\r\n * reg = imm * r/m\r\n */\r\nCPU.prototype.imul_reg16 = function(operand1, operand2)\r\n{\r\n    dbg_assert(operand1 < 0x8000 && operand1 >= -0x8000);\r\n    dbg_assert(operand2 < 0x8000 && operand2 >= -0x8000);\r\n\r\n    var result = operand1 * operand2;\r\n\r\n    this.last_result = result & 0xFFFF;\r\n    this.last_op_size = OPSIZE_16;\r\n\r\n    if(result > 0x7FFF || result < -0x8000)\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.mul32 = function(source_operand)\r\n{\r\n    var dest_operand = this.reg32s[reg_eax];\r\n\r\n    var lo = v86util.mul_low(dest_operand, source_operand);\r\n    var hi = v86util.mul_high(dest_operand, source_operand);\r\n\r\n    this.reg32s[reg_eax] = lo;\r\n    this.reg32s[reg_edx] = hi;\r\n\r\n    this.last_result = lo;\r\n    this.last_op_size = OPSIZE_32;\r\n\r\n    if(hi === 0)\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    //console.log(h(source_operand >>> 0, 8) + \" * \" + h(dest_operand >>> 0, 8));\r\n    //console.log(\"= \" + h(this.reg32[reg_edx], 8) + \":\" + h(this.reg32[reg_eax], 8));\r\n}\r\n\r\nCPU.prototype.imul32 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\r\n\r\n    var dest_operand = this.reg32s[reg_eax];\r\n\r\n    var lo = v86util.imul_low(dest_operand, source_operand);\r\n    var hi = v86util.imul_high(dest_operand, source_operand);\r\n\r\n    this.reg32s[reg_eax] = lo;\r\n    this.reg32s[reg_edx] = hi;\r\n\r\n    this.last_result = lo;\r\n    this.last_op_size = OPSIZE_32;\r\n\r\n    if(hi === (lo >> 31))\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    //console.log(target_operand + \" * \" + source_operand);\r\n    //console.log(\"= \" + h(this.reg32[reg_edx]) + \" \" + h(this.reg32[reg_eax]));\r\n}\r\n\r\n/*\r\n * imul with 2 or 3 arguments\r\n * reg = reg * r/m\r\n * reg = imm * r/m\r\n */\r\nCPU.prototype.imul_reg32 = function(operand1, operand2)\r\n{\r\n    dbg_assert(operand1 < 0x80000000 && operand1 >= -0x80000000);\r\n    dbg_assert(operand2 < 0x80000000 && operand2 >= -0x80000000);\r\n\r\n    var lo = v86util.imul_low(operand1, operand2);\r\n    var hi = v86util.imul_high(operand1, operand2);\r\n\r\n    this.last_result = lo;\r\n    this.last_op_size = OPSIZE_32;\r\n\r\n    if(hi === (lo >> 31))\r\n    {\r\n        this.flags &= ~1 & ~flag_overflow;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= 1 | flag_overflow;\r\n    }\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    return lo;\r\n\r\n    //console.log(operand + \" * \" + source_operand);\r\n    //console.log(\"= \" + this.reg32[reg]);\r\n}\r\n\r\nCPU.prototype.div8 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand >= 0 && source_operand < 0x100);\r\n\r\n    if(source_operand === 0)\r\n    {\r\n        this.trigger_de();\r\n        return;\r\n    }\r\n\r\n    var target_operand = this.reg16[reg_ax],\r\n        result = target_operand / source_operand | 0;\r\n\r\n    if(result >= 0x100)\r\n    {\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg8[reg_al] = result;\r\n        this.reg8[reg_ah] = target_operand % source_operand;\r\n    }\r\n}\r\n\r\nCPU.prototype.idiv8 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand >= -0x80 && source_operand < 0x80);\r\n\r\n    if(source_operand === 0)\r\n    {\r\n        this.trigger_de();\r\n        return;\r\n    }\r\n\r\n    var target_operand = this.reg16s[reg_ax],\r\n        result = target_operand / source_operand | 0;\r\n\r\n    if(result >= 0x80 || result <= -0x81)\r\n    {\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg8[reg_al] = result;\r\n        this.reg8[reg_ah] = target_operand % source_operand;\r\n    }\r\n}\r\n\r\nCPU.prototype.div16 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand >= 0 && source_operand < 0x10000);\r\n\r\n    if(source_operand === 0)\r\n    {\r\n        this.trigger_de();\r\n        return;\r\n    }\r\n\r\n    var\r\n        target_operand = (this.reg16[reg_ax] | this.reg16[reg_dx] << 16) >>> 0,\r\n        result = target_operand / source_operand | 0;\r\n\r\n    if(result >= 0x10000 || result < 0)\r\n    {\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg_ax] = result;\r\n        this.reg16[reg_dx] = target_operand % source_operand;\r\n    }\r\n}\r\n\r\nCPU.prototype.idiv16 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand >= -0x8000 && source_operand < 0x8000);\r\n\r\n    if(source_operand === 0)\r\n    {\r\n        this.trigger_de();\r\n        return;\r\n    }\r\n\r\n    var target_operand = this.reg16[reg_ax] | (this.reg16[reg_dx] << 16),\r\n        result = target_operand / source_operand | 0;\r\n\r\n    if(result >= 0x8000 || result <= -0x8001)\r\n    {\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg16[reg_ax] = result;\r\n        this.reg16[reg_dx] = target_operand % source_operand;\r\n    }\r\n}\r\n\r\n// If the dividend is too large, the division cannot be done precisely using\r\n// JavaScript's double floating point numbers. Run simple long division until\r\n// the dividend is small enough\r\nCPU.prototype.do_div32 = function(div_low, div_high, quot)\r\n{\r\n    if(div_high >= quot || quot === 0)\r\n    {\r\n        dbg_log(\"div32 #DE: \" + h(div_high, 8) + \":\" + h(div_low, 8) + \" div \" + h(quot, 8));\r\n        this.trigger_de();\r\n    }\r\n\r\n    var result = 0;\r\n\r\n    if(div_high > 0x100000)\r\n    {\r\n        var m = 0;\r\n        var i = 32;\r\n        var q = quot;\r\n        while(q > div_high)\r\n        {\r\n            q >>>= 1;\r\n            i--;\r\n        }\r\n        while(div_high > 0x100000)\r\n        {\r\n            if(div_high >= q)\r\n            {\r\n                div_high -= q;\r\n                var sub = quot << i >>> 0;\r\n                if(sub > div_low)\r\n                {\r\n                    div_high--;\r\n                }\r\n                div_low = div_low - sub >>> 0;\r\n                result |= 1 << i\r\n            }\r\n            i--;\r\n            q >>= 1;\r\n        }\r\n        result >>>= 0;\r\n    }\r\n\r\n    var div = div_low + div_high * 0x100000000;\r\n    var mod = div % quot;\r\n    result += div / quot | 0;\r\n\r\n    this.div32_result[0] = result;\r\n    this.div32_result[1] = mod;\r\n    return this.div32_result;\r\n}\r\n\r\n\r\nCPU.prototype.div32 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand >= 0 && source_operand <= 0xffffffff);\r\n\r\n    var dest_operand_low = this.reg32[reg_eax],\r\n        dest_operand_high = this.reg32[reg_edx];\r\n\r\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\r\n    var result = result_mod[0];\r\n    var mod = result_mod[1];\r\n\r\n    // XXX\r\n    dbg_assert(source_operand);\r\n    if(result >= 0x100000000)\r\n    {\r\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\r\n        dbg_log(\"-> \" + h(result));\r\n\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg32s[reg_eax] = result;\r\n        this.reg32s[reg_edx] = mod;\r\n    }\r\n\r\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\r\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\r\n}\r\n\r\nCPU.prototype.idiv32 = function(source_operand)\r\n{\r\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\r\n\r\n    var dest_operand_low = this.reg32[reg_eax],\r\n        dest_operand_high = this.reg32s[reg_edx],\r\n        div_is_neg = false,\r\n        is_neg = false;\r\n\r\n    if(source_operand < 0)\r\n    {\r\n        is_neg = true;\r\n        source_operand = -source_operand;\r\n    }\r\n\r\n    if(dest_operand_high < 0)\r\n    {\r\n        div_is_neg = true;\r\n        is_neg = !is_neg;\r\n        dest_operand_low = -dest_operand_low >>> 0;\r\n        dest_operand_high = ~dest_operand_high + !dest_operand_low;\r\n    }\r\n\r\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\r\n    var result = result_mod[0];\r\n    var mod = result_mod[1];\r\n\r\n    if(is_neg)\r\n    {\r\n        result = -result | 0;\r\n    }\r\n\r\n    if(div_is_neg)\r\n    {\r\n        mod = -mod | 0;\r\n    }\r\n\r\n    dbg_assert(source_operand);\r\n    if(result >= 0x80000000 || result <= -0x80000001)\r\n    {\r\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\r\n        dbg_log(\"-> \" + h(result));\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        this.reg32s[reg_eax] = result;\r\n        this.reg32s[reg_edx] = mod;\r\n    }\r\n\r\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\r\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\r\n}\r\n\r\n\r\nCPU.prototype.xadd8 = function(source_operand, reg)\r\n{\r\n    var tmp = this.reg8[reg];\r\n\r\n    this.reg8[reg] = source_operand;\r\n\r\n    return this.add(source_operand, tmp, OPSIZE_8);\r\n}\r\n\r\n\r\nCPU.prototype.xadd16 = function(source_operand, reg)\r\n{\r\n    var tmp = this.reg16[reg];\r\n\r\n    this.reg16[reg] = source_operand;\r\n\r\n    return this.add(source_operand, tmp, OPSIZE_16);\r\n}\r\n\r\n\r\nCPU.prototype.xadd32 = function(source_operand, reg)\r\n{\r\n    var tmp = this.reg32s[reg];\r\n\r\n    this.reg32s[reg] = source_operand;\r\n\r\n    return this.add(source_operand, tmp, OPSIZE_32);\r\n}\r\n\r\n\r\nCPU.prototype.bcd_daa = function()\r\n{\r\n    //dbg_log(\"daa\");\r\n    // decimal adjust after addition\r\n    var old_al = this.reg8[reg_al],\r\n        old_cf = this.getcf(),\r\n        old_af = this.getaf();\r\n\r\n    this.flags &= ~1 & ~flag_adjust\r\n\r\n    if((old_al & 0xF) > 9 || old_af)\r\n    {\r\n        this.reg8[reg_al] += 6;\r\n        this.flags |= flag_adjust;\r\n    }\r\n    if(old_al > 0x99 || old_cf)\r\n    {\r\n        this.reg8[reg_al] += 0x60;\r\n        this.flags |= 1;\r\n    }\r\n\r\n    this.last_result = this.reg8[reg_al];\r\n    this.last_op_size = OPSIZE_8;\r\n    this.last_op1 = this.last_op2 = 0;\r\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\r\n}\r\n\r\nCPU.prototype.bcd_das = function()\r\n{\r\n    //dbg_log(\"das\");\r\n    // decimal adjust after subtraction\r\n    var old_al = this.reg8[reg_al],\r\n        old_cf = this.getcf();\r\n\r\n    this.flags &= ~1;\r\n\r\n    if((old_al & 0xF) > 9 || this.getaf())\r\n    {\r\n        this.reg8[reg_al] -= 6;\r\n        this.flags |= flag_adjust;\r\n        this.flags = this.flags & ~1 | old_cf | (old_al < 6);\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_adjust;\r\n    }\r\n\r\n    if(old_al > 0x99 || old_cf)\r\n    {\r\n        this.reg8[reg_al] -= 0x60;\r\n        this.flags |= 1;\r\n    }\r\n\r\n    this.last_result = this.reg8[reg_al];\r\n    this.last_op_size = OPSIZE_8;\r\n    this.last_op1 = this.last_op2 = 0;\r\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\r\n}\r\n\r\nCPU.prototype.bcd_aam = function(imm8)\r\n{\r\n    //dbg_log(\"aam\");\r\n    // ascii adjust after multiplication\r\n\r\n    if(imm8 === 0)\r\n    {\r\n        this.trigger_de();\r\n    }\r\n    else\r\n    {\r\n        var temp = this.reg8[reg_al];\r\n        this.reg8[reg_ah] = temp / imm8;\r\n        this.reg8[reg_al] = temp % imm8;\r\n\r\n        this.last_result = this.reg8[reg_al];\r\n\r\n        this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\r\n        this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\r\n    }\r\n}\r\n\r\nCPU.prototype.bcd_aad = function(imm8)\r\n{\r\n    //dbg_log(\"aad\");\r\n    // ascii adjust before division\r\n\r\n    var result = this.reg8[reg_al] + this.reg8[reg_ah] * imm8;\r\n    this.last_result = result & 0xFF;\r\n    this.reg16[reg_ax] = this.last_result;\r\n    this.last_op_size = OPSIZE_8;\r\n\r\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\r\n    this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\r\n\r\n    if(result > 0xFFFF)\r\n    {\r\n        this.flags |= 1;\r\n    }\r\n}\r\n\r\nCPU.prototype.bcd_aaa = function()\r\n{\r\n    //dbg_log(\"aaa\");\r\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\r\n    {\r\n        this.reg16[reg_ax] += 6;\r\n        this.reg8[reg_ah] += 1;\r\n        this.flags |= flag_adjust | 1;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_adjust & ~1;\r\n    }\r\n    this.reg8[reg_al] &= 0xF;\r\n\r\n    this.flags_changed &= ~flag_adjust & ~1;\r\n};\r\n\r\n\r\nCPU.prototype.bcd_aas = function()\r\n{\r\n    //dbg_log(\"aas\");\r\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\r\n    {\r\n        this.reg16[reg_ax] -= 6;\r\n        this.reg8[reg_ah] -= 1;\r\n        this.flags |= flag_adjust | 1;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_adjust & ~1;\r\n    }\r\n    this.reg8[reg_al] &= 0xF;\r\n\r\n    this.flags_changed &= ~flag_adjust & ~1;\r\n}\r\n\r\n\r\n/*                     \\O\r\n * bitwise functions    |\\\r\n *                     / \\\r\n *\r\n * and, or, xor, test\r\n * shl, shr, sar, rol, ror, rcl, ror\r\n * shrd, shld\r\n *\r\n * bt, bts, btr, btc\r\n * bsf, bsr\r\n */\r\n\r\nCPU.prototype.and8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\r\nCPU.prototype.and16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\r\nCPU.prototype.and32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.test8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\r\nCPU.prototype.test16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\r\nCPU.prototype.test32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.or8 = function(dest, src) { return this.or(dest, src, OPSIZE_8); }\r\nCPU.prototype.or16 = function(dest, src) { return this.or(dest, src, OPSIZE_16); }\r\nCPU.prototype.or32 = function(dest, src) { return this.or(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.xor8 = function(dest, src) { return this.xor(dest, src, OPSIZE_8); }\r\nCPU.prototype.xor16 = function(dest, src) { return this.xor(dest, src, OPSIZE_16); }\r\nCPU.prototype.xor32 = function(dest, src) { return this.xor(dest, src, OPSIZE_32); }\r\n\r\nCPU.prototype.and = function(dest_operand, source_operand, op_size)\r\n{\r\n    this.last_result = dest_operand & source_operand;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.or = function(dest_operand, source_operand, op_size)\r\n{\r\n    this.last_result = dest_operand | source_operand;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.xor = function(dest_operand, source_operand, op_size)\r\n{\r\n    this.last_result = dest_operand ^ source_operand;\r\n\r\n    this.last_op_size = op_size;\r\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\r\n\r\n    return this.last_result;\r\n}\r\n\r\n\r\n/*\r\n * rotates and shifts\r\n */\r\n\r\nCPU.prototype.rol8 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n    count &= 7;\r\n\r\n    var result = dest_operand << count | dest_operand >> (8 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result & 1)\r\n                | (result << 11 ^ result << 4) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rol16 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n    count &= 15;\r\n\r\n    var result = dest_operand << count | dest_operand >> (16 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result & 1)\r\n                | (result << 11 ^ result >> 4) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rol32 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand << count | dest_operand >>> (32 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result & 1)\r\n                | (result << 11 ^ result >> 20) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcl8 = function(dest_operand, count)\r\n{\r\n    count %= 9;\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (9 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 8 & 1)\r\n                | (result << 3 ^ result << 4) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcl16 = function(dest_operand, count)\r\n{\r\n    count %= 17;\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (17 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 16 & 1)\r\n                | (result >> 5 ^ result >> 4) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcl32 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand << count | this.getcf() << (count - 1);\r\n\r\n    if(count > 1)\r\n    {\r\n        result |= dest_operand >>> (33 - count);\r\n    }\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\r\n    this.flags |= (this.flags << 11 ^ result >> 20) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.ror8 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    count &= 7;\r\n    var result = dest_operand >> count | dest_operand << (8 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 7 & 1)\r\n                | (result << 4 ^ result << 5) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.ror16 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    count &= 15;\r\n    var result = dest_operand >> count | dest_operand << (16 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 15 & 1)\r\n                | (result >> 4 ^ result >> 3) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.ror32 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand >>> count | dest_operand << (32 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 31 & 1)\r\n                | (result >> 20 ^ result >> 19) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcr8 = function(dest_operand, count)\r\n{\r\n    count %= 9;\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand >> count | this.getcf() << (8 - count) | dest_operand << (9 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 8 & 1)\r\n                | (result << 4 ^ result << 5) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcr16 = function(dest_operand, count)\r\n{\r\n    count %= 17;\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand >> count | this.getcf() << (16 - count) | dest_operand << (17 - count);\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (result >> 16 & 1)\r\n                | (result >> 4 ^ result >> 3) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.rcr32 = function(dest_operand, count)\r\n{\r\n    if(!count)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    var result = dest_operand >>> count | this.getcf() << (32 - count);\r\n\r\n    if(count > 1)\r\n    {\r\n        result |= dest_operand << (33 - count);\r\n    }\r\n\r\n    this.flags_changed &= ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (dest_operand >> (count - 1) & 1)\r\n                | (result >> 20 ^ result >> 19) & flag_overflow;\r\n\r\n    return result;\r\n}\r\n\r\nCPU.prototype.shl8 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand << count;\r\n\r\n    this.last_op_size = OPSIZE_8;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (this.last_result >> 8 & 1)\r\n                | (this.last_result << 3 ^ this.last_result << 4) & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shl16 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand << count;\r\n\r\n    this.last_op_size = OPSIZE_16;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (this.last_result >> 16 & 1)\r\n                | (this.last_result >> 5 ^ this.last_result >> 4) & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shl32 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand << count;\r\n\r\n    this.last_op_size = OPSIZE_32;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    // test this\r\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\r\n    this.flags |= ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11 & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shr8 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand >> count;\r\n\r\n    this.last_op_size = OPSIZE_8;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (dest_operand >> (count - 1) & 1)\r\n                | (dest_operand >> 7 & 1) << 11 & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shr16 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand >> count;\r\n\r\n    this.last_op_size = OPSIZE_16;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (dest_operand >> (count - 1) & 1)\r\n                | (dest_operand >> 4)  & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shr32 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand >>> count;\r\n\r\n    this.last_op_size = OPSIZE_32;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow)\r\n                | (dest_operand >>> (count - 1) & 1)\r\n                | (dest_operand >> 20) & flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.sar8 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    if(count < 8)\r\n    {\r\n        this.last_result = dest_operand << 24 >> count + 24;\r\n        // of is zero\r\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\r\n    }\r\n    else\r\n    {\r\n        this.last_result = dest_operand << 24 >> 31;\r\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\r\n    }\r\n\r\n    this.last_op_size = OPSIZE_8;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.sar16 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    if(count < 16)\r\n    {\r\n        this.last_result = dest_operand << 16 >> count + 16;\r\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\r\n    }\r\n    else\r\n    {\r\n        this.last_result = dest_operand << 16 >> 31;\r\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\r\n    }\r\n\r\n    this.last_op_size = OPSIZE_16;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.sar32 = function(dest_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand >> count;\r\n\r\n    this.last_op_size = OPSIZE_32;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (count - 1) & 1);\r\n\r\n    return this.last_result;\r\n}\r\n\r\n\r\nCPU.prototype.shrd16 = function(dest_operand, source_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    if(count <= 16)\r\n    {\r\n        this.last_result = dest_operand >> count | source_operand << (16 - count);\r\n        this.flags = (this.flags & ~1) | (dest_operand >> (count - 1) & 1);\r\n    }\r\n    else\r\n    {\r\n        this.last_result = dest_operand << (32 - count) | source_operand >> (count - 16);\r\n        this.flags = (this.flags & ~1) | (source_operand >> (count - 17) & 1);\r\n    }\r\n\r\n    this.last_op_size = OPSIZE_16;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 4 & flag_overflow);\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shrd32 = function(dest_operand, source_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand >>> count | source_operand << (32 - count);\r\n\r\n    this.last_op_size = OPSIZE_32;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1) | (dest_operand >>> (count - 1) & 1);\r\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 20 & flag_overflow);\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shld16 = function(dest_operand, source_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    if(count <= 16)\r\n    {\r\n        this.last_result = dest_operand << count | source_operand >>> (16 - count);\r\n        this.flags = (this.flags & ~1) | (dest_operand >>> (16 - count) & 1);\r\n    }\r\n    else\r\n    {\r\n        this.last_result = dest_operand >> (32 - count) | source_operand << (count - 16);\r\n        this.flags = (this.flags & ~1) | (source_operand >>> (32 - count) & 1);\r\n    }\r\n\r\n    this.last_op_size = OPSIZE_16;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 15 & 1)) << 11;\r\n\r\n    return this.last_result;\r\n}\r\n\r\nCPU.prototype.shld32 = function(dest_operand, source_operand, count)\r\n{\r\n    if(count === 0)\r\n    {\r\n        return dest_operand;\r\n    }\r\n\r\n    this.last_result = dest_operand << count | source_operand >>> (32 - count);\r\n\r\n    this.last_op_size = OPSIZE_32;\r\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\r\n    this.flags = (this.flags & ~1) | (dest_operand >>> (32 - count) & 1);\r\n\r\n    if(count === 1)\r\n    {\r\n        this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_overflow;\r\n    }\r\n\r\n    return this.last_result;\r\n}\r\n\r\n\r\nCPU.prototype.bt_reg = function(bit_base, bit_offset)\r\n{\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n}\r\n\r\nCPU.prototype.btc_reg = function(bit_base, bit_offset)\r\n{\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    return bit_base ^ 1 << bit_offset;\r\n}\r\n\r\nCPU.prototype.bts_reg = function(bit_base, bit_offset)\r\n{\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    return bit_base | 1 << bit_offset;\r\n}\r\n\r\nCPU.prototype.btr_reg = function(bit_base, bit_offset)\r\n{\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    return bit_base & ~(1 << bit_offset);\r\n}\r\n\r\nCPU.prototype.bt_mem = function(virt_addr, bit_offset)\r\n{\r\n    var bit_base = this.safe_read8(virt_addr + (bit_offset >> 3) | 0);\r\n    bit_offset &= 7;\r\n\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n}\r\n\r\nCPU.prototype.btc_mem = function(virt_addr, bit_offset)\r\n{\r\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\r\n    var bit_base = this.read8(phys_addr);\r\n\r\n    bit_offset &= 7;\r\n\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    this.write8(phys_addr, bit_base ^ 1 << bit_offset);\r\n}\r\n\r\nCPU.prototype.btr_mem = function(virt_addr, bit_offset)\r\n{\r\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\r\n    var bit_base = this.read8(phys_addr);\r\n\r\n    bit_offset &= 7;\r\n\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    this.write8(phys_addr, bit_base & ~(1 << bit_offset));\r\n}\r\n\r\nCPU.prototype.bts_mem = function(virt_addr, bit_offset)\r\n{\r\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\r\n    var bit_base = this.read8(phys_addr);\r\n\r\n    bit_offset &= 7;\r\n\r\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\r\n    this.flags_changed &= ~1;\r\n\r\n    this.write8(phys_addr, bit_base | 1 << bit_offset);\r\n}\r\n\r\nCPU.prototype.bsf16 = function(old, bit_base)\r\n{\r\n    this.flags_changed = flags_all & ~flag_zero;\r\n    this.last_op_size = OPSIZE_16;\r\n\r\n    if(bit_base === 0)\r\n    {\r\n        this.flags |= flag_zero;\r\n        this.last_result = bit_base;\r\n\r\n        // not defined in the docs, but value doesn't change on my intel machine\r\n        return old;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_zero;\r\n\r\n        // http://jsperf.com/lowest-bit-index\r\n        return this.last_result = v86util.int_log2(-bit_base & bit_base);\r\n    }\r\n}\r\n\r\nCPU.prototype.bsf32 = function(old, bit_base)\r\n{\r\n    this.flags_changed = flags_all & ~flag_zero;\r\n    this.last_op_size = OPSIZE_32;\r\n\r\n    if(bit_base === 0)\r\n    {\r\n        this.flags |= flag_zero;\r\n        this.last_result = bit_base;\r\n        return old;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_zero;\r\n\r\n        return this.last_result = v86util.int_log2((-bit_base & bit_base) >>> 0);\r\n    }\r\n}\r\n\r\nCPU.prototype.bsr16 = function(old, bit_base)\r\n{\r\n    this.flags_changed = flags_all & ~flag_zero;\r\n    this.last_op_size = OPSIZE_16;\r\n\r\n    if(bit_base === 0)\r\n    {\r\n        this.flags |= flag_zero;\r\n        this.last_result = bit_base;\r\n        return old;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_zero;\r\n\r\n        return this.last_result = v86util.int_log2(bit_base);\r\n    }\r\n}\r\n\r\nCPU.prototype.bsr32 = function(old, bit_base)\r\n{\r\n    this.flags_changed = flags_all & ~flag_zero;\r\n    this.last_op_size = OPSIZE_32;\r\n\r\n    if(bit_base === 0)\r\n    {\r\n        this.flags |= flag_zero;\r\n        this.last_result = bit_base;\r\n        return old;\r\n    }\r\n    else\r\n    {\r\n        this.flags &= ~flag_zero;\r\n        return this.last_result = v86util.int_log2(bit_base >>> 0);\r\n    }\r\n}\r\n\r\nCPU.prototype.popcnt = function(v)\r\n{\r\n    this.flags_changed = 0;\r\n    this.flags &= ~flags_all;\r\n\r\n    if(v)\r\n    {\r\n        // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\r\n        v = v - ((v >> 1) & 0x55555555);\r\n        v = (v & 0x33333333) + ((v >> 2) & 0x33333333);\r\n        return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;\r\n    }\r\n    else\r\n    {\r\n        this.flags |= flag_zero;\r\n        return 0;\r\n    }\r\n};\r\n\r\nCPU.prototype.saturate_sw_to_ub = function(v)\r\n{\r\n    dbg_assert((v & 0xFFFF0000) === 0);\r\n\r\n    let ret = v >>> 0;\r\n    if (ret >= 0x8000) {\r\n        ret = 0;\r\n    }\r\n    else if (ret > 0xFF) {\r\n        ret = 0xFF;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFFFF00) === 0);\r\n    return ret;\r\n};\r\n\r\nCPU.prototype.saturate_sw_to_sb = function(v)\r\n{\r\n    dbg_assert((v & 0xFFFF0000) === 0);\r\n\r\n    let ret = v;\r\n\r\n    if (ret > 0xFF80) {\r\n        ret = ret & 0xFF;\r\n    }\r\n    else if (ret > 0x7FFF) {\r\n        ret = 0x80;\r\n    }\r\n    else if (ret > 0x7F) {\r\n        ret = 0x7F;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFFFF00) === 0);\r\n    return ret;\r\n};\r\n\r\nCPU.prototype.saturate_sd_to_sw = function(v)\r\n{\r\n    let ret = v >>> 0;\r\n\r\n    if (ret > 0xFFFF8000) {\r\n        ret = ret & 0xFFFF;\r\n    }\r\n    else if (ret > 0x7FFFFFFF) {\r\n        ret = 0x8000;\r\n    }\r\n    else if (ret > 0x7FFF) {\r\n        ret = 0x7FFF;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFF0000) === 0);\r\n    return ret;\r\n};\r\n\r\nCPU.prototype.saturate_sd_to_sb = function(v)\r\n{\r\n    let ret = v >>> 0;\r\n\r\n    if (ret > 0xFFFFFF80) {\r\n        ret = ret & 0xFF;\r\n    }\r\n    else if (ret > 0x7FFFFFFF) {\r\n        ret = 0x80;\r\n    }\r\n    else if (ret > 0x7F) {\r\n        ret = 0x7F;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFFFF00) === 0);\r\n    return ret;\r\n};\r\n\r\nCPU.prototype.saturate_sd_to_ub = function(v)\r\n{\r\n    let ret = v | 0;\r\n\r\n    if (ret < 0) {\r\n        ret = 0;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFFFF00) === 0);\r\n    return ret;\r\n};\r\n\r\n\r\nCPU.prototype.saturate_ud_to_ub = function(v)\r\n{\r\n    let ret = v >>> 0;\r\n\r\n    if (ret > 0xFF) {\r\n        ret = 0xFF;\r\n    }\r\n\r\n    dbg_assert((ret & 0xFFFFFF00) === 0);\r\n    return ret;\r\n};\r\n\r\nCPU.prototype.saturate_uw = function(v)\r\n{\r\n    dbg_assert(v >= 0);\r\n    return v > 0xFFFF ? 0xFFFF : v;\r\n};\r\n\r\nCPU.prototype.integer_round = function(f, rc)\r\n{\r\n    if(rc === 0)\r\n    {\r\n        // Round to nearest, or even if equidistant\r\n        var rounded = Math.round(f);\r\n\r\n        if(rounded - f === 0.5 && (rounded % 2))\r\n        {\r\n            // Special case: Math.round rounds to positive infinity\r\n            // if equidistant\r\n            rounded--;\r\n        }\r\n\r\n        return rounded;\r\n    }\r\n    // rc=3 is truncate -> floor for positive numbers\r\n    else if(rc === 1 || (rc === 3 && f > 0))\r\n    {\r\n        return Math.floor(f);\r\n    }\r\n    else\r\n    {\r\n        return Math.ceil(f);\r\n    }\r\n}\r\n","/*\r\n * Some miscellaneous instructions:\r\n *\r\n * jmpcc16, jmpcc32, jmp16\r\n * loop, loope, loopne, jcxz\r\n * test_cc\r\n *\r\n * mov, push, pop\r\n * pusha, popa\r\n * xchg, lss\r\n * lea\r\n * enter\r\n * bswap\r\n * fxsave, fxrstor\r\n */\r\n\"use strict\";\r\n\r\nCPU.prototype.jmpcc8 = function(condition)\r\n{\r\n    var imm8 = this.read_op8s();\r\n    if(condition)\r\n    {\r\n        this.instruction_pointer = this.instruction_pointer + imm8 | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n};\r\n\r\nCPU.prototype.jmp_rel16 = function(rel16)\r\n{\r\n    var current_cs = this.get_seg(reg_cs);\r\n\r\n    // limit ip to 16 bit\r\n    // ugly\r\n    this.instruction_pointer -= current_cs;\r\n    this.instruction_pointer = (this.instruction_pointer + rel16) & 0xFFFF;\r\n    this.instruction_pointer = this.instruction_pointer + current_cs | 0;\r\n};\r\n\r\nCPU.prototype.jmpcc16 = function(condition)\r\n{\r\n    var imm16 = this.read_op16();\r\n    if(condition)\r\n    {\r\n        this.jmp_rel16(imm16);\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n}\r\n\r\n\r\nCPU.prototype.jmpcc32 = function(condition)\r\n{\r\n    var imm32s = this.read_op32s();\r\n    if(condition)\r\n    {\r\n        // don't change to `this.instruction_pointer += this.read_op32s()`,\r\n        //   since read_op32s modifies instruction_pointer\r\n\r\n        this.instruction_pointer = this.instruction_pointer + imm32s | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n};\r\n\r\nCPU.prototype.cmovcc16 = function(condition)\r\n{\r\n    var data = this.read_e16();\r\n    if(condition)\r\n    {\r\n        this.write_g16(data);\r\n    }\r\n};\r\n\r\nCPU.prototype.cmovcc32 = function(condition)\r\n{\r\n    var data = this.read_e32s();\r\n    if(condition)\r\n    {\r\n        this.write_g32(data);\r\n    }\r\n};\r\n\r\nCPU.prototype.setcc = function(condition)\r\n{\r\n    this.set_e8(condition ? 1 : 0)\r\n};\r\n\r\nCPU.prototype.loopne = function(imm8s)\r\n{\r\n    if(this.decr_ecx_asize() && !this.getzf())\r\n    {\r\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n}\r\n\r\nCPU.prototype.loope = function(imm8s)\r\n{\r\n    if(this.decr_ecx_asize() && this.getzf())\r\n    {\r\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n}\r\n\r\nCPU.prototype.loop = function(imm8s)\r\n{\r\n    if(this.decr_ecx_asize())\r\n    {\r\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n}\r\n\r\nCPU.prototype.jcxz = function(imm8s)\r\n{\r\n    if(this.get_reg_asize(reg_ecx) === 0)\r\n    {\r\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\r\n        this.branch_taken();\r\n    }\r\n    else\r\n    {\r\n        this.branch_not_taken();\r\n    }\r\n};\r\n\r\n/**\r\n * @return {number}\r\n * @const\r\n */\r\nCPU.prototype.getcf = function()\r\n{\r\n    if(this.flags_changed & 1)\r\n    {\r\n        return (this.last_op1 ^ (this.last_op1 ^ this.last_op2) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & 1;\r\n    }\r\n};\r\n\r\n/** @return {number} */\r\nCPU.prototype.getpf = function()\r\n{\r\n    if(this.flags_changed & flag_parity)\r\n    {\r\n        // inverted lookup table\r\n        return 0x9669 << 2 >> ((this.last_result ^ this.last_result >> 4) & 0xF) & flag_parity;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & flag_parity;\r\n    }\r\n};\r\n\r\n/** @return {number} */\r\nCPU.prototype.getaf = function()\r\n{\r\n    if(this.flags_changed & flag_adjust)\r\n    {\r\n        return (this.last_op1 ^ this.last_op2 ^ this.last_add_result) & flag_adjust;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & flag_adjust;\r\n    }\r\n};\r\n\r\n/** @return {number} */\r\nCPU.prototype.getzf = function()\r\n{\r\n    if(this.flags_changed & flag_zero)\r\n    {\r\n        return (~this.last_result & this.last_result - 1) >>> this.last_op_size & 1;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & flag_zero;\r\n    }\r\n};\r\n\r\n/** @return {number} */\r\nCPU.prototype.getsf = function()\r\n{\r\n    if(this.flags_changed & flag_sign)\r\n    {\r\n        return this.last_result >>> this.last_op_size & 1;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & flag_sign;\r\n    }\r\n};\r\n\r\n/** @return {number} */\r\nCPU.prototype.getof = function()\r\n{\r\n    if(this.flags_changed & flag_overflow)\r\n    {\r\n        return ((this.last_op1 ^ this.last_add_result) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\r\n    }\r\n    else\r\n    {\r\n        return this.flags & flag_overflow;\r\n    }\r\n};\r\n\r\nCPU.prototype.test_o = CPU.prototype.getof;\r\nCPU.prototype.test_b = CPU.prototype.getcf;\r\nCPU.prototype.test_z = CPU.prototype.getzf;\r\nCPU.prototype.test_s = CPU.prototype.getsf;\r\nCPU.prototype.test_p = CPU.prototype.getpf;\r\n\r\nCPU.prototype.test_be = function()\r\n{\r\n    // Idea:\r\n    //    return this.last_op1 <= this.last_op2;\r\n    return this.getcf() || this.getzf();\r\n}\r\n\r\nCPU.prototype.test_l = function()\r\n{\r\n    // Idea:\r\n    //    return this.last_add_result < this.last_op2;\r\n    return !this.getsf() !== !this.getof();\r\n}\r\n\r\nCPU.prototype.test_le = function()\r\n{\r\n    // Idea:\r\n    //    return this.last_add_result <= this.last_op2;\r\n    return this.getzf() || !this.getsf() !== !this.getof();\r\n}\r\n\r\n\r\n\r\nCPU.prototype.push16 = function(imm16)\r\n{\r\n    var sp = this.get_stack_pointer(-2);\r\n\r\n    this.safe_write16(sp, imm16);\r\n    this.adjust_stack_reg(-2);\r\n}\r\n\r\nCPU.prototype.push32 = function(imm32)\r\n{\r\n    var sp = this.get_stack_pointer(-4);\r\n\r\n    this.safe_write32(sp, imm32);\r\n    this.adjust_stack_reg(-4);\r\n}\r\n\r\nCPU.prototype.pop16 = function()\r\n{\r\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\r\n        result = this.safe_read16(sp);\r\n\r\n    this.adjust_stack_reg(2);\r\n    return result;\r\n}\r\n\r\nCPU.prototype.pop32s = function()\r\n{\r\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\r\n        result = this.safe_read32s(sp);\r\n\r\n    this.adjust_stack_reg(4);\r\n    return result;\r\n}\r\n\r\nCPU.prototype.pusha16 = function()\r\n{\r\n    var temp = this.reg16[reg_sp];\r\n\r\n    // make sure we don't get a pagefault after having\r\n    // pushed several registers already\r\n    this.writable_or_pagefault(this.get_stack_pointer(-16), 16);\r\n\r\n    this.push16(this.reg16[reg_ax]);\r\n    this.push16(this.reg16[reg_cx]);\r\n    this.push16(this.reg16[reg_dx]);\r\n    this.push16(this.reg16[reg_bx]);\r\n    this.push16(temp);\r\n    this.push16(this.reg16[reg_bp]);\r\n    this.push16(this.reg16[reg_si]);\r\n    this.push16(this.reg16[reg_di]);\r\n}\r\n\r\nCPU.prototype.pusha32 = function()\r\n{\r\n    var temp = this.reg32s[reg_esp];\r\n\r\n    this.writable_or_pagefault(this.get_stack_pointer(-32), 32);\r\n\r\n    this.push32(this.reg32s[reg_eax]);\r\n    this.push32(this.reg32s[reg_ecx]);\r\n    this.push32(this.reg32s[reg_edx]);\r\n    this.push32(this.reg32s[reg_ebx]);\r\n    this.push32(temp);\r\n    this.push32(this.reg32s[reg_ebp]);\r\n    this.push32(this.reg32s[reg_esi]);\r\n    this.push32(this.reg32s[reg_edi]);\r\n}\r\n\r\nCPU.prototype.popa16 = function()\r\n{\r\n    this.translate_address_read(this.get_stack_pointer(0));\r\n    this.translate_address_read(this.get_stack_pointer(15));\r\n\r\n    this.reg16[reg_di] = this.pop16();\r\n    this.reg16[reg_si] = this.pop16();\r\n    this.reg16[reg_bp] = this.pop16();\r\n    this.adjust_stack_reg(2);\r\n    this.reg16[reg_bx] = this.pop16();\r\n    this.reg16[reg_dx] = this.pop16();\r\n    this.reg16[reg_cx] = this.pop16();\r\n    this.reg16[reg_ax] = this.pop16();\r\n}\r\n\r\nCPU.prototype.popa32 = function()\r\n{\r\n    this.translate_address_read(this.get_stack_pointer(0));\r\n    this.translate_address_read(this.get_stack_pointer(31));\r\n\r\n    this.reg32s[reg_edi] = this.pop32s();\r\n    this.reg32s[reg_esi] = this.pop32s();\r\n    this.reg32s[reg_ebp] = this.pop32s();\r\n    this.adjust_stack_reg(4);\r\n    this.reg32s[reg_ebx] = this.pop32s();\r\n    this.reg32s[reg_edx] = this.pop32s();\r\n    this.reg32s[reg_ecx] = this.pop32s();\r\n    this.reg32s[reg_eax] = this.pop32s();\r\n}\r\n\r\nCPU.prototype.xchg8 = function(memory_data, modrm_byte)\r\n{\r\n    var mod = modrm_byte >> 1 & 0xC | modrm_byte >> 5 & 1,\r\n        tmp = this.reg8[mod];\r\n\r\n    this.reg8[mod] = memory_data;\r\n\r\n    return tmp;\r\n}\r\n\r\nCPU.prototype.xchg16 = function(memory_data, modrm_byte)\r\n{\r\n    var mod = modrm_byte >> 2 & 14,\r\n        tmp = this.reg16[mod];\r\n\r\n    this.reg16[mod] = memory_data;\r\n\r\n    return tmp;\r\n}\r\n\r\nCPU.prototype.xchg16r = function(operand)\r\n{\r\n    var temp = this.reg16[reg_ax];\r\n    this.reg16[reg_ax] = this.reg16[operand];\r\n    this.reg16[operand] = temp;\r\n}\r\n\r\nCPU.prototype.xchg32 = function(memory_data, modrm_byte)\r\n{\r\n    var mod = modrm_byte >> 3 & 7,\r\n        tmp = this.reg32s[mod];\r\n\r\n    this.reg32s[mod] = memory_data;\r\n\r\n    return tmp;\r\n}\r\n\r\nCPU.prototype.xchg32r = function(operand)\r\n{\r\n    var temp = this.reg32s[reg_eax];\r\n    this.reg32s[reg_eax] = this.reg32s[operand];\r\n    this.reg32s[operand] = temp;\r\n}\r\n\r\nCPU.prototype.lss16 = function(seg)\r\n{\r\n    if(this.modrm_byte >= 0xC0)\r\n    {\r\n        // 0xc4c4 #ud (EMULATOR_BOP) is used by reactos and windows to exit vm86 mode\r\n        this.trigger_ud();\r\n    }\r\n\r\n    var addr = this.modrm_resolve(this.modrm_byte);\r\n\r\n    var new_reg = this.safe_read16(addr),\r\n        new_seg = this.safe_read16(addr + 2 | 0);\r\n\r\n    this.switch_seg(seg, new_seg);\r\n\r\n    this.reg16[this.modrm_byte >> 2 & 14] = new_reg;\r\n}\r\n\r\nCPU.prototype.lss32 = function(seg)\r\n{\r\n    if(this.modrm_byte >= 0xC0)\r\n    {\r\n        this.trigger_ud();\r\n    }\r\n\r\n    var addr = this.modrm_resolve(this.modrm_byte);\r\n\r\n    var new_reg = this.safe_read32s(addr),\r\n        new_seg = this.safe_read16(addr + 4 | 0);\r\n\r\n    this.switch_seg(seg, new_seg);\r\n\r\n    this.reg32s[this.modrm_byte >> 3 & 7] = new_reg;\r\n}\r\n\r\nCPU.prototype.enter16 = function(size, nesting_level)\r\n{\r\n    nesting_level &= 31;\r\n\r\n    if(nesting_level) dbg_log(\"enter16 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\r\n    this.push16(this.reg16[reg_bp]);\r\n    var frame_temp = this.reg16[reg_sp];\r\n\r\n    if(nesting_level > 0)\r\n    {\r\n        var tmp_ebp = this.reg16[reg_ebp];\r\n        for(var i = 1; i < nesting_level; i++)\r\n        {\r\n            tmp_ebp -= 2;\r\n            this.push16(this.safe_read16(this.get_seg(reg_ss) + tmp_ebp | 0));\r\n        }\r\n        this.push16(frame_temp);\r\n    }\r\n    this.reg16[reg_bp] = frame_temp;\r\n    this.adjust_stack_reg(-size);\r\n};\r\n\r\nCPU.prototype.enter32 = function(size, nesting_level)\r\n{\r\n    nesting_level &= 31;\r\n\r\n    if(nesting_level) dbg_log(\"enter32 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\r\n    this.push32(this.reg32s[reg_ebp]);\r\n    var frame_temp = this.reg32s[reg_esp];\r\n\r\n    if(nesting_level > 0)\r\n    {\r\n        var tmp_ebp = this.reg32s[reg_ebp];\r\n        for(var i = 1; i < nesting_level; i++)\r\n        {\r\n            tmp_ebp -= 4;\r\n            this.push32(this.safe_read32s(this.get_seg(reg_ss) + tmp_ebp | 0));\r\n        }\r\n        this.push32(frame_temp);\r\n    }\r\n    this.reg32s[reg_ebp] = frame_temp;\r\n    this.adjust_stack_reg(-size);\r\n};\r\n\r\nCPU.prototype.bswap = function(reg)\r\n{\r\n    var temp = this.reg32s[reg];\r\n\r\n    this.reg32s[reg] = temp >>> 24 | temp << 24 | (temp >> 8 & 0xFF00) | (temp << 8 & 0xFF0000);\r\n}\r\n\r\nCPU.prototype.fxsave = function(addr)\r\n{\r\n    this.writable_or_pagefault(addr, 512);\r\n\r\n    this.safe_write16(addr + 0 | 0, this.fpu.control_word);\r\n    this.safe_write16(addr + 2 | 0, this.fpu.load_status_word());\r\n    this.safe_write8( addr + 4 | 0, ~this.fpu.stack_empty & 0xFF);\r\n    this.safe_write16(addr + 6 | 0, this.fpu.fpu_opcode);\r\n    this.safe_write32(addr + 8 | 0, this.fpu.fpu_ip);\r\n    this.safe_write16(addr + 12 | 0, this.fpu.fpu_ip_selector);\r\n    this.safe_write32(addr + 16 | 0, this.fpu.fpu_dp);\r\n    this.safe_write16(addr + 20 | 0, this.fpu.fpu_dp_selector);\r\n\r\n    this.safe_write32(addr + 24 | 0, this.mxcsr);\r\n    this.safe_write32(addr + 28 | 0, MXCSR_MASK);\r\n\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.fpu.store_m80(addr + 32 + (i << 4) | 0, this.fpu.st[this.fpu.stack_ptr + i & 7]);\r\n    }\r\n\r\n    // If the OSFXSR bit in control register CR4 is not set, the FXSAVE\r\n    // instruction may not save these registers. This behavior is\r\n    // implementation dependent.\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.safe_write32(addr + 160 + (i << 4) +  0 | 0, this.reg_xmm32s[i << 2 | 0]);\r\n        this.safe_write32(addr + 160 + (i << 4) +  4 | 0, this.reg_xmm32s[i << 2 | 1]);\r\n        this.safe_write32(addr + 160 + (i << 4) +  8 | 0, this.reg_xmm32s[i << 2 | 2]);\r\n        this.safe_write32(addr + 160 + (i << 4) + 12 | 0, this.reg_xmm32s[i << 2 | 3]);\r\n    }\r\n};\r\n\r\nCPU.prototype.fxrstor = function(addr)\r\n{\r\n    this.translate_address_read(addr | 0);\r\n    this.translate_address_read(addr + 511 | 0);\r\n\r\n    var new_mxcsr = this.safe_read32s(addr + 24 | 0);\r\n\r\n    if(new_mxcsr & ~MXCSR_MASK)\r\n    {\r\n        dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\r\n        this.trigger_gp(0);\r\n    }\r\n\r\n    this.fpu.control_word = this.safe_read16(addr + 0 | 0);\r\n    this.fpu.set_status_word(this.safe_read16(addr + 2 | 0));\r\n    this.fpu.stack_empty = ~this.safe_read8(addr + 4 | 0) & 0xFF;\r\n    this.fpu.fpu_opcode = this.safe_read16(addr + 6 | 0);\r\n    this.fpu.fpu_ip = this.safe_read32s(addr + 8 | 0);\r\n    this.fpu.fpu_ip = this.safe_read16(addr + 12 | 0);\r\n    this.fpu.fpu_dp = this.safe_read32s(addr + 16 | 0);\r\n    this.fpu.fpu_dp_selector = this.safe_read16(addr + 20 | 0);\r\n\r\n    this.mxcsr = new_mxcsr;\r\n\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.fpu.st[this.fpu.stack_ptr + i & 7] = this.fpu.load_m80(addr + 32 + (i << 4) | 0);\r\n    }\r\n\r\n    for(let i = 0; i < 8; i++)\r\n    {\r\n        this.reg_xmm32s[i << 2 | 0] = this.safe_read32s(addr + 160 + (i << 4) +  0 | 0);\r\n        this.reg_xmm32s[i << 2 | 1] = this.safe_read32s(addr + 160 + (i << 4) +  4 | 0);\r\n        this.reg_xmm32s[i << 2 | 2] = this.safe_read32s(addr + 160 + (i << 4) +  8 | 0);\r\n        this.reg_xmm32s[i << 2 | 3] = this.safe_read32s(addr + 160 + (i << 4) + 12 | 0);\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\nvar t = [];\r\nvar t16 = [];\r\nvar t32 = [];\r\n\r\nt[0x00] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_g32s())); };\r\nt[0x02] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.add8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.add16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.add32(cpu.read_g32s(), cpu.read_e32s())); };\r\nt[0x04] = cpu => { cpu.reg8[reg_al] = cpu.add8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x05] = cpu => { cpu.reg16[reg_ax] = cpu.add16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x05] = cpu => { cpu.reg32s[reg_eax] = cpu.add32(cpu.reg32s[reg_eax], cpu.read_op32s()); };\r\n\r\nt16[0x06] = cpu => { cpu.push16(cpu.sreg[reg_es]); };\r\nt32[0x06] = cpu => { cpu.push32(cpu.sreg[reg_es]); };\r\nt16[0x07] = cpu => {\r\n    cpu.switch_seg(reg_es, cpu.safe_read16(cpu.get_stack_pointer(0)));\r\n    cpu.adjust_stack_reg(2);\r\n};\r\nt32[0x07] = cpu => {\r\n    cpu.switch_seg(reg_es, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\r\n    cpu.adjust_stack_reg(4);\r\n};\r\n\r\nt[0x08] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.or8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.or16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.or32(cpu.read_write_e32(), cpu.read_g32s())); };\r\nt[0x0a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.or8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.or16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.or32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x0c] = cpu => { cpu.reg8[reg_al] = cpu.or8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x0d] = cpu => { cpu.reg16[reg_ax] = cpu.or16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x0d] = cpu => { cpu.reg32s[reg_eax] = cpu.or32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\n\r\nt16[0x0E] = cpu => { cpu.push16(cpu.sreg[reg_cs]); };\r\nt32[0x0E] = cpu => { cpu.push32(cpu.sreg[reg_cs]); };\r\nt16[0x0F] = cpu => {\r\n    cpu.table0F_16[cpu.read_op0F()](cpu);\r\n};\r\nt32[0x0F] = cpu => {\r\n    cpu.table0F_32[cpu.read_op0F()](cpu);\r\n};\r\n\r\nt[0x10] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_g32s())); }\r\nt[0x12] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.adc8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.adc16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.adc32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x14] = cpu => { cpu.reg8[reg_al] = cpu.adc8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x15] = cpu => { cpu.reg16[reg_ax] = cpu.adc16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x15] = cpu => { cpu.reg32s[reg_eax] = cpu.adc32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\nt16[0x16] = cpu => { cpu.push16(cpu.sreg[reg_ss]); };\r\nt32[0x16] = cpu => { cpu.push32(cpu.sreg[reg_ss]); };\r\nt16[0x17] = cpu => {\r\n    cpu.switch_seg(reg_ss, cpu.safe_read16(cpu.get_stack_pointer(0)));\r\n    cpu.adjust_stack_reg(2);\r\n    cpu.clear_prefixes();\r\n    cpu.cycle_internal();\r\n};\r\nt32[0x17] = cpu => {\r\n    cpu.switch_seg(reg_ss, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\r\n    cpu.adjust_stack_reg(4);\r\n    cpu.clear_prefixes();\r\n    cpu.cycle_internal();\r\n};\r\n\r\nt[0x18] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_g32s())); }\r\nt[0x1a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sbb8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sbb16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sbb32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x1c] = cpu => { cpu.reg8[reg_al] = cpu.sbb8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x1d] = cpu => { cpu.reg16[reg_ax] = cpu.sbb16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x1d] = cpu => { cpu.reg32s[reg_eax] = cpu.sbb32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\n\r\nt16[0x1E] = cpu => { cpu.push16(cpu.sreg[reg_ds]); };\r\nt32[0x1E] = cpu => { cpu.push32(cpu.sreg[reg_ds]); };\r\nt16[0x1F] = cpu => {\r\n    cpu.switch_seg(reg_ds, cpu.safe_read16(cpu.get_stack_pointer(0)));\r\n    cpu.adjust_stack_reg(2);\r\n};\r\nt32[0x1F] = cpu => {\r\n    cpu.switch_seg(reg_ds, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\r\n    cpu.adjust_stack_reg(4);\r\n};\r\n\r\nt[0x20] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_g32s())); }\r\nt[0x22] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.and8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.and16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.and32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x24] = cpu => { cpu.reg8[reg_al] = cpu.and8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x25] = cpu => { cpu.reg16[reg_ax] = cpu.and16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x25] = cpu => { cpu.reg32s[reg_eax] = cpu.and32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\n\r\nt[0x26] = cpu => { cpu.segment_prefix_op(reg_es); };\r\nt[0x27] = cpu => { cpu.bcd_daa(); };\r\n\r\nt[0x28] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_g32s())); }\r\nt[0x2a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sub8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sub16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sub32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x2c] = cpu => { cpu.reg8[reg_al] = cpu.sub8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x2d] = cpu => { cpu.reg16[reg_ax] = cpu.sub16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x2d] = cpu => { cpu.reg32s[reg_eax] = cpu.sub32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\nt[0x2E] = cpu => { cpu.segment_prefix_op(reg_cs); };\r\nt[0x2F] = cpu => { cpu.bcd_das(); };\r\n\r\nt[0x30] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_g8())); };\r\nt16[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_g16())); };\r\nt32[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_g32s())); }\r\nt[0x32] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.xor8(cpu.read_g8(), cpu.read_e8())); };\r\nt16[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.xor16(cpu.read_g16(), cpu.read_e16())); };\r\nt32[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.xor32(cpu.read_g32s(), cpu.read_e32s())); }\r\nt[0x34] = cpu => { cpu.reg8[reg_al] = cpu.xor8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x35] = cpu => { cpu.reg16[reg_ax] = cpu.xor16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x35] = cpu => { cpu.reg32s[reg_eax] = cpu.xor32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\nt[0x36] = cpu => { cpu.segment_prefix_op(reg_ss); };\r\nt[0x37] = cpu => { cpu.bcd_aaa(); };\r\n\r\nt[0x38] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_e8(), cpu.read_g8()); };\r\nt16[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_e16(), cpu.read_g16()); };\r\nt32[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_e32s(), cpu.read_g32s()); }\r\nt[0x3A] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_g8(), cpu.read_e8()); };\r\nt16[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_g16(), cpu.read_e16()); };\r\nt32[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_g32s(), cpu.read_e32s()); }\r\nt[0x3C] = cpu => { cpu.cmp8(cpu.reg8[reg_al], cpu.read_op8()); };\r\nt16[0x3D] = cpu => { cpu.cmp16(cpu.reg16[reg_ax], cpu.read_op16()); };\r\nt32[0x3D] = cpu => { cpu.cmp32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\r\n\r\nt[0x3E] = cpu => { cpu.segment_prefix_op(reg_ds); };\r\nt[0x3F] = cpu => { cpu.bcd_aas(); };\r\n\r\n\r\nt16[0x40] = cpu => { cpu.reg16[reg_ax] = cpu.inc16(cpu.reg16[reg_ax]); };\r\nt32[0x40] = cpu => { cpu.reg32s[reg_eax] = cpu.inc32(cpu.reg32s[reg_eax]); };\r\nt16[0x41] = cpu => { cpu.reg16[reg_cx] = cpu.inc16(cpu.reg16[reg_cx]); };\r\nt32[0x41] = cpu => { cpu.reg32s[reg_ecx] = cpu.inc32(cpu.reg32s[reg_ecx]); };\r\nt16[0x42] = cpu => { cpu.reg16[reg_dx] = cpu.inc16(cpu.reg16[reg_dx]); };\r\nt32[0x42] = cpu => { cpu.reg32s[reg_edx] = cpu.inc32(cpu.reg32s[reg_edx]); };\r\nt16[0x43] = cpu => { cpu.reg16[reg_bx] = cpu.inc16(cpu.reg16[reg_bx]); };\r\nt32[0x43] = cpu => { cpu.reg32s[reg_ebx] = cpu.inc32(cpu.reg32s[reg_ebx]); };\r\nt16[0x44] = cpu => { cpu.reg16[reg_sp] = cpu.inc16(cpu.reg16[reg_sp]); };\r\nt32[0x44] = cpu => { cpu.reg32s[reg_esp] = cpu.inc32(cpu.reg32s[reg_esp]); };\r\nt16[0x45] = cpu => { cpu.reg16[reg_bp] = cpu.inc16(cpu.reg16[reg_bp]); };\r\nt32[0x45] = cpu => { cpu.reg32s[reg_ebp] = cpu.inc32(cpu.reg32s[reg_ebp]); };\r\nt16[0x46] = cpu => { cpu.reg16[reg_si] = cpu.inc16(cpu.reg16[reg_si]); };\r\nt32[0x46] = cpu => { cpu.reg32s[reg_esi] = cpu.inc32(cpu.reg32s[reg_esi]); };\r\nt16[0x47] = cpu => { cpu.reg16[reg_di] = cpu.inc16(cpu.reg16[reg_di]); };\r\nt32[0x47] = cpu => { cpu.reg32s[reg_edi] = cpu.inc32(cpu.reg32s[reg_edi]); };\r\n\r\n\r\nt16[0x48] = cpu => { cpu.reg16[reg_ax] = cpu.dec16(cpu.reg16[reg_ax]); };\r\nt32[0x48] = cpu => { cpu.reg32s[reg_eax] = cpu.dec32(cpu.reg32s[reg_eax]); };\r\nt16[0x49] = cpu => { cpu.reg16[reg_cx] = cpu.dec16(cpu.reg16[reg_cx]); };\r\nt32[0x49] = cpu => { cpu.reg32s[reg_ecx] = cpu.dec32(cpu.reg32s[reg_ecx]); };\r\nt16[0x4A] = cpu => { cpu.reg16[reg_dx] = cpu.dec16(cpu.reg16[reg_dx]); };\r\nt32[0x4A] = cpu => { cpu.reg32s[reg_edx] = cpu.dec32(cpu.reg32s[reg_edx]); };\r\nt16[0x4B] = cpu => { cpu.reg16[reg_bx] = cpu.dec16(cpu.reg16[reg_bx]); };\r\nt32[0x4B] = cpu => { cpu.reg32s[reg_ebx] = cpu.dec32(cpu.reg32s[reg_ebx]); };\r\nt16[0x4C] = cpu => { cpu.reg16[reg_sp] = cpu.dec16(cpu.reg16[reg_sp]); };\r\nt32[0x4C] = cpu => { cpu.reg32s[reg_esp] = cpu.dec32(cpu.reg32s[reg_esp]); };\r\nt16[0x4D] = cpu => { cpu.reg16[reg_bp] = cpu.dec16(cpu.reg16[reg_bp]); };\r\nt32[0x4D] = cpu => { cpu.reg32s[reg_ebp] = cpu.dec32(cpu.reg32s[reg_ebp]); };\r\nt16[0x4E] = cpu => { cpu.reg16[reg_si] = cpu.dec16(cpu.reg16[reg_si]); };\r\nt32[0x4E] = cpu => { cpu.reg32s[reg_esi] = cpu.dec32(cpu.reg32s[reg_esi]); };\r\nt16[0x4F] = cpu => { cpu.reg16[reg_di] = cpu.dec16(cpu.reg16[reg_di]); };\r\nt32[0x4F] = cpu => { cpu.reg32s[reg_edi] = cpu.dec32(cpu.reg32s[reg_edi]); };\r\n\r\n\r\nt16[0x50] = cpu => { cpu.push16(cpu.reg16[reg_ax]); };\r\nt32[0x50] = cpu => { cpu.push32(cpu.reg32s[reg_eax]); }\r\nt16[0x51] = cpu => { cpu.push16(cpu.reg16[reg_cx]); };\r\nt32[0x51] = cpu => { cpu.push32(cpu.reg32s[reg_ecx]); }\r\nt16[0x52] = cpu => { cpu.push16(cpu.reg16[reg_dx]); };\r\nt32[0x52] = cpu => { cpu.push32(cpu.reg32s[reg_edx]); }\r\nt16[0x53] = cpu => { cpu.push16(cpu.reg16[reg_bx]); };\r\nt32[0x53] = cpu => { cpu.push32(cpu.reg32s[reg_ebx]); }\r\nt16[0x54] = cpu => { cpu.push16(cpu.reg16[reg_sp]); };\r\nt32[0x54] = cpu => { cpu.push32(cpu.reg32s[reg_esp]); }\r\nt16[0x55] = cpu => { cpu.push16(cpu.reg16[reg_bp]); };\r\nt32[0x55] = cpu => { cpu.push32(cpu.reg32s[reg_ebp]); }\r\nt16[0x56] = cpu => { cpu.push16(cpu.reg16[reg_si]); };\r\nt32[0x56] = cpu => { cpu.push32(cpu.reg32s[reg_esi]); }\r\nt16[0x57] = cpu => { cpu.push16(cpu.reg16[reg_di]); };\r\nt32[0x57] = cpu => { cpu.push32(cpu.reg32s[reg_edi]); }\r\n\r\nt16[0x58] = cpu => { cpu.reg16[reg_ax] = cpu.pop16(); };\r\nt32[0x58] = cpu => { cpu.reg32s[reg_eax] = cpu.pop32s(); }\r\nt16[0x59] = cpu => { cpu.reg16[reg_cx] = cpu.pop16(); };\r\nt32[0x59] = cpu => { cpu.reg32s[reg_ecx] = cpu.pop32s(); }\r\nt16[0x5A] = cpu => { cpu.reg16[reg_dx] = cpu.pop16(); };\r\nt32[0x5A] = cpu => { cpu.reg32s[reg_edx] = cpu.pop32s(); }\r\nt16[0x5B] = cpu => { cpu.reg16[reg_bx] = cpu.pop16(); };\r\nt32[0x5B] = cpu => { cpu.reg32s[reg_ebx] = cpu.pop32s(); }\r\nt16[0x5C] = cpu => { cpu.reg16[reg_sp] = cpu.pop16(); };\r\nt32[0x5C] = cpu => { cpu.reg32s[reg_esp] = cpu.pop32s(); }\r\nt16[0x5D] = cpu => { cpu.reg16[reg_bp] = cpu.pop16(); };\r\nt32[0x5D] = cpu => { cpu.reg32s[reg_ebp] = cpu.pop32s(); }\r\nt16[0x5E] = cpu => { cpu.reg16[reg_si] = cpu.pop16(); };\r\nt32[0x5E] = cpu => { cpu.reg32s[reg_esi] = cpu.pop32s(); }\r\nt16[0x5F] = cpu => { cpu.reg16[reg_di] = cpu.pop16(); };\r\nt32[0x5F] = cpu => { cpu.reg32s[reg_edi] = cpu.pop32s(); }\r\n\r\n\r\nt16[0x60] = cpu => { cpu.pusha16(); };\r\nt32[0x60] = cpu => { cpu.pusha32(); };\r\nt16[0x61] = cpu => { cpu.popa16(); };\r\nt32[0x61] = cpu => { cpu.popa32(); };\r\n\r\nt[0x62] = cpu => {\r\n    // bound\r\n    dbg_log(\"Unimplemented BOUND instruction\", LOG_CPU);\r\n    dbg_assert(false);\r\n};\r\nt[0x63] = cpu => { cpu.read_modrm_byte();\r\n    // arpl\r\n    //dbg_log(\"arpl\", LOG_CPU);\r\n    if(cpu.protected_mode && !cpu.vm86_mode())\r\n    {\r\n        cpu.write_e16(cpu.arpl(cpu.read_write_e16(), cpu.modrm_byte >> 2 & 14));\r\n    }\r\n    else\r\n    {\r\n        dbg_log(\"arpl #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n};\r\n\r\nt[0x64] = cpu => { cpu.segment_prefix_op(reg_fs); };\r\nt[0x65] = cpu => { cpu.segment_prefix_op(reg_gs); };\r\n\r\nt[0x66] = cpu => {\r\n    // Operand-size override prefix\r\n    cpu.prefixes |= PREFIX_MASK_OPSIZE;\r\n    cpu.run_prefix_instruction();\r\n    cpu.prefixes = 0;\r\n};\r\n\r\nt[0x67] = cpu => {\r\n    // Address-size override prefix\r\n    dbg_assert(cpu.is_asize_32() === cpu.is_32);\r\n\r\n    cpu.prefixes |= PREFIX_MASK_ADDRSIZE;\r\n    cpu.run_prefix_instruction();\r\n    cpu.prefixes = 0;\r\n};\r\n\r\nt16[0x68] = cpu => { cpu.push16(cpu.read_op16()); };\r\nt32[0x68] = cpu => { cpu.push32(cpu.read_op32s()); };\r\n\r\nt16[0x69] = cpu => { cpu.read_modrm_byte();\r\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op16() << 16 >> 16));\r\n};\r\nt32[0x69] = cpu => { cpu.read_modrm_byte();\r\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op32s()));\r\n};\r\n\r\nt16[0x6A] = cpu => { cpu.push16(cpu.read_op8s()); };\r\nt32[0x6A] = cpu => { cpu.push32(cpu.read_op8s()); };\r\n\r\nt16[0x6B] = cpu => { cpu.read_modrm_byte();\r\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op8s()));\r\n};\r\nt32[0x6B] = cpu => { cpu.read_modrm_byte();\r\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op8s()));\r\n};\r\n\r\nt[0x6C] = cpu => { insb(cpu); };\r\nt16[0x6D] = cpu => { insw(cpu); };\r\nt32[0x6D] = cpu => { insd(cpu); };\r\nt[0x6E] = cpu => { outsb(cpu); };\r\nt16[0x6F] = cpu => { outsw(cpu); };\r\nt32[0x6F] = cpu => { outsd(cpu); };\r\n\r\nt[0x70] = cpu => { cpu.jmpcc8( cpu.test_o()); };\r\nt[0x71] = cpu => { cpu.jmpcc8(!cpu.test_o()); };\r\nt[0x72] = cpu => { cpu.jmpcc8( cpu.test_b()); };\r\nt[0x73] = cpu => { cpu.jmpcc8(!cpu.test_b()); };\r\nt[0x74] = cpu => { cpu.jmpcc8( cpu.test_z()); };\r\nt[0x75] = cpu => { cpu.jmpcc8(!cpu.test_z()); };\r\nt[0x76] = cpu => { cpu.jmpcc8( cpu.test_be()); };\r\nt[0x77] = cpu => { cpu.jmpcc8(!cpu.test_be()); };\r\nt[0x78] = cpu => { cpu.jmpcc8( cpu.test_s()); };\r\nt[0x79] = cpu => { cpu.jmpcc8(!cpu.test_s()); };\r\nt[0x7A] = cpu => { cpu.jmpcc8( cpu.test_p()); };\r\nt[0x7B] = cpu => { cpu.jmpcc8(!cpu.test_p()); };\r\nt[0x7C] = cpu => { cpu.jmpcc8( cpu.test_l()); };\r\nt[0x7D] = cpu => { cpu.jmpcc8(!cpu.test_l()); };\r\nt[0x7E] = cpu => { cpu.jmpcc8( cpu.test_le()); };\r\nt[0x7F] = cpu => { cpu.jmpcc8(!cpu.test_le()); };\r\n\r\nt[0x80] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 1: cpu.write_e8(cpu. or8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 2: cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 3: cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 4: cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 5: cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 6: cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_op8())); break;\r\n        case 7: cpu.cmp8(cpu.read_e8(), cpu.read_op8()); break;\r\n    }\r\n};\r\nt16[0x81] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op16())); break;\r\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op16()); break;\r\n    }\r\n};\r\nt32[0x81] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op32s())); break;\r\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op32s()); break;\r\n    }\r\n};\r\nt[0x82] = t[0x80]; // alias\r\nt16[0x83] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op8s())); break;\r\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op8s()); break;\r\n    }\r\n};\r\nt32[0x83] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op8s())); break;\r\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op8s()); break;\r\n    }\r\n};\r\n\r\nt[0x84] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e8(); cpu.test8(data, cpu.read_g8()); };\r\nt16[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e16(); cpu.test16(data, cpu.read_g16()); };\r\nt32[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e32s(); cpu.test32(data, cpu.read_g32s()); }\r\n\r\n\r\nt[0x86] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_write_e8(); cpu.write_e8(cpu.xchg8(data, cpu.modrm_byte)); };\r\nt16[0x87] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.xchg16(data, cpu.modrm_byte));\r\n};\r\nt32[0x87] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.xchg32(data, cpu.modrm_byte));\r\n};\r\n\r\nt[0x88] = cpu => { cpu.read_modrm_byte(); cpu.set_e8(cpu.read_g8()); };\r\nt16[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e16(cpu.read_g16()); };\r\nt32[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e32(cpu.read_g32s()); }\r\n\r\nt[0x8A] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e8();\r\n    cpu.write_g8(data);\r\n};\r\nt16[0x8B] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(data);\r\n};\r\nt32[0x8B] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e32s();\r\n    cpu.write_g32(data);\r\n};\r\n\r\nt16[0x8C] = cpu => { cpu.read_modrm_byte();\r\n    cpu.set_e16(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\r\n};\r\nt32[0x8C] = cpu => { cpu.read_modrm_byte();\r\n    cpu.set_e32(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\r\n};\r\n\r\nt16[0x8D] = cpu => { cpu.read_modrm_byte();\r\n    // lea\r\n    if(cpu.modrm_byte >= 0xC0)\r\n    {\r\n        dbg_log(\"lea #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var mod = cpu.modrm_byte >> 3 & 7;\r\n\r\n    // override prefix, so modrm_resolve does not return the segment part\r\n    cpu.prefixes |= SEG_PREFIX_ZERO;\r\n    cpu.reg16[mod << 1] = cpu.modrm_resolve(cpu.modrm_byte);\r\n    cpu.prefixes = 0;\r\n};\r\nt32[0x8D] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte >= 0xC0)\r\n    {\r\n        dbg_log(\"lea #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var mod = cpu.modrm_byte >> 3 & 7;\r\n\r\n    cpu.prefixes |= SEG_PREFIX_ZERO;\r\n    cpu.reg32s[mod] = cpu.modrm_resolve(cpu.modrm_byte);\r\n    cpu.prefixes = 0;\r\n};\r\n\r\nt[0x8E] = cpu => { cpu.read_modrm_byte();\r\n    var mod = cpu.modrm_byte >> 3 & 7;\r\n    var data = cpu.read_e16();\r\n    cpu.switch_seg(mod, data);\r\n\r\n    if(mod === reg_ss)\r\n    {\r\n        // run next instruction, so no interrupts are handled\r\n        cpu.clear_prefixes();\r\n        cpu.cycle_internal();\r\n    }\r\n};\r\n\r\nt16[0x8F] = cpu => { cpu.read_modrm_byte();\r\n    // pop\r\n    var sp = cpu.safe_read16(cpu.get_stack_pointer(0));\r\n\r\n    cpu.adjust_stack_reg(2);\r\n\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.adjust_stack_reg(-2);\r\n        cpu.safe_write16(addr, sp);\r\n        cpu.adjust_stack_reg(2);\r\n    } else {\r\n        cpu.write_reg_e16(sp);\r\n    }\r\n};\r\nt32[0x8F] = cpu => { cpu.read_modrm_byte();\r\n    var sp = cpu.safe_read32s(cpu.get_stack_pointer(0));\r\n\r\n    // change esp first, then resolve modrm address\r\n    cpu.adjust_stack_reg(4);\r\n\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n\r\n        // Before attempting a write that might cause a page fault,\r\n        // we must set esp to the old value. Fuck Intel.\r\n        cpu.adjust_stack_reg(-4);\r\n        cpu.safe_write32(addr, sp);\r\n        cpu.adjust_stack_reg(4);\r\n    } else {\r\n        cpu.write_reg_e32(sp);\r\n    }\r\n};\r\n\r\nt[0x90] = cpu => { };\r\nt16[0x91] = cpu => { cpu.xchg16r(reg_cx) };\r\nt32[0x91] = cpu => { cpu.xchg32r(reg_ecx) };\r\nt16[0x92] = cpu => { cpu.xchg16r(reg_dx) };\r\nt32[0x92] = cpu => { cpu.xchg32r(reg_edx) };\r\nt16[0x93] = cpu => { cpu.xchg16r(reg_bx) };\r\nt32[0x93] = cpu => { cpu.xchg32r(reg_ebx) };\r\nt16[0x94] = cpu => { cpu.xchg16r(reg_sp) };\r\nt32[0x94] = cpu => { cpu.xchg32r(reg_esp) };\r\nt16[0x95] = cpu => { cpu.xchg16r(reg_bp) };\r\nt32[0x95] = cpu => { cpu.xchg32r(reg_ebp) };\r\nt16[0x96] = cpu => { cpu.xchg16r(reg_si) };\r\nt32[0x96] = cpu => { cpu.xchg32r(reg_esi) };\r\nt16[0x97] = cpu => { cpu.xchg16r(reg_di) };\r\nt32[0x97] = cpu => { cpu.xchg32r(reg_edi) };\r\n\r\nt16[0x98] = cpu => { /* cbw */ cpu.reg16[reg_ax] = cpu.reg8s[reg_al]; };\r\nt32[0x98] = cpu => { /* cwde */ cpu.reg32s[reg_eax] = cpu.reg16s[reg_ax]; };\r\nt16[0x99] = cpu => { /* cwd */ cpu.reg16[reg_dx] = cpu.reg16s[reg_ax] >> 15; };\r\nt32[0x99] = cpu => { /* cdq */ cpu.reg32s[reg_edx] = cpu.reg32s[reg_eax] >> 31; };\r\n\r\nt16[0x9A] = cpu => {\r\n    // callf\r\n    var new_ip = cpu.read_op16();\r\n    var new_cs = cpu.read_disp16();\r\n\r\n    cpu.far_jump(new_ip, new_cs, true);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt32[0x9A] = cpu => {\r\n    var new_ip = cpu.read_op32s();\r\n    var new_cs = cpu.read_disp16();\r\n\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        if(new_ip & 0xFFFF0000)\r\n        {\r\n            throw cpu.debug.unimpl(\"#GP handler\");\r\n        }\r\n    }\r\n\r\n    cpu.far_jump(new_ip, new_cs, true);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\n\r\nt[0x9B] = cpu => {\r\n    // fwait: check for pending fpu exceptions\r\n    if((cpu.cr[0] & (CR0_MP | CR0_TS)) === (CR0_MP | CR0_TS))\r\n    {\r\n        // task switched and MP bit is set\r\n        cpu.trigger_nm();\r\n    }\r\n    else\r\n    {\r\n        if(cpu.fpu)\r\n        {\r\n            cpu.fpu.fwait();\r\n        }\r\n        else\r\n        {\r\n            // EM bit isn't checked\r\n            // If there's no FPU, do nothing\r\n        }\r\n    }\r\n};\r\nt16[0x9C] = cpu => {\r\n    // pushf\r\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\r\n    {\r\n        dbg_assert(cpu.protected_mode);\r\n        dbg_log(\"pushf #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n    else\r\n    {\r\n        cpu.push16(cpu.get_eflags());\r\n    }\r\n};\r\nt32[0x9C] = cpu => {\r\n    // pushf\r\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\r\n    {\r\n        // trap to virtual 8086 monitor\r\n        dbg_assert(cpu.protected_mode);\r\n        dbg_log(\"pushf #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n    else\r\n    {\r\n        // vm and rf flag are cleared in image stored on the stack\r\n        cpu.push32(cpu.get_eflags() & 0x00FCFFFF);\r\n    }\r\n};\r\nt16[0x9D] = cpu => {\r\n    // popf\r\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\r\n    {\r\n        dbg_log(\"popf #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    cpu.update_eflags((cpu.flags & ~0xFFFF) | cpu.pop16());\r\n\r\n    if(cpu.flags & flag_trap)\r\n    {\r\n        // XXX: Problems with fdgame\r\n        //cpu.clear_prefixes();\r\n        //cpu.cycle_internal();\r\n        cpu.flags &= ~flag_trap;\r\n        //cpu.instruction_pointer = cpu.previous_ip;\r\n        //cpu.raise_exception(1);\r\n    }\r\n    else\r\n    {\r\n        cpu.handle_irqs();\r\n    }\r\n};\r\nt32[0x9D] = cpu => {\r\n    // popf\r\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\r\n    {\r\n        dbg_log(\"popf #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    cpu.update_eflags(cpu.pop32s());\r\n    cpu.handle_irqs();\r\n};\r\nt[0x9E] = cpu => {\r\n    // sahf\r\n    cpu.flags = (cpu.flags & ~0xFF) | cpu.reg8[reg_ah];\r\n    cpu.flags = (cpu.flags & flags_mask) | flags_default;\r\n    cpu.flags_changed = 0;\r\n};\r\nt[0x9F] = cpu => {\r\n    // lahf\r\n    cpu.reg8[reg_ah] = cpu.get_eflags();\r\n};\r\n\r\nt[0xA0] = cpu => {\r\n    // mov\r\n    var data = cpu.safe_read8(cpu.read_moffs());\r\n    cpu.reg8[reg_al] = data;\r\n};\r\nt16[0xA1] = cpu => {\r\n    // mov\r\n    var data = cpu.safe_read16(cpu.read_moffs());\r\n    cpu.reg16[reg_ax] = data;\r\n};\r\nt32[0xA1] = cpu => {\r\n    var data = cpu.safe_read32s(cpu.read_moffs());\r\n    cpu.reg32s[reg_eax] = data;\r\n};\r\nt[0xA2] = cpu => {\r\n    // mov\r\n    cpu.safe_write8(cpu.read_moffs(), cpu.reg8[reg_al]);\r\n};\r\nt16[0xA3] = cpu => {\r\n    // mov\r\n    cpu.safe_write16(cpu.read_moffs(), cpu.reg16[reg_ax]);\r\n};\r\nt32[0xA3] = cpu => {\r\n    cpu.safe_write32(cpu.read_moffs(), cpu.reg32s[reg_eax]);\r\n};\r\n\r\nt[0xA4] = cpu => { cpu.movsb(); };\r\nt16[0xA5] = cpu => { cpu.movsw(); };\r\nt32[0xA5] = cpu => { cpu.movsd(); };\r\nt[0xA6] = cpu => { cmpsb(cpu); };\r\nt16[0xA7] = cpu => { cmpsw(cpu); };\r\nt32[0xA7] = cpu => { cmpsd(cpu); };\r\n\r\nt[0xA8] = cpu => {\r\n    cpu.test8(cpu.reg8[reg_al], cpu.read_op8());\r\n};\r\nt16[0xA9] = cpu => {\r\n    cpu.test16(cpu.reg16[reg_ax], cpu.read_op16());\r\n};\r\nt32[0xA9] = cpu => {\r\n    cpu.test32(cpu.reg32s[reg_eax], cpu.read_op32s());\r\n};\r\n\r\nt[0xAA] = cpu => { stosb(cpu); };\r\nt16[0xAB] = cpu => { stosw(cpu); };\r\nt32[0xAB] = cpu => { stosd(cpu); };\r\nt[0xAC] = cpu => { lodsb(cpu); };\r\nt16[0xAD] = cpu => { lodsw(cpu); };\r\nt32[0xAD] = cpu => { lodsd(cpu); };\r\nt[0xAE] = cpu => { scasb(cpu); };\r\nt16[0xAF] = cpu => { scasw(cpu); };\r\nt32[0xAF] = cpu => { scasd(cpu); };\r\n\r\n\r\nt[0xB0] = cpu => { cpu.reg8[reg_al] = cpu.read_op8(); };\r\nt[0xB1] = cpu => { cpu.reg8[reg_cl] = cpu.read_op8(); };\r\nt[0xB2] = cpu => { cpu.reg8[reg_dl] = cpu.read_op8(); };\r\nt[0xB3] = cpu => { cpu.reg8[reg_bl] = cpu.read_op8(); };\r\nt[0xB4] = cpu => { cpu.reg8[reg_ah] = cpu.read_op8(); };\r\nt[0xB5] = cpu => { cpu.reg8[reg_ch] = cpu.read_op8(); };\r\nt[0xB6] = cpu => { cpu.reg8[reg_dh] = cpu.read_op8(); };\r\nt[0xB7] = cpu => { cpu.reg8[reg_bh] = cpu.read_op8(); };\r\n\r\nt16[0xB8] = cpu => { cpu.reg16[reg_ax] = cpu.read_op16(); };\r\nt32[0xB8] = cpu => { cpu.reg32s[reg_eax] = cpu.read_op32s(); };\r\nt16[0xB9] = cpu => { cpu.reg16[reg_cx] = cpu.read_op16(); };\r\nt32[0xB9] = cpu => { cpu.reg32s[reg_ecx] = cpu.read_op32s(); };\r\nt16[0xBA] = cpu => { cpu.reg16[reg_dx] = cpu.read_op16(); };\r\nt32[0xBA] = cpu => { cpu.reg32s[reg_edx] = cpu.read_op32s(); };\r\nt16[0xBB] = cpu => { cpu.reg16[reg_bx] = cpu.read_op16(); };\r\nt32[0xBB] = cpu => { cpu.reg32s[reg_ebx] = cpu.read_op32s(); };\r\nt16[0xBC] = cpu => { cpu.reg16[reg_sp] = cpu.read_op16(); };\r\nt32[0xBC] = cpu => { cpu.reg32s[reg_esp] = cpu.read_op32s(); };\r\nt16[0xBD] = cpu => { cpu.reg16[reg_bp] = cpu.read_op16(); };\r\nt32[0xBD] = cpu => { cpu.reg32s[reg_ebp] = cpu.read_op32s(); };\r\nt16[0xBE] = cpu => { cpu.reg16[reg_si] = cpu.read_op16(); };\r\nt32[0xBE] = cpu => { cpu.reg32s[reg_esi] = cpu.read_op32s(); };\r\nt16[0xBF] = cpu => { cpu.reg16[reg_di] = cpu.read_op16(); };\r\nt32[0xBF] = cpu => { cpu.reg32s[reg_edi] = cpu.read_op32s(); };\r\n\r\n\r\nt[0xC0] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e8();\r\n    var op2 = cpu.read_op8() & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol8(op1, op2); break;\r\n        case 1: result = cpu.ror8(op1, op2); break;\r\n        case 2: result = cpu.rcl8(op1, op2); break;\r\n        case 3: result = cpu.rcr8(op1, op2); break;\r\n        case 4: result = cpu.shl8(op1, op2); break;\r\n        case 5: result = cpu.shr8(op1, op2); break;\r\n        case 6: result = cpu.shl8(op1, op2); break;\r\n        case 7: result = cpu.sar8(op1, op2); break;\r\n    }\r\n    cpu.write_e8(result);\r\n};\r\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e16();\r\n    var op2 = cpu.read_op8() & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol16(op1, op2); break;\r\n        case 1: result = cpu.ror16(op1, op2); break;\r\n        case 2: result = cpu.rcl16(op1, op2); break;\r\n        case 3: result = cpu.rcr16(op1, op2); break;\r\n        case 4: result = cpu.shl16(op1, op2); break;\r\n        case 5: result = cpu.shr16(op1, op2); break;\r\n        case 6: result = cpu.shl16(op1, op2); break;\r\n        case 7: result = cpu.sar16(op1, op2); break;\r\n    }\r\n    cpu.write_e16(result);\r\n};\r\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e32();\r\n    var op2 = cpu.read_op8() & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol32(op1, op2); break;\r\n        case 1: result = cpu.ror32(op1, op2); break;\r\n        case 2: result = cpu.rcl32(op1, op2); break;\r\n        case 3: result = cpu.rcr32(op1, op2); break;\r\n        case 4: result = cpu.shl32(op1, op2); break;\r\n        case 5: result = cpu.shr32(op1, op2); break;\r\n        case 6: result = cpu.shl32(op1, op2); break;\r\n        case 7: result = cpu.sar32(op1, op2); break;\r\n    }\r\n    cpu.write_e32(result);\r\n};\r\n\r\nt16[0xC2] = cpu => {\r\n    // retn\r\n    var imm16 = cpu.read_op16();\r\n\r\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.adjust_stack_reg(imm16);\r\n    cpu.diverged();\r\n};\r\nt32[0xC2] = cpu => {\r\n    // retn\r\n    var imm16 = cpu.read_op16();\r\n    var ip = cpu.pop32s();\r\n\r\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\r\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\r\n    cpu.adjust_stack_reg(imm16);\r\n    cpu.diverged();\r\n};\r\nt16[0xC3] = cpu => {\r\n    // retn\r\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\r\n    cpu.diverged();\r\n};\r\nt32[0xC3] = cpu => {\r\n    // retn\r\n    var ip = cpu.pop32s();\r\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\r\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\r\n    cpu.diverged();\r\n};\r\n\r\nt16[0xC4] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss16(reg_es);\r\n};\r\nt32[0xC4] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss32(reg_es);\r\n};\r\nt16[0xC5] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss16(reg_ds);\r\n};\r\nt32[0xC5] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss32(reg_ds);\r\n};\r\n\r\nt[0xC6] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.safe_write8(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8());\r\n    } else {\r\n        cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_op8();\r\n    }\r\n}\r\nt16[0xC7] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.safe_write16(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op16());\r\n    } else {\r\n        cpu.reg16[cpu.modrm_byte << 1 & 14] = cpu.read_op16();\r\n    }\r\n};\r\nt32[0xC7] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.safe_write32(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op32s());\r\n    } else {\r\n        cpu.reg32s[cpu.modrm_byte & 7] = cpu.read_op32s();\r\n    }\r\n}\r\n\r\nt16[0xC8] = cpu => { cpu.enter16(cpu.read_op16(), cpu.read_disp8()); };\r\nt32[0xC8] = cpu => { cpu.enter32(cpu.read_op16(), cpu.read_disp8()); };\r\nt16[0xC9] = cpu => {\r\n    // leave\r\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\r\n    var new_bp = cpu.safe_read16(cpu.get_seg(reg_ss) + old_vbp | 0);\r\n    cpu.set_stack_reg(old_vbp + 2 | 0);\r\n    cpu.reg16[reg_bp] = new_bp;\r\n};\r\nt32[0xC9] = cpu => {\r\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\r\n    var new_ebp = cpu.safe_read32s(cpu.get_seg(reg_ss) + old_vbp | 0);\r\n    cpu.set_stack_reg(old_vbp + 4 | 0);\r\n    cpu.reg32s[reg_ebp] = new_ebp;\r\n};\r\nt16[0xCA] = cpu => {\r\n    // retf\r\n    var imm16 = cpu.read_op16();\r\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\r\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\r\n\r\n    cpu.far_return(ip, cs, imm16);\r\n    cpu.diverged();\r\n};\r\nt32[0xCA] = cpu => {\r\n    // retf\r\n    var imm16 = cpu.read_op16();\r\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\r\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\r\n\r\n    cpu.far_return(ip, cs, imm16);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt16[0xCB] = cpu => {\r\n    // retf\r\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\r\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\r\n\r\n    cpu.far_return(ip, cs, 0);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt32[0xCB] = cpu => {\r\n    // retf\r\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\r\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\r\n\r\n    cpu.far_return(ip, cs, 0);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\n\r\nt[0xCC] = cpu => {\r\n    // INT3\r\n    // TODO: inhibit iopl checks\r\n    dbg_log(\"INT3\", LOG_CPU);\r\n    cpu.call_interrupt_vector(3, true, false);\r\n    cpu.diverged();\r\n};\r\nt[0xCD] = cpu => {\r\n    // INT\r\n    var imm8 = cpu.read_op8();\r\n    cpu.call_interrupt_vector(imm8, true, false);\r\n    cpu.diverged();\r\n};\r\nt[0xCE] = cpu => {\r\n    // INTO\r\n    dbg_log(\"INTO\", LOG_CPU);\r\n    if(cpu.getof())\r\n    {\r\n        // TODO: inhibit iopl checks\r\n        cpu.call_interrupt_vector(4, true, false);\r\n    }\r\n    cpu.diverged();\r\n};\r\n\r\nt16[0xCF] = cpu => {\r\n    // iret\r\n    cpu.iret16();\r\n    cpu.diverged();\r\n};\r\nt32[0xCF] = cpu => {\r\n    cpu.iret32();\r\n    cpu.diverged();\r\n};\r\n\r\nt[0xD0] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e8();\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol8(op1, 1); break;\r\n        case 1: result = cpu.ror8(op1, 1); break;\r\n        case 2: result = cpu.rcl8(op1, 1); break;\r\n        case 3: result = cpu.rcr8(op1, 1); break;\r\n        case 4: result = cpu.shl8(op1, 1); break;\r\n        case 5: result = cpu.shr8(op1, 1); break;\r\n        case 6: result = cpu.shl8(op1, 1); break;\r\n        case 7: result = cpu.sar8(op1, 1); break;\r\n    }\r\n    cpu.write_e8(result);\r\n};\r\nt16[0xD1] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e16();\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol16(op1, 1); break;\r\n        case 1: result = cpu.ror16(op1, 1); break;\r\n        case 2: result = cpu.rcl16(op1, 1); break;\r\n        case 3: result = cpu.rcr16(op1, 1); break;\r\n        case 4: result = cpu.shl16(op1, 1); break;\r\n        case 5: result = cpu.shr16(op1, 1); break;\r\n        case 6: result = cpu.shl16(op1, 1); break;\r\n        case 7: result = cpu.sar16(op1, 1); break;\r\n    }\r\n    cpu.write_e16(result);\r\n};\r\nt32[0xD1] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e32();\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol32(op1, 1); break;\r\n        case 1: result = cpu.ror32(op1, 1); break;\r\n        case 2: result = cpu.rcl32(op1, 1); break;\r\n        case 3: result = cpu.rcr32(op1, 1); break;\r\n        case 4: result = cpu.shl32(op1, 1); break;\r\n        case 5: result = cpu.shr32(op1, 1); break;\r\n        case 6: result = cpu.shl32(op1, 1); break;\r\n        case 7: result = cpu.sar32(op1, 1); break;\r\n    }\r\n    cpu.write_e32(result);\r\n};\r\n\r\nt[0xD2] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e8();\r\n    var op2 = cpu.reg8[reg_cl] & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol8(op1, op2); break;\r\n        case 1: result = cpu.ror8(op1, op2); break;\r\n        case 2: result = cpu.rcl8(op1, op2); break;\r\n        case 3: result = cpu.rcr8(op1, op2); break;\r\n        case 4: result = cpu.shl8(op1, op2); break;\r\n        case 5: result = cpu.shr8(op1, op2); break;\r\n        case 6: result = cpu.shl8(op1, op2); break;\r\n        case 7: result = cpu.sar8(op1, op2); break;\r\n    }\r\n    cpu.write_e8(result);\r\n};\r\nt16[0xD3] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e16();\r\n    var op2 = cpu.reg8[reg_cl] & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol16(op1, op2); break;\r\n        case 1: result = cpu.ror16(op1, op2); break;\r\n        case 2: result = cpu.rcl16(op1, op2); break;\r\n        case 3: result = cpu.rcr16(op1, op2); break;\r\n        case 4: result = cpu.shl16(op1, op2); break;\r\n        case 5: result = cpu.shr16(op1, op2); break;\r\n        case 6: result = cpu.shl16(op1, op2); break;\r\n        case 7: result = cpu.sar16(op1, op2); break;\r\n    }\r\n    cpu.write_e16(result);\r\n};\r\nt32[0xD3] = cpu => { cpu.read_modrm_byte();\r\n    var op1 = cpu.read_write_e32();\r\n    var op2 = cpu.reg8[reg_cl] & 31;\r\n    var result = 0;\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: result = cpu.rol32(op1, op2); break;\r\n        case 1: result = cpu.ror32(op1, op2); break;\r\n        case 2: result = cpu.rcl32(op1, op2); break;\r\n        case 3: result = cpu.rcr32(op1, op2); break;\r\n        case 4: result = cpu.shl32(op1, op2); break;\r\n        case 5: result = cpu.shr32(op1, op2); break;\r\n        case 6: result = cpu.shl32(op1, op2); break;\r\n        case 7: result = cpu.sar32(op1, op2); break;\r\n    }\r\n    cpu.write_e32(result);\r\n};\r\n\r\nt[0xD4] = cpu => {\r\n    cpu.bcd_aam(cpu.read_op8());\r\n};\r\nt[0xD5] = cpu => {\r\n    cpu.bcd_aad(cpu.read_op8());\r\n};\r\n\r\nt[0xD6] = cpu => {\r\n    // salc\r\n    cpu.reg8[reg_al] = -cpu.getcf();\r\n};\r\nt[0xD7] = cpu => {\r\n    // xlat\r\n    if(cpu.is_asize_32())\r\n    {\r\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + cpu.reg32s[reg_ebx] + cpu.reg8[reg_al] | 0);\r\n    }\r\n    else\r\n    {\r\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + (cpu.reg16[reg_bx] + cpu.reg8[reg_al] & 0xFFFF) | 0);\r\n    }\r\n};\r\n\r\nt[0xD8] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_D8_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_D8_reg(cpu.modrm_byte);\r\n};\r\nt[0xD9] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_D9_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_D9_reg(cpu.modrm_byte);\r\n};\r\nt[0xDA] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DA_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DA_reg(cpu.modrm_byte);\r\n};\r\nt[0xDB] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DB_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DB_reg(cpu.modrm_byte);\r\n};\r\nt[0xDC] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DC_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DC_reg(cpu.modrm_byte);\r\n};\r\nt[0xDD] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DD_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DD_reg(cpu.modrm_byte);\r\n};\r\nt[0xDE] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DE_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DE_reg(cpu.modrm_byte);\r\n};\r\nt[0xDF] = cpu => { cpu.read_modrm_byte();\r\n    cpu.task_switch_test();\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.fpu.op_DF_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\r\n    else\r\n        cpu.fpu.op_DF_reg(cpu.modrm_byte);\r\n};\r\n\r\nt[0xE0] = cpu => { cpu.loopne(cpu.read_op8s()); };\r\nt[0xE1] = cpu => { cpu.loope(cpu.read_op8s()); };\r\nt[0xE2] = cpu => { cpu.loop(cpu.read_op8s()); };\r\nt[0xE3] = cpu => { cpu.jcxz(cpu.read_op8s()); };\r\n\r\nt[0xE4] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 1);\r\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\r\n    cpu.diverged();\r\n};\r\nt16[0xE5] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 2);\r\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\r\n    cpu.diverged();\r\n};\r\nt32[0xE5] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 4);\r\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\r\n    cpu.diverged();\r\n};\r\nt[0xE6] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 1);\r\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\r\n    cpu.diverged();\r\n};\r\nt16[0xE7] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 2);\r\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\r\n    cpu.diverged();\r\n};\r\nt32[0xE7] = cpu => {\r\n    var port = cpu.read_op8();\r\n    cpu.test_privileges_for_io(port, 4);\r\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\r\n    cpu.diverged();\r\n};\r\n\r\nt16[0xE8] = cpu => {\r\n    // call\r\n    var imm16 = cpu.read_op16();\r\n    cpu.push16(cpu.get_real_eip());\r\n\r\n    cpu.jmp_rel16(imm16);\r\n    cpu.diverged();\r\n};\r\nt32[0xE8] = cpu => {\r\n    // call\r\n    var imm32s = cpu.read_op32s();\r\n    cpu.push32(cpu.get_real_eip());\r\n\r\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt16[0xE9] = cpu => {\r\n    // jmp\r\n    var imm16 = cpu.read_op16();\r\n    cpu.jmp_rel16(imm16);\r\n    cpu.diverged();\r\n};\r\nt32[0xE9] = cpu => {\r\n    // jmp\r\n    var imm32s = cpu.read_op32s();\r\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt16[0xEA] = cpu => {\r\n    // jmpf\r\n    var ip = cpu.read_op16();\r\n    var cs = cpu.read_disp16();\r\n    cpu.far_jump(ip, cs, false);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt32[0xEA] = cpu => {\r\n    // jmpf\r\n    var new_ip = cpu.read_op32s();\r\n    var cs = cpu.read_disp16();\r\n    cpu.far_jump(new_ip, cs, false);\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\nt[0xEB] = cpu => {\r\n    // jmp near\r\n    var imm8 = cpu.read_op8s();\r\n    cpu.instruction_pointer = cpu.instruction_pointer + imm8 | 0;\r\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n    cpu.diverged();\r\n};\r\n\r\nt[0xEC] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 1);\r\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\r\n    cpu.diverged();\r\n};\r\nt16[0xED] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 2);\r\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\r\n    cpu.diverged();\r\n};\r\nt32[0xED] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 4);\r\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\r\n    cpu.diverged();\r\n};\r\nt[0xEE] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 1);\r\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\r\n    cpu.diverged();\r\n};\r\nt16[0xEF] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 2);\r\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\r\n    cpu.diverged();\r\n};\r\nt32[0xEF] = cpu => {\r\n    var port = cpu.reg16[reg_dx];\r\n    cpu.test_privileges_for_io(port, 4);\r\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\r\n    cpu.diverged();\r\n};\r\n\r\nt[0xF0] = cpu => {\r\n    // lock\r\n    //dbg_log(\"lock\", LOG_CPU);\r\n\r\n    // TODO\r\n    // This triggers UD when used with\r\n    // some instructions that don't write to memory\r\n    cpu.run_prefix_instruction();\r\n};\r\nt[0xF1] = cpu => {\r\n    // INT1\r\n    // https://code.google.com/p/corkami/wiki/x86oddities#IceBP\r\n    throw cpu.debug.unimpl(\"int1 instruction\");\r\n};\r\n\r\nt[0xF2] = cpu => {\r\n    // repnz\r\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\r\n    cpu.prefixes |= PREFIX_REPNZ;\r\n    cpu.run_prefix_instruction();\r\n    cpu.prefixes = 0;\r\n};\r\nt[0xF3] = cpu => {\r\n    // repz\r\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\r\n    cpu.prefixes |= PREFIX_REPZ;\r\n    cpu.run_prefix_instruction();\r\n    cpu.prefixes = 0;\r\n};\r\n\r\nt[0xF4] = cpu => {\r\n    cpu.hlt_op();\r\n};\r\n\r\nt[0xF5] = cpu => {\r\n    // cmc\r\n    cpu.flags = (cpu.flags | 1) ^ cpu.getcf();\r\n    cpu.flags_changed &= ~1;\r\n};\r\n\r\nt[0xF6] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\r\n            break;\r\n        case 1:\r\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\r\n            break;\r\n        case 2:\r\n            var data = cpu.read_write_e8(); cpu.write_e8(~(data));\r\n            break;\r\n        case 3:\r\n            var data = cpu.read_write_e8(); cpu.write_e8(cpu.neg8(data));\r\n            break;\r\n        case 4:\r\n            var data = cpu.read_e8(); cpu.mul8(data);\r\n            break;\r\n        case 5:\r\n            var data = cpu.read_e8s(); cpu.imul8(data);\r\n            break;\r\n        case 6:\r\n            var data = cpu.read_e8(); cpu.div8(data);\r\n            break;\r\n        case 7:\r\n            var data = cpu.read_e8s(); cpu.idiv8(data);\r\n            break;\r\n    }\r\n};\r\n\r\nt16[0xF7] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\r\n            break;\r\n        case 1:\r\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\r\n            break;\r\n        case 2:\r\n            var data = cpu.read_write_e16(); cpu.write_e16(~(data));\r\n            break;\r\n        case 3:\r\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.neg16(data));\r\n            break;\r\n        case 4:\r\n            var data = cpu.read_e16(); cpu.mul16(data);\r\n            break;\r\n        case 5:\r\n            var data = cpu.read_e16s(); cpu.imul16(data);\r\n            break;\r\n        case 6:\r\n            var data = cpu.read_e16(); cpu.div16(data);\r\n            break;\r\n        case 7:\r\n            var data = cpu.read_e16s(); cpu.idiv16(data);\r\n            break;\r\n    }\r\n};\r\nt32[0xF7] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\r\n            break;\r\n        case 1:\r\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\r\n            break;\r\n        case 2:\r\n            var data = cpu.read_write_e32(); cpu.write_e32(~(data));\r\n            break;\r\n        case 3:\r\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.neg32(data));\r\n            break;\r\n        case 4:\r\n            var data = cpu.read_e32(); cpu.mul32(data);\r\n            break;\r\n        case 5:\r\n            var data = cpu.read_e32s(); cpu.imul32(data);\r\n            break;\r\n        case 6:\r\n            var data = cpu.read_e32(); cpu.div32(data);\r\n            break;\r\n        case 7:\r\n            var data = cpu.read_e32s(); cpu.idiv32(data);\r\n            break;\r\n    }\r\n};\r\n\r\nt[0xF8] = cpu => {\r\n    // clc\r\n    cpu.flags &= ~flag_carry;\r\n    cpu.flags_changed &= ~1;\r\n};\r\nt[0xF9] = cpu => {\r\n    // stc\r\n    cpu.flags |= flag_carry;\r\n    cpu.flags_changed &= ~1;\r\n};\r\n\r\nt[0xFA] = cpu => {\r\n    // cli\r\n    //dbg_log(\"interrupts off\");\r\n\r\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\r\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\r\n    {\r\n        cpu.flags &= ~flag_interrupt;\r\n    }\r\n    else\r\n    {\r\n        //if(cpu.getiopl() < 3 && ((cpu.flags & flag_vm) ?\r\n        //    (cpu.cr[4] & CR4_VME) :\r\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\r\n        //{\r\n        //    cpu.flags &= ~flag_vif;\r\n        //}\r\n        //else\r\n        {\r\n            dbg_log(\"cli #gp\", LOG_CPU);\r\n            cpu.trigger_gp(0);\r\n        }\r\n    }\r\n};\r\nt[0xFB] = cpu => {\r\n    // sti\r\n    //dbg_log(\"interrupts on\");\r\n\r\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\r\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\r\n    {\r\n        cpu.flags |= flag_interrupt;\r\n\r\n        cpu.clear_prefixes();\r\n        cpu.cycle_internal();\r\n\r\n        cpu.handle_irqs();\r\n    }\r\n    else\r\n    {\r\n        //if(cpu.getiopl() < 3 && (cpu.flags & flag_vip) === 0 && ((cpu.flags & flag_vm) ?\r\n        //    (cpu.cr[4] & CR4_VME) :\r\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\r\n        //{\r\n        //    cpu.flags |= flag_vif;\r\n        //}\r\n        //else\r\n        {\r\n            dbg_log(\"sti #gp\", LOG_CPU);\r\n            cpu.trigger_gp(0);\r\n        }\r\n    }\r\n\r\n};\r\n\r\nt[0xFC] = cpu => {\r\n    // cld\r\n    cpu.flags &= ~flag_direction;\r\n};\r\nt[0xFD] = cpu => {\r\n    // std\r\n    cpu.flags |= flag_direction;\r\n};\r\n\r\nt[0xFE] = cpu => { cpu.read_modrm_byte();\r\n    var mod = cpu.modrm_byte & 56;\r\n\r\n    if(mod === 0)\r\n    {\r\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.inc8(data));\r\n    }\r\n    else if(mod === 8)\r\n    {\r\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.dec8(data));\r\n    }\r\n    else\r\n    {\r\n        cpu.todo();\r\n    }\r\n};\r\nt16[0xFF] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.inc16(data));\r\n            break;\r\n        case 1:\r\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.dec16(data));\r\n            break;\r\n        case 2:\r\n            // 2, call near\r\n            var data = cpu.read_e16();\r\n            cpu.push16(cpu.get_real_eip());\r\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\r\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 3:\r\n            // 3, callf\r\n            if(cpu.modrm_byte >= 0xC0)\r\n            {\r\n                dbg_log(\"callf #ud\", LOG_CPU);\r\n                cpu.trigger_ud();\r\n                dbg_assert(false, \"unreachable\");\r\n            }\r\n\r\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            var new_ip = cpu.safe_read16(virt_addr);\r\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\r\n\r\n            cpu.far_jump(new_ip, new_cs, true);\r\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 4:\r\n            // 4, jmp near\r\n            var data = cpu.read_e16();\r\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\r\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 5:\r\n            // 5, jmpf\r\n            if(cpu.modrm_byte >= 0xC0)\r\n            {\r\n                dbg_log(\"jmpf #ud\", LOG_CPU);\r\n                cpu.trigger_ud();\r\n                dbg_assert(false, \"unreachable\");\r\n            }\r\n\r\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            var new_ip = cpu.safe_read16(virt_addr);\r\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\r\n\r\n            cpu.far_jump(new_ip, new_cs, false);\r\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 6:\r\n            // 6, push\r\n            var data = cpu.read_e16();\r\n            cpu.push16(data);\r\n            break;\r\n        case 7:\r\n            cpu.todo();\r\n    }\r\n};\r\nt32[0xFF] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.inc32(data));\r\n            break;\r\n        case 1:\r\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.dec32(data));\r\n            break;\r\n        case 2:\r\n            // 2, call near\r\n            var data = cpu.read_e32s();\r\n            cpu.push32(cpu.get_real_eip());\r\n\r\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\r\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\r\n            cpu.diverged();\r\n            break;\r\n        case 3:\r\n            // 3, callf\r\n            if(cpu.modrm_byte >= 0xC0)\r\n            {\r\n                dbg_log(\"callf #ud\", LOG_CPU);\r\n                cpu.trigger_ud();\r\n                dbg_assert(false, \"unreachable\");\r\n            }\r\n\r\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            var new_ip = cpu.safe_read32s(virt_addr);\r\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\r\n\r\n            if(!cpu.protected_mode || cpu.vm86_mode())\r\n            {\r\n                if(new_ip & 0xFFFF0000)\r\n                {\r\n                    throw cpu.debug.unimpl(\"#GP handler\");\r\n                }\r\n            }\r\n\r\n            cpu.far_jump(new_ip, new_cs, true);\r\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 4:\r\n            // 4, jmp near\r\n            var data = cpu.read_e32s();\r\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\r\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\r\n            cpu.diverged();\r\n            break;\r\n        case 5:\r\n            // 5, jmpf\r\n            if(cpu.modrm_byte >= 0xC0)\r\n            {\r\n                dbg_log(\"jmpf #ud\", LOG_CPU);\r\n                cpu.trigger_ud();\r\n                dbg_assert(false, \"unreachable\");\r\n            }\r\n\r\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            var new_ip = cpu.safe_read32s(virt_addr);\r\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\r\n\r\n            if(!cpu.protected_mode || cpu.vm86_mode())\r\n            {\r\n                if(new_ip & 0xFFFF0000)\r\n                {\r\n                    throw cpu.debug.unimpl(\"#GP handler\");\r\n                }\r\n            }\r\n\r\n            cpu.far_jump(new_ip, new_cs, false);\r\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\r\n            cpu.diverged();\r\n            break;\r\n        case 6:\r\n            // push\r\n            var data = cpu.read_e32s();\r\n            cpu.push32(data);\r\n            break;\r\n        case 7:\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nvar table16 = [];\r\nvar table32 = [];\r\nCPU.prototype.table16 = table16;\r\nCPU.prototype.table32 = table32;\r\n\r\nfor(var i = 0; i < 256; i++)\r\n{\r\n    if(t[i])\r\n    {\r\n        //dbg_assert(!t16[i]);\r\n        //dbg_assert(!t32[i]);\r\n        table16[i] = table32[i] = t[i];\r\n    }\r\n    else if(t16[i])\r\n    {\r\n        //dbg_assert(!t[i]);\r\n        //dbg_assert(t32[i]);\r\n        table16[i] = t16[i];\r\n        table32[i] = t32[i];\r\n    }\r\n}\r\n\r\nt = [];\r\nt16 = [];\r\nt32 = [];\r\n\r\n// 0F ops start here\r\n\r\nt[0x00] = cpu => { cpu.read_modrm_byte();\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        // No GP, UD is correct here\r\n        dbg_log(\"0f 00 #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            // sldt\r\n            cpu.set_e16(cpu.sreg[reg_ldtr]);\r\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\r\n            {\r\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\r\n            }\r\n            break;\r\n        case 1:\r\n            // str\r\n            cpu.set_e16(cpu.sreg[reg_tr]);\r\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\r\n            {\r\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\r\n            }\r\n            break;\r\n        case 2:\r\n            // lldt\r\n            if(cpu.cpl)\r\n            {\r\n                cpu.trigger_gp(0);\r\n            }\r\n\r\n            var data = cpu.read_e16();\r\n            cpu.load_ldt(data);\r\n            break;\r\n        case 3:\r\n            // ltr\r\n            if(cpu.cpl)\r\n            {\r\n                cpu.trigger_gp(0);\r\n            }\r\n\r\n            var data = cpu.read_e16();\r\n            cpu.load_tr(data);\r\n            break;\r\n        case 4:\r\n            cpu.verr(cpu.read_e16());\r\n            break;\r\n        case 5:\r\n            cpu.verw(cpu.read_e16());\r\n            break;\r\n\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nt[0x01] = cpu => { cpu.read_modrm_byte();\r\n    var mod = cpu.modrm_byte >> 3 & 7;\r\n\r\n    if(mod === 4)\r\n    {\r\n        // smsw\r\n        if(cpu.modrm_byte >= 0xC0 && cpu.is_osize_32())\r\n        {\r\n            cpu.set_e32(cpu.cr[0]);\r\n        }\r\n        else\r\n        {\r\n            cpu.set_e16(cpu.cr[0]);\r\n        }\r\n        return;\r\n    }\r\n    else if(mod === 6)\r\n    {\r\n        // lmsw\r\n        if(cpu.cpl)\r\n        {\r\n            cpu.trigger_gp(0);\r\n        }\r\n\r\n        var cr0 = cpu.read_e16();\r\n\r\n        cr0 = (cpu.cr[0] & ~0xF) | (cr0 & 0xF);\r\n\r\n        if(cpu.protected_mode)\r\n        {\r\n            // lmsw cannot be used to switch back\r\n            cr0 |= CR0_PE;\r\n        }\r\n\r\n        cpu.set_cr0(cr0);\r\n        return;\r\n    }\r\n\r\n    if(cpu.modrm_byte >= 0xC0)\r\n    {\r\n        // only memory\r\n        dbg_log(\"0f 01 #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n\r\n    switch(mod)\r\n    {\r\n        case 0:\r\n            // sgdt\r\n            cpu.writable_or_pagefault(addr, 6);\r\n            cpu.safe_write16(addr, cpu.gdtr_size);\r\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\r\n            cpu.safe_write32(addr + 2, cpu.gdtr_offset & mask);\r\n            break;\r\n        case 1:\r\n            // sidt\r\n            cpu.writable_or_pagefault(addr, 6);\r\n            cpu.safe_write16(addr, cpu.idtr_size);\r\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\r\n            cpu.safe_write32(addr + 2, cpu.idtr_offset & mask);\r\n            break;\r\n        case 2:\r\n            // lgdt\r\n            if(cpu.cpl)\r\n            {\r\n                cpu.trigger_gp(0);\r\n            }\r\n\r\n            var size = cpu.safe_read16(addr);\r\n            var offset = cpu.safe_read32s(addr + 2);\r\n\r\n            cpu.gdtr_size = size;\r\n            cpu.gdtr_offset = offset;\r\n\r\n            if(!cpu.is_osize_32())\r\n            {\r\n                cpu.gdtr_offset &= 0xFFFFFF;\r\n            }\r\n\r\n            //dbg_log(\"gdt at \" + h(cpu.gdtr_offset) + \", \" + cpu.gdtr_size + \" bytes\", LOG_CPU);\r\n            //cpu.debug.dump_state();\r\n            //cpu.debug.dump_regs_short();\r\n            //cpu.debug.dump_gdt_ldt();\r\n            break;\r\n        case 3:\r\n            // lidt\r\n            if(cpu.cpl)\r\n            {\r\n                cpu.trigger_gp(0);\r\n            }\r\n\r\n            var size = cpu.safe_read16(addr);\r\n            var offset = cpu.safe_read32s(addr + 2);\r\n\r\n            cpu.idtr_size = size;\r\n            cpu.idtr_offset = offset;\r\n\r\n            if(!cpu.is_osize_32())\r\n            {\r\n                cpu.idtr_offset &= 0xFFFFFF;\r\n            }\r\n\r\n            //dbg_log(\"[\" + h(cpu.instruction_pointer) + \"] idt at \" +\r\n            //        h(idtr_offset) + \", \" + cpu.idtr_size + \" bytes \" + h(addr), LOG_CPU);\r\n            break;\r\n        case 7:\r\n            // flush translation lookaside buffer\r\n            if(cpu.cpl)\r\n            {\r\n                cpu.trigger_gp(0);\r\n            }\r\n\r\n            cpu.invlpg(addr);\r\n            break;\r\n        default:\r\n            dbg_log(mod);\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nt16[0x02] = cpu => { cpu.read_modrm_byte();\r\n    // lar\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        dbg_log(\"lar #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(cpu.lar(data, cpu.read_g16()));\r\n};\r\nt32[0x02] = cpu => { cpu.read_modrm_byte();\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        dbg_log(\"lar #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e16();\r\n    cpu.write_g32(cpu.lar(data, cpu.read_g32s()));\r\n};\r\n\r\nt16[0x03] = cpu => { cpu.read_modrm_byte();\r\n    // lsl\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        dbg_log(\"lsl #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(cpu.lsl(data, cpu.read_g16()));\r\n};\r\nt32[0x03] = cpu => { cpu.read_modrm_byte();\r\n    if(!cpu.protected_mode || cpu.vm86_mode())\r\n    {\r\n        dbg_log(\"lsl #ud\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e16();\r\n    cpu.write_g32(cpu.lsl(data, cpu.read_g32s()));\r\n};\r\n\r\nt[0x04] = cpu => { cpu.undefined_instruction(); };\r\nt[0x05] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt[0x06] = cpu => {\r\n    // clts\r\n    if(cpu.cpl)\r\n    {\r\n        dbg_log(\"clts #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n    else\r\n    {\r\n        //dbg_log(\"clts\", LOG_CPU);\r\n        cpu.cr[0] &= ~CR0_TS;\r\n    }\r\n};\r\n\r\nt[0x07] = cpu => { cpu.undefined_instruction(); };\r\nt[0x08] = cpu => {\r\n    // invd\r\n    cpu.todo();\r\n};\r\n\r\nt[0x09] = cpu => {\r\n    if(cpu.cpl)\r\n    {\r\n        dbg_log(\"wbinvd #gp\", LOG_CPU);\r\n        cpu.trigger_gp(0);\r\n    }\r\n    // wbinvd\r\n};\r\n\r\n\r\nt[0x0A] = cpu => { cpu.undefined_instruction(); };\r\nt[0x0B] = cpu => {\r\n    // UD2\r\n    cpu.trigger_ud();\r\n};\r\nt[0x0C] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt[0x0D] = cpu => {\r\n    // nop\r\n    cpu.todo();\r\n};\r\n\r\nt[0x0E] = cpu => { cpu.undefined_instruction(); };\r\nt[0x0F] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt[0x10] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x11] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x12] = cpu => {\r\n    // movlpd xmm, xmm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    let data = cpu.read_xmm_mem64s();\r\n    cpu.write_xmm64(data[0], data[1]);\r\n};\r\nt[0x13] = cpu => {\r\n    // movlpd xmm/m64, xmm\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    let data = cpu.read_xmm64s();\r\n    dbg_assert(cpu.modrm_byte < 0xC0);\r\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n    cpu.safe_write64(addr, data[0], data[1]);\r\n};\r\nt[0x14] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x15] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x16] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x17] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0x18] = cpu => { cpu.read_modrm_byte();\r\n    // prefetch\r\n    // nop for us\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.modrm_resolve(cpu.modrm_byte);\r\n};\r\n\r\nt[0x19] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x1A] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x1B] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x1C] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x1D] = cpu => { cpu.unimplemented_sse(); };\r\n// endbr32/endbr64\r\nt[0x1E] = cpu => { cpu.read_modrm_byte()\r\n    // multi-byte nop\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.modrm_resolve(cpu.modrm_byte);\r\n};\r\nt[0x1F] = cpu => { cpu.read_modrm_byte()\r\n    // multi-byte nop\r\n    if(cpu.modrm_byte < 0xC0)\r\n        cpu.modrm_resolve(cpu.modrm_byte);\r\n};\r\n\r\n\r\nt[0x20] = cpu => { cpu.read_modrm_byte();\r\n\r\n    if(cpu.cpl)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" read\", LOG_CPU);\r\n\r\n    // mov addr, cr\r\n    // mod = which control register\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            cpu.write_reg_e32(cpu.cr[0]);\r\n            break;\r\n        case 2:\r\n            //dbg_log(\"read cr2 at \" + h(cpu.instruction_pointer >>> 0, 8));\r\n            cpu.write_reg_e32(cpu.cr[2]);\r\n            break;\r\n        case 3:\r\n            //dbg_log(\"read cr3 (\" + h(cpu.cr[3], 8) + \")\", LOG_CPU);\r\n            cpu.write_reg_e32(cpu.cr[3]);\r\n            break;\r\n        case 4:\r\n            cpu.write_reg_e32(cpu.cr[4]);\r\n            break;\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7);\r\n            dbg_assert(false);\r\n            cpu.trigger_ud();\r\n    }\r\n};\r\n\r\nt[0x21] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.cpl)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    var dreg = cpu.modrm_byte >> 3 & 7;\r\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\r\n    {\r\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    // high two bits of modrm are ignored\r\n    cpu.reg32s[cpu.modrm_byte & 7] = cpu.dreg[dreg];\r\n\r\n    //dbg_log(\"read dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\r\n};\r\n\r\nt[0x22] = cpu => { cpu.read_modrm_byte();\r\n\r\n    if(cpu.cpl)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    var data = cpu.read_reg_e32s();\r\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" written: \" + h(data >>> 0, 8), LOG_CPU);\r\n\r\n    // mov cr, addr\r\n    // mod = which control register\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0:\r\n            cpu.set_cr0(data);\r\n            //dbg_log(\"cr0=\" + h(data >>> 0), LOG_CPU);\r\n            break;\r\n\r\n        case 2:\r\n            cpu.cr[2] = data;\r\n            //dbg_log(\"cr2=\" + h(data >>> 0), LOG_CPU);\r\n            break;\r\n\r\n        case 3:\r\n            //dbg_log(\"cr3=\" + h(data >>> 0), LOG_CPU);\r\n            data &= ~0b111111100111;\r\n            dbg_assert((data & 0xFFF) === 0, \"TODO\");\r\n            cpu.cr[3] = data;\r\n            cpu.clear_tlb();\r\n\r\n            //dump_page_directory();\r\n            //dbg_log(\"page directory loaded at \" + h(cpu.cr[3] >>> 0, 8), LOG_CPU);\r\n            break;\r\n\r\n        case 4:\r\n            cpu.set_cr4(data);\r\n            break;\r\n\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7);\r\n            dbg_assert(false);\r\n            cpu.trigger_ud();\r\n    }\r\n};\r\nt[0x23] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.cpl)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    var dreg = cpu.modrm_byte >> 3 & 7;\r\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\r\n    {\r\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    // high two bits of modrm are ignored\r\n    cpu.dreg[dreg] = cpu.read_reg_e32s();\r\n\r\n    //dbg_log(\"write dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\r\n};\r\n\r\nt[0x24] = cpu => { cpu.undefined_instruction(); };\r\nt[0x25] = cpu => { cpu.undefined_instruction(); };\r\nt[0x26] = cpu => { cpu.undefined_instruction(); };\r\nt[0x27] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt[0x28] = cpu => {\r\n    // movaps xmm, xmm/m128\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    let data = cpu.read_xmm_mem128s();\r\n    cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\r\n};\r\nt[0x29] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\r\n    {\r\n        // movapd xmm/m128, xmm\r\n        // (note: same as below, see google.com/?q=MOVAPD+vs+MOVAPS)\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n    else\r\n    {\r\n        // movaps xmm/m128, xmm\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n};\r\nt[0x2A] = cpu => {\r\n    // cvtpi2ps xmm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    let data = cpu.read_mmx_mem64s();\r\n    let float32 = new Float32Array(2);\r\n    let res32 = new Uint32Array(float32.buffer);\r\n    float32[0] = data[0];\r\n    float32[1] = data[1];\r\n    cpu.write_xmm64(res32[0], res32[1]);\r\n };\r\nt[0x2B] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\r\n    {\r\n        // movntpd m128, xmm\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n    else\r\n    {\r\n        // movntps m128, xmm\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n };\r\nt[0x2C] = cpu => {\r\n    // cvttps2pi mm, xmm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let data = cpu.read_xmm_mem64s();\r\n    let float32 = new Float32Array(data.buffer);\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    var res0 = Math.trunc(float32[0]);\r\n    if(res0 <= 0x7FFFFFFF && res0 >= -0x80000000)\r\n    {\r\n        low = res0;\r\n    }\r\n    else\r\n    {\r\n        low = 0x80000000|0;\r\n    }\r\n\r\n    var res1 = Math.trunc(float32[1]);\r\n    if(res1 <= 0x7FFFFFFF && res1 >= -0x80000000)\r\n    {\r\n        high = res1;\r\n    }\r\n    else\r\n    {\r\n        high = 0x80000000|0;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x2D] = cpu => {\r\n    // cvtps2pi mm, xmm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let data = cpu.read_xmm_mem64s();\r\n    let float32 = new Float32Array(data.buffer);\r\n    let low = 0;\r\n    let high = 0;\r\n    var rc = cpu.mxcsr >> 13 & 3;\r\n\r\n    var res0 = cpu.integer_round(float32[0], rc);\r\n    if(res0 <= 0x7FFFFFFF && res0 >= -0x80000000)\r\n    {\r\n        low = res0;\r\n    }\r\n    else\r\n    {\r\n        low = 0x80000000|0;\r\n    }\r\n\r\n    var res1 = cpu.integer_round(float32[1], rc);\r\n    if(res1 <= 0x7FFFFFFF && res1 >= -0x80000000)\r\n    {\r\n        high = res1;\r\n    }\r\n    else\r\n    {\r\n        high = 0x80000000|0;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x2E] = cpu => {\r\n    // ucomiss xmm1, xmm2/m32\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source1 = cpu.read_xmm128s();\r\n    let source2 = cpu.read_xmm_mem128s();\r\n\r\n    let x = (new Float32Array(source1.buffer))[0];\r\n    let y = (new Float32Array(source2.buffer))[0];\r\n\r\n    cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\r\n    cpu.flags &= ~(1 | flag_parity | flag_zero);\r\n\r\n    if(x > y)\r\n    {\r\n    }\r\n    else if(y > x)\r\n    {\r\n        cpu.flags |= 1;\r\n    }\r\n    else if(x === y)\r\n    {\r\n        cpu.flags |= flag_zero;\r\n    }\r\n    else\r\n    {\r\n        cpu.flags |= 1 | flag_parity | flag_zero;\r\n\r\n        if (cpu.is_SNaN32(source1[0]) || cpu.is_SNaN32(source2[0])) {\r\n            cpu.invalid_arithmatic();\r\n        }\r\n    }\r\n};\r\n\r\nt[0x2F] = cpu => {\r\n    // comiss xmm1, xmm2/m32\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source1 = cpu.read_xmm128s();\r\n    let source2 = cpu.read_xmm_mem128s();\r\n\r\n    let x = (new Float32Array(source1.buffer))[0];\r\n    let y = (new Float32Array(source2.buffer))[0];\r\n\r\n    cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\r\n    cpu.flags &= ~(1 | flag_parity | flag_zero);\r\n\r\n    if(x > y)\r\n    {\r\n    }\r\n    else if(y > x)\r\n    {\r\n        cpu.flags |= 1;\r\n    }\r\n    else if(x === y)\r\n    {\r\n        cpu.flags |= flag_zero;\r\n    }\r\n    else\r\n    {\r\n        cpu.flags |= 1 | flag_parity | flag_zero;\r\n        cpu.invalid_arithmatic();\r\n    }\r\n};\r\n\r\n// wrmsr\r\nt[0x30] = cpu => {\r\n    // wrmsr - write maschine specific register\r\n\r\n    if(cpu.cpl)\r\n    {\r\n        // cpl > 0 or vm86 mode (vm86 mode is always runs with cpl=3)\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    var index = cpu.reg32s[reg_ecx];\r\n    var low = cpu.reg32s[reg_eax];\r\n    var high = cpu.reg32s[reg_edx];\r\n\r\n    if(index !== IA32_SYSENTER_ESP)\r\n    {\r\n        dbg_log(\"wrmsr ecx=\" + h(index >>> 0, 8) +\r\n                    \" data=\" + h(high >>> 0, 8) + \":\" + h(low >>> 0, 8), LOG_CPU);\r\n    }\r\n\r\n    switch(index)\r\n    {\r\n        case IA32_SYSENTER_CS:\r\n            cpu.sysenter_cs = low & 0xFFFF;\r\n            break;\r\n\r\n        case IA32_SYSENTER_EIP:\r\n            cpu.sysenter_eip = low;\r\n            break;\r\n\r\n        case IA32_SYSENTER_ESP:\r\n            cpu.sysenter_esp = low;\r\n            break;\r\n\r\n        case IA32_APIC_BASE_MSR:\r\n            dbg_assert(high === 0, \"Changing APIC address (high 32 bits) not supported\");\r\n            let address = low & ~(IA32_APIC_BASE_BSP | IA32_APIC_BASE_EXTD | IA32_APIC_BASE_EN);\r\n            dbg_assert((address >>> 0) === APIC_ADDRESS, \"Changing APIC address not supported\");\r\n            dbg_assert((low & IA32_APIC_BASE_EXTD) === 0, \"x2apic not supported\");\r\n            cpu.apic_enabled = (low & IA32_APIC_BASE_EN) === IA32_APIC_BASE_EN;\r\n            break;\r\n\r\n        case IA32_TIME_STAMP_COUNTER:\r\n            var new_tick = (low >>> 0) + 0x100000000 * (high >>> 0);\r\n            cpu.tsc_offset = v86.microtick() - new_tick / TSC_RATE;\r\n            break;\r\n\r\n        case IA32_BIOS_SIGN_ID:\r\n            break;\r\n\r\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\r\n            dbg_log(\"IA32_MISC_ENABLE=\" + h(low >>> 0, 8), LOG_CPU);\r\n            break;\r\n\r\n        case IA32_MCG_CAP:\r\n            // netbsd\r\n            break;\r\n\r\n        case IA32_KERNEL_GS_BASE:\r\n            // Only used in 64 bit mode (by SWAPGS), but set by kvm-unit-test\r\n            dbg_log(\"GS Base written\", LOG_CPU);\r\n            break;\r\n\r\n        default:\r\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\r\n    }\r\n};\r\n\r\nt[0x31] = cpu => {\r\n    // rdtsc - read timestamp counter\r\n\r\n    if(!cpu.cpl || !(cpu.cr[4] & CR4_TSD))\r\n    {\r\n        var n = v86.microtick() - cpu.tsc_offset;\r\n        dbg_assert(isFinite(n), \"non-finite tsc: \" + n);\r\n\r\n        cpu.reg32s[reg_eax] = n * TSC_RATE;\r\n        cpu.reg32s[reg_edx] = n * (TSC_RATE / 0x100000000);\r\n\r\n        //dbg_log(\"rdtsc  edx:eax=\" + h(cpu.reg32[reg_edx], 8) + \":\" + h(cpu.reg32[reg_eax], 8), LOG_CPU);\r\n    }\r\n    else\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n};\r\n\r\nt[0x32] = cpu => {\r\n    // rdmsr - read maschine specific register\r\n    if(cpu.cpl)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    var index = cpu.reg32s[reg_ecx];\r\n\r\n    dbg_log(\"rdmsr ecx=\" + h(index >>> 0, 8), LOG_CPU);\r\n\r\n    var low = 0;\r\n    var high = 0;\r\n\r\n    switch(index)\r\n    {\r\n        case IA32_SYSENTER_CS:\r\n            low = cpu.sysenter_cs;\r\n            break;\r\n\r\n        case IA32_SYSENTER_EIP:\r\n            low = cpu.sysenter_eip;\r\n            break;\r\n\r\n        case IA32_SYSENTER_ESP:\r\n            low = cpu.sysenter_esp;\r\n            break;\r\n\r\n        case IA32_TIME_STAMP_COUNTER:\r\n            var n = v86.microtick() - cpu.tsc_offset;\r\n            low = n * TSC_RATE;\r\n            high = n * (TSC_RATE / 0x100000000);\r\n            break;\r\n\r\n        case IA32_PLATFORM_ID:\r\n            break;\r\n\r\n        case IA32_APIC_BASE_MSR:\r\n            if(ENABLE_ACPI)\r\n            {\r\n                low = APIC_ADDRESS;\r\n\r\n                if(cpu.apic_enabled)\r\n                {\r\n                    low |= IA32_APIC_BASE_EN;\r\n                }\r\n            }\r\n            break;\r\n\r\n        case IA32_BIOS_SIGN_ID:\r\n            break;\r\n\r\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\r\n            break;\r\n\r\n        case IA32_RTIT_CTL:\r\n            // linux4\r\n            break;\r\n\r\n        case MSR_SMI_COUNT:\r\n            break;\r\n\r\n        case IA32_MCG_CAP:\r\n            // netbsd\r\n            break;\r\n\r\n        case MSR_PKG_C2_RESIDENCY:\r\n            break;\r\n\r\n        case MSR_EBC_FREQUENCY_ID:\r\n            low = 1 << 24;\r\n            break;\r\n\r\n        default:\r\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\r\n    }\r\n\r\n    cpu.reg32s[reg_eax] = low;\r\n    cpu.reg32s[reg_edx] = high;\r\n};\r\n\r\nt[0x33] = cpu => {\r\n    // rdpmc\r\n    cpu.todo();\r\n};\r\n\r\nt[0x34] = cpu => {\r\n    // sysenter\r\n    var seg = cpu.sysenter_cs & 0xFFFC;\r\n\r\n    if(!cpu.protected_mode || seg === 0)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    //dbg_log(\"sysenter  cs:eip=\" + h(seg    , 4) + \":\" + h(cpu.sysenter_eip >>> 0, 8) +\r\n    //                 \" ss:esp=\" + h(seg + 8, 4) + \":\" + h(cpu.sysenter_esp >>> 0, 8), LOG_CPU);\r\n\r\n    cpu.flags &= ~flag_vm & ~flag_interrupt;\r\n\r\n    cpu.instruction_pointer = cpu.sysenter_eip;\r\n    cpu.reg32s[reg_esp] = cpu.sysenter_esp;\r\n\r\n    cpu.sreg[reg_cs] = seg;\r\n    cpu.segment_is_null[reg_cs] = 0;\r\n    cpu.segment_limits[reg_cs] = -1;\r\n    cpu.segment_offsets[reg_cs] = 0;\r\n\r\n    cpu.update_cs_size(true);\r\n\r\n    cpu.cpl = 0;\r\n    cpu.cpl_changed();\r\n\r\n    cpu.sreg[reg_ss] = seg + 8;\r\n    cpu.segment_is_null[reg_ss] = 0;\r\n    cpu.segment_limits[reg_ss] = -1;\r\n    cpu.segment_offsets[reg_ss] = 0;\r\n\r\n    cpu.stack_size_32 = true;\r\n    cpu.diverged();\r\n};\r\n\r\nt[0x35] = cpu => {\r\n    // sysexit\r\n    var seg = cpu.sysenter_cs & 0xFFFC;\r\n\r\n    if(!cpu.protected_mode || cpu.cpl || seg === 0)\r\n    {\r\n        cpu.trigger_gp(0);\r\n    }\r\n\r\n    //dbg_log(\"sysexit  cs:eip=\" + h(seg + 16, 4) + \":\" + h(cpu.reg32s[reg_edx] >>> 0, 8) +\r\n    //                 \" ss:esp=\" + h(seg + 24, 4) + \":\" + h(cpu.reg32s[reg_ecx] >>> 0, 8), LOG_CPU);\r\n\r\n    cpu.instruction_pointer = cpu.reg32s[reg_edx];\r\n    cpu.reg32s[reg_esp] = cpu.reg32s[reg_ecx];\r\n\r\n    cpu.sreg[reg_cs] = seg + 16 | 3;\r\n\r\n    cpu.segment_is_null[reg_cs] = 0;\r\n    cpu.segment_limits[reg_cs] = -1;\r\n    cpu.segment_offsets[reg_cs] = 0;\r\n\r\n    cpu.update_cs_size(true);\r\n\r\n    cpu.cpl = 3;\r\n    cpu.cpl_changed();\r\n\r\n    cpu.sreg[reg_ss] = seg + 24 | 3;\r\n    cpu.segment_is_null[reg_ss] = 0;\r\n    cpu.segment_limits[reg_ss] = -1;\r\n    cpu.segment_offsets[reg_ss] = 0;\r\n\r\n    cpu.stack_size_32 = true;\r\n    cpu.diverged();\r\n};\r\n\r\nt[0x36] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt[0x37] = cpu => {\r\n    // getsec\r\n    cpu.todo();\r\n};\r\n\r\n// sse3+\r\nt[0x38] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x39] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3A] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3B] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3C] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3D] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3E] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x3F] = cpu => { cpu.unimplemented_sse(); };\r\n\r\n// cmov\r\nt16[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_o()); };\r\nt32[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_o()); };\r\nt16[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_o()); };\r\nt32[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_o()); };\r\nt16[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_b()); };\r\nt32[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_b()); };\r\nt16[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_b()); };\r\nt32[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_b()); };\r\nt16[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_z()); };\r\nt32[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_z()); };\r\nt16[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_z()); };\r\nt32[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_z()); };\r\nt16[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_be()); };\r\nt32[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_be()); };\r\nt16[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_be()); };\r\nt32[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_be()); };\r\nt16[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_s()); };\r\nt32[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_s()); };\r\nt16[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_s()); };\r\nt32[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_s()); };\r\nt16[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_p()); };\r\nt32[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_p()); };\r\nt16[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_p()); };\r\nt32[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_p()); };\r\nt16[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_l()); };\r\nt32[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_l()); };\r\nt16[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_l()); };\r\nt32[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_l()); };\r\nt16[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_le()); };\r\nt32[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_le()); };\r\nt16[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_le()); };\r\nt32[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_le()); };\r\n\r\n\r\nt[0x50] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x51] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x52] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x53] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x54] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x55] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x56] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x57] = cpu => {\r\n    // xorps xmm, xmm/mem128\r\n    // xorpd xmm, xmm/mem128\r\n    // Note: Same code as pxor\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_xmm_mem128s();\r\n    let destination = cpu.read_xmm128s();\r\n\r\n    cpu.write_xmm128s(\r\n        source[0] ^ destination[0],\r\n        source[1] ^ destination[1],\r\n        source[2] ^ destination[2],\r\n        source[3] ^ destination[3]\r\n    );\r\n};\r\n\r\nt[0x58] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x59] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5A] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5B] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5C] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5D] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5E] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x5F] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0x60] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // punpcklbw xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem64s();\r\n        let source8 = new Uint8Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm64s();\r\n        let destination8 = new Uint8Array(destination.buffer);\r\n\r\n        cpu.write_xmm128s(\r\n            destination8[0] | source8[0] << 8 | destination8[1] << 16 | source8[1] << 24,\r\n            destination8[2] | source8[2] << 8 | destination8[3] << 16 | source8[3] << 24,\r\n            destination8[4] | source8[4] << 8 | destination8[5] << 16 | source8[5] << 24,\r\n            destination8[6] | source8[6] << 8 | destination8[7] << 16 | source8[7] << 24\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // punpcklbw mm, mm/m32\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem32s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n\r\n        let byte0 = destination_low & 0xFF;\r\n        let byte1 = source & 0xFF;\r\n        let byte2 = (destination_low >> 8) & 0xFF;\r\n        let byte3 = (source >> 8) & 0xFF;\r\n        let byte4 = (destination_low >> 16) & 0xFF;\r\n        let byte5 = (source >> 16) & 0xFF;\r\n        let byte6 = destination_low >>> 24;\r\n        let byte7 = source >>> 24;\r\n\r\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x61] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // punpcklwd xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem64s();\r\n        let source16 = new Uint16Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm64s();\r\n        let destination16 = new Uint16Array(destination.buffer);\r\n\r\n        cpu.write_xmm128s(\r\n            destination16[0] | source16[0] << 16,\r\n            destination16[1] | source16[1] << 16,\r\n            destination16[2] | source16[2] << 16,\r\n            destination16[3] | source16[3] << 16\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // punpcklwd mm, mm/m32\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let source = cpu.read_mmx_mem32s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n\r\n        let word0 = destination_low & 0xFFFF;\r\n        let word1 = source & 0xFFFF;\r\n        let word2 = destination_low >>> 16;\r\n        let word3 = source >>> 16;\r\n\r\n        let low = word0 | word1 << 16;\r\n        let high = word2 | word3 << 16;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x62] = cpu => {\r\n    // punpckldq mm, mm/m32\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem32s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n\r\n    let low = destination_low;\r\n    let high = source;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x63] = cpu => {\r\n    // packsswb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = 0;\r\n    low |= (cpu.saturate_sw_to_sb((destination_low) & 0xFFFF));\r\n    low |= (cpu.saturate_sw_to_sb(destination_low >>> 16)) << 8;\r\n    low |= (cpu.saturate_sw_to_sb((destination_high) & 0xFFFF)) << 16;\r\n    low |= (cpu.saturate_sw_to_sb(destination_high >>> 16)) << 24;\r\n\r\n    let high = 0;\r\n    high |= (cpu.saturate_sw_to_sb((source[0]) & 0xFFFF));\r\n    high |= (cpu.saturate_sw_to_sb(source[0] >>> 16)) << 8;\r\n    high |= (cpu.saturate_sw_to_sb((source[1]) & 0xFFFF)) << 16;\r\n    high |= (cpu.saturate_sw_to_sb(source[1] >>> 16)) << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x64] = cpu => {\r\n    // pcmpgtb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8s = new Int8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8s = cpu.reg_mmx8s;\r\n\r\n    let byte0 = destination8s[reg_offset] > source8s[0] ? 0xFF : 0;\r\n    let byte1 = destination8s[reg_offset + 1] > source8s[1] ? 0xFF : 0;\r\n    let byte2 = destination8s[reg_offset + 2] > source8s[2] ? 0xFF : 0;\r\n    let byte3 = destination8s[reg_offset + 3] > source8s[3] ? 0xFF : 0;\r\n    let byte4 = destination8s[reg_offset + 4] > source8s[4] ? 0xFF : 0;\r\n    let byte5 = destination8s[reg_offset + 5] > source8s[5] ? 0xFF : 0;\r\n    let byte6 = destination8s[reg_offset + 6] > source8s[6] ? 0xFF : 0;\r\n    let byte7 = destination8s[reg_offset + 7] > source8s[7] ? 0xFF : 0;\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x65] = cpu => {\r\n    // pcmpgtw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = (destination_low << 16 >> 16) > (source[0] << 16 >> 16) ? 0xFFFF : 0;\r\n    let word1 = (destination_low >> 16) > (source[0] >> 16) ? 0xFFFF : 0;\r\n    let word2 = (destination_high << 16 >> 16) > (source[1] << 16 >> 16) ? 0xFFFF : 0;\r\n    let word3 = (destination_high >> 16) > (source[1] >> 16) ? 0xFFFF : 0;\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x66] = cpu => {\r\n    // pcmpgtd mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = destination_low > source[0] ? -1 : 0;\r\n    let high = destination_high > source[1] ? -1 : 0;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x67] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source16s = new Int16Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination16s = new Int16Array(destination.buffer);\r\n\r\n        let result = cpu.create_atom128s(0, 0, 0, 0);\r\n        let result8 = new Uint8Array(result.buffer);\r\n\r\n        for(let i = 0; i < 8; i++)\r\n        {\r\n            result8[i] = cpu.saturate_sw_to_ub(destination16s[i]);\r\n            result8[i | 8] = cpu.saturate_sw_to_ub(source16s[i]);\r\n        }\r\n\r\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3]);\r\n    }\r\n    else\r\n    {\r\n        // packuswb mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let low = 0;\r\n        low |= (cpu.saturate_sw_to_ub((destination_low) & 0xFFFF));\r\n        low |= (cpu.saturate_sw_to_ub(destination_low >>> 16)) << 8;\r\n        low |= (cpu.saturate_sw_to_ub((destination_high) & 0xFFFF)) << 16;\r\n        low |= (cpu.saturate_sw_to_ub(destination_high >>> 16)) << 24;\r\n\r\n        let high = 0;\r\n        high |= (cpu.saturate_sw_to_ub((source[0]) & 0xFFFF));\r\n        high |= (cpu.saturate_sw_to_ub(source[0] >>> 16)) << 8;\r\n        high |= (cpu.saturate_sw_to_ub((source[1]) & 0xFFFF)) << 16;\r\n        high |= (cpu.saturate_sw_to_ub(source[1] >>> 16)) << 24;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x68] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // punpckhbw xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source8 = new Uint8Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination8 = new Uint8Array(destination.buffer);\r\n\r\n        cpu.write_xmm128s(\r\n            destination8[ 8] | source8[ 8] << 8 | destination8[ 9] << 16 | source8[ 9] << 24,\r\n            destination8[10] | source8[10] << 8 | destination8[11] << 16 | source8[11] << 24,\r\n            destination8[12] | source8[12] << 8 | destination8[13] << 16 | source8[13] << 24,\r\n            destination8[14] | source8[14] << 8 | destination8[15] << 16 | source8[15] << 24\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // punpckhbw mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let byte0 = destination_high & 0xFF;\r\n        let byte1 = source[1] & 0xFF;\r\n        let byte2 = (destination_high >> 8) & 0xFF;\r\n        let byte3 = (source[1] >> 8) & 0xFF;\r\n        let byte4 = (destination_high >> 16) & 0xFF;\r\n        let byte5 = (source[1] >> 16) & 0xFF;\r\n        let byte6 = destination_high >>> 24;\r\n        let byte7 = source[1] >>> 24;\r\n\r\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x69] = cpu => {\r\n    // punpckhwd mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = destination_high & 0xFFFF;\r\n    let word1 = source[1] & 0xFFFF;\r\n    let word2 = destination_high >>> 16;\r\n    let word3 = source[1] >>> 16;\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x6A] = cpu => {\r\n    // punpckhdq mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = destination_high;\r\n    let high = source[1];\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x6B] = cpu => {\r\n    // packssdw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = 0;\r\n    low |= cpu.saturate_sd_to_sw(destination_low);\r\n    low |= cpu.saturate_sd_to_sw(destination_high) << 16;\r\n\r\n    let high = 0;\r\n    high |= cpu.saturate_sd_to_sw(source[0]);\r\n    high |= cpu.saturate_sd_to_sw(source[1]) << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x6C] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x6D] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x6E] = cpu => {\r\n    // movd mm, r/m32\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\r\n    {\r\n        let data = cpu.read_e32s();\r\n        cpu.write_xmm128s(data, 0, 0, 0);\r\n    }\r\n    else\r\n    {\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let data = cpu.read_e32s();\r\n        cpu.write_mmx64s(data, 0);\r\n    }\r\n};\r\nt[0x6F] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // movdqa xmm, xmm/mem128\r\n        let data = cpu.read_xmm_mem128s();\r\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\r\n    }\r\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\r\n    {\r\n        // movdqu xmm, xmm/m128\r\n        let data = cpu.read_xmm_mem128s_unaligned();\r\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\r\n    }\r\n    else\r\n    {\r\n        // movq mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let data = cpu.read_mmx_mem64s();\r\n        cpu.write_mmx64s(data[0], data[1]);\r\n    }\r\n};\r\n\r\nt[0x70] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\r\n    {\r\n        // pshufd xmm, xmm/mem128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let order = cpu.read_op8();\r\n\r\n        cpu.write_xmm128s(\r\n            source[order & 3],\r\n            source[order >> 2 & 3],\r\n            source[order >> 4 & 3],\r\n            source[order >> 6 & 3]\r\n        );\r\n    }\r\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F2)\r\n    {\r\n        // pshuflw xmm, xmm/m128, imm8\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source16 = new Uint16Array(source.buffer);\r\n        let order = cpu.read_op8();\r\n\r\n        cpu.write_xmm128s(\r\n            source16[order & 3] | source16[order >> 2 & 3] << 16,\r\n            source16[order >> 4 & 3] | source16[order >> 6 & 3] << 16,\r\n            source[2],\r\n            source[3]\r\n        );\r\n    }\r\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\r\n    {\r\n        // pshufhw xmm, xmm/m128, imm8\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source16 = new Uint16Array(source.buffer);\r\n        let order = cpu.read_op8();\r\n\r\n        cpu.write_xmm128s(\r\n            source[0],\r\n            source[1],\r\n            source16[order & 3 | 4] | source16[order >> 2 & 3 | 4] << 16,\r\n            source16[order >> 4 & 3 | 4] | source16[order >> 6 & 3 | 4] << 16\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // pshufw mm1, mm2/m64, imm8\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let source = cpu.read_mmx_mem64s();\r\n        let order = cpu.read_op8();\r\n\r\n        let word0_shift = order & 0b11;\r\n        let word0 = source[word0_shift >> 1] >>> ((word0_shift & 1) * 16) & 0xFFFF;\r\n        let word1_shift = (order >> 2) & 0b11;\r\n        let word1 = source[word1_shift >> 1] >>> ((word1_shift & 1) * 16);\r\n        let low = word0 | word1 << 16;\r\n\r\n        let word2_shift = (order >> 4) & 0b11;\r\n        let word2 = source[word2_shift >> 1] >>> ((word2_shift & 1) * 16) & 0xFFFF;\r\n        let word3_shift = (order >>> 6);\r\n        let word3 = source[word3_shift >> 1] >>> ((word3_shift & 1) * 16);\r\n        let high = word2 | word3 << 16;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\nt[0x71] = cpu => {\r\n    cpu.read_modrm_byte();\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    // psrlw, psraw, psllw\r\n    //     2,     4,     6\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 2:\r\n            // psrlw mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 15) {\r\n                var word0 = (destination_low & 0xFFFF) >>> shift;\r\n                var word1 = (destination_low >>> 16) >>> shift;\r\n                low = word0 | word1 << 16;\r\n\r\n                var word2 = (destination_high & 0xFFFF) >>> shift;\r\n                var word3 = (destination_high >>> 16) >>> shift;\r\n                high = word2 | word3 << 16;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        case 4:\r\n            // psraw mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            if (shift > 15) {\r\n                shift = 16;\r\n            }\r\n\r\n            var word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\r\n            var word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\r\n            var low = word0 | word1 << 16;\r\n\r\n            var word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\r\n            var word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\r\n            var high = word2 | word3 << 16;\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        case 6:\r\n            // psllw mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 15) {\r\n                var word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\r\n                var word1 = (destination_low >>> 16) << shift;\r\n                low = word0 | word1 << 16;\r\n\r\n                var word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\r\n                var word3 = (destination_high >>> 16) << shift;\r\n                high = word2 | word3 << 16;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        default:\r\n            cpu.unimplemented_sse();\r\n            break;\r\n    }\r\n};\r\n\r\nt[0x72] = cpu => {\r\n    cpu.read_modrm_byte();\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    // psrld, psrad, pslld\r\n    //     2,     4,     6\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 2:\r\n            // psrld mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 31) {\r\n                low = destination_low >>> shift;\r\n                high = destination_high >>> shift;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        case 4:\r\n            // psrad mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            if (shift > 31) {\r\n                shift = 31;\r\n            }\r\n\r\n            var low = destination_low >> shift;\r\n            var high = destination_high >> shift;\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        case 6:\r\n            // pslld mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 31) {\r\n                low = destination_low << shift;\r\n                high = destination_high << shift;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        default:\r\n            cpu.unimplemented_sse();\r\n            break;\r\n    }\r\n};\r\n\r\nt[0x73] = cpu => {\r\n    cpu.read_modrm_byte();\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    // psrlq, psllq\r\n    //     2,     6\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 2:\r\n            // psrlq mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 31) {\r\n                low = destination_low >>> shift | (destination_high << (32 - shift));\r\n                high = destination_high >>> shift;\r\n            }\r\n            else if (shift <= 63) {\r\n                low = destination_high >>> (shift & 0x1F);\r\n                high = 0;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        case 6:\r\n            // psllq mm, imm8\r\n            var source = cpu.read_op8();\r\n            var destination = cpu.modrm_byte & 7;\r\n\r\n            var destination_low = cpu.reg_mmxs[2 * destination];\r\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\r\n\r\n            var shift = source;\r\n            var low = 0;\r\n            var high = 0;\r\n\r\n            if (shift <= 31) {\r\n                low = destination_low << shift;\r\n                high = destination_high << shift | (destination_low >>> (32 - shift));\r\n            }\r\n            else if (shift <= 63) {\r\n                high = destination_low << (shift & 0x1F);\r\n                low = 0;\r\n            }\r\n\r\n            cpu.reg_mmxs[2 * destination] = low;\r\n            cpu.reg_mmxs[2 * destination + 1] = high;\r\n\r\n            break;\r\n        default:\r\n            cpu.unimplemented_sse();\r\n            break;\r\n    }\r\n};\r\n\r\nt[0x74] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // pcmpeqb xmm, xmm/m128\r\n        let source64s = cpu.read_xmm_mem128s();\r\n        let source8 = new Uint8Array(source64s.buffer);\r\n\r\n        let destination128 = cpu.read_xmm128s();\r\n        let destination8 = new Uint8Array(destination128.buffer);\r\n\r\n        let result = cpu.create_atom128s(0, 0, 0, 0);\r\n        let result8 = new Uint8Array(result.buffer);\r\n\r\n        for(let i = 0; i < 16; i++)\r\n        {\r\n            result8[i] = source8[i] === destination8[i] ? 0xFF : 0;\r\n        }\r\n\r\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\r\n    }\r\n    else\r\n    {\r\n        // pcmpeqb mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let source64s = cpu.read_mmx_mem64s();\r\n        let source8s = new Int8Array(source64s.buffer);\r\n\r\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n        let destination8s = cpu.reg_mmx8s;\r\n\r\n        let byte0 = destination8s[reg_offset] === source8s[0] ? 0xFF : 0;\r\n        let byte1 = destination8s[reg_offset + 1] === source8s[1] ? 0xFF : 0;\r\n        let byte2 = destination8s[reg_offset + 2] === source8s[2] ? 0xFF : 0;\r\n        let byte3 = destination8s[reg_offset + 3] === source8s[3] ? 0xFF : 0;\r\n        let byte4 = destination8s[reg_offset + 4] === source8s[4] ? 0xFF : 0;\r\n        let byte5 = destination8s[reg_offset + 5] === source8s[5] ? 0xFF : 0;\r\n        let byte6 = destination8s[reg_offset + 6] === source8s[6] ? 0xFF : 0;\r\n        let byte7 = destination8s[reg_offset + 7] === source8s[7] ? 0xFF : 0;\r\n\r\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x75] = cpu => {\r\n    // pcmpeqw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = (destination_low & 0xFFFF) === (source[0] & 0xFFFF) ? 0xFFFF : 0;\r\n    let word1 = (destination_low & 0xFFFF0000) === (source[0] & 0xFFFF0000) ? 0xFFFF : 0;\r\n    let word2 = (destination_high & 0xFFFF) === (source[1] & 0xFFFF) ? 0xFFFF : 0;\r\n    let word3 = (destination_high & 0xFFFF0000) === (source[1] & 0xFFFF0000) ? 0xFFFF : 0;\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0x76] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // pcmpeqd xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let destination = cpu.read_xmm128s();\r\n\r\n        cpu.write_xmm128s(\r\n            source[0] === destination[0] ? -1 : 0,\r\n            source[1] === destination[1] ? -1 : 0,\r\n            source[2] === destination[2] ? -1 : 0,\r\n            source[3] === destination[3] ? -1 : 0\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // pcmpeqd mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let low = destination_low === source[0] ? -1 : 0;\r\n        let high = destination_high === source[1] ? -1 : 0;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0x77] = cpu => {\r\n    // emms\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.fpu.stack_empty = 0xFF;\r\n};\r\n\r\nt[0x78] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x79] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x7A] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x7B] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x7C] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x7D] = cpu => { cpu.unimplemented_sse(); };\r\nt[0x7E] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\r\n    {\r\n        // movq xmm, xmm/mem64\r\n        let data = cpu.read_xmm_mem64s();\r\n        cpu.write_xmm128s(data[0], data[1], 0, 0);\r\n    }\r\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // movd r/m32, xmm\r\n        let data = cpu.read_xmm64s();\r\n        cpu.set_e32(data[0]);\r\n    }\r\n    else\r\n    {\r\n        // movd r/m32, mm\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let data = cpu.read_mmx64s();\r\n        cpu.set_e32(data[0]);\r\n    }\r\n};\r\nt[0x7F] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\r\n    {\r\n        // movdqu xmm/m128, xmm\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // movdqa xmm/m128, xmm\r\n        let data = cpu.read_xmm128s();\r\n        dbg_assert(cpu.modrm_byte < 0xC0);\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n    else\r\n    {\r\n        // movq mm/m64, mm\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let data = cpu.read_mmx64s();\r\n        cpu.set_mmx_mem64s(data[0], data[1]);\r\n    }\r\n};\r\n\r\n// jmpcc\r\nt16[0x80] = cpu => { cpu.jmpcc16( cpu.test_o()); };\r\nt32[0x80] = cpu => { cpu.jmpcc32( cpu.test_o()); };\r\nt16[0x81] = cpu => { cpu.jmpcc16(!cpu.test_o()); };\r\nt32[0x81] = cpu => { cpu.jmpcc32(!cpu.test_o()); };\r\nt16[0x82] = cpu => { cpu.jmpcc16( cpu.test_b()); };\r\nt32[0x82] = cpu => { cpu.jmpcc32( cpu.test_b()); };\r\nt16[0x83] = cpu => { cpu.jmpcc16(!cpu.test_b()); };\r\nt32[0x83] = cpu => { cpu.jmpcc32(!cpu.test_b()); };\r\nt16[0x84] = cpu => { cpu.jmpcc16( cpu.test_z()); };\r\nt32[0x84] = cpu => { cpu.jmpcc32( cpu.test_z()); };\r\nt16[0x85] = cpu => { cpu.jmpcc16(!cpu.test_z()); };\r\nt32[0x85] = cpu => { cpu.jmpcc32(!cpu.test_z()); };\r\nt16[0x86] = cpu => { cpu.jmpcc16( cpu.test_be()); };\r\nt32[0x86] = cpu => { cpu.jmpcc32( cpu.test_be()); };\r\nt16[0x87] = cpu => { cpu.jmpcc16(!cpu.test_be()); };\r\nt32[0x87] = cpu => { cpu.jmpcc32(!cpu.test_be()); };\r\nt16[0x88] = cpu => { cpu.jmpcc16( cpu.test_s()); };\r\nt32[0x88] = cpu => { cpu.jmpcc32( cpu.test_s()); };\r\nt16[0x89] = cpu => { cpu.jmpcc16(!cpu.test_s()); };\r\nt32[0x89] = cpu => { cpu.jmpcc32(!cpu.test_s()); };\r\nt16[0x8A] = cpu => { cpu.jmpcc16( cpu.test_p()); };\r\nt32[0x8A] = cpu => { cpu.jmpcc32( cpu.test_p()); };\r\nt16[0x8B] = cpu => { cpu.jmpcc16(!cpu.test_p()); };\r\nt32[0x8B] = cpu => { cpu.jmpcc32(!cpu.test_p()); };\r\nt16[0x8C] = cpu => { cpu.jmpcc16( cpu.test_l()); };\r\nt32[0x8C] = cpu => { cpu.jmpcc32( cpu.test_l()); };\r\nt16[0x8D] = cpu => { cpu.jmpcc16(!cpu.test_l()); };\r\nt32[0x8D] = cpu => { cpu.jmpcc32(!cpu.test_l()); };\r\nt16[0x8E] = cpu => { cpu.jmpcc16( cpu.test_le()); };\r\nt32[0x8E] = cpu => { cpu.jmpcc32( cpu.test_le()); };\r\nt16[0x8F] = cpu => { cpu.jmpcc16(!cpu.test_le()); };\r\nt32[0x8F] = cpu => { cpu.jmpcc32(!cpu.test_le()); };\r\n\r\n// setcc\r\nt[0x90] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_o()); };\r\nt[0x91] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_o()); };\r\nt[0x92] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_b()); };\r\nt[0x93] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_b()); };\r\nt[0x94] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_z()); };\r\nt[0x95] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_z()); };\r\nt[0x96] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_be()); };\r\nt[0x97] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_be()); };\r\nt[0x98] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_s()); };\r\nt[0x99] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_s()); };\r\nt[0x9A] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_p()); };\r\nt[0x9B] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_p()); };\r\nt[0x9C] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_l()); };\r\nt[0x9D] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_l()); };\r\nt[0x9E] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_le()); };\r\nt[0x9F] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_le()); };\r\n\r\nt16[0xA0] = cpu => { cpu.push16(cpu.sreg[reg_fs]); };\r\nt32[0xA0] = cpu => { cpu.push32(cpu.sreg[reg_fs]); };\r\nt16[0xA1] = cpu => {\r\n    cpu.switch_seg(reg_fs, cpu.safe_read16(cpu.get_stack_pointer(0)));\r\n    cpu.adjust_stack_reg(2);\r\n};\r\nt32[0xA1] = cpu => {\r\n    cpu.switch_seg(reg_fs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\r\n    cpu.adjust_stack_reg(4);\r\n};\r\n\r\nt[0xA2] = cpu => { cpu.cpuid(); };\r\n\r\nt16[0xA3] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\r\n    }\r\n    else\r\n    {\r\n        cpu.bt_reg(cpu.read_reg_e16(), cpu.read_g16() & 15);\r\n    }\r\n};\r\nt32[0xA3] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\r\n    }\r\n    else\r\n    {\r\n        cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31);\r\n    }\r\n};\r\n\r\nt16[0xA4] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.read_op8() & 31));\r\n};\r\nt32[0xA4] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.read_op8() & 31));\r\n};\r\nt16[0xA5] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\r\n};\r\nt32[0xA5] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\r\n};\r\n\r\nt[0xA6] = cpu => {\r\n    // obsolete cmpxchg (os/2)\r\n    cpu.trigger_ud();\r\n};\r\nt[0xA7] = cpu => { cpu.undefined_instruction(); };\r\n\r\nt16[0xA8] = cpu => { cpu.push16(cpu.sreg[reg_gs]); };\r\nt32[0xA8] = cpu => { cpu.push32(cpu.sreg[reg_gs]); };\r\nt16[0xA9] = cpu => {\r\n    cpu.switch_seg(reg_gs, cpu.safe_read16(cpu.get_stack_pointer(0)));\r\n    cpu.adjust_stack_reg(2);\r\n};\r\nt32[0xA9] = cpu => {\r\n    cpu.switch_seg(reg_gs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\r\n    cpu.adjust_stack_reg(4);\r\n};\r\n\r\n\r\nt[0xAA] = cpu => {\r\n    // rsm\r\n    cpu.todo();\r\n};\r\n\r\nt16[0xAB] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\r\n    } else {\r\n        cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\r\n    }\r\n};\r\nt32[0xAB] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\r\n    } else {\r\n        cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\r\n    }\r\n};\r\n\r\n\r\nt16[0xAC] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.read_op8() & 31));\r\n};\r\nt32[0xAC] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.read_op8() & 31));\r\n};\r\nt16[0xAD] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\r\n};\r\nt32[0xAD] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\r\n};\r\n\r\nt[0xAE] = cpu => { cpu.read_modrm_byte();\r\n    // xsave, xrstor, ...\r\n    if(cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) cpu.todo();\r\n\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 0: // fxsave\r\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\r\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            cpu.fxsave(addr);\r\n            break;\r\n\r\n        case 1: // fxrstor\r\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\r\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            cpu.fxrstor(addr);\r\n            break;\r\n\r\n        case 2: // ldmxcsr\r\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\r\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            let new_mxcsr = cpu.safe_read32s(addr);\r\n            if(new_mxcsr & ~MXCSR_MASK)\r\n            {\r\n                dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\r\n                cpu.trigger_gp(0);\r\n            }\r\n            cpu.mxcsr = new_mxcsr;\r\n            break;\r\n\r\n        case 3: // stmxcsr\r\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\r\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            cpu.safe_write32(addr, cpu.mxcsr);\r\n            break;\r\n\r\n        case 5:\r\n            // lfence\r\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected lfence encoding\");\r\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\r\n            break;\r\n        case 6:\r\n            // mfence\r\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected mfence encoding\");\r\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\r\n            break;\r\n        case 7:\r\n            // sfence or clflush\r\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected sfence encoding\");\r\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\r\n            break;\r\n        default:\r\n            dbg_log(\"missing \" + (cpu.modrm_byte >> 3 & 7), LOG_CPU);\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nt16[0xAF] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16s();\r\n    cpu.write_g16(cpu.imul_reg16(cpu.read_g16s(), data));\r\n};\r\nt32[0xAF] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e32s();\r\n    cpu.write_g32(cpu.imul_reg32(cpu.read_g32s(), data));\r\n};\r\n\r\nt[0xB0] = cpu => { cpu.read_modrm_byte();\r\n    // cmpxchg8\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.writable_or_pagefault(virt_addr, 1);\r\n\r\n        var data = cpu.safe_read8(virt_addr);\r\n    }\r\n    else\r\n        data = cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1];\r\n\r\n\r\n    cpu.cmp8(cpu.reg8[reg_al], data);\r\n\r\n    if(cpu.getzf())\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write8(virt_addr, cpu.read_g8());\r\n        else\r\n            cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_g8();\r\n    }\r\n    else\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write8(virt_addr, data);\r\n\r\n        cpu.reg8[reg_al] = data;\r\n    }\r\n};\r\nt16[0xB1] = cpu => { cpu.read_modrm_byte();\r\n    // cmpxchg16/32\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.writable_or_pagefault(virt_addr, 2);\r\n\r\n        var data = cpu.safe_read16(virt_addr);\r\n    }\r\n    else\r\n        data = cpu.read_reg_e16();\r\n\r\n    cpu.cmp16(cpu.reg16[reg_ax], data);\r\n\r\n    if(cpu.getzf())\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write16(virt_addr, cpu.read_g16());\r\n        else\r\n            cpu.write_reg_e16(cpu.read_g16());\r\n    }\r\n    else\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write16(virt_addr, data);\r\n\r\n        cpu.reg16[reg_ax] = data;\r\n    }\r\n};\r\nt32[0xB1] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0)\r\n    {\r\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.writable_or_pagefault(virt_addr, 4);\r\n\r\n        var data = cpu.safe_read32s(virt_addr);\r\n    }\r\n    else\r\n    {\r\n        data = cpu.read_reg_e32s();\r\n    }\r\n\r\n    cpu.cmp32(cpu.reg32s[reg_eax], data);\r\n\r\n    if(cpu.getzf())\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write32(virt_addr, cpu.read_g32s());\r\n        else\r\n            cpu.write_reg_e32(cpu.read_g32s());\r\n    }\r\n    else\r\n    {\r\n        if(cpu.modrm_byte < 0xC0)\r\n            cpu.safe_write32(virt_addr, data);\r\n\r\n        cpu.reg32s[reg_eax] = data;\r\n    }\r\n};\r\n\r\n// lss\r\nt16[0xB2] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss16(reg_ss);\r\n};\r\nt32[0xB2] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss32(reg_ss);\r\n};\r\n\r\nt16[0xB3] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\r\n    } else {\r\n        cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\r\n    }\r\n};\r\nt32[0xB3] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\r\n    } else {\r\n        cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\r\n    }\r\n};\r\n\r\n// lfs, lgs\r\nt16[0xB4] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss16(reg_fs);\r\n};\r\nt32[0xB4] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss32(reg_fs);\r\n};\r\nt16[0xB5] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss16(reg_gs);\r\n};\r\nt32[0xB5] = cpu => { cpu.read_modrm_byte();\r\n    cpu.lss32(reg_gs);\r\n};\r\n\r\nt16[0xB6] = cpu => { cpu.read_modrm_byte();\r\n    // movzx\r\n    var data = cpu.read_e8();\r\n    cpu.write_g16(data);\r\n};\r\nt32[0xB6] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e8();\r\n    cpu.write_g32(data);\r\n};\r\n\r\nt16[0xB7] = cpu => { cpu.read_modrm_byte();\r\n    // movzx\r\n    dbg_assert(false, \"Possibly invalid encoding\");\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(data);\r\n};\r\nt32[0xB7] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16();\r\n    cpu.write_g32(data);\r\n};\r\n\r\nt16[0xB8] = cpu => { cpu.read_modrm_byte();\r\n    // popcnt\r\n    if((cpu.prefixes & PREFIX_F3) === 0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(cpu.popcnt(data));\r\n};\r\nt32[0xB8] = cpu => { cpu.read_modrm_byte();\r\n    if((cpu.prefixes & PREFIX_F3) === 0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n    var data = cpu.read_e32s();\r\n    cpu.write_g32(cpu.popcnt(data));\r\n};\r\n\r\nt[0xB9] = cpu => {\r\n    // UD\r\n    cpu.todo();\r\n};\r\n\r\nt16[0xBA] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 4:\r\n            if(cpu.modrm_byte < 0xC0)\r\n            {\r\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\r\n            }\r\n            else\r\n            {\r\n                cpu.bt_reg(cpu.read_reg_e16(), cpu.read_op8() & 15);\r\n            }\r\n            break;\r\n        case 5:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\r\n            } else {\r\n                cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\r\n            }\r\n            break;\r\n        case 6:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\r\n            } else {\r\n                cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\r\n            }\r\n            break;\r\n        case 7:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\r\n            } else {\r\n                cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\r\n            }\r\n            break;\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7);\r\n            cpu.todo();\r\n    }\r\n};\r\nt32[0xBA] = cpu => { cpu.read_modrm_byte();\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 4:\r\n            if(cpu.modrm_byte < 0xC0)\r\n            {\r\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\r\n            }\r\n            else\r\n            {\r\n                cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31);\r\n            }\r\n            break;\r\n        case 5:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\r\n            } else {\r\n                cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\r\n            }\r\n            break;\r\n        case 6:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\r\n            } else {\r\n                cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\r\n            }\r\n            break;\r\n        case 7:\r\n            if(cpu.modrm_byte < 0xC0) {\r\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\r\n            } else {\r\n                cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\r\n            }\r\n            break;\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7);\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nt16[0xBB] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\r\n    } else {\r\n        cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\r\n    }\r\n};\r\nt32[0xBB] = cpu => { cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) {\r\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\r\n    } else {\r\n        cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\r\n    }\r\n};\r\n\r\nt16[0xBC] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(cpu.bsf16(cpu.read_g16(), data));\r\n};\r\nt32[0xBC] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e32s();\r\n    cpu.write_g32(cpu.bsf32(cpu.read_g32s(), data));\r\n};\r\n\r\nt16[0xBD] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(cpu.bsr16(cpu.read_g16(), data));\r\n};\r\nt32[0xBD] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e32s();\r\n    cpu.write_g32(cpu.bsr32(cpu.read_g32s(), data));\r\n};\r\n\r\nt16[0xBE] = cpu => { cpu.read_modrm_byte();\r\n    // movsx\r\n    var data = cpu.read_e8s();\r\n    cpu.write_g16(data);\r\n};\r\nt32[0xBE] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e8s();\r\n    cpu.write_g32(data);\r\n};\r\n\r\nt16[0xBF] = cpu => { cpu.read_modrm_byte();\r\n    // movsx\r\n    dbg_assert(false, \"Possibly invalid encoding\");\r\n    var data = cpu.read_e16();\r\n    cpu.write_g16(data);\r\n};\r\n\r\nt32[0xBF] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_e16s();\r\n    cpu.write_g32(data);\r\n};\r\n\r\nt[0xC0] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e8(); cpu.write_e8(cpu.xadd8(data, cpu.modrm_byte >> 1 & 0xC | cpu.modrm_byte >> 5 & 1));\r\n};\r\n\r\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e16();\r\n    cpu.write_e16(cpu.xadd16(data, cpu.modrm_byte >> 2 & 14));\r\n};\r\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\r\n    var data = cpu.read_write_e32();\r\n    cpu.write_e32(cpu.xadd32(data, cpu.modrm_byte >> 3 & 7));\r\n};\r\n\r\n\r\nt[0xC2] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xC3] = cpu => {\r\n    // movnti\r\n    cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\r\n    cpu.set_e32(cpu.read_g32s());\r\n};\r\nt[0xC4] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xC5] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xC6] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xC7] = cpu => {\r\n    cpu.read_modrm_byte();\r\n\r\n    switch(cpu.modrm_byte >> 3 & 7)\r\n    {\r\n        case 1:\r\n            // cmpxchg8b\r\n            if(cpu.modrm_byte >= 0xC0)\r\n            {\r\n                cpu.trigger_ud();\r\n            }\r\n\r\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n            cpu.writable_or_pagefault(addr, 8);\r\n\r\n            var m64_low = cpu.safe_read32s(addr);\r\n            var m64_high = cpu.safe_read32s(addr + 4 | 0);\r\n\r\n            if(cpu.reg32s[reg_eax] === m64_low &&\r\n               cpu.reg32s[reg_edx] === m64_high)\r\n            {\r\n                cpu.flags |= flag_zero;\r\n\r\n                cpu.safe_write32(addr, cpu.reg32s[reg_ebx]);\r\n                cpu.safe_write32(addr + 4 | 0, cpu.reg32s[reg_ecx]);\r\n            }\r\n            else\r\n            {\r\n                cpu.flags &= ~flag_zero;\r\n\r\n                cpu.reg32s[reg_eax] = m64_low;\r\n                cpu.reg32s[reg_edx] = m64_high;\r\n\r\n                cpu.safe_write32(addr, m64_low);\r\n                cpu.safe_write32(addr + 4 | 0, m64_high);\r\n            }\r\n\r\n            cpu.flags_changed &= ~flag_zero;\r\n            break;\r\n\r\n        case 6:\r\n            var has_rand = v86util.has_rand_int();\r\n\r\n            if(has_rand)\r\n            {\r\n                var rand = v86util.get_rand_int();\r\n            }\r\n            else\r\n            {\r\n                var rand = 0;\r\n            }\r\n            //dbg_log(\"rdrand -> \" + h(rand >>> 0, 8), LOG_CPU);\r\n\r\n            if(cpu.is_osize_32())\r\n            {\r\n                cpu.set_e32(rand);\r\n            }\r\n            else\r\n            {\r\n                cpu.set_e16(rand);\r\n            }\r\n\r\n            cpu.flags &= ~flags_all;\r\n            cpu.flags |= has_rand;\r\n            cpu.flags_changed = 0;\r\n            break;\r\n\r\n        default:\r\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\r\n            cpu.todo();\r\n    }\r\n};\r\n\r\nt[0xC8] = cpu => { cpu.bswap(reg_eax); };\r\nt[0xC9] = cpu => { cpu.bswap(reg_ecx); };\r\nt[0xCA] = cpu => { cpu.bswap(reg_edx); };\r\nt[0xCB] = cpu => { cpu.bswap(reg_ebx); };\r\nt[0xCC] = cpu => { cpu.bswap(reg_esp); };\r\nt[0xCD] = cpu => { cpu.bswap(reg_ebp); };\r\nt[0xCE] = cpu => { cpu.bswap(reg_esi); };\r\nt[0xCF] = cpu => { cpu.bswap(reg_edi); };\r\n\r\nt[0xD0] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xD1] = cpu => {\r\n    // psrlw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 15) {\r\n        let word0 = (destination_low & 0xFFFF) >>> shift;\r\n        let word1 = (destination_low >>> 16) >>> shift;\r\n        low = word0 | word1 << 16;\r\n\r\n        let word2 = (destination_high & 0xFFFF) >>> shift;\r\n        let word3 = (destination_high >>> 16) >>> shift;\r\n        high = word2 | word3 << 16;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xD2] = cpu => {\r\n    // psrld mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 31) {\r\n        low = destination_low >>> shift;\r\n        high = destination_high >>> shift;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xD3] = cpu => {\r\n    // psrlq mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n\r\n    if(shift === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 31) {\r\n        low = destination_low >>> shift | (destination_high << (32 - shift));\r\n        high = destination_high >>> shift;\r\n    }\r\n    else if (shift <= 63) {\r\n        low = destination_high >>> (shift & 0x1F);\r\n        high = 0;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xD4] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xD5] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // pmullw xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source16s = new Int16Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination16s = new Int16Array(destination.buffer);\r\n\r\n        cpu.write_xmm128s(\r\n            source16s[0] * destination16s[0] & 0xFFFF | source16s[1] * destination16s[1] << 16,\r\n            source16s[2] * destination16s[2] & 0xFFFF | source16s[3] * destination16s[3] << 16,\r\n            source16s[4] * destination16s[4] & 0xFFFF | source16s[5] * destination16s[5] << 16,\r\n            source16s[6] * destination16s[6] & 0xFFFF | source16s[7] * destination16s[7] << 16\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // pmullw mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let word0 = ((destination_low & 0xFFFF) * (source[0] & 0xFFFF)) & 0xFFFF;\r\n        let word1 = ((destination_low >>> 16) * (source[0] >>> 16)) & 0xFFFF;\r\n        let low = word0 | word1 << 16;\r\n\r\n        let word2 = ((destination_high & 0xFFFF) * (source[1] & 0xFFFF)) & 0xFFFF;\r\n        let word3 = ((destination_high >>> 16) * (source[1] >>> 16)) & 0xFFFF;\r\n        let high = word2 | word3 << 16;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\nt[0xD6] = cpu => {\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    // movq xmm/m64, xmm\r\n    var data = cpu.read_xmm64s();\r\n    dbg_assert(cpu.modrm_byte < 0xC0);\r\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n    cpu.safe_write64(addr, data[0], data[1]);\r\n};\r\nt[0xD7] = cpu => {\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n    if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\r\n\r\n    // pmovmskb reg, xmm\r\n    let data = cpu.read_xmm_mem128s();\r\n    let data8 = new Uint8Array(data.buffer);\r\n    let result =\r\n        data8[0] >> 7 << 0 | data8[1] >> 7 << 1 | data8[2] >> 7 << 2 | data8[3] >> 7 << 3 |\r\n        data8[4] >> 7 << 4 | data8[5] >> 7 << 5 | data8[6] >> 7 << 6 | data8[7] >> 7 << 7 |\r\n        data8[8] >> 7 << 8 | data8[9] >> 7 << 9 | data8[10] >> 7 << 10 | data8[11] >> 7 << 11 |\r\n        data8[12] >> 7 << 12 | data8[13] >> 7 << 13 | data8[14] >> 7 << 14 | data8[15] >> 7 << 15;\r\n    cpu.write_g32(result);\r\n};\r\n\r\nt[0xD8] = cpu => {\r\n    // psubusb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8 = new Uint8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8 = cpu.reg_mmx8;\r\n\r\n    let byte0 = cpu.saturate_sd_to_ub(destination8[reg_offset] - source8[0]);\r\n    let byte1 = cpu.saturate_sd_to_ub(destination8[reg_offset + 1] - source8[1]);\r\n    let byte2 = cpu.saturate_sd_to_ub(destination8[reg_offset + 2] - source8[2]);\r\n    let byte3 = cpu.saturate_sd_to_ub(destination8[reg_offset + 3] - source8[3]);\r\n    let byte4 = cpu.saturate_sd_to_ub(destination8[reg_offset + 4] - source8[4]);\r\n    let byte5 = cpu.saturate_sd_to_ub(destination8[reg_offset + 5] - source8[5]);\r\n    let byte6 = cpu.saturate_sd_to_ub(destination8[reg_offset + 6] - source8[6]);\r\n    let byte7 = cpu.saturate_sd_to_ub(destination8[reg_offset + 7] - source8[7]);\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xD9] = cpu => {\r\n    // psubusw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = (destination_low & 0xFFFF) - (source[0] & 0xFFFF);\r\n    let word1 = (destination_low >>> 16) - (source[0] >>> 16);\r\n    if (word0 < 0) {\r\n        word0 = 0;\r\n    }\r\n    if (word1 < 0) {\r\n        word1 = 0;\r\n    }\r\n\r\n    let word2 = (destination_high & 0xFFFF) - (source[1] & 0xFFFF);\r\n    let word3 = (destination_high >>> 16) - (source[1] >>> 16);\r\n    if (word2 < 0) {\r\n        word2 = 0;\r\n    }\r\n    if (word3 < 0) {\r\n        word3 = 0;\r\n    }\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xDA] = cpu => {\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    // pminub xmm, xmm/m128\r\n    let source = cpu.read_xmm_mem128s();\r\n    let source8 = new Uint8Array(source.buffer);\r\n\r\n    let destination = cpu.read_xmm128s();\r\n    let destination8 = new Uint8Array(destination.buffer);\r\n\r\n    let result = cpu.create_atom128s(0, 0, 0, 0);\r\n    let result8 = new Uint8Array(result.buffer);\r\n\r\n    for(let i = 0; i < 16; i++)\r\n    {\r\n        result8[i] = source8[i] < destination8[i] ? source8[i] : destination8[i];\r\n    }\r\n\r\n    cpu.write_xmm128s(result[0], result[1], result[2], result[3])\r\n};\r\nt[0xDB] = cpu => {\r\n    // pand mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = source[0] & destination_low;\r\n    let high = source[1] & destination_high;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xDC] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // paddusb xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source8 = new Uint8Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination8 = new Uint8Array(destination.buffer);\r\n\r\n        let result = cpu.create_atom128s(0, 0, 0, 0);\r\n        let result8 = new Uint8Array(result.buffer);\r\n\r\n        for(let i = 0; i < 16; i++)\r\n        {\r\n            result8[i] = cpu.saturate_ud_to_ub(source8[i] + destination8[i]);\r\n        }\r\n\r\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\r\n    }\r\n    else\r\n    {\r\n        // paddusb mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source64s = cpu.read_mmx_mem64s();\r\n        let source8 = new Uint8Array(source64s.buffer);\r\n\r\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n        let destination8 = cpu.reg_mmx8;\r\n\r\n        let byte0 = cpu.saturate_ud_to_ub(destination8[reg_offset] + source8[0]);\r\n        let byte1 = cpu.saturate_ud_to_ub(destination8[reg_offset + 1] + source8[1]);\r\n        let byte2 = cpu.saturate_ud_to_ub(destination8[reg_offset + 2] + source8[2]);\r\n        let byte3 = cpu.saturate_ud_to_ub(destination8[reg_offset + 3] + source8[3]);\r\n        let byte4 = cpu.saturate_ud_to_ub(destination8[reg_offset + 4] + source8[4]);\r\n        let byte5 = cpu.saturate_ud_to_ub(destination8[reg_offset + 5] + source8[5]);\r\n        let byte6 = cpu.saturate_ud_to_ub(destination8[reg_offset + 6] + source8[6]);\r\n        let byte7 = cpu.saturate_ud_to_ub(destination8[reg_offset + 7] + source8[7]);\r\n\r\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0xDD] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // paddusw mm, mm/m64\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source16 = new Uint16Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination16 = new Uint16Array(destination.buffer);\r\n\r\n        cpu.write_xmm128s(\r\n            cpu.saturate_uw(source16[0] + destination16[0]) | cpu.saturate_uw(source16[1] + destination16[1]) << 16,\r\n            cpu.saturate_uw(source16[2] + destination16[2]) | cpu.saturate_uw(source16[3] + destination16[3]) << 16,\r\n            cpu.saturate_uw(source16[4] + destination16[4]) | cpu.saturate_uw(source16[5] + destination16[5]) << 16,\r\n            cpu.saturate_uw(source16[6] + destination16[6]) | cpu.saturate_uw(source16[7] + destination16[7]) << 16\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // paddusw mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let word0 = cpu.saturate_uw((destination_low & 0xFFFF) + (source[0] & 0xFFFF));\r\n        let word1 = cpu.saturate_uw((destination_low >>> 16) + (source[0] >>> 16));\r\n        let word2 = cpu.saturate_uw((destination_high & 0xFFFF) + (source[1] & 0xFFFF));\r\n        let word3 = cpu.saturate_uw((destination_high >>> 16) + (source[1] >>> 16));\r\n\r\n        let low = word0 | word1 << 16;\r\n        let high = word2 | word3 << 16;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0xDE] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // pmaxub xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let source8 = new Uint8Array(source.buffer);\r\n\r\n        let destination = cpu.read_xmm128s();\r\n        let destination8 = new Uint8Array(destination.buffer);\r\n\r\n        let result = cpu.create_atom128s(0, 0, 0, 0);\r\n        let result8 = new Uint8Array(result.buffer);\r\n\r\n        for(let i = 0; i < 16; i++)\r\n        {\r\n            result8[i] = source8[i] > destination8[i] ? source8[i] : destination8[i];\r\n        }\r\n\r\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\r\n    }\r\n    else\r\n    {\r\n        dbg_assert(false);\r\n    }\r\n};\r\nt[0xDF] = cpu => {\r\n    // pandn mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = source[0] & ~destination_low;\r\n    let high = source[1] & ~destination_high;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xE0] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xE1] = cpu => {\r\n    // psraw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    if (shift > 15) {\r\n        shift = 16;\r\n    }\r\n\r\n    let word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\r\n    let word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\r\n    let low = word0 | word1 << 16;\r\n\r\n    let word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\r\n    let word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xE2] = cpu => {\r\n    // psrad mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    if (shift > 31) {\r\n        shift = 31;\r\n    }\r\n\r\n    let low = destination_low >> shift;\r\n    let high = destination_high >> shift;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xE3] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xE4] = cpu => {\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    // pmulhuw xmm, xmm/m128\r\n    let source = cpu.read_xmm_mem128s();\r\n    let source16 = new Uint16Array(source.buffer);\r\n\r\n    let destination = cpu.read_xmm128s();\r\n    let destination16 = new Uint16Array(destination.buffer);\r\n\r\n    cpu.write_xmm128s(\r\n        source16[0] * destination16[0] >>> 16 | source16[1] * destination16[1] & 0xFFFF0000,\r\n        source16[2] * destination16[2] >>> 16 | source16[3] * destination16[3] & 0xFFFF0000,\r\n        source16[4] * destination16[4] >>> 16 | source16[5] * destination16[5] & 0xFFFF0000,\r\n        source16[6] * destination16[6] >>> 16 | source16[7] * destination16[7] & 0xFFFF0000\r\n    );\r\n};\r\n\r\nt[0xE5] = cpu => {\r\n    // pmulhw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16)) >>> 16;\r\n    let word1 = ((destination_low >> 16) * (source[0] >> 16)) >>> 16;\r\n    let word2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16)) >>> 16;\r\n    let word3 = ((destination_high >> 16) * (source[1] >> 16)) >>> 16;\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xE6] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xE7] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if(cpu.modrm_byte >= 0xC0)\r\n    {\r\n        cpu.trigger_ud();\r\n    }\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        let data = cpu.read_xmm128s();\r\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\r\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\r\n    }\r\n    else\r\n    {\r\n        dbg_assert(false);\r\n    }\r\n};\r\n\r\nt[0xE8] = cpu => {\r\n    // psubsb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8s = new Int8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8s = cpu.reg_mmx8s;\r\n\r\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] - source8s[0]);\r\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] - source8s[1]);\r\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] - source8s[2]);\r\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] - source8s[3]);\r\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] - source8s[4]);\r\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] - source8s[5]);\r\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] - source8s[6]);\r\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] - source8s[7]);\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xE9] = cpu => {\r\n    // psubsw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) - (source[0] << 16 >> 16));\r\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) - (source[0] >> 16));\r\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) - (source[1] << 16 >> 16));\r\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) - (source[1] >> 16));\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xEA] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xEB] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\r\n    {\r\n        // por xmm, xmm/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let destination = cpu.read_xmm128s();\r\n\r\n        cpu.write_xmm128s(\r\n            source[0] | destination[0],\r\n            source[1] | destination[1],\r\n            source[2] | destination[2],\r\n            source[3] | destination[3]\r\n        );\r\n    }\r\n    else\r\n    {\r\n        // por mm, mm/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let low = source[0] | destination_low;\r\n        let high = source[1] | destination_high;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0xEC] = cpu => {\r\n    // paddsb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8s = new Int8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8s = cpu.reg_mmx8s;\r\n\r\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] + source8s[0]);\r\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] + source8s[1]);\r\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] + source8s[2]);\r\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] + source8s[3]);\r\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] + source8s[4]);\r\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] + source8s[5]);\r\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] + source8s[6]);\r\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] + source8s[7]);\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xED] = cpu => {\r\n    // paddsw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) + (source[0] << 16 >> 16));\r\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) + (source[0] >> 16));\r\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) + (source[1] << 16 >> 16));\r\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) + (source[1] >> 16));\r\n\r\n    let low = word0 | word1 << 16;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xEE] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xEF] = cpu => {\r\n    // pxor mm, mm/m64\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        let source = cpu.read_xmm_mem128s();\r\n        let destination = cpu.read_xmm128s();\r\n\r\n        cpu.write_xmm128s(\r\n            source[0] ^ destination[0],\r\n            source[1] ^ destination[1],\r\n            source[2] ^ destination[2],\r\n            source[3] ^ destination[3]\r\n        );\r\n    }\r\n    else\r\n    {\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let source = cpu.read_mmx_mem64s();\r\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n        let low = source[0] ^ destination_low;\r\n        let high = source[1] ^ destination_high;\r\n\r\n        cpu.write_mmx64s(low, high);\r\n    }\r\n};\r\n\r\nt[0xF0] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xF1] = cpu => {\r\n    // psllw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 15) {\r\n        let word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\r\n        let word1 = (destination_low >>> 16) << shift;\r\n        low = word0 | word1 << 16;\r\n\r\n        let word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\r\n        let word3 = (destination_high >>> 16) << shift;\r\n        high = word2 | word3 << 16;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xF2] = cpu => {\r\n    // pslld mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 31) {\r\n        low = destination_low << shift;\r\n        high = destination_high << shift;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xF3] = cpu => {\r\n    // psllq mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let shift = source[0] >>> 0;\r\n\r\n    if(shift === 0)\r\n    {\r\n        return;\r\n    }\r\n\r\n    let low = 0;\r\n    let high = 0;\r\n\r\n    if (shift <= 31) {\r\n        low = destination_low << shift;\r\n        high = destination_high << shift | (destination_low >>> (32 - shift));\r\n    }\r\n    else if (shift <= 63) {\r\n        high = destination_low << (shift & 0x1F);\r\n        low = 0;\r\n    }\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xF4] = cpu => {\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\r\n    {\r\n        // pmuludq xmm1, xmm2/m128\r\n        let source = cpu.read_xmm_mem128s();\r\n        let destination = cpu.read_xmm128s();\r\n\r\n        let i = (cpu.modrm_byte >> 3 & 7) << 2;\r\n\r\n        cpu.reg_xmm32s[i] = v86util.mul_low(destination[0], source[0]);\r\n        cpu.reg_xmm32s[i + 1] = v86util.mul_high(destination[0], source[0]);\r\n        cpu.reg_xmm32s[i + 2] = v86util.mul_low(destination[2], source[2]);\r\n        cpu.reg_xmm32s[i + 3] = v86util.mul_high(destination[2], source[2]);\r\n    }\r\n    else\r\n    {\r\n        // pmuludq mm1, mm2/m64\r\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n        let s = cpu.read_mmx_mem64s()[0];\r\n        let d = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n\r\n        cpu.write_mmx64s(v86util.mul_low(d, s), v86util.mul_high(d, s));\r\n    }\r\n};\r\n\r\nt[0xF5] = cpu => {\r\n    // pmaddwd mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let mul0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16));\r\n    let mul1 = ((destination_low >> 16) * (source[0] >> 16));\r\n    let mul2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16));\r\n    let mul3 = ((destination_high >> 16) * (source[1] >> 16));\r\n\r\n    let low = mul0 + mul1 | 0;\r\n    let high = mul2 + mul3 | 0;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xF6] = cpu => { cpu.unimplemented_sse(); };\r\nt[0xF7] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xF8] = cpu => {\r\n    // psubb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8s = new Int8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8s = cpu.reg_mmx8s;\r\n\r\n    let byte0 = (destination8s[reg_offset] - source8s[0]) & 0xFF;\r\n    let byte1 = (destination8s[reg_offset + 1] - source8s[1]) & 0xFF;\r\n    let byte2 = (destination8s[reg_offset + 2] - source8s[2]) & 0xFF;\r\n    let byte3 = (destination8s[reg_offset + 3] - source8s[3]) & 0xFF;\r\n    let byte4 = (destination8s[reg_offset + 4] - source8s[4]) & 0xFF;\r\n    let byte5 = (destination8s[reg_offset + 5] - source8s[5]) & 0xFF;\r\n    let byte6 = (destination8s[reg_offset + 6] - source8s[6]) & 0xFF;\r\n    let byte7 = (destination8s[reg_offset + 7] - source8s[7]) & 0xFF;\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xF9] = cpu => {\r\n    // psubw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = (destination_low - source[0]) & 0xFFFF;\r\n    let word1 = ((destination_low >>> 16) - (source[0] >>> 16)) & 0xFFFF;\r\n    let low = word0 | word1 << 16;\r\n\r\n    let word2 = (destination_high - source[1]) & 0xFFFF;\r\n    let word3 = ((destination_high >>> 16) - (source[1] >>> 16)) & 0xFFFF;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xFA] = cpu => {\r\n    // psubd mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = destination_low - source[0];\r\n    let high = destination_high - source[1];\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xFB] = cpu => { cpu.unimplemented_sse(); };\r\n\r\nt[0xFC] = cpu => {\r\n    // paddb mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source64s = cpu.read_mmx_mem64s();\r\n    let source8s = new Int8Array(source64s.buffer);\r\n\r\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\r\n    let destination8s = cpu.reg_mmx8s;\r\n\r\n    let byte0 = (destination8s[reg_offset] + source8s[0]) & 0xFF;\r\n    let byte1 = (destination8s[reg_offset + 1] + source8s[1]) & 0xFF;\r\n    let byte2 = (destination8s[reg_offset + 2] + source8s[2]) & 0xFF;\r\n    let byte3 = (destination8s[reg_offset + 3] + source8s[3]) & 0xFF;\r\n    let byte4 = (destination8s[reg_offset + 4] + source8s[4]) & 0xFF;\r\n    let byte5 = (destination8s[reg_offset + 5] + source8s[5]) & 0xFF;\r\n    let byte6 = (destination8s[reg_offset + 6] + source8s[6]) & 0xFF;\r\n    let byte7 = (destination8s[reg_offset + 7] + source8s[7]) & 0xFF;\r\n\r\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\r\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xFD] = cpu => {\r\n    // paddw mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let word0 = (destination_low + source[0]) & 0xFFFF;\r\n    let word1 = ((destination_low >>> 16) + (source[0] >>> 16)) & 0xFFFF;\r\n    let low = word0 | word1 << 16;\r\n\r\n    let word2 = (destination_high + source[1]) & 0xFFFF;\r\n    let word3 = ((destination_high >>> 16) + (source[1] >>> 16)) & 0xFFFF;\r\n    let high = word2 | word3 << 16;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xFE] = cpu => {\r\n    // paddd mm, mm/m64\r\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\r\n    cpu.task_switch_test_mmx();\r\n    cpu.read_modrm_byte();\r\n\r\n    let source = cpu.read_mmx_mem64s();\r\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\r\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\r\n\r\n    let low = destination_low + source[0] | 0;\r\n    let high = destination_high + source[1] | 0;\r\n\r\n    cpu.write_mmx64s(low, high);\r\n};\r\n\r\nt[0xFF] = cpu => {\r\n    // Windows 98\r\n    dbg_log(\"#ud: 0F FF\");\r\n    cpu.trigger_ud();\r\n};\r\n\r\n\r\nvar table0F_16 = [];\r\nvar table0F_32 = [];\r\nCPU.prototype.table0F_16 = table0F_16;\r\nCPU.prototype.table0F_32 = table0F_32;\r\n\r\nfor(i = 0; i < 256; i++)\r\n{\r\n    if(t[i])\r\n    {\r\n        //dbg_assert(!t16[i]);\r\n        //dbg_assert(!t32[i]);\r\n        table0F_16[i] = table0F_32[i] = t[i];\r\n    }\r\n    else if(t16[i])\r\n    {\r\n        //dbg_assert(!t[i]);\r\n        //dbg_assert(t32[i]);\r\n        table0F_16[i] = t16[i];\r\n        table0F_32[i] = t32[i];\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\nCPU.prototype.debug_init = function()\r\n{\r\n    var cpu = this;\r\n    var debug = {};\r\n    this.debug = debug;\r\n\r\n    /**\r\n     * wheter or not in step mode\r\n     * used for debugging\r\n     * @type {boolean}\r\n     */\r\n    debug.step_mode = false;\r\n    debug.ops = undefined;\r\n    debug.all_ops = [];\r\n\r\n    debug.trace_all = false;\r\n\r\n    // \"log\" some information visually to the user.\r\n    // Also in non-DEBUG modes\r\n    debug.show = function(x)\r\n    {\r\n        if(typeof document !== \"undefined\")\r\n        {\r\n            var el = document.getElementById(\"log\");\r\n\r\n            if(el)\r\n            {\r\n                el.textContent += x + \"\\n\";\r\n                el.style.display = \"block\";\r\n                el.scrollTop = 1e9;\r\n                return;\r\n            }\r\n        }\r\n\r\n        console.log(x);\r\n    };\r\n\r\n    debug.init = function()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        // used for debugging\r\n        debug.ops = new CircularQueue(200000);\r\n\r\n        if(cpu.io)\r\n        {\r\n            // write seabios debug output to console\r\n            var seabios_debug = \"\";\r\n\r\n            cpu.io.register_write(0x402, this, handle); // seabios\r\n            cpu.io.register_write(0x500, this, handle); // vgabios\r\n        }\r\n\r\n        function handle(out_byte)\r\n        {\r\n            if(out_byte === 10)\r\n            {\r\n                dbg_log(seabios_debug, LOG_BIOS);\r\n                seabios_debug = \"\";\r\n            }\r\n            else\r\n            {\r\n                seabios_debug += String.fromCharCode(out_byte);\r\n            }\r\n        }\r\n    };\r\n\r\n    debug.get_regs_short = get_regs_short;\r\n    debug.dump_regs = dump_regs_short;\r\n    debug.dump_instructions = dump_instructions;\r\n    debug.get_instructions = get_instructions;\r\n    debug.get_state = get_state;\r\n    debug.dump_state = dump_state;\r\n    debug.dump_stack = dump_stack;\r\n\r\n    debug.dump_page_directory = dump_page_directory;\r\n    debug.dump_gdt_ldt = dump_gdt_ldt;\r\n    debug.dump_idt = dump_idt;\r\n\r\n    debug.get_memory_dump = get_memory_dump;\r\n    debug.memory_hex_dump = memory_hex_dump;\r\n    debug.used_memory_dump = used_memory_dump;\r\n\r\n    debug.step = step;\r\n    debug.run_until = run_until;\r\n\r\n    /**\r\n     * @param {string=} msg\r\n     */\r\n    debug.unimpl = function(msg)\r\n    {\r\n        var s = \"Unimplemented\" + (msg ? \": \" + msg : \"\");\r\n\r\n        debug.show(s);\r\n\r\n        if(DEBUG)\r\n        {\r\n            console.trace();\r\n            return s;\r\n        }\r\n        else\r\n        {\r\n            debug.show(\"Execution stopped\");\r\n            return s;\r\n        }\r\n        //this.name = \"Unimplemented\";\r\n    };\r\n\r\n    function step()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        if(!cpu.running)\r\n        {\r\n            cpu.cycle();\r\n        }\r\n\r\n        dump_regs_short();\r\n        var now = Date.now();\r\n\r\n        cpu.running = false;\r\n        dump_instructions();\r\n    }\r\n\r\n    function run_until()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        cpu.running = false;\r\n        var a = parseInt(prompt(\"input hex\", \"\"), 16);\r\n        if(a) while(cpu.instruction_pointer != a) step();\r\n    }\r\n\r\n    // http://ref.x86asm.net/x86reference.xml\r\n    // for debugging purposes\r\n    var opcode_map = [\r\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"PUSH\", \"POP\",\r\n        \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"PUSH\", \"0F:\",\r\n        \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"PUSH\", \"POP\",\r\n        \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"PUSH\", \"POP\",\r\n        \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"ES\", \"DAA\",\r\n        \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"CS\", \"DAS\",\r\n        \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"SS\", \"AAA\",\r\n        \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"DS\", \"AAS\",\r\n        \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\",\r\n        \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\",\r\n        \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\",\r\n        \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\",\r\n        \"PUSHA\", \"POPA\", \"BOUND\", \"ARPL\", \"FS\", \"GS\", \"none\", \"none\",\r\n        \"PUSH\", \"IMUL\", \"PUSH\", \"IMUL\", \"INS\", \"INS\", \"OUTS\", \"OUTS\",\r\n        \"JO\", \"JNO\", \"JB\", \"JNB\", \"JZ\", \"JNZ\", \"JBE\", \"JNBE\",\r\n        \"JS\", \"JNS\", \"JP\", \"JNP\", \"JL\", \"JNL\", \"JLE\", \"JNLE\",\r\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"TEST\", \"TEST\", \"XCHG\", \"XCHG\",\r\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"LEA\", \"MOV\", \"POP\",\r\n        \"NOP\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\",\r\n        \"CBW\", \"CWD\", \"CALLF\", \"FWAIT\", \"PUSHF\", \"POPF\", \"SAHF\", \"LAHF\",\r\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOVS\", \"MOVS\", \"CMPS\", \"CMPS\",\r\n        \"TEST\", \"TEST\", \"STOS\", \"STOS\", \"LODS\", \"LODS\", \"SCAS\", \"SCAS\",\r\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\r\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\r\n        \"ROL\", \"ROL\", \"RETN\", \"RETN\", \"LES\", \"LDS\", \"MOV\", \"MOV\",\r\n        \"ENTER\", \"LEAVE\", \"RETF\", \"RETF\", \"INT\", \"INT\", \"INTO\", \"IRET\",\r\n        \"ROL\", \"ROL\", \"ROL\", \"ROL\", \"AAM\", \"AAD\", \"none\", \"XLAT\",\r\n        \"FADD\", \"FLD\", \"FIADD\", \"FILD\", \"FADD\", \"FLD\", \"FIADD\", \"FILD\",\r\n        \"LOOPNZ\", \"LOOPZ\", \"LOOP\", \"JCXZ\", \"IN\", \"IN\", \"OUT\", \"OUT\",\r\n        \"CALL\", \"JMP\", \"JMPF\", \"JMP\", \"IN\", \"IN\", \"OUT\", \"OUT\",\r\n        \"LOCK\", \"none\", \"REPNZ\", \"REPZ\", \"HLT\", \"CMC\", \"TEST\", \"TEST\",\r\n        \"CLC\", \"STC\", \"CLI\", \"STI\", \"CLD\", \"STD\", \"INC\", \"INC\"\r\n    ];\r\n\r\n    debug.logop = function(_ip, op)\r\n    {\r\n        if(!DEBUG || !debug.step_mode)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(debug.trace_all && debug.all_ops)\r\n        {\r\n            debug.all_ops.push(_ip, op);\r\n        }\r\n        else if(debug.ops)\r\n        {\r\n            debug.ops.add(_ip);\r\n            debug.ops.add(op);\r\n        }\r\n    };\r\n\r\n    function dump_stack(start, end)\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        var esp = cpu.reg32[reg_esp];\r\n        dbg_log(\"========= STACK ==========\");\r\n\r\n        if(end >= start || end === undefined)\r\n        {\r\n            start = 5;\r\n            end = -5;\r\n        }\r\n\r\n        for(var i = start; i > end; i--)\r\n        {\r\n            var line = \"    \";\r\n\r\n            if(!i) line = \"=>  \";\r\n\r\n            line += h(i, 2) + \" | \";\r\n\r\n            dbg_log(line + h(esp + 4 * i, 8) + \" | \" + h(cpu.read32s(esp + 4 * i) >>> 0));\r\n        }\r\n    }\r\n\r\n    function get_state(where)\r\n    {\r\n        var vm = (cpu.flags & flag_vm) ? 1 : 0;\r\n        var mode = cpu.protected_mode ? vm ? \"vm86\" : \"prot\" : \"real\";\r\n        var flags = cpu.get_eflags();\r\n        var iopl = cpu.getiopl();\r\n        var cpl = cpu.cpl;\r\n        var cs_eip = h(cpu.sreg[reg_cs], 4) + \":\" + h(cpu.get_real_eip() >>> 0, 8);\r\n        var ss_esp = h(cpu.sreg[reg_ss], 4) + \":\" + h(cpu.get_stack_reg() >>> 0, 8);\r\n        var op_size = cpu.is_32 ? \"32\" : \"16\";\r\n        var if_ = (cpu.flags & flag_interrupt) ? 1 : 0;\r\n\r\n        var flag_names = {\r\n            [flag_carry]: \"c\",\r\n            [flag_parity]: \"p\",\r\n            [flag_adjust]: \"a\",\r\n            [flag_zero]: \"z\",\r\n            [flag_sign]: \"s\",\r\n            [flag_trap]: \"t\",\r\n            [flag_interrupt]: \"i\",\r\n            [flag_direction]: \"d\",\r\n            [flag_overflow]: \"o\",\r\n        };\r\n        var flag_string = \"\";\r\n\r\n        for(var i = 0; i < 16; i++)\r\n        {\r\n            if(flag_names[1 << i])\r\n            {\r\n                if(flags & 1 << i)\r\n                {\r\n                    flag_string += flag_names[1 << i];\r\n                }\r\n                else\r\n                {\r\n                    flag_string += \" \";\r\n                }\r\n            }\r\n        }\r\n\r\n        return (\"mode=\" + mode + \"/\" + op_size + \" paging=\" + (+cpu.paging) +\r\n                \" iopl=\" + iopl + \" cpl=\" + cpl + \" if=\" + if_ + \" cs:eip=\" + cs_eip +\r\n                \" cs_off=\" + h(cpu.get_seg(reg_cs) >>> 0, 8) +\r\n                \" flgs=\" + h(cpu.get_eflags() >>> 0, 6) + \" (\" + flag_string + \")\" +\r\n                \" ss:esp=\" + ss_esp +\r\n                \" ssize=\" + (+cpu.stack_size_32) +\r\n                (where ? \" in \" + where : \"\"));\r\n    }\r\n\r\n    function dump_state(where)\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        dbg_log(get_state(where), LOG_CPU);\r\n    }\r\n\r\n    function get_regs_short()\r\n    {\r\n        var\r\n            r32 = { \"eax\": reg_eax, \"ecx\": reg_ecx, \"edx\": reg_edx, \"ebx\": reg_ebx,\r\n                    \"esp\": reg_esp, \"ebp\": reg_ebp, \"esi\": reg_esi, \"edi\": reg_edi },\r\n            r32_names = [\"eax\", \"ecx\", \"edx\", \"ebx\", \"esp\", \"ebp\", \"esi\", \"edi\"],\r\n            s = { \"cs\": reg_cs, \"ds\": reg_ds, \"es\": reg_es, \"fs\": reg_fs, \"gs\": reg_gs, \"ss\": reg_ss },\r\n            line1 = \"\",\r\n            line2 = \"\";\r\n\r\n\r\n\r\n        for(var i = 0; i < 4; i++)\r\n        {\r\n            line1 += r32_names[i] + \"=\"  + h(cpu.reg32[r32[r32_names[i]]], 8) + \" \";\r\n            line2 += r32_names[i+4] + \"=\"  + h(cpu.reg32[r32[r32_names[i+4]]], 8) + \" \";\r\n        }\r\n\r\n        //line1 += \" eip=\" + h(cpu.get_real_eip() >>> 0, 8);\r\n        //line2 += \" flg=\" + h(cpu.get_eflags(), 8);\r\n\r\n        line1 += \"  ds=\" + h(cpu.sreg[reg_ds], 4) + \" es=\" + h(cpu.sreg[reg_es], 4) + \" fs=\" + h(cpu.sreg[reg_fs], 4);\r\n        line2 += \"  gs=\" + h(cpu.sreg[reg_gs], 4) + \" cs=\" + h(cpu.sreg[reg_cs], 4) + \" ss=\" + h(cpu.sreg[reg_ss], 4);\r\n\r\n        return [line1, line2];\r\n    }\r\n\r\n    function dump_regs_short()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        var lines = get_regs_short();\r\n\r\n        dbg_log(lines[0], LOG_CPU);\r\n        dbg_log(lines[1], LOG_CPU);\r\n    }\r\n\r\n    function get_instructions()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        debug.step_mode = true;\r\n\r\n        function add(ip, op)\r\n        {\r\n            out += h(ip, 8)  + \":        \" +\r\n                v86util.pads(opcode_map[op] || \"unkown\", 20) + h(op, 2) + \"\\n\";\r\n        }\r\n\r\n        var opcodes;\r\n        var out = \"\";\r\n\r\n        if(debug.trace_all && debug.all_ops)\r\n        {\r\n            opcodes = debug.all_ops;\r\n        }\r\n        else if(debug.ops)\r\n        {\r\n            opcodes = debug.ops.toArray();\r\n        }\r\n\r\n        if(!opcodes)\r\n        {\r\n            return \"\";\r\n        }\r\n\r\n        for(var i = 0; i < opcodes.length; i += 2)\r\n        {\r\n            add(opcodes[i], opcodes[i + 1]);\r\n        }\r\n\r\n        debug.ops.clear();\r\n        debug.all_ops = [];\r\n\r\n        return out;\r\n    }\r\n\r\n    function dump_instructions()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        debug.show(get_instructions());\r\n    }\r\n\r\n    function dump_gdt_ldt()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        dbg_log(\"gdt: (len = \" + h(cpu.gdtr_size) + \")\");\r\n        dump_table(cpu.translate_address_system_read(cpu.gdtr_offset), cpu.gdtr_size);\r\n\r\n        dbg_log(\"\\nldt: (len = \" + h(cpu.segment_limits[reg_ldtr]) + \")\");\r\n        dump_table(cpu.translate_address_system_read(cpu.segment_offsets[reg_ldtr]), cpu.segment_limits[reg_ldtr]);\r\n\r\n        function dump_table(addr, size)\r\n        {\r\n            for(var i = 0; i < size; i += 8, addr += 8)\r\n            {\r\n                var base = cpu.read16(addr + 2) |\r\n                        cpu.read8(addr + 4) << 16 |\r\n                        cpu.read8(addr + 7) << 24,\r\n\r\n                    limit = cpu.read16(addr) | (cpu.read8(addr + 6) & 0xF) << 16,\r\n                    access = cpu.read8(addr + 5),\r\n                    flags = cpu.read8(addr + 6) >> 4,\r\n                    flags_str = \"\",\r\n                    dpl = access >> 5 & 3;\r\n\r\n                if(!(access & 128))\r\n                {\r\n                    // present bit not set\r\n                    //continue;\r\n                    flags_str += \"NP \";\r\n                }\r\n                else\r\n                {\r\n                    flags_str += \" P \";\r\n                }\r\n\r\n                if(access & 16)\r\n                {\r\n                    if(flags & 4)\r\n                    {\r\n                        flags_str += \"32b \";\r\n                    }\r\n                    else\r\n                    {\r\n                        flags_str += \"16b \";\r\n                    }\r\n\r\n                    if(access & 8)\r\n                    {\r\n                        // executable\r\n                        flags_str += \"X \";\r\n\r\n                        if(access & 4)\r\n                        {\r\n                            flags_str += \"C \";\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        // data\r\n                        flags_str += \"R \";\r\n                    }\r\n\r\n                    flags_str += \"RW \";\r\n                }\r\n                else\r\n                {\r\n                    // system\r\n                    flags_str += \"sys: \" + h(access & 15);\r\n                }\r\n\r\n                if(flags & 8)\r\n                {\r\n                    limit = limit << 12 | 0xFFF;\r\n                }\r\n\r\n                dbg_log(h(i & ~7, 4) + \" \" + h(base >>> 0, 8) + \" (\" + h(limit >>> 0, 8) + \" bytes) \" +\r\n                        flags_str + \";  dpl = \" + dpl + \", a = \" + access.toString(2) +\r\n                        \", f = \" + flags.toString(2));\r\n            }\r\n        }\r\n    }\r\n\r\n    function dump_idt()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        for(var i = 0; i < cpu.idtr_size; i += 8)\r\n        {\r\n            var addr = cpu.translate_address_system_read(cpu.idtr_offset + i),\r\n                base = cpu.read16(addr) | cpu.read16(addr + 6) << 16,\r\n                selector = cpu.read16(addr + 2),\r\n                type = cpu.read8(addr + 5),\r\n                line,\r\n                dpl = type >> 5 & 3;\r\n\r\n            if((type & 31) === 5)\r\n            {\r\n                line = \"task gate \";\r\n            }\r\n            else if((type & 31) === 14)\r\n            {\r\n                line = \"intr gate \";\r\n            }\r\n            else if((type & 31) === 15)\r\n            {\r\n                line = \"trap gate \";\r\n            }\r\n            else\r\n            {\r\n                line = \"invalid   \";\r\n            }\r\n\r\n\r\n            if(type & 128)\r\n            {\r\n                line += \" P\";\r\n            }\r\n            else\r\n            {\r\n                // present bit not set\r\n                //continue;\r\n                line += \"NP\";\r\n            }\r\n\r\n\r\n            dbg_log(h(i >> 3, 4) + \" \" + h(base >>> 0, 8) + \", \" +\r\n                    h(selector, 4) + \"; \" + line + \";  dpl = \" + dpl + \", t = \" + type.toString(2));\r\n        }\r\n    }\r\n\r\n    function load_page_entry(dword_entry, is_directory)\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        if(!(dword_entry & 1))\r\n        {\r\n            // present bit not set\r\n            return false;\r\n        }\r\n\r\n        var size = (dword_entry & 128) === 128,\r\n            address;\r\n\r\n        if(size && !is_directory)\r\n        {\r\n            address = dword_entry & 0xFFC00000;\r\n        }\r\n        else\r\n        {\r\n            address = dword_entry & 0xFFFFF000;\r\n        }\r\n\r\n        return {\r\n            size: size,\r\n            global: (dword_entry & 256) === 256,\r\n            accessed: (dword_entry & 0x20) === 0x20,\r\n            dirty: (dword_entry & 0x40) === 0x40,\r\n            cache_disable : (dword_entry & 16) === 16,\r\n            user : (dword_entry & 4) === 4,\r\n            read_write : (dword_entry & 2) === 2,\r\n            address : address >>> 0\r\n        };\r\n    }\r\n\r\n    function dump_page_directory()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        for(var i = 0; i < 1024; i++)\r\n        {\r\n            var addr = cpu.cr[3] + 4 * i;\r\n            var dword = cpu.read32s(addr),\r\n                entry = load_page_entry(dword, true);\r\n\r\n            if(!entry)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            var flags = \"\";\r\n\r\n            flags += entry.size ? \"S \" : \"  \";\r\n            flags += entry.accessed ? \"A \" : \"  \";\r\n            flags += entry.cache_disable ? \"Cd \" : \"  \";\r\n            flags += entry.user ? \"U \" : \"  \";\r\n            flags += entry.read_write ? \"Rw \" : \"   \";\r\n\r\n            if(entry.size)\r\n            {\r\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" -> \" + h(entry.address >>> 0, 8) + \" | \" + flags);\r\n                continue;\r\n            }\r\n            else\r\n            {\r\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" | \" + flags);\r\n            }\r\n\r\n            for(var j = 0; j < 1024; j++)\r\n            {\r\n                var sub_addr = entry.address + 4 * j;\r\n                dword = cpu.read32s(sub_addr);\r\n\r\n                var subentry = load_page_entry(dword, false);\r\n\r\n                if(subentry)\r\n                {\r\n                    flags = \"\";\r\n\r\n                    flags += subentry.cache_disable ? \"Cd \" : \"   \";\r\n                    flags += subentry.user ? \"U \" : \"  \";\r\n                    flags += subentry.read_write ? \"Rw \" : \"   \";\r\n                    flags += subentry.global ? \"G \" : \"  \";\r\n                    flags += subentry.accessed ? \"A \" : \"  \";\r\n                    flags += subentry.dirty ? \"Di \" : \"   \";\r\n\r\n                    dbg_log(\"# \" + h((i << 22 | j << 12) >>> 0, 8) + \" -> \" +\r\n                            h(subentry.address, 8) + \" | \" + flags + \"        (at \" + h(sub_addr, 8) + \")\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    function get_memory_dump(start, count)\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        if(start === undefined)\r\n        {\r\n            start = 0;\r\n            count = cpu.memory_size;\r\n        }\r\n        else if(count === undefined)\r\n        {\r\n            count = start;\r\n            start = 0;\r\n        }\r\n\r\n        return cpu.mem8.slice(start, start + count).buffer;\r\n    }\r\n\r\n\r\n    function memory_hex_dump(addr, length)\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        length = length || 4 * 0x10;\r\n        var line, byt;\r\n\r\n        for(var i = 0; i < length >> 4; i++)\r\n        {\r\n            line = h(addr + (i << 4), 5) + \"   \";\r\n\r\n            for(var j = 0; j < 0x10; j++)\r\n            {\r\n                byt = cpu.read8(addr + (i << 4) + j);\r\n                line += h(byt, 2) + \" \";\r\n            }\r\n\r\n            line += \"  \";\r\n\r\n            for(j = 0; j < 0x10; j++)\r\n            {\r\n                byt = cpu.read8(addr + (i << 4) + j);\r\n                line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\r\n            }\r\n\r\n            dbg_log(line);\r\n        }\r\n    }\r\n\r\n    function used_memory_dump()\r\n    {\r\n        if(!DEBUG) return;\r\n\r\n        var width = 0x80,\r\n            height = 0x10,\r\n            block_size = cpu.memory_size / width / height | 0,\r\n            row;\r\n\r\n        for(var i = 0; i < height; i++)\r\n        {\r\n            row = h(i * width * block_size, 8) + \" | \";\r\n\r\n            for(var j = 0; j < width; j++)\r\n            {\r\n                var used = cpu.mem32s[(i * width + j) * block_size] > 0;\r\n\r\n                row += used ? \"X\" : \" \";\r\n            }\r\n\r\n            dbg_log(row);\r\n        }\r\n    }\r\n\r\n\r\n    debug.debug_interrupt = function(interrupt_nr)\r\n    {\r\n        //if(interrupt_nr === 0x20)\r\n        //{\r\n        //    //var vxd_device = cpu.safe_read16(cpu.instruction_pointer + 2);\r\n        //    //var vxd_sub = cpu.safe_read16(cpu.instruction_pointer + 0);\r\n        //    //var service = \"\";\r\n        //    //if(vxd_device === 1)\r\n        //    //{\r\n        //    //    service = vxd_table1[vxd_sub];\r\n        //    //}\r\n        //    //dbg_log(\"vxd: \" + h(vxd_device, 4) + \" \" + h(vxd_sub, 4) + \" \" + service);\r\n        //}\r\n\r\n        //if(interrupt_nr >= 0x21 && interrupt_nr < 0x30)\r\n        //{\r\n        //    dbg_log(\"dos: \" + h(interrupt_nr, 2) + \" ah=\" + h(this.reg8[reg_ah], 2) + \" ax=\" + h(this.reg16[reg_ax], 4));\r\n        //}\r\n\r\n        //if(interrupt_nr === 0x13 && (this.reg8[reg_ah] | 1) === 0x43)\r\n        //{\r\n        //    this.debug.memory_hex_dump(this.get_seg(reg_ds) + this.reg16[reg_si], 0x18);\r\n        //}\r\n\r\n        //if(interrupt_nr == 0x10)\r\n        //{\r\n        //    dbg_log(\"int10 ax=\" + h(this.reg16[reg_ax], 4) + \" '\" + String.fromCharCode(this.reg8[reg_al]) + \"'\");\r\n        //    this.debug.dump_regs_short();\r\n        //    if(this.reg8[reg_ah] == 0xe) vga.tt_write(this.reg8[reg_al]);\r\n        //}\r\n\r\n        //if(interrupt_nr === 0x13)\r\n        //{\r\n        //    this.debug.dump_regs_short();\r\n        //}\r\n\r\n        //if(interrupt_nr === 6)\r\n        //{\r\n        //    this.instruction_pointer += 2;\r\n        //    dbg_log(\"BUG()\", LOG_CPU);\r\n        //    dbg_log(\"line=\" + this.read_imm16() + \" \" +\r\n        //            \"file=\" + this.read_string(this.translate_address_read(this.read_imm32s())), LOG_CPU);\r\n        //    this.instruction_pointer -= 8;\r\n        //    this.debug.dump_regs_short();\r\n        //}\r\n\r\n        //if(interrupt_nr === 0x80)\r\n        //{\r\n        //    dbg_log(\"linux syscall\");\r\n        //    this.debug.dump_regs_short();\r\n        //}\r\n\r\n        //if(interrupt_nr === 0x40)\r\n        //{\r\n        //    dbg_log(\"kolibri syscall\");\r\n        //    this.debug.dump_regs_short();\r\n        //}\r\n    };\r\n};\r\n","\"use strict\";\r\n\r\n// A minimal elf parser for loading 32 bit, x86, little endian, executable elf files\r\n\r\nconst ELF_MAGIC = 0x464C457F;\r\n\r\nlet types = DataView.prototype;\r\nlet U8 = { size: 1, get: types.getUint8, set: types.setUint8, };\r\nlet U16 = { size: 2, get: types.getUint16, set: types.setUint16, };\r\nlet U32 = { size: 4, get: types.getUint32, set: types.setUint32, };\r\nlet pad = function(size)\r\n{\r\n    return {\r\n        size,\r\n        get: offset => -1,\r\n    };\r\n};\r\n\r\nlet Header = create_struct([\r\n    { magic: U32, },\r\n\r\n    { class: U8, },\r\n    { data: U8, },\r\n    { version0: U8, },\r\n    { osabi: U8, },\r\n\r\n    { abiversion: U8, },\r\n    { pad0: pad(7) },\r\n\r\n    { type: U16, },\r\n    { machine: U16, },\r\n\r\n    { version1: U32, },\r\n    { entry: U32, },\r\n    { phoff: U32, },\r\n    { shoff: U32, },\r\n    { flags: U32, },\r\n\r\n    { ehsize: U16, },\r\n    { phentsize: U16, },\r\n    { phnum: U16, },\r\n    { shentsize: U16, },\r\n    { shnum: U16, },\r\n    { shstrndx: U16, },\r\n]);\r\nconsole.assert(Header.reduce((a, entry) => a + entry.size, 0) === 52);\r\n\r\nlet ProgramHeader = create_struct([\r\n    { type: U32, },\r\n    { offset: U32, },\r\n    { vaddr: U32, },\r\n    { paddr: U32, },\r\n    { filesz: U32, },\r\n    { memsz: U32, },\r\n    { flags: U32, },\r\n    { align: U32, },\r\n]);\r\nconsole.assert(ProgramHeader.reduce((a, entry) => a + entry.size, 0) === 32);\r\n\r\nlet SectionHeader = create_struct([\r\n    { name: U32, },\r\n    { type: U32, },\r\n    { flags: U32, },\r\n    { addr: U32, },\r\n    { offset: U32, },\r\n    { size: U32, },\r\n    { link: U32, },\r\n    { info: U32, },\r\n    { addralign: U32, },\r\n    { entsize: U32, },\r\n]);\r\nconsole.assert(SectionHeader.reduce((a, entry) => a + entry.size, 0) === 40);\r\n\r\n\r\n// From [{ name: type }, ...] to [{ name, type, size, get, set }, ...]\r\nfunction create_struct(struct)\r\n{\r\n    return struct.map(function(entry)\r\n    {\r\n        let keys = Object.keys(entry);\r\n        console.assert(keys.length === 1);\r\n        let name = keys[0];\r\n        let type = entry[name];\r\n\r\n        console.assert(type.size > 0);\r\n\r\n        return {\r\n            name,\r\n            type,\r\n            size: type.size,\r\n            get: type.get,\r\n            set: type.set,\r\n        };\r\n    });\r\n}\r\n\r\n/** @param {ArrayBuffer} buffer */\r\nfunction read_elf(buffer)\r\n{\r\n    let view = new DataView(buffer);\r\n\r\n    let [header, offset] = read_struct(view, Header);\r\n    console.assert(offset === 52);\r\n\r\n    if(DEBUG)\r\n    {\r\n        for(let key in header)\r\n        {\r\n            console.log(key + \": 0x\" + header[key].toString(16));\r\n        }\r\n        console.log(header);\r\n    }\r\n\r\n    console.assert(header.magic === ELF_MAGIC, \"Bad magic\");\r\n    console.assert(header.class === 1, \"Unimplemented: 64 bit elf\");\r\n    console.assert(header.data === 1, \"Unimplemented: big endian\");\r\n    console.assert(header.version0 === 1, \"Bad version0\");\r\n\r\n    // 1, 2, 3, 4 specify whether the object is relocatable, executable,\r\n    // shared, or core, respectively.\r\n    console.assert(header.type === 2, \"Unimplemented type\");\r\n\r\n    console.assert(header.version1 === 1, \"Bad version1\");\r\n\r\n    // these are different in 64 bit\r\n    console.assert(header.ehsize === 52, \"Bad header size\");\r\n    console.assert(header.phentsize === 32, \"Bad program header size\");\r\n    console.assert(header.shentsize === 40, \"Bad section header size\");\r\n\r\n    let [program_headers, ph_offset] = read_structs(\r\n        view_slice(view, header.phoff, header.phentsize * header.phnum),\r\n        ProgramHeader,\r\n        header.phnum);\r\n\r\n    let [sections_headers, sh_offset] = read_structs(\r\n        view_slice(view, header.shoff, header.shentsize * header.shnum),\r\n        SectionHeader,\r\n        header.shnum);\r\n\r\n    if(DEBUG)\r\n    {\r\n        console.log(\"%d program headers:\", program_headers.length);\r\n        for(let program of program_headers)\r\n        {\r\n            console.log(\r\n                \"type=%s offset=%s vaddr=%s paddr=%s \" +\r\n                \"filesz=%s memsz=%s flags=%s align=%s\",\r\n                program.type.toString(16),\r\n                program.offset.toString(16),\r\n                program.vaddr.toString(16),\r\n                program.paddr.toString(16),\r\n                program.filesz.toString(16),\r\n                program.memsz.toString(16),\r\n                program.flags.toString(16),\r\n                program.align.toString(16)\r\n            );\r\n        }\r\n\r\n        console.log(\"%d program headers:\", sections_headers.length);\r\n        for(let section of sections_headers)\r\n        {\r\n            console.log(\r\n                \"name=%s type=%s flags=%s addr=%s offset=%s \" +\r\n                \"size=%s link=%s info=%s addralign=%s entsize=%s\",\r\n                section.name.toString(16),\r\n                section.type.toString(16),\r\n                section.flags.toString(16),\r\n                section.addr.toString(16),\r\n                section.offset.toString(16),\r\n                section.size.toString(16),\r\n                section.link.toString(16),\r\n                section.info.toString(16),\r\n                section.addralign.toString(16),\r\n                section.entsize.toString(16)\r\n            );\r\n        }\r\n    }\r\n\r\n    return {\r\n        header,\r\n        program_headers,\r\n        sections_headers,\r\n    };\r\n}\r\n\r\nfunction read_struct(view, Struct)\r\n{\r\n    let result = {};\r\n    let offset = 0;\r\n    const LITTLE_ENDIAN = true; // big endian not supported yet\r\n\r\n    for(let entry of Struct)\r\n    {\r\n        let value = entry.get.call(view, offset, LITTLE_ENDIAN);\r\n        console.assert(result[entry.name] === undefined);\r\n        result[entry.name] = value;\r\n        offset += entry.size;\r\n    }\r\n\r\n    return [result, offset];\r\n}\r\n\r\nfunction read_structs(view, Struct, count)\r\n{\r\n    let result = [];\r\n    let offset = 0;\r\n\r\n    for(var i = 0; i < count; i++)\r\n    {\r\n        let [s, size] = read_struct(view_slice(view, offset), Struct);\r\n        result.push(s);\r\n        offset += size;\r\n    }\r\n\r\n    return [result, offset];\r\n}\r\n\r\n/** @param {number=} length */\r\nfunction view_slice(view, offset, length)\r\n{\r\n    return new DataView(view.buffer, view.byteOffset + offset, length);\r\n}\r\n","// -------------------------------------------------\r\n// ------------------ Marshall ---------------------\r\n// -------------------------------------------------\r\n// helper functions for virtio and 9p.\r\n\r\nvar marshall = {};\r\n\r\n\r\n// Inserts data from an array to a byte aligned struct in memory\r\nmarshall.Marshall = function(typelist, input, struct, offset) {\r\n    var item;\r\n    var size = 0;\r\n    for (var i=0; i < typelist.length; i++) {\r\n        item = input[i];\r\n        switch (typelist[i]) {\r\n            case \"w\":\r\n                struct[offset++] = item & 0xFF;\r\n                struct[offset++] = (item >> 8) & 0xFF;\r\n                struct[offset++] = (item >> 16) & 0xFF;\r\n                struct[offset++] = (item >> 24) & 0xFF;\r\n                size += 4;\r\n                break;\r\n            case \"d\": // double word\r\n                struct[offset++] = item & 0xFF;\r\n                struct[offset++] = (item >> 8) & 0xFF;\r\n                struct[offset++] = (item >> 16) & 0xFF;\r\n                struct[offset++] = (item >> 24) & 0xFF;\r\n                struct[offset++] = 0x0;\r\n                struct[offset++] = 0x0;\r\n                struct[offset++] = 0x0;\r\n                struct[offset++] = 0x0;\r\n                size += 8;\r\n                break;\r\n            case \"h\":\r\n                struct[offset++] = item & 0xFF;\r\n                struct[offset++] = item >> 8;\r\n                size += 2;\r\n                break;\r\n            case \"b\":\r\n                struct[offset++] = item;\r\n                size += 1;\r\n                break;\r\n            case \"s\":\r\n                var lengthoffset = offset;\r\n                var length = 0;\r\n                struct[offset++] = 0; // set the length later\r\n                struct[offset++] = 0;\r\n                size += 2;\r\n                for (var j in item) {\r\n                    var utf8 = UnicodeToUTF8Stream(item.charCodeAt(j));\r\n                    utf8.forEach( function(c) {\r\n                        struct[offset++] = c;\r\n                        size += 1;\r\n                        length++;\r\n                    });\r\n                }\r\n                struct[lengthoffset+0] = length & 0xFF;\r\n                struct[lengthoffset+1] = (length >> 8) & 0xFF;\r\n                break;\r\n            case \"Q\":\r\n                marshall.Marshall([\"b\", \"w\", \"d\"], [item.type, item.version, item.path], struct, offset)\r\n                offset += 13;\r\n                size += 13;\r\n                break;\r\n            default:\r\n                message.Debug(\"Marshall: Unknown type=\" + typelist[i]);\r\n                break;\r\n        }\r\n    }\r\n    return size;\r\n};\r\n\r\n\r\n// Extracts data from a byte aligned struct in memory to an array\r\nmarshall.Unmarshall = function(typelist, struct, offset) {\r\n    var output = [];\r\n    for (var i=0; i < typelist.length; i++) {\r\n        switch (typelist[i]) {\r\n            case \"w\":\r\n                var val = struct[offset++];\r\n                val += struct[offset++] << 8;\r\n                val += struct[offset++] << 16;\r\n                val += (struct[offset++] << 24) >>> 0;\r\n                output.push(val);\r\n                break;\r\n            case \"d\":\r\n                var val = struct[offset++];\r\n                val += struct[offset++] << 8;\r\n                val += struct[offset++] << 16;\r\n                val += (struct[offset++] << 24) >>> 0;\r\n                offset += 4;\r\n                output.push(val);\r\n                break;\r\n            case \"h\":\r\n                var val = struct[offset++];\r\n                output.push(val + (struct[offset++] << 8));\r\n                break;\r\n            case \"b\":\r\n                output.push(struct[offset++]);\r\n                break;\r\n            case \"s\":\r\n                var len = struct[offset++];\r\n                len += struct[offset++] << 8;\r\n                var str = '';\r\n                var utf8converter = new UTF8StreamToUnicode();\r\n                for (var j=0; j < len; j++) {\r\n                    var c = utf8converter.Put(struct[offset++])\r\n                    if (c == -1) continue;\r\n                    str += String.fromCharCode(c);\r\n                }\r\n                output.push(str);\r\n                break;\r\n            default:\r\n                message.Debug(\"Error in Unmarshall: Unknown type=\" + typelist[i]);\r\n                break;\r\n        }\r\n    }\r\n    return output;\r\n};\r\n\r\n\r\n// Extracts data from a byte aligned struct in memory to an array\r\nmarshall.Unmarshall2 = function(typelist, GetByte) {\r\n    var output = [];\r\n    for (var i=0; i < typelist.length; i++) {\r\n        switch (typelist[i]) {\r\n            case \"w\":\r\n                var val = GetByte();\r\n                val += GetByte() << 8;\r\n                val += GetByte() << 16;\r\n                val += (GetByte() << 24) >>> 0;\r\n                output.push(val);\r\n                break;\r\n            case \"d\":\r\n                var val = GetByte();\r\n                val += GetByte() << 8;\r\n                val += GetByte() << 16;\r\n                val += (GetByte() << 24) >>> 0;\r\n                GetByte();GetByte();GetByte();GetByte();\r\n                output.push(val);\r\n                break;\r\n            case \"h\":\r\n                var val = GetByte();\r\n                output.push(val + (GetByte() << 8));\r\n                break;\r\n            case \"b\":\r\n                output.push(GetByte());\r\n                break;\r\n            case \"s\":\r\n                var len = GetByte();\r\n                len += GetByte() << 8;\r\n                var str = '';\r\n                var utf8converter = new UTF8StreamToUnicode();\r\n                for (var j=0; j < len; j++) {\r\n                    var c = utf8converter.Put(GetByte())\r\n                    if (c == -1) continue;\r\n                    str += String.fromCharCode(c);\r\n                }\r\n                output.push(str);\r\n                break;\r\n            default:\r\n                message.Debug(\"Error in Unmarshall2: Unknown type=\" + typelist[i]);\r\n                break;\r\n        }\r\n    }\r\n    return output;\r\n};\r\n\r\n","// -------------------------------------------------\r\n// ------------------ UTF8 Helpers -----------------\r\n// -------------------------------------------------\r\n\r\n\"use strict\";\r\n\r\nvar UTF8 = {}\r\n\r\n/** @constructor */\r\nfunction UTF8StreamToUnicode() {\r\n\r\n    this.stream = new Uint8Array(5);\r\n    this.ofs = 0;\r\n\r\n    this.Put = function(key) {\r\n        this.stream[this.ofs] = key;\r\n        this.ofs++;\r\n        switch(this.ofs) {\r\n            case 1:\r\n                if (this.stream[0] < 128) {\r\n                    this.ofs = 0;\r\n                    return this.stream[0];\r\n                }\r\n                break;\r\n\r\n            case 2:\r\n                if ((this.stream[0]&0xE0) == 0xC0)\r\n                if ((this.stream[1]&0xC0) == 0x80) {\r\n                    this.ofs = 0;\r\n                    return ((this.stream[0]&0x1F)<<6) | (this.stream[1]&0x3F);\r\n                }\r\n                break;\r\n\r\n            case 3:\r\n                break;\r\n\r\n            case 4:\r\n                break;\r\n\r\n            default:\r\n                return -1;\r\n                //this.ofs = 0;\r\n                //break;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\nfunction UnicodeToUTF8Stream(key)\r\n{\r\n        if (key < 0x80)  return [key];\r\n        if (key < 0x800) return [0xC0|((key>>6)&0x1F), 0x80|(key&0x3F)];\r\n}\r\n\r\nUTF8.UTF8Length = function(s)\r\n{\r\n    var length = 0;\r\n    for(var i=0; i<s.length; i++) {\r\n        var c = s.charCodeAt(i);\r\n        length += c<128?1:2;\r\n    }\r\n    return length;\r\n}\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar SHIFT_SCAN_CODE = 0x2A;\r\n\r\n/** @const */\r\nvar SCAN_CODE_RELEASE = 0x80;\r\n\r\n/**\r\n * @constructor\r\n *\r\n * @param {BusConnector} bus\r\n */\r\nfunction KeyboardAdapter(bus)\r\n{\r\n    var\r\n        /**\r\n         * @type {!Object.<boolean>}\r\n         */\r\n        keys_pressed = {},\r\n\r\n        keyboard = this;\r\n\r\n    /**\r\n     * Set by emulator\r\n     * @type {boolean}\r\n     */\r\n    this.emu_enabled = true;\r\n\r\n    /**\r\n     * Format:\r\n     * Javascript event.keyCode -> make code\r\n     * @const\r\n     */\r\n    var charmap = new Uint16Array([\r\n        0, 0, 0, 0,  0, 0, 0, 0,\r\n        // 0x08: backspace, tab, enter\r\n        0x0E, 0x0F, 0, 0,  0, 0x1C, 0, 0,\r\n\r\n        // 0x10: shift, ctrl, alt, pause, caps lock\r\n        0x2A, 0x1D, 0x38, 0,  0x3A, 0, 0, 0,\r\n\r\n        // 0x18: escape\r\n        0, 0, 0, 0x01,  0, 0, 0, 0,\r\n\r\n        // 0x20: spacebar, page down/up, end, home, arrow keys, ins, del\r\n        0x39, 0xE049, 0xE051, 0xE04F,  0xE047, 0xE04B, 0xE048, 0xE04D,\r\n        0x50, 0, 0, 0,  0, 0x52, 0x53, 0,\r\n\r\n        // 0x30: numbers\r\n        0x0B, 0x02, 0x03, 0x04,  0x05, 0x06, 0x07, 0x08,\r\n        0x09, 0x0A,\r\n\r\n        // 0x3B: ;= (firefox only)\r\n        0, 0x27, 0, 0x0D, 0, 0,\r\n\r\n        // 0x40\r\n        0,\r\n\r\n        // 0x41: letters\r\n        0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32,\r\n        0x31, 0x18, 0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C,\r\n\r\n        // 0x5B: Left Win, Right Win, Menu\r\n        0xE05B, 0xE05C, 0xE05D, 0, 0,\r\n\r\n        // 0x60: keypad\r\n        0x52, 0x4F, 0x50, 0x51, 0x4B, 0x4C, 0x4D, 0x47,\r\n        0x48, 0x49, 0, 0, 0, 0, 0, 0,\r\n\r\n        // 0x70: F1 to F12\r\n        0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x57, 0x58,\r\n\r\n        0, 0, 0, 0,\r\n\r\n        // 0x80\r\n        0, 0, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0, 0,  0, 0, 0, 0,\r\n\r\n        // 0x90: Numlock\r\n        0x45, 0, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0, 0,     0, 0, 0, 0,\r\n\r\n        // 0xA0: - (firefox only)\r\n        0, 0, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0, 0,  0, 0x0C, 0, 0,\r\n\r\n        // 0xB0\r\n        // ,\r\n        0, 0, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0x27, 0x0D,  0x33, 0x0C, 0x34, 0x35,\r\n\r\n        // 0xC0\r\n        // `\r\n        0x29, 0, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0, 0,     0, 0, 0, 0,\r\n\r\n        // 0xD0\r\n        // [']\\\r\n        0, 0, 0, 0,     0, 0, 0, 0,\r\n        0, 0, 0, 0x1A,  0x2B, 0x1B, 0x28, 0,\r\n\r\n        // 0xE0\r\n        // Apple key on Gecko, Right alt\r\n        0xE05B, 0xE038, 0, 0,  0, 0, 0, 0,\r\n        0, 0, 0, 0,            0, 0, 0, 0,\r\n    ]);\r\n\r\n\r\n    /**\r\n     * ascii -> javascript event code (US layout)\r\n     * @const\r\n     */\r\n    var asciimap = {10: 13, 32: 32, 39: 222, 44: 188, 45: 189, 46: 190, 47: 191, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 59: 186, 61: 187, 91: 219, 92: 220, 93: 221, 96: 192, 97: 65, 98: 66, 99: 67, 100: 68, 101: 69, 102: 70, 103: 71, 104: 72, 105: 73, 106: 74, 107: 75, 108: 76, 109: 77, 110: 78, 111: 79, 112: 80, 113: 81, 114: 82, 115: 83, 116: 84, 117: 85, 118: 86, 119: 87, 120: 88, 121: 89, 122: 90};\r\n    var asciimap_shift = {33: 49, 34: 222, 35: 51, 36: 52, 37: 53, 38: 55, 40: 57, 41: 48, 42: 56, 43: 187, 58: 186, 60: 188, 62: 190, 63: 191, 64: 50, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 94: 54, 95: 189, 123: 219, 124: 220, 125: 221, 126: 192};\r\n\r\n    // From:\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values_on_Linux_%28X11%29_%28When_scancode_is_available%29\r\n    // http://stanislavs.org/helppc/make_codes.html\r\n    // http://www.computer-engineering.org/ps2keyboard/scancodes1.html\r\n    //\r\n    // Mapping from event.code to scancode\r\n    var codemap = {\r\n        \"Escape\": 0x0001,\r\n        \"Digit1\": 0x0002,\r\n        \"Digit2\": 0x0003,\r\n        \"Digit3\": 0x0004,\r\n        \"Digit4\": 0x0005,\r\n        \"Digit5\": 0x0006,\r\n        \"Digit6\": 0x0007,\r\n        \"Digit7\": 0x0008,\r\n        \"Digit8\": 0x0009,\r\n        \"Digit9\": 0x000a,\r\n        \"Digit0\": 0x000b,\r\n        \"Minus\": 0x000c,\r\n        \"Equal\": 0x000d,\r\n        \"Backspace\": 0x000e,\r\n        \"Tab\": 0x000f,\r\n        \"KeyQ\": 0x0010,\r\n        \"KeyW\": 0x0011,\r\n        \"KeyE\": 0x0012,\r\n        \"KeyR\": 0x0013,\r\n        \"KeyT\": 0x0014,\r\n        \"KeyY\": 0x0015,\r\n        \"KeyU\": 0x0016,\r\n        \"KeyI\": 0x0017,\r\n        \"KeyO\": 0x0018,\r\n        \"KeyP\": 0x0019,\r\n        \"BracketLeft\": 0x001a,\r\n        \"BracketRight\": 0x001b,\r\n        \"Enter\": 0x001c,\r\n        \"ControlLeft\": 0x001d,\r\n        \"KeyA\": 0x001e,\r\n        \"KeyS\": 0x001f,\r\n        \"KeyD\": 0x0020,\r\n        \"KeyF\": 0x0021,\r\n        \"KeyG\": 0x0022,\r\n        \"KeyH\": 0x0023,\r\n        \"KeyJ\": 0x0024,\r\n        \"KeyK\": 0x0025,\r\n        \"KeyL\": 0x0026,\r\n        \"Semicolon\": 0x0027,\r\n        \"Quote\": 0x0028,\r\n        \"Backquote\": 0x0029,\r\n        \"ShiftLeft\": 0x002a,\r\n        \"Backslash\": 0x002b,\r\n        \"KeyZ\": 0x002c,\r\n        \"KeyX\": 0x002d,\r\n        \"KeyC\": 0x002e,\r\n        \"KeyV\": 0x002f,\r\n        \"KeyB\": 0x0030,\r\n        \"KeyN\": 0x0031,\r\n        \"KeyM\": 0x0032,\r\n        \"Comma\": 0x0033,\r\n        \"Period\": 0x0034,\r\n        \"Slash\": 0x0035,\r\n        \"ShiftRight\": 0x0036,\r\n        \"NumpadMultiply\": 0x0037,\r\n        \"AltLeft\": 0x0038,\r\n        \"Space\": 0x0039,\r\n        \"CapsLock\": 0x003a,\r\n        \"F1\": 0x003b,\r\n        \"F2\": 0x003c,\r\n        \"F3\": 0x003d,\r\n        \"F4\": 0x003e,\r\n        \"F5\": 0x003f,\r\n        \"F6\": 0x0040,\r\n        \"F7\": 0x0041,\r\n        \"F8\": 0x0042,\r\n        \"F9\": 0x0043,\r\n        \"F10\": 0x0044,\r\n        \"NumLock\": 0x0045,\r\n        \"ScrollLock\": 0x0046,\r\n        \"Numpad7\": 0x0047,\r\n        \"Numpad8\": 0x0048,\r\n        \"Numpad9\": 0x0049,\r\n        \"NumpadSubtract\": 0x004a,\r\n        \"Numpad4\": 0x004b,\r\n        \"Numpad5\": 0x004c,\r\n        \"Numpad6\": 0x004d,\r\n        \"NumpadAdd\": 0x004e,\r\n        \"Numpad1\": 0x004f,\r\n        \"Numpad2\": 0x0050,\r\n        \"Numpad3\": 0x0051,\r\n        \"Numpad0\": 0x0052,\r\n        \"NumpadDecimal\": 0x0053,\r\n        \"IntlBackslash\": 0x0056,\r\n        \"F11\": 0x0057,\r\n        \"F12\": 0x0058,\r\n\r\n        \"NumpadEnter\": 0xe01c,\r\n        \"ControlRight\": 0xe01d,\r\n        \"NumpadDivide\": 0xe035,\r\n        //\"PrintScreen\": 0x0063,\r\n        \"AltRight\": 0xe038,\r\n        \"Home\": 0xe047,\r\n        \"ArrowUp\": 0xe048,\r\n        \"PageUp\": 0xe049,\r\n        \"ArrowLeft\": 0xe04b,\r\n        \"ArrowRight\": 0xe04d,\r\n        \"End\": 0xe04f,\r\n        \"ArrowDown\": 0xe050,\r\n        \"PageDown\": 0xe051,\r\n        \"Insert\": 0xe052,\r\n        \"Delete\": 0xe053,\r\n\r\n        \"OSLeft\": 0xe05b,\r\n        \"OSRight\": 0xe05c,\r\n        \"ContextMenu\": 0xe05d,\r\n    };\r\n\r\n    this.bus = bus;\r\n\r\n    this.destroy = function()\r\n    {\r\n        if(typeof window !== \"undefined\")\r\n        {\r\n            window.removeEventListener(\"keyup\", keyup_handler, false);\r\n            window.removeEventListener(\"keydown\", keydown_handler, false);\r\n            window.removeEventListener(\"blur\", blur_handler, false);\r\n        }\r\n    };\r\n\r\n    this.init = function()\r\n    {\r\n        if(typeof window === \"undefined\")\r\n        {\r\n            return;\r\n        }\r\n        this.destroy();\r\n\r\n        window.addEventListener(\"keyup\", keyup_handler, false);\r\n        window.addEventListener(\"keydown\", keydown_handler, false);\r\n        window.addEventListener(\"blur\", blur_handler, false);\r\n    };\r\n    this.init();\r\n\r\n    this.simulate_press = function(code)\r\n    {\r\n        var ev = { keyCode: code };\r\n        handler(ev, true);\r\n        handler(ev, false);\r\n    };\r\n\r\n    this.simulate_char = function(chr)\r\n    {\r\n        var code = chr.charCodeAt(0);\r\n\r\n        if(code in asciimap)\r\n        {\r\n            this.simulate_press(asciimap[code]);\r\n        }\r\n        else if(code in asciimap_shift)\r\n        {\r\n            send_to_controller(SHIFT_SCAN_CODE);\r\n            this.simulate_press(asciimap_shift[code]);\r\n            send_to_controller(SHIFT_SCAN_CODE | SCAN_CODE_RELEASE);\r\n        }\r\n        else\r\n        {\r\n            console.log(\"ascii -> keyCode not found: \", code, chr);\r\n        }\r\n    };\r\n\r\n    function may_handle(e)\r\n    {\r\n        if(e.shiftKey && e.ctrlKey && (e.keyCode === 74 || e.keyCode === 75))\r\n        {\r\n              // don't prevent opening chromium dev tools\r\n              // maybe add other important combinations here, too\r\n              return false;\r\n        }\r\n\r\n        if(!keyboard.emu_enabled)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        if(e.target)\r\n        {\r\n            // className shouldn't be hardcoded here\r\n            return e.target.classList.contains(\"phone_keyboard\") ||\r\n                (e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\");\r\n        }\r\n        else\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    function translate(e)\r\n    {\r\n        if(e.code !== undefined)\r\n        {\r\n            var code = codemap[e.code];\r\n\r\n            if(code !== undefined)\r\n            {\r\n                return code;\r\n            }\r\n        }\r\n\r\n        return charmap[e.keyCode];\r\n    }\r\n\r\n    function keyup_handler(e)\r\n    {\r\n        if(!e.altKey && keys_pressed[0x38])\r\n        {\r\n            // trigger ALT keyup manually - some browsers don't\r\n            // see issue #165\r\n            handle_code(0x38, false);\r\n        }\r\n        return handler(e, false);\r\n    }\r\n\r\n    function keydown_handler(e)\r\n    {\r\n        if(!e.altKey && keys_pressed[0x38])\r\n        {\r\n            // trigger ALT keyup manually - some browsers don't\r\n            // see issue #165\r\n            handle_code(0x38, false);\r\n        }\r\n        return handler(e, true);\r\n    }\r\n\r\n    function blur_handler(e)\r\n    {\r\n        // trigger keyup for all pressed keys\r\n        var keys = Object.keys(keys_pressed),\r\n            key;\r\n\r\n        for(var i = 0; i < keys.length; i++)\r\n        {\r\n            key = +keys[i];\r\n\r\n            if(keys_pressed[key])\r\n            {\r\n                handle_code(key, false);\r\n            }\r\n        }\r\n\r\n        keys_pressed = {};\r\n    }\r\n\r\n    /**\r\n     * @param {boolean} keydown\r\n     */\r\n    function handler(e, keydown)\r\n    {\r\n        if(!keyboard.bus)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(!may_handle(e))\r\n        {\r\n            return;\r\n        }\r\n\r\n        var code = translate(e);\r\n\r\n        if(!code)\r\n        {\r\n            console.log(\"Missing char in map: \" + e.keyCode.toString(16));\r\n            return;\r\n        }\r\n\r\n        handle_code(code, keydown);\r\n\r\n        e.preventDefault && e.preventDefault();\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param {number} code\r\n     * @param {boolean} keydown\r\n     */\r\n    function handle_code(code, keydown)\r\n    {\r\n        if(keydown)\r\n        {\r\n            if(keys_pressed[code])\r\n            {\r\n                handle_code(code, false);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(!keys_pressed[code])\r\n            {\r\n                // stray keyup\r\n                return;\r\n            }\r\n        }\r\n\r\n        keys_pressed[code] = keydown;\r\n\r\n        if(!keydown)\r\n        {\r\n            code |= 0x80;\r\n        }\r\n        //console.log(\"Key: \" + code.toString(16) + \" from \" + chr.toString(16) + \" down=\" + keydown);\r\n\r\n        if(code > 0xFF)\r\n        {\r\n            // prefix\r\n            send_to_controller(code >> 8);\r\n            send_to_controller(code & 0xFF);\r\n        }\r\n        else\r\n        {\r\n            send_to_controller(code);\r\n        }\r\n    }\r\n\r\n    function send_to_controller(code)\r\n    {\r\n        keyboard.bus.send(\"keyboard-code\", code);\r\n    }\r\n}\r\n\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n *\r\n * @param {BusConnector} bus\r\n */\r\nfunction MouseAdapter(bus, screen_container)\r\n{\r\n    /** @const */\r\n    var SPEED_FACTOR = 0.15;\r\n\r\n    var left_down = false,\r\n        right_down = false,\r\n        middle_down = false,\r\n\r\n        last_x = 0,\r\n        last_y = 0,\r\n\r\n        mouse = this;\r\n\r\n    // set by controller\r\n    this.enabled = false;\r\n\r\n    // set by emulator\r\n    this.emu_enabled = true;\r\n\r\n    this.bus = bus;\r\n\r\n    this.bus.register(\"mouse-enable\", function(enabled)\r\n    {\r\n        this.enabled = enabled;\r\n    }, this);\r\n\r\n    this.destroy = function()\r\n    {\r\n        if(typeof window === \"undefined\")\r\n        {\r\n            return;\r\n        }\r\n        window.removeEventListener(\"touchstart\", touch_start_handler, false);\r\n        window.removeEventListener(\"touchend\", touch_end_handler, false);\r\n        window.removeEventListener(\"touchmove\", mousemove_handler, false);\r\n        window.removeEventListener(\"mousemove\", mousemove_handler, false);\r\n        window.removeEventListener(\"mousedown\", mousedown_handler, false);\r\n        window.removeEventListener(\"mouseup\", mouseup_handler, false);\r\n        window.removeEventListener(\"wheel\", mousewheel_handler, { passive: false });\r\n    };\r\n\r\n    this.init = function()\r\n    {\r\n        if(typeof window === \"undefined\")\r\n        {\r\n            return;\r\n        }\r\n        this.destroy();\r\n\r\n        window.addEventListener(\"touchstart\", touch_start_handler, false);\r\n        window.addEventListener(\"touchend\", touch_end_handler, false);\r\n        window.addEventListener(\"touchmove\", mousemove_handler, false);\r\n        window.addEventListener(\"mousemove\", mousemove_handler, false);\r\n        window.addEventListener(\"mousedown\", mousedown_handler, false);\r\n        window.addEventListener(\"mouseup\", mouseup_handler, false);\r\n        window.addEventListener(\"wheel\", mousewheel_handler, { passive: false });\r\n    };\r\n    this.init();\r\n\r\n    function is_child(child, parent)\r\n    {\r\n        while(child.parentNode)\r\n        {\r\n            if(child === parent)\r\n            {\r\n                return true;\r\n            }\r\n            child = child.parentNode;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function may_handle(e)\r\n    {\r\n        if(!mouse.enabled || !mouse.emu_enabled)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        const MOVE_MOUSE_WHEN_OVER_SCREEN_ONLY = true;\r\n\r\n        if(MOVE_MOUSE_WHEN_OVER_SCREEN_ONLY)\r\n        {\r\n            var parent = screen_container || document.body;\r\n            return document.pointerLockElement || is_child(e.target, parent);\r\n        }\r\n        else\r\n        {\r\n            if(e.type === \"mousemove\" || e.type === \"touchmove\")\r\n            {\r\n                return true;\r\n            }\r\n\r\n            if(e.type === \"mousewheel\" || e.type === \"DOMMouseScroll\")\r\n            {\r\n                return is_child(e.target, parent);\r\n            }\r\n\r\n            return !e.target || e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\";\r\n        }\r\n    }\r\n\r\n    function touch_start_handler(e)\r\n    {\r\n        if(may_handle(e))\r\n        {\r\n            var touches = e[\"changedTouches\"];\r\n\r\n            if(touches && touches.length)\r\n            {\r\n                var touch = touches[touches.length - 1];\r\n                last_x = touch.clientX;\r\n                last_y = touch.clientY;\r\n            }\r\n        }\r\n    }\r\n\r\n    function touch_end_handler(e)\r\n    {\r\n        if(left_down || middle_down || right_down)\r\n        {\r\n            mouse.bus.send(\"mouse-click\", [false, false, false]);\r\n            left_down = middle_down = right_down = false;\r\n        }\r\n    }\r\n\r\n    function mousemove_handler(e)\r\n    {\r\n        if(!mouse.bus)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(!may_handle(e))\r\n        {\r\n            return;\r\n        }\r\n\r\n        var delta_x = 0;\r\n        var delta_y = 0;\r\n\r\n        var touches = e[\"changedTouches\"];\r\n\r\n        if(touches)\r\n        {\r\n            if(touches.length)\r\n            {\r\n                var touch = touches[touches.length - 1];\r\n                delta_x = touch.clientX - last_x;\r\n                delta_y = touch.clientY - last_y;\r\n\r\n                last_x = touch.clientX;\r\n                last_y = touch.clientY;\r\n\r\n                e.preventDefault();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(typeof e[\"movementX\"] === \"number\")\r\n            {\r\n                delta_x = e[\"movementX\"];\r\n                delta_y = e[\"movementY\"];\r\n            }\r\n            else if(typeof e[\"webkitMovementX\"] === \"number\")\r\n            {\r\n                delta_x = e[\"webkitMovementX\"];\r\n                delta_y = e[\"webkitMovementY\"];\r\n            }\r\n            else if(typeof e[\"mozMovementX\"] === \"number\")\r\n            {\r\n                delta_x = e[\"mozMovementX\"];\r\n                delta_y = e[\"mozMovementY\"];\r\n            }\r\n            else\r\n            {\r\n                // Fallback for other browsers?\r\n                delta_x = e.clientX - last_x;\r\n                delta_y = e.clientY - last_y;\r\n\r\n                last_x = e.clientX;\r\n                last_y = e.clientY;\r\n            }\r\n        }\r\n\r\n        delta_x *= SPEED_FACTOR;\r\n        delta_y *= SPEED_FACTOR;\r\n\r\n        //if(Math.abs(delta_x) > 100 || Math.abs(delta_y) > 100)\r\n        //{\r\n        //    // Large mouse delta, drop?\r\n        //}\r\n\r\n        delta_y = -delta_y;\r\n\r\n        mouse.bus.send(\"mouse-delta\", [delta_x, delta_y]);\r\n\r\n        if(screen_container)\r\n        {\r\n            let absolute_x = e.pageX - screen_container.offsetLeft;\r\n            let absolute_y = e.pageY - screen_container.offsetTop;\r\n            mouse.bus.send(\"mouse-absolute\", [\r\n                absolute_x, absolute_y, screen_container.offsetWidth, screen_container.offsetHeight]);\r\n        }\r\n    }\r\n\r\n    function mousedown_handler(e)\r\n    {\r\n        if(may_handle(e))\r\n        {\r\n            click_event(e, true);\r\n        }\r\n    }\r\n\r\n    function mouseup_handler(e)\r\n    {\r\n        if(may_handle(e))\r\n        {\r\n            click_event(e, false);\r\n        }\r\n    }\r\n\r\n    function click_event(e, down)\r\n    {\r\n        if(!mouse.bus)\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(e.which === 1)\r\n        {\r\n            left_down = down;\r\n        }\r\n        else if(e.which === 2)\r\n        {\r\n            middle_down = down;\r\n        }\r\n        else if(e.which === 3)\r\n        {\r\n            right_down = down;\r\n        }\r\n        else\r\n        {\r\n            dbg_log(\"Unknown event.which: \" + e.which);\r\n        }\r\n        mouse.bus.send(\"mouse-click\", [left_down, middle_down, right_down]);\r\n        e.preventDefault();\r\n    }\r\n\r\n    function mousewheel_handler(e)\r\n    {\r\n        if(!may_handle(e))\r\n        {\r\n            return;\r\n        }\r\n\r\n        var delta_x = e.wheelDelta || -e.detail;\r\n        var delta_y = 0;\r\n\r\n        if(delta_x < 0)\r\n        {\r\n            delta_x = -1;\r\n        }\r\n        else if(delta_x > 0)\r\n        {\r\n            delta_x = 1;\r\n        }\r\n\r\n        mouse.bus.send(\"mouse-wheel\", [delta_x, delta_y]);\r\n        e.preventDefault();\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar DAC_QUEUE_RESERVE = 0.2;\r\n\r\n/** @const */\r\nvar AUDIOBUFFER_MINIMUM_SAMPLING_RATE = 8000;\r\n\r\n/**\r\n * @constructor\r\n * @param {!BusConnector} bus\r\n */\r\nfunction SpeakerAdapter(bus)\r\n{\r\n    if(typeof window === \"undefined\")\r\n    {\r\n        return;\r\n    }\r\n    if(!window.AudioContext && !window[\"webkitAudioContext\"])\r\n    {\r\n        console.warn(\"Web browser doesn't support Web Audio API\");\r\n        return;\r\n    }\r\n\r\n    var SpeakerDAC = window.AudioWorklet ? SpeakerWorkletDAC : SpeakerBufferSourceDAC;\r\n\r\n    /** @const */\r\n    this.bus = bus;\r\n\r\n    /** @const */\r\n    this.audio_context = new (window.AudioContext || window[\"webkitAudioContext\"])();\r\n\r\n    /** @const */\r\n    this.mixer = new SpeakerMixer(bus, this.audio_context);\r\n\r\n    /** @const */\r\n    this.pcspeaker = new PCSpeaker(bus, this.audio_context, this.mixer);\r\n\r\n    /** @const */\r\n    this.dac = new SpeakerDAC(bus, this.audio_context, this.mixer);\r\n\r\n    this.pcspeaker.start();\r\n\r\n    bus.register(\"emulator-stopped\", function()\r\n    {\r\n        this.audio_context.suspend();\r\n    }, this);\r\n\r\n    bus.register(\"emulator-started\", function()\r\n    {\r\n        this.audio_context.resume();\r\n    }, this);\r\n\r\n    bus.register(\"speaker-confirm-initialized\", function()\r\n    {\r\n        bus.send(\"speaker-has-initialized\");\r\n    }, this);\r\n    bus.send(\"speaker-has-initialized\");\r\n}\r\n\r\n/**\r\n * @constructor\r\n * @param {!BusConnector} bus\r\n * @param {!AudioContext} audio_context\r\n */\r\nfunction SpeakerMixer(bus, audio_context)\r\n{\r\n    /** @const */\r\n    this.audio_context = audio_context;\r\n\r\n    this.sources = new Map();\r\n\r\n    // States\r\n\r\n    this.volume_both = 1;\r\n    this.volume_left = 1;\r\n    this.volume_right = 1;\r\n    this.gain_left = 1;\r\n    this.gain_right = 1;\r\n\r\n    // Nodes\r\n    // TODO: Find / calibrate / verify the filter frequencies\r\n\r\n    this.node_treble_left = this.audio_context.createBiquadFilter();\r\n    this.node_treble_right = this.audio_context.createBiquadFilter();\r\n    this.node_treble_left.type = \"highshelf\";\r\n    this.node_treble_right.type = \"highshelf\";\r\n    this.node_treble_left.frequency.setValueAtTime(2000, this.audio_context.currentTime);\r\n    this.node_treble_right.frequency.setValueAtTime(2000, this.audio_context.currentTime);\r\n\r\n    this.node_bass_left = this.audio_context.createBiquadFilter();\r\n    this.node_bass_right = this.audio_context.createBiquadFilter();\r\n    this.node_bass_left.type = \"lowshelf\";\r\n    this.node_bass_right.type = \"lowshelf\";\r\n    this.node_bass_left.frequency.setValueAtTime(200, this.audio_context.currentTime);\r\n    this.node_bass_right.frequency.setValueAtTime(200, this.audio_context.currentTime);\r\n\r\n    this.node_gain_left = this.audio_context.createGain();\r\n    this.node_gain_right = this.audio_context.createGain();\r\n\r\n    this.node_merger = this.audio_context.createChannelMerger(2);\r\n\r\n    // Graph\r\n\r\n    this.input_left = this.node_treble_left;\r\n    this.input_right = this.node_treble_right;\r\n\r\n    this.node_treble_left.connect(this.node_bass_left);\r\n    this.node_bass_left.connect(this.node_gain_left);\r\n    this.node_gain_left.connect(this.node_merger, 0, 0);\r\n\r\n    this.node_treble_right.connect(this.node_bass_right);\r\n    this.node_bass_right.connect(this.node_gain_right);\r\n    this.node_gain_right.connect(this.node_merger, 0, 1);\r\n\r\n    this.node_merger.connect(this.audio_context.destination);\r\n\r\n    // Interface\r\n\r\n    bus.register(\"mixer-connect\", function(data)\r\n    {\r\n        var source_id = data[0];\r\n        var channel = data[1];\r\n        this.connect_source(source_id, channel);\r\n    }, this);\r\n\r\n    bus.register(\"mixer-disconnect\", function(data)\r\n    {\r\n        var source_id = data[0];\r\n        var channel = data[1];\r\n        this.disconnect_source(source_id, channel);\r\n    }, this);\r\n\r\n    bus.register(\"mixer-volume\", function(data)\r\n    {\r\n        var source_id = data[0];\r\n        var channel = data[1];\r\n        var decibels = data[2];\r\n\r\n        var gain = Math.pow(10, decibels / 20);\r\n\r\n        var source = source_id === MIXER_SRC_MASTER ? this : this.sources.get(source_id);\r\n\r\n        if(source === undefined)\r\n        {\r\n            dbg_assert(false, \"Mixer set volume - cannot set volume for undefined source: \" + source_id);\r\n            return;\r\n        }\r\n\r\n        source.set_volume(gain, channel);\r\n    }, this);\r\n\r\n    bus.register(\"mixer-gain-left\", function(/** number */ decibels)\r\n    {\r\n        this.gain_left = Math.pow(10, decibels / 20);\r\n        this.update();\r\n    }, this);\r\n\r\n    bus.register(\"mixer-gain-right\", function(/** number */ decibels)\r\n    {\r\n        this.gain_right = Math.pow(10, decibels / 20);\r\n        this.update();\r\n    }, this);\r\n\r\n    function create_gain_handler(audio_node)\r\n    {\r\n        return function(decibels)\r\n        {\r\n            audio_node.gain.setValueAtTime(decibels, this.audio_context.currentTime);\r\n        };\r\n    }\r\n    bus.register(\"mixer-treble-left\", create_gain_handler(this.node_treble_left), this);\r\n    bus.register(\"mixer-treble-right\", create_gain_handler(this.node_treble_right), this);\r\n    bus.register(\"mixer-bass-left\", create_gain_handler(this.node_bass_left), this);\r\n    bus.register(\"mixer-bass-right\", create_gain_handler(this.node_bass_right), this);\r\n}\r\n\r\n/**\r\n * @param {!AudioNode} source_node\r\n * @param {number} source_id\r\n * @return {SpeakerMixerSource}\r\n */\r\nSpeakerMixer.prototype.add_source = function(source_node, source_id)\r\n{\r\n    var source = new SpeakerMixerSource(\r\n        this.audio_context,\r\n        source_node,\r\n        this.input_left,\r\n        this.input_right\r\n    );\r\n\r\n    dbg_assert(!this.sources.has(source_id), \"Mixer add source - overwritting source: \" + source_id);\r\n\r\n    this.sources.set(source_id, source);\r\n    return source;\r\n};\r\n\r\n/**\r\n * @param {number} source_id\r\n * @param {number=} channel\r\n */\r\nSpeakerMixer.prototype.connect_source = function(source_id, channel)\r\n{\r\n    var source = this.sources.get(source_id);\r\n\r\n    if(source === undefined)\r\n    {\r\n        dbg_assert(false, \"Mixer connect - cannot connect undefined source: \" + source_id);\r\n        return;\r\n    }\r\n\r\n    source.connect(channel);\r\n};\r\n\r\n/**\r\n * @param {number} source_id\r\n * @param {number=} channel\r\n */\r\nSpeakerMixer.prototype.disconnect_source = function(source_id, channel)\r\n{\r\n    var source = this.sources.get(source_id);\r\n\r\n    if(source === undefined)\r\n    {\r\n        dbg_assert(false, \"Mixer disconnect - cannot disconnect undefined source: \" + source_id);\r\n        return;\r\n    }\r\n\r\n    source.disconnect(channel);\r\n};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {number=} channel\r\n */\r\nSpeakerMixer.prototype.set_volume = function(value, channel)\r\n{\r\n    if(channel === undefined)\r\n    {\r\n        channel = MIXER_CHANNEL_BOTH;\r\n    }\r\n\r\n    switch(channel)\r\n    {\r\n        case MIXER_CHANNEL_LEFT:\r\n            this.volume_left = value;\r\n            break;\r\n        case MIXER_CHANNEL_RIGHT:\r\n            this.volume_right = value;\r\n            break;\r\n        case MIXER_CHANNEL_BOTH:\r\n            this.volume_both = value;\r\n            break;\r\n        default:\r\n            dbg_assert(false, \"Mixer set master volume - unknown channel: \" + channel);\r\n            return;\r\n    }\r\n\r\n    this.update();\r\n};\r\n\r\nSpeakerMixer.prototype.update = function()\r\n{\r\n    var net_gain_left = this.volume_both * this.volume_left * this.gain_left;\r\n    var net_gain_right = this.volume_both * this.volume_right * this.gain_right;\r\n\r\n    this.node_gain_left.gain.setValueAtTime(net_gain_left, this.audio_context.currentTime);\r\n    this.node_gain_right.gain.setValueAtTime(net_gain_right, this.audio_context.currentTime);\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @param {!AudioContext} audio_context\r\n * @param {!AudioNode} source_node\r\n * @param {!AudioNode} destination_left\r\n * @param {!AudioNode} destination_right\r\n */\r\nfunction SpeakerMixerSource(audio_context, source_node, destination_left, destination_right)\r\n{\r\n    /** @const */\r\n    this.audio_context = audio_context;\r\n\r\n    // States\r\n\r\n    this.connected_left = true;\r\n    this.connected_right = true;\r\n    this.gain_hidden = 1;\r\n    this.volume_both = 1;\r\n    this.volume_left = 1;\r\n    this.volume_right = 1;\r\n\r\n    // Nodes\r\n\r\n    this.node_splitter = audio_context.createChannelSplitter(2);\r\n    this.node_gain_left = audio_context.createGain();\r\n    this.node_gain_right = audio_context.createGain();\r\n\r\n    // Graph\r\n\r\n    source_node.connect(this.node_splitter);\r\n\r\n    this.node_splitter.connect(this.node_gain_left, 0);\r\n    this.node_gain_left.connect(destination_left);\r\n\r\n    this.node_splitter.connect(this.node_gain_right, 1);\r\n    this.node_gain_right.connect(destination_right);\r\n}\r\n\r\nSpeakerMixerSource.prototype.update = function()\r\n{\r\n    var net_gain_left = this.connected_left * this.gain_hidden * this.volume_both * this.volume_left;\r\n    var net_gain_right = this.connected_right * this.gain_hidden * this.volume_both * this.volume_right;\r\n\r\n    this.node_gain_left.gain.setValueAtTime(net_gain_left, this.audio_context.currentTime);\r\n    this.node_gain_right.gain.setValueAtTime(net_gain_right, this.audio_context.currentTime);\r\n};\r\n\r\n/** @param {number=} channel */\r\nSpeakerMixerSource.prototype.connect = function(channel)\r\n{\r\n    var both = !channel || channel === MIXER_CHANNEL_BOTH;\r\n    if(both || channel === MIXER_CHANNEL_LEFT)\r\n    {\r\n        this.connected_left = true;\r\n    }\r\n    if(both || channel === MIXER_CHANNEL_RIGHT)\r\n    {\r\n        this.connected_right = true;\r\n    }\r\n    this.update();\r\n};\r\n\r\n/** @param {number=} channel */\r\nSpeakerMixerSource.prototype.disconnect = function(channel)\r\n{\r\n    var both = !channel || channel === MIXER_CHANNEL_BOTH;\r\n    if(both || channel === MIXER_CHANNEL_LEFT)\r\n    {\r\n        this.connected_left = false;\r\n    }\r\n    if(both || channel === MIXER_CHANNEL_RIGHT)\r\n    {\r\n        this.connected_right = false;\r\n    }\r\n    this.update();\r\n};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {number=} channel\r\n */\r\nSpeakerMixerSource.prototype.set_volume = function(value, channel)\r\n{\r\n    if(channel === undefined)\r\n    {\r\n        channel = MIXER_CHANNEL_BOTH;\r\n    }\r\n\r\n    switch(channel)\r\n    {\r\n        case MIXER_CHANNEL_LEFT:\r\n            this.volume_left = value;\r\n            break;\r\n        case MIXER_CHANNEL_RIGHT:\r\n            this.volume_right = value;\r\n            break;\r\n        case MIXER_CHANNEL_BOTH:\r\n            this.volume_both = value;\r\n            break;\r\n        default:\r\n            dbg_assert(false, \"Mixer set volume - unknown channel: \" + channel);\r\n            return;\r\n    }\r\n\r\n    this.update();\r\n};\r\n\r\nSpeakerMixerSource.prototype.set_gain_hidden = function(value)\r\n{\r\n    this.gain_hidden = value;\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @param {!BusConnector} bus\r\n * @param {!AudioContext} audio_context\r\n * @param {!SpeakerMixer} mixer\r\n */\r\nfunction PCSpeaker(bus, audio_context, mixer)\r\n{\r\n    // Nodes\r\n\r\n    this.node_oscillator = audio_context.createOscillator();\r\n    this.node_oscillator.type = \"square\";\r\n    this.node_oscillator.frequency.setValueAtTime(440, audio_context.currentTime);\r\n\r\n    // Interface\r\n\r\n    this.mixer_connection = mixer.add_source(this.node_oscillator, MIXER_SRC_PCSPEAKER);\r\n    this.mixer_connection.disconnect();\r\n\r\n    bus.register(\"pcspeaker-enable\", function()\r\n    {\r\n        mixer.connect_source(MIXER_SRC_PCSPEAKER);\r\n    }, this);\r\n\r\n    bus.register(\"pcspeaker-disable\", function()\r\n    {\r\n        mixer.disconnect_source(MIXER_SRC_PCSPEAKER);\r\n    }, this);\r\n\r\n    bus.register(\"pcspeaker-update\", function(data)\r\n    {\r\n        var counter_mode = data[0];\r\n        var counter_reload = data[1];\r\n\r\n        var frequency = 0;\r\n        var beep_enabled = counter_mode === 3;\r\n\r\n        if(beep_enabled)\r\n        {\r\n            frequency = OSCILLATOR_FREQ * 1000 / counter_reload;\r\n            frequency = Math.min(frequency, this.node_oscillator.frequency.maxValue);\r\n            frequency = Math.max(frequency, 0);\r\n        }\r\n\r\n        this.node_oscillator.frequency.setValueAtTime(frequency, audio_context.currentTime);\r\n    }, this);\r\n}\r\n\r\nPCSpeaker.prototype.start = function()\r\n{\r\n    this.node_oscillator.start();\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @param {!BusConnector} bus\r\n * @param {!AudioContext} audio_context\r\n * @param {!SpeakerMixer} mixer\r\n */\r\nfunction SpeakerWorkletDAC(bus, audio_context, mixer)\r\n{\r\n    /** @const */\r\n    this.bus = bus;\r\n\r\n    /** @const */\r\n    this.audio_context = audio_context;\r\n\r\n    // State\r\n\r\n    this.enabled = false;\r\n    this.sampling_rate = 48000;\r\n\r\n    // Worklet\r\n\r\n    function worklet()\r\n    {\r\n        /** @const */\r\n        var RENDER_QUANTUM = 128;\r\n\r\n        /** @const */\r\n        var MINIMUM_BUFFER_SIZE = 2 * RENDER_QUANTUM;\r\n\r\n        /** @const */\r\n        var QUEUE_RESERVE = 1024;\r\n\r\n        function sinc(x)\r\n        {\r\n            if(x === 0) return 1;\r\n            x *= Math.PI;\r\n            return Math.sin(x) / x;\r\n        }\r\n\r\n        var EMPTY_BUFFER =\r\n        [\r\n            new Float32Array(MINIMUM_BUFFER_SIZE),\r\n            new Float32Array(MINIMUM_BUFFER_SIZE),\r\n        ];\r\n\r\n        /**\r\n         * @constructor\r\n         * @extends AudioWorkletProcessor\r\n         */\r\n        function DACProcessor()\r\n        {\r\n            var self = Reflect.construct(AudioWorkletProcessor, [], DACProcessor);\r\n\r\n            // Params\r\n\r\n            self.kernel_size = 3;\r\n\r\n            // States\r\n\r\n            // Buffers waiting for their turn to be consumed\r\n            self.queue_data = new Array(1024);\r\n            self.queue_start = 0;\r\n            self.queue_end = 0;\r\n            self.queue_length = 0;\r\n            self.queue_size = self.queue_data.length;\r\n            self.queued_samples = 0;\r\n\r\n            // Buffers being actively consumed\r\n            /** @type{Array<Float32Array>} */\r\n            self.source_buffer_previous = EMPTY_BUFFER;\r\n            /** @type{Array<Float32Array>} */\r\n            self.source_buffer_current = EMPTY_BUFFER;\r\n\r\n            // Ratio of alienland sample rate to homeland sample rate.\r\n            self.source_samples_per_destination = 1.0;\r\n\r\n            // Integer representing the position of the first destination sample\r\n            // for the current block, relative to source_buffer_current.\r\n            self.source_block_start = 0;\r\n\r\n            // Real number representing the position of the current destination\r\n            // sample relative to source_buffer_current, since source_block_start.\r\n            self.source_time = 0.0;\r\n\r\n            // Same as source_time but rounded down to an index.\r\n            self.source_offset = 0;\r\n\r\n            // Interface\r\n\r\n            self.port.onmessage = (event) =>\r\n            {\r\n                switch(event.data.type)\r\n                {\r\n                    case \"queue\":\r\n                        self.queue_push(event.data.value);\r\n                        break;\r\n                    case \"sampling-rate\":\r\n                        self.source_samples_per_destination = event.data.value / sampleRate;\r\n                        break;\r\n                }\r\n            };\r\n\r\n            return self;\r\n        }\r\n\r\n        Reflect.setPrototypeOf(DACProcessor.prototype, AudioWorkletProcessor.prototype);\r\n        Reflect.setPrototypeOf(DACProcessor, AudioWorkletProcessor);\r\n\r\n        DACProcessor.prototype[\"process\"] =\r\n        DACProcessor.prototype.process = function(inputs, outputs, parameters)\r\n        {\r\n            for(var i = 0; i < outputs[0][0].length; i++)\r\n            {\r\n                // Lanczos resampling\r\n                var sum0 = 0;\r\n                var sum1 = 0;\r\n\r\n                var start = this.source_offset - this.kernel_size + 1;\r\n                var end = this.source_offset + this.kernel_size;\r\n\r\n                for(var j = start; j <= end; j++)\r\n                {\r\n                    var convolute_index = this.source_block_start + j;\r\n                    sum0 += this.get_sample(convolute_index, 0) * this.kernel(this.source_time - j);\r\n                    sum1 += this.get_sample(convolute_index, 1) * this.kernel(this.source_time - j);\r\n                }\r\n\r\n                if(isNaN(sum0) || isNaN(sum1))\r\n                {\r\n                    // NaN values cause entire audio graph to cease functioning.\r\n                    sum0 = sum1 = 0;\r\n                    this.dbg_log(\"ERROR: NaN values! Ignoring for now.\");\r\n                }\r\n\r\n                outputs[0][0][i] = sum0;\r\n                outputs[0][1][i] = sum1;\r\n\r\n                this.source_time += this.source_samples_per_destination;\r\n                this.source_offset = Math.floor(this.source_time);\r\n            }\r\n\r\n            // +2 to safeguard against rounding variations\r\n            var samples_needed_per_block = this.source_offset;\r\n            samples_needed_per_block += this.kernel_size + 2;\r\n\r\n            this.source_time -= this.source_offset;\r\n            this.source_block_start += this.source_offset;\r\n            this.source_offset = 0;\r\n\r\n            // Note: This needs to be done after source_block_start is updated.\r\n            this.ensure_enough_data(samples_needed_per_block);\r\n\r\n            return true;\r\n        };\r\n\r\n        DACProcessor.prototype.kernel = function(x)\r\n        {\r\n            return sinc(x) * sinc(x / this.kernel_size);\r\n        };\r\n\r\n        DACProcessor.prototype.get_sample = function(index, channel)\r\n        {\r\n            if(index < 0)\r\n            {\r\n                // -ve index represents previous buffer\r\n                //          <-------|\r\n                // [Previous buffer][Current buffer]\r\n                index += this.source_buffer_previous[0].length;\r\n                return this.source_buffer_previous[channel][index];\r\n            }\r\n            else\r\n            {\r\n                return this.source_buffer_current[channel][index];\r\n            }\r\n        };\r\n\r\n        DACProcessor.prototype.ensure_enough_data = function(needed)\r\n        {\r\n            var current_length = this.source_buffer_current[0].length;\r\n            var remaining = current_length - this.source_block_start;\r\n\r\n            if(remaining < needed)\r\n            {\r\n                this.prepare_next_buffer();\r\n                this.source_block_start -= current_length;\r\n            }\r\n        };\r\n\r\n        DACProcessor.prototype.prepare_next_buffer = function()\r\n        {\r\n            if(this.queued_samples < MINIMUM_BUFFER_SIZE && this.queue_length)\r\n            {\r\n                this.dbg_log(\"Not enough samples - should not happen during midway of playback\");\r\n            }\r\n\r\n            this.source_buffer_previous = this.source_buffer_current;\r\n            this.source_buffer_current = this.queue_shift();\r\n\r\n            var sample_count = this.source_buffer_current[0].length;\r\n\r\n            if(sample_count < MINIMUM_BUFFER_SIZE)\r\n            {\r\n                // Unfortunately, this single buffer is too small :(\r\n\r\n                var queue_pos = this.queue_start;\r\n                var buffer_count = 0;\r\n\r\n                // Figure out how many small buffers to combine.\r\n                while(sample_count < MINIMUM_BUFFER_SIZE && buffer_count < this.queue_length)\r\n                {\r\n                    sample_count += this.queue_data[queue_pos][0].length;\r\n\r\n                    queue_pos = queue_pos + 1 & this.queue_size - 1;\r\n                    buffer_count++;\r\n                }\r\n\r\n                // Note: if not enough buffers, this will be end-padded with zeros:\r\n                var new_big_buffer_size = Math.max(sample_count, MINIMUM_BUFFER_SIZE);\r\n                var new_big_buffer =\r\n                [\r\n                    new Float32Array(new_big_buffer_size),\r\n                    new Float32Array(new_big_buffer_size),\r\n                ];\r\n\r\n                // Copy the first, already-shifted, small buffer into the new buffer.\r\n                new_big_buffer[0].set(this.source_buffer_current[0]);\r\n                new_big_buffer[1].set(this.source_buffer_current[1]);\r\n                var new_big_buffer_pos = this.source_buffer_current[0].length;\r\n\r\n                // Copy the rest.\r\n                for(var i = 0; i < buffer_count; i++)\r\n                {\r\n                    var small_buffer = this.queue_shift();\r\n                    new_big_buffer[0].set(small_buffer[0], new_big_buffer_pos);\r\n                    new_big_buffer[1].set(small_buffer[1], new_big_buffer_pos);\r\n                    new_big_buffer_pos += small_buffer[0].length;\r\n                }\r\n\r\n                // Pretend that everything's just fine.\r\n                this.source_buffer_current = new_big_buffer;\r\n            }\r\n\r\n            this.pump();\r\n        };\r\n\r\n        DACProcessor.prototype.pump = function()\r\n        {\r\n            if(this.queued_samples / this.source_samples_per_destination < QUEUE_RESERVE)\r\n            {\r\n                this.port.postMessage(\r\n                {\r\n                    type: \"pump\",\r\n                });\r\n            }\r\n        };\r\n\r\n        DACProcessor.prototype.queue_push = function(item)\r\n        {\r\n            if(this.queue_length < this.queue_size)\r\n            {\r\n                this.queue_data[this.queue_end] = item;\r\n                this.queue_end = this.queue_end + 1 & this.queue_size - 1;\r\n                this.queue_length++;\r\n\r\n                this.queued_samples += item[0].length;\r\n\r\n                this.pump();\r\n            }\r\n        };\r\n\r\n        DACProcessor.prototype.queue_shift = function()\r\n        {\r\n            if(!this.queue_length)\r\n            {\r\n                return EMPTY_BUFFER;\r\n            }\r\n\r\n            var item = this.queue_data[this.queue_start];\r\n\r\n            this.queue_data[this.queue_start] = null;\r\n            this.queue_start = this.queue_start + 1 & this.queue_size - 1;\r\n            this.queue_length--;\r\n\r\n            this.queued_samples -= item[0].length;\r\n\r\n            return item;\r\n        };\r\n\r\n        DACProcessor.prototype.dbg_log = function(message)\r\n        {\r\n            if(DEBUG)\r\n            {\r\n                this.port.postMessage(\r\n                {\r\n                    type: \"debug-log\",\r\n                    value: message,\r\n                });\r\n            }\r\n        };\r\n\r\n        registerProcessor(\"dac-processor\", DACProcessor);\r\n    }\r\n\r\n    var worklet_string = worklet.toString();\r\n\r\n    var worklet_code_start = worklet_string.indexOf(\"{\") + 1;\r\n    var worklet_code_end = worklet_string.lastIndexOf(\"}\");\r\n    var worklet_code = worklet_string.substring(worklet_code_start, worklet_code_end);\r\n\r\n    if(DEBUG)\r\n    {\r\n        worklet_code = \"var DEBUG = true;\\n\" + worklet_code;\r\n    }\r\n\r\n    var worklet_blob = new Blob([worklet_code], { type: \"application/javascript\" });\r\n    var worklet_url = URL.createObjectURL(worklet_blob);\r\n\r\n    /** @type {AudioWorkletNode} */\r\n    this.node_processor = null;\r\n\r\n    // Placeholder pass-through node to connect to, when worklet node is not ready yet.\r\n    this.node_output = this.audio_context.createGain();\r\n\r\n    this.audio_context\r\n        .audioWorklet\r\n        .addModule(worklet_url)\r\n        .then(() =>\r\n    {\r\n        URL.revokeObjectURL(worklet_url);\r\n\r\n        this.node_processor = new AudioWorkletNode(this.audio_context, \"dac-processor\",\r\n        {\r\n            \"numberOfInputs\": 0,\r\n            \"numberOfOutputs\": 1,\r\n            \"outputChannelCount\": [2],\r\n        });\r\n\r\n        this.node_processor.port.postMessage(\r\n        {\r\n            type: \"sampling-rate\",\r\n            value: this.sampling_rate,\r\n        });\r\n\r\n        this.node_processor.port.onmessage = (event) =>\r\n        {\r\n            switch(event.data.type)\r\n            {\r\n                case \"pump\":\r\n                    this.pump();\r\n                    break;\r\n                case \"debug-log\":\r\n                    dbg_log(\"SpeakerWorkletDAC - Worklet: \" + event.data.value);\r\n                    break;\r\n            }\r\n        };\r\n\r\n        // Graph\r\n\r\n        this.node_processor.connect(this.node_output);\r\n    });\r\n\r\n    // Interface\r\n\r\n    this.mixer_connection = mixer.add_source(this.node_output, MIXER_SRC_DAC);\r\n    this.mixer_connection.set_gain_hidden(3);\r\n\r\n    bus.register(\"dac-send-data\", function(data)\r\n    {\r\n        this.queue(data);\r\n    }, this);\r\n\r\n    bus.register(\"dac-enable\", function(enabled)\r\n    {\r\n        this.enabled = true;\r\n    }, this);\r\n\r\n    bus.register(\"dac-disable\", function()\r\n    {\r\n        this.enabled = false;\r\n    }, this);\r\n\r\n    bus.register(\"dac-tell-sampling-rate\", function(/** number */ rate)\r\n    {\r\n        dbg_assert(rate > 0, \"Sampling rate should be nonzero\");\r\n        this.sampling_rate = rate;\r\n\r\n        if(!this.node_processor)\r\n        {\r\n            return;\r\n        }\r\n\r\n        this.node_processor.port.postMessage(\r\n        {\r\n            type: \"sampling-rate\",\r\n            value: rate,\r\n        });\r\n    }, this);\r\n\r\n    if(DEBUG)\r\n    {\r\n        this.debugger = new SpeakerDACDebugger(this.audio_context, this.node_output);\r\n    }\r\n}\r\n\r\nSpeakerWorkletDAC.prototype.queue = function(data)\r\n{\r\n    if(!this.node_processor)\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(DEBUG)\r\n    {\r\n        this.debugger.push_queued_data(data);\r\n    }\r\n\r\n    this.node_processor.port.postMessage(\r\n    {\r\n        type: \"queue\",\r\n        value: data,\r\n    }, [data[0].buffer, data[1].buffer]);\r\n};\r\n\r\nSpeakerWorkletDAC.prototype.pump = function()\r\n{\r\n    if(!this.enabled)\r\n    {\r\n        return;\r\n    }\r\n    this.bus.send(\"dac-request-data\");\r\n};\r\n\r\n/**\r\n * @constructor\r\n * @param {!BusConnector} bus\r\n * @param {!AudioContext} audio_context\r\n * @param {!SpeakerMixer} mixer\r\n */\r\nfunction SpeakerBufferSourceDAC(bus, audio_context, mixer)\r\n{\r\n    /** @const */\r\n    this.bus = bus;\r\n\r\n    /** @const */\r\n    this.audio_context = audio_context;\r\n\r\n    // States\r\n\r\n    this.enabled = false;\r\n    this.sampling_rate = 22050;\r\n    this.buffered_time = 0;\r\n    this.rate_ratio = 1;\r\n\r\n    // Nodes\r\n\r\n    this.node_lowpass = this.audio_context.createBiquadFilter();\r\n    this.node_lowpass.type = \"lowpass\";\r\n\r\n    // Interface\r\n\r\n    this.node_output = this.node_lowpass;\r\n\r\n    this.mixer_connection = mixer.add_source(this.node_output, MIXER_SRC_DAC);\r\n    this.mixer_connection.set_gain_hidden(3);\r\n\r\n    bus.register(\"dac-send-data\", function(data)\r\n    {\r\n        this.queue(data);\r\n    }, this);\r\n\r\n    bus.register(\"dac-enable\", function(enabled)\r\n    {\r\n        this.enabled = true;\r\n        this.pump();\r\n    }, this);\r\n\r\n    bus.register(\"dac-disable\", function()\r\n    {\r\n        this.enabled = false;\r\n    }, this);\r\n\r\n    bus.register(\"dac-tell-sampling-rate\", function(/** number */ rate)\r\n    {\r\n        dbg_assert(rate > 0, \"Sampling rate should be nonzero\");\r\n        this.sampling_rate = rate;\r\n        this.rate_ratio = Math.ceil(AUDIOBUFFER_MINIMUM_SAMPLING_RATE / rate);\r\n        this.node_lowpass.frequency.setValueAtTime(rate / 2, this.audio_context.currentTime);\r\n    }, this);\r\n\r\n    if(DEBUG)\r\n    {\r\n        this.debugger = new SpeakerDACDebugger(this.audio_context, this.node_output);\r\n    }\r\n}\r\n\r\nSpeakerBufferSourceDAC.prototype.queue = function(data)\r\n{\r\n    if(DEBUG)\r\n    {\r\n        this.debugger.push_queued_data(data);\r\n    }\r\n\r\n    var sample_count = data[0].length;\r\n    var block_duration = sample_count / this.sampling_rate;\r\n\r\n    var buffer;\r\n    if(this.rate_ratio > 1)\r\n    {\r\n        var new_sample_count = sample_count * this.rate_ratio;\r\n        var new_sampling_rate = this.sampling_rate * this.rate_ratio;\r\n        buffer = this.audio_context.createBuffer(2, new_sample_count, new_sampling_rate);\r\n        var buffer_data0 = buffer.getChannelData(0);\r\n        var buffer_data1 = buffer.getChannelData(1);\r\n\r\n        var buffer_index = 0;\r\n        for(var i = 0; i < sample_count; i++)\r\n        {\r\n            for(var j = 0; j < this.rate_ratio; j++, buffer_index++)\r\n            {\r\n                buffer_data0[buffer_index] = data[0][i];\r\n                buffer_data1[buffer_index] = data[1][i];\r\n            }\r\n        }\r\n    }\r\n    else\r\n    {\r\n        // Allocating new AudioBuffer every block\r\n        // - Memory profiles show insignificant improvements if recycling old buffers.\r\n        buffer = this.audio_context.createBuffer(2, sample_count, this.sampling_rate);\r\n        if(buffer.copyToChannel)\r\n        {\r\n            buffer.copyToChannel(data[0], 0);\r\n            buffer.copyToChannel(data[1], 1);\r\n        }\r\n        else\r\n        {\r\n            // Safari doesn't support copyToChannel yet. See #286\r\n            buffer.getChannelData(0).set(data[0]);\r\n            buffer.getChannelData(1).set(data[1]);\r\n        }\r\n    }\r\n\r\n    var source = this.audio_context.createBufferSource();\r\n    source.buffer = buffer;\r\n    source.connect(this.node_lowpass);\r\n    source.addEventListener(\"ended\", this.pump.bind(this));\r\n\r\n    var current_time = this.audio_context.currentTime;\r\n\r\n    if(this.buffered_time < current_time)\r\n    {\r\n        dbg_log(\"Speaker DAC - Creating/Recreating reserve - shouldn't occur frequently during playback\");\r\n\r\n        // Schedule pump() to queue evenly, starting from current time\r\n        this.buffered_time = current_time;\r\n        var target_silence_duration = DAC_QUEUE_RESERVE - block_duration;\r\n        var current_silence_duration = 0;\r\n        while(current_silence_duration <= target_silence_duration)\r\n        {\r\n            current_silence_duration += block_duration;\r\n            this.buffered_time += block_duration;\r\n            setTimeout(() => this.pump(), current_silence_duration * 1000);\r\n        }\r\n    }\r\n\r\n    source.start(this.buffered_time);\r\n    this.buffered_time += block_duration;\r\n\r\n    // Chase the schedule - ensure reserve is full\r\n    setTimeout(() => this.pump(), 0);\r\n};\r\n\r\nSpeakerBufferSourceDAC.prototype.pump = function()\r\n{\r\n    if(!this.enabled)\r\n    {\r\n        return;\r\n    }\r\n    if(this.buffered_time - this.audio_context.currentTime > DAC_QUEUE_RESERVE)\r\n    {\r\n        return;\r\n    }\r\n    this.bus.send(\"dac-request-data\");\r\n};\r\n\r\n/**\r\n * @constructor\r\n */\r\nfunction SpeakerDACDebugger(audio_context, source_node)\r\n{\r\n    /** @const */\r\n    this.audio_context = audio_context;\r\n\r\n    /** @const */\r\n    this.node_source = source_node;\r\n\r\n    this.node_processor = null;\r\n\r\n    this.node_gain = this.audio_context.createGain();\r\n    this.node_gain.gain.setValueAtTime(0, this.audio_context.currentTime);\r\n\r\n    this.node_gain.connect(this.audio_context.destination);\r\n\r\n    this.is_active = false;\r\n    this.queued_history = [];\r\n    this.output_history = [];\r\n    this.queued = [[], []];\r\n    this.output = [[], []];\r\n}\r\n\r\n/** @suppress {deprecated} */\r\nSpeakerDACDebugger.prototype.start = function(duration_ms)\r\n{\r\n    this.is_active = true;\r\n    this.queued = [[], []];\r\n    this.output = [[], []];\r\n    this.queued_history.push(this.queued);\r\n    this.output_history.push(this.output);\r\n\r\n    this.node_processor = this.audio_context.createScriptProcessor(1024, 2, 2);\r\n    this.node_processor.onaudioprocess = (event) =>\r\n    {\r\n        this.output[0].push(event.inputBuffer.getChannelData(0).slice());\r\n        this.output[1].push(event.inputBuffer.getChannelData(1).slice());\r\n    };\r\n\r\n    this.node_source.connect(this.node_processor);\r\n    this.node_processor.connect(this.node_gain);\r\n\r\n    setTimeout(() =>\r\n    {\r\n        this.stop();\r\n    }, duration_ms);\r\n};\r\n\r\nSpeakerDACDebugger.prototype.stop = function()\r\n{\r\n    this.is_active = false;\r\n    this.node_source.disconnect(this.node_processor);\r\n    this.node_processor.disconnect();\r\n    this.node_processor = null;\r\n};\r\n\r\nSpeakerDACDebugger.prototype.push_queued_data = function(data)\r\n{\r\n    if(this.is_active)\r\n    {\r\n        this.queued[0].push(data[0].slice());\r\n        this.queued[1].push(data[1].slice());\r\n    }\r\n};\r\n\r\n// Useful for Audacity imports\r\nSpeakerDACDebugger.prototype.download_txt = function(history_id, channel)\r\n{\r\n    var txt = this.output_history[history_id][channel]\r\n        .map((v) => v.join(\" \"))\r\n        .join(\" \");\r\n\r\n    dump_file(txt, \"dacdata.txt\");\r\n};\r\n\r\n// Useful for general plotting\r\nSpeakerDACDebugger.prototype.download_csv = function(history_id)\r\n{\r\n    var buffers = this.output_history[history_id];\r\n    var csv_rows = [];\r\n    for(var buffer_id = 0; buffer_id < buffers[0].length; buffer_id++)\r\n    {\r\n        for(var i = 0; i < buffers[0][buffer_id].length; i++)\r\n        {\r\n            csv_rows.push(`${buffers[0][buffer_id][i]},${buffers[1][buffer_id][i]}`);\r\n        }\r\n    }\r\n    dump_file(csv_rows.join(\"\\n\"), \"dacdata.csv\");\r\n};\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n *\r\n * @param {BusConnector} bus\r\n */\r\nfunction SerialAdapter(element, bus)\r\n{\r\n    var serial = this;\r\n\r\n    this.enabled = true;\r\n    this.bus = bus;\r\n    this.text = \"\";\r\n    this.text_new_line = false;\r\n\r\n    this.last_update = 0;\r\n\r\n\r\n    this.bus.register(\"serial0-output-char\", function(chr)\r\n    {\r\n        this.show_char(chr);\r\n    }, this);\r\n\r\n\r\n    this.destroy = function()\r\n    {\r\n        element.removeEventListener(\"keypress\", keypress_handler, false);\r\n        element.removeEventListener(\"keydown\", keydown_handler, false);\r\n        element.removeEventListener(\"paste\", paste_handler, false);\r\n        window.removeEventListener(\"mousedown\", window_click_handler, false);\r\n    };\r\n\r\n    this.init = function()\r\n    {\r\n        this.destroy();\r\n\r\n        element.addEventListener(\"keypress\", keypress_handler, false);\r\n        element.addEventListener(\"keydown\", keydown_handler, false);\r\n        element.addEventListener(\"paste\", paste_handler, false);\r\n        window.addEventListener(\"mousedown\", window_click_handler, false);\r\n    };\r\n    this.init();\r\n\r\n\r\n    this.show_char = function(chr)\r\n    {\r\n        if(chr === \"\\x08\")\r\n        {\r\n            this.text = this.text.slice(0, -1);\r\n            this.update();\r\n        }\r\n        else if(chr === \"\\r\")\r\n        {\r\n            // do nothing\r\n        }\r\n        else\r\n        {\r\n            this.text += chr;\r\n\r\n            if(chr === \"\\n\")\r\n            {\r\n                this.text_new_line = true;\r\n            }\r\n\r\n            this.update();\r\n        }\r\n    };\r\n\r\n    this.update = function()\r\n    {\r\n        var now = Date.now();\r\n        var delta = now - this.last_update;\r\n\r\n        if(delta < 16)\r\n        {\r\n            if(this.update_timer === undefined)\r\n            {\r\n                this.update_timer = setTimeout(() => {\r\n                    this.update_timer = undefined;\r\n                    var now = Date.now();\r\n                    dbg_assert(now - this.last_update >= 16);\r\n                    this.last_update = now;\r\n                    this.render();\r\n                }, 16 - delta);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if(this.update_timer !== undefined)\r\n            {\r\n                clearTimeout(this.update_timer);\r\n                this.update_timer = undefined;\r\n            }\r\n\r\n            this.last_update = now;\r\n            this.render();\r\n        }\r\n    };\r\n\r\n    this.render = function()\r\n    {\r\n        element.value = this.text;\r\n\r\n        if(this.text_new_line)\r\n        {\r\n            this.text_new_line = false;\r\n            element.scrollTop = 1e9;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {number} chr_code\r\n     */\r\n    this.send_char = function(chr_code)\r\n    {\r\n        if(serial.bus)\r\n        {\r\n            serial.bus.send(\"serial0-input\", chr_code);\r\n        }\r\n    };\r\n\r\n    function may_handle(e)\r\n    {\r\n        if(!serial.enabled)\r\n        {\r\n            return false;\r\n        }\r\n\r\n        // Something here?\r\n\r\n        return true;\r\n    }\r\n\r\n    function keypress_handler(e)\r\n    {\r\n        if(!serial.bus)\r\n        {\r\n            return;\r\n        }\r\n        if(!may_handle(e))\r\n        {\r\n            return;\r\n        }\r\n\r\n        var chr = e.which;\r\n\r\n        serial.send_char(chr);\r\n        e.preventDefault();\r\n    }\r\n\r\n    function keydown_handler(e)\r\n    {\r\n        var chr = e.which;\r\n\r\n        if(chr === 8)\r\n        {\r\n            // supress backspace\r\n            serial.send_char(127);\r\n            e.preventDefault();\r\n        }\r\n        else if(chr === 9)\r\n        {\r\n            // tab\r\n            serial.send_char(9);\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    function paste_handler(e)\r\n    {\r\n        if(!may_handle(e))\r\n        {\r\n            return;\r\n        }\r\n\r\n        var data = e.clipboardData.getData(\"text/plain\");\r\n\r\n        for(var i = 0; i < data.length; i++)\r\n        {\r\n            serial.send_char(data.charCodeAt(i));\r\n        }\r\n\r\n        e.preventDefault();\r\n    }\r\n\r\n    function window_click_handler(e)\r\n    {\r\n        if(e.target !== element)\r\n        {\r\n            element.blur();\r\n        }\r\n    }\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * An ethernet-through-websocket adapter, to be used with\r\n *     https://github.com/benjamincburns/websockproxy\r\n *\r\n * emulated ethernet card <--\u003e this <--\u003e websocket proxy <--\u003e network\r\n *\r\n * @constructor\r\n *\r\n * @param {string} url\r\n * @param {BusConnector} bus\r\n */\r\nfunction NetworkAdapter(url, bus)\r\n{\r\n    this.bus = bus;\r\n    this.socket = undefined;\r\n\r\n    // TODO: circular buffer?\r\n    this.send_queue = [];\r\n    this.url = url;\r\n\r\n    this.reconnect_interval = 10000;\r\n    this.last_connect_attempt = Date.now() - this.reconnect_interval;\r\n    this.send_queue_limit = 64;\r\n\r\n    this.bus.register(\"net0-send\", function(data)\r\n    {\r\n        this.send(data);\r\n    }, this);\r\n}\r\n\r\nNetworkAdapter.prototype.handle_message = function(e)\r\n{\r\n    if(this.bus)\r\n    {\r\n        this.bus.send(\"net0-receive\", new Uint8Array(e.data));\r\n    }\r\n};\r\n\r\nNetworkAdapter.prototype.handle_close = function(e)\r\n{\r\n    //console.log(\"onclose\", e);\r\n\r\n    this.connect();\r\n    setTimeout(this.connect.bind(this), this.reconnect_interval);\r\n};\r\n\r\nNetworkAdapter.prototype.handle_open = function(e)\r\n{\r\n    //console.log(\"open\", e);\r\n\r\n    for(var i = 0; i < this.send_queue.length; i++)\r\n    {\r\n        this.send(this.send_queue[i]);\r\n    }\r\n\r\n    this.send_queue = [];\r\n};\r\n\r\nNetworkAdapter.prototype.handle_error = function(e)\r\n{\r\n    //console.log(\"onerror\", e);\r\n};\r\n\r\nNetworkAdapter.prototype.destroy = function()\r\n{\r\n    if(this.socket)\r\n    {\r\n        this.socket.close();\r\n    }\r\n};\r\n\r\nNetworkAdapter.prototype.connect = function()\r\n{\r\n    if(typeof WebSocket === \"undefined\")\r\n    {\r\n        return;\r\n    }\r\n\r\n    if(this.socket)\r\n    {\r\n        var state = this.socket.readyState;\r\n\r\n        if(state === 0 || state === 1)\r\n        {\r\n            // already or almost there\r\n            return;\r\n        }\r\n    }\r\n\r\n    var now = Date.now();\r\n\r\n    if(this.last_connect_attempt + this.reconnect_interval > now)\r\n    {\r\n        return;\r\n    }\r\n\r\n    this.last_connect_attempt = Date.now();\r\n\r\n    this.socket = new WebSocket(this.url);\r\n    this.socket.binaryType = \"arraybuffer\";\r\n\r\n    this.socket.onopen = this.handle_open.bind(this);\r\n    this.socket.onmessage = this.handle_message.bind(this);\r\n    this.socket.onclose = this.handle_close.bind(this);\r\n    this.socket.onerror = this.handle_error.bind(this);\r\n};\r\n\r\nNetworkAdapter.prototype.send = function(data)\r\n{\r\n    //console.log(\"send\", data);\r\n\r\n    if(!this.socket || this.socket.readyState !== 1)\r\n    {\r\n        this.send_queue.push(data);\r\n\r\n        if(this.send_queue.length > 2 * this.send_queue_limit)\r\n        {\r\n            this.send_queue = this.send_queue.slice(-this.send_queue_limit);\r\n        }\r\n\r\n        this.connect();\r\n    }\r\n    else\r\n    {\r\n        this.socket.send(data);\r\n    }\r\n};\r\n\r\nNetworkAdapter.prototype.change_proxy = function(url)\r\n{\r\n    this.url = url;\r\n\r\n    if(this.socket)\r\n    {\r\n        this.socket.onclose = function() {};\r\n        this.socket.onerror = function() {};\r\n        this.socket.close();\r\n        this.socket = undefined;\r\n    }\r\n};\r\n","\"use strict\";\r\n\r\n/** @const */\r\nvar ASYNC_SAFE = false;\r\n\r\n(function()\r\n{\r\n    if(typeof XMLHttpRequest === \"undefined\")\r\n    {\r\n        v86util.load_file = load_file_nodejs;\r\n    }\r\n    else\r\n    {\r\n        v86util.load_file = load_file;\r\n    }\r\n\r\n    v86util.AsyncXHRBuffer = AsyncXHRBuffer;\r\n    v86util.AsyncFileBuffer = AsyncFileBuffer;\r\n    v86util.SyncFileBuffer = SyncFileBuffer;\r\n\r\n    /**\r\n     * @param {string} filename\r\n     * @param {Object} options\r\n     */\r\n    function load_file(filename, options)\r\n    {\r\n        var http = new XMLHttpRequest();\r\n\r\n        http.open(options.method || \"get\", filename, true);\r\n\r\n        if(!options.as_text)\r\n        {\r\n            http.responseType = \"arraybuffer\";\r\n        }\r\n\r\n        if(options.headers)\r\n        {\r\n            var header_names = Object.keys(options.headers);\r\n\r\n            for(var i = 0; i < header_names.length; i++)\r\n            {\r\n                var name = header_names[i];\r\n                http.setRequestHeader(name, options.headers[name]);\r\n            }\r\n        }\r\n\r\n        if(options.range)\r\n        {\r\n            let start = options.range.start;\r\n            let end = start + options.range.length - 1;\r\n            http.setRequestHeader(\"Range\", \"bytes=\" + start + \"-\" + end);\r\n        }\r\n\r\n        http.onload = function(e)\r\n        {\r\n            if(http.readyState === 4)\r\n            {\r\n                if(http.status !== 200 && http.status !== 206)\r\n                {\r\n                    console.error(\"Loading the image `\" + filename + \"` failed (status %d)\", http.status);\r\n                }\r\n                else if(http.response)\r\n                {\r\n                    options.done && options.done(http.response, http);\r\n                }\r\n            }\r\n        };\r\n\r\n        if(options.progress)\r\n        {\r\n            http.onprogress = function(e)\r\n            {\r\n                options.progress(e);\r\n            };\r\n        }\r\n\r\n        http.send(null);\r\n    }\r\n\r\n    function load_file_nodejs(filename, options)\r\n    {\r\n        let fs = require(\"fs\");\r\n\r\n        if(options.range)\r\n        {\r\n            dbg_assert(!options.as_text);\r\n\r\n            fs[\"open\"](filename, \"r\", (err, fd) =>\r\n            {\r\n                if(err) throw err;\r\n\r\n                let length = options.range.length;\r\n                var buffer = new global[\"Buffer\"](length);\r\n\r\n                fs[\"read\"](fd, buffer, 0, length, options.range.start, (err, bytes_read) =>\r\n                {\r\n                    if(err) throw err;\r\n\r\n                    dbg_assert(bytes_read === length);\r\n                    options.done && options.done(new Uint8Array(buffer));\r\n\r\n                    fs[\"close\"](fd, (err) => {\r\n                        if(err) throw err;\r\n                    });\r\n                });\r\n            });\r\n        }\r\n        else\r\n        {\r\n            var o = {\r\n                encoding: options.as_text ? \"utf-8\" : null,\r\n            };\r\n\r\n            fs[\"readFile\"](filename, o, function(err, data)\r\n            {\r\n                if(err)\r\n                {\r\n                    console.log(\"Could not read file:\", filename, err);\r\n                }\r\n                else\r\n                {\r\n                    var result = data;\r\n\r\n                    if(!options.as_text)\r\n                    {\r\n                        result = new Uint8Array(result).buffer;\r\n                    }\r\n\r\n                    options.done(result);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    if(typeof XMLHttpRequest === \"undefined\")\r\n    {\r\n        var determine_size = function(path, cb)\r\n        {\r\n            require(\"fs\")[\"stat\"](path, (err, stats) =>\r\n            {\r\n                if(err)\r\n                {\r\n                    cb(err);\r\n                }\r\n                else\r\n                {\r\n                    cb(null, stats.size);\r\n                }\r\n            });\r\n        };\r\n    }\r\n    else\r\n    {\r\n        var determine_size = function(url, cb)\r\n        {\r\n            v86util.load_file(url, {\r\n                done: (buffer, http) =>\r\n                {\r\n                    var header = http.getResponseHeader(\"Content-Range\") || \"\";\r\n                    var match = header.match(/\\/(\\d+)\\s*$/);\r\n\r\n                    if(match)\r\n                    {\r\n                        cb(null, +match[1]);\r\n                    }\r\n                    else\r\n                    {\r\n                        cb({ header });\r\n                    }\r\n                },\r\n                headers: {\r\n                    Range: \"bytes=0-0\",\r\n\r\n                    //\"Accept-Encoding\": \"\",\r\n\r\n                    // Added by Chromium, but can cause the whole file to be sent\r\n                    // Settings this to empty also causes problems and Chromium\r\n                    // doesn't seem to create this header any more\r\n                    //\"If-Range\": \"\",\r\n                }\r\n            });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Asynchronous access to ArrayBuffer, loading blocks lazily as needed,\r\n     * using the `Range: bytes=...` header\r\n     *\r\n     * @constructor\r\n     * @param {string} filename Name of the file to download\r\n     * @param {number|undefined} size\r\n     */\r\n    function AsyncXHRBuffer(filename, size)\r\n    {\r\n        this.filename = filename;\r\n\r\n        /** @const */\r\n        this.block_size = 256;\r\n        this.byteLength = size;\r\n\r\n        this.loaded_blocks = {};\r\n\r\n        this.onload = undefined;\r\n        this.onprogress = undefined;\r\n    }\r\n\r\n    AsyncXHRBuffer.prototype.load = function()\r\n    {\r\n        if(this.byteLength !== undefined)\r\n        {\r\n            this.onload && this.onload({});\r\n            return;\r\n        }\r\n\r\n        // Determine the size using a request\r\n\r\n        determine_size(this.filename, (error, size) =>\r\n        {\r\n            if(error)\r\n            {\r\n                console.assert(false,\r\n                    \"Cannot use: \" + this.filename + \". \" +\r\n                    \"`Range: bytes=...` header not supported (Got `\" + error.header + \"`)\");\r\n            }\r\n            else\r\n            {\r\n                dbg_assert(size >= 0);\r\n                this.byteLength = size;\r\n                this.onload && this.onload({});\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * @param {number} offset\r\n     * @param {number} len\r\n     * @param {function(!Uint8Array)} fn\r\n     */\r\n    AsyncXHRBuffer.prototype.get_from_cache = function(offset, len, fn)\r\n    {\r\n        var number_of_blocks = len / this.block_size;\r\n        var block_index = offset / this.block_size;\r\n\r\n        for(var i = 0; i < number_of_blocks; i++)\r\n        {\r\n            var block = this.loaded_blocks[block_index + i];\r\n\r\n            if(!block)\r\n            {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if(number_of_blocks === 1)\r\n        {\r\n            return this.loaded_blocks[block_index];\r\n        }\r\n        else\r\n        {\r\n            var result = new Uint8Array(len);\r\n            for(var i = 0; i < number_of_blocks; i++)\r\n            {\r\n                result.set(this.loaded_blocks[block_index + i], i * this.block_size);\r\n            }\r\n            return result;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {number} offset\r\n     * @param {number} len\r\n     * @param {function(!Uint8Array)} fn\r\n     */\r\n    AsyncXHRBuffer.prototype.get = function(offset, len, fn)\r\n    {\r\n        console.assert(offset + len <= this.byteLength);\r\n        console.assert(offset % this.block_size === 0);\r\n        console.assert(len % this.block_size === 0);\r\n        console.assert(len);\r\n\r\n        var block = this.get_from_cache(offset, len, fn);\r\n        if(block)\r\n        {\r\n            if(ASYNC_SAFE)\r\n            {\r\n                setTimeout(fn.bind(this, block), 0);\r\n            }\r\n            else\r\n            {\r\n                fn(block);\r\n            }\r\n            return;\r\n        }\r\n\r\n        v86util.load_file(this.filename, {\r\n            done: function done(buffer)\r\n            {\r\n                var block = new Uint8Array(buffer);\r\n                this.handle_read(offset, len, block);\r\n                fn(block);\r\n            }.bind(this),\r\n            range: { start: offset, length: len },\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Relies on this.byteLength, this.loaded_blocks and this.block_size\r\n     *\r\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\r\n     *\r\n     * @param {number} start\r\n     * @param {!Uint8Array} data\r\n     * @param {function()} fn\r\n     */\r\n    AsyncXHRBuffer.prototype.set = function(start, data, fn)\r\n    {\r\n        console.assert(start + data.byteLength <= this.byteLength);\r\n\r\n        var len = data.length;\r\n\r\n        console.assert(start % this.block_size === 0);\r\n        console.assert(len % this.block_size === 0);\r\n        console.assert(len);\r\n\r\n        var start_block = start / this.block_size;\r\n        var block_count = len / this.block_size;\r\n\r\n        for(var i = 0; i < block_count; i++)\r\n        {\r\n            var block = this.loaded_blocks[start_block + i];\r\n\r\n            if(block === undefined)\r\n            {\r\n                block = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\r\n            }\r\n\r\n            var data_slice = data.subarray(i * this.block_size, (i + 1) * this.block_size);\r\n            block.set(data_slice);\r\n\r\n            console.assert(block.byteLength === data_slice.length);\r\n        }\r\n\r\n        fn();\r\n    };\r\n\r\n    /**\r\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\r\n     * @param {number} offset\r\n     * @param {number} len\r\n     * @param {!Uint8Array} block\r\n     */\r\n    AsyncXHRBuffer.prototype.handle_read = function(offset, len, block)\r\n    {\r\n        // Used by AsyncXHRBuffer and AsyncFileBuffer\r\n        // Overwrites blocks from the original source that have been written since\r\n\r\n        var start_block = offset / this.block_size;\r\n        var block_count = len / this.block_size;\r\n\r\n        for(var i = 0; i < block_count; i++)\r\n        {\r\n            var written_block = this.loaded_blocks[start_block + i];\r\n\r\n            if(written_block)\r\n            {\r\n                block.set(written_block, i * this.block_size);\r\n            }\r\n            //else\r\n            //{\r\n            //    var cached = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\r\n            //    cached.set(block.subarray(i * this.block_size, (i + 1) * this.block_size));\r\n            //}\r\n        }\r\n    };\r\n\r\n    AsyncXHRBuffer.prototype.get_buffer = function(fn)\r\n    {\r\n        // We must download all parts, unlikely a good idea for big files\r\n        fn();\r\n    };\r\n\r\n    AsyncXHRBuffer.prototype.get_written_blocks = function()\r\n    {\r\n        var count = 0;\r\n        for(var _ in this.loaded_blocks)\r\n        {\r\n            count++;\r\n        }\r\n\r\n        var buffer = new Uint8Array(count * this.block_size);\r\n        var indices = [];\r\n\r\n        var i = 0;\r\n        for(var index in this.loaded_blocks)\r\n        {\r\n            var block = this.loaded_blocks[index];\r\n            dbg_assert(block.length === this.block_size);\r\n            index = +index;\r\n            indices.push(index);\r\n            buffer.set(\r\n                block,\r\n                i * this.block_size\r\n            );\r\n            i++;\r\n        }\r\n\r\n        return {\r\n            buffer,\r\n            indices,\r\n            block_size: this.block_size,\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Synchronous access to File, loading blocks from the input type=file\r\n     * The whole file is loaded into memory during initialisation\r\n     *\r\n     * @constructor\r\n     */\r\n    function SyncFileBuffer(file)\r\n    {\r\n        this.file = file;\r\n        this.byteLength = file.size;\r\n\r\n        if(file.size > (1 << 30))\r\n        {\r\n            console.warn(\"SyncFileBuffer: Allocating buffer of \" + (file.size >> 20) + \" MB ...\");\r\n        }\r\n\r\n        this.buffer = new ArrayBuffer(file.size);\r\n        this.onload = undefined;\r\n        this.onprogress = undefined;\r\n    }\r\n\r\n    SyncFileBuffer.prototype.load = function()\r\n    {\r\n        this.load_next(0);\r\n    };\r\n\r\n    /**\r\n     * @param {number} start\r\n     */\r\n    SyncFileBuffer.prototype.load_next = function(start)\r\n    {\r\n        /** @const */\r\n        var PART_SIZE = 4 << 20;\r\n\r\n        var filereader = new FileReader();\r\n\r\n        filereader.onload = function(e)\r\n        {\r\n            var buffer = new Uint8Array(e.target.result);\r\n            new Uint8Array(this.buffer, start).set(buffer);\r\n            this.load_next(start + PART_SIZE);\r\n        }.bind(this);\r\n\r\n        if(this.onprogress)\r\n        {\r\n            this.onprogress({\r\n                loaded: start,\r\n                total: this.byteLength,\r\n                lengthComputable: true,\r\n            });\r\n        }\r\n\r\n        if(start < this.byteLength)\r\n        {\r\n            var end = Math.min(start + PART_SIZE, this.byteLength);\r\n            var slice = this.file.slice(start, end);\r\n            filereader.readAsArrayBuffer(slice);\r\n        }\r\n        else\r\n        {\r\n            this.file = undefined;\r\n            this.onload && this.onload({ buffer: this.buffer });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {number} start\r\n     * @param {number} len\r\n     * @param {function(!Uint8Array)} fn\r\n     */\r\n    SyncFileBuffer.prototype.get = function(start, len, fn)\r\n    {\r\n        console.assert(start + len <= this.byteLength);\r\n        fn(new Uint8Array(this.buffer, start, len));\r\n    };\r\n\r\n    /**\r\n     * @param {number} offset\r\n     * @param {!Uint8Array} slice\r\n     * @param {function()} fn\r\n     */\r\n    SyncFileBuffer.prototype.set = function(offset, slice, fn)\r\n    {\r\n        console.assert(offset + slice.byteLength <= this.byteLength);\r\n\r\n        new Uint8Array(this.buffer, offset, slice.byteLength).set(slice);\r\n        fn();\r\n    };\r\n\r\n    SyncFileBuffer.prototype.get_buffer = function(fn)\r\n    {\r\n        fn(this.buffer);\r\n    };\r\n\r\n    /**\r\n     * Asynchronous access to File, loading blocks from the input type=file\r\n     *\r\n     * @constructor\r\n     */\r\n    function AsyncFileBuffer(file)\r\n    {\r\n        this.file = file;\r\n        this.byteLength = file.size;\r\n\r\n        /** @const */\r\n        this.block_size = 256;\r\n        this.loaded_blocks = {};\r\n\r\n        this.onload = undefined;\r\n        this.onprogress = undefined;\r\n    }\r\n\r\n    AsyncFileBuffer.prototype.load = function()\r\n    {\r\n        this.onload && this.onload({});\r\n    };\r\n\r\n    /**\r\n     * @param {number} offset\r\n     * @param {number} len\r\n     * @param {function(!Uint8Array)} fn\r\n     */\r\n    AsyncFileBuffer.prototype.get = function(offset, len, fn)\r\n    {\r\n        console.assert(offset % this.block_size === 0);\r\n        console.assert(len % this.block_size === 0);\r\n        console.assert(len);\r\n\r\n        var block = this.get_from_cache(offset, len, fn);\r\n        if(block)\r\n        {\r\n            fn(block);\r\n            return;\r\n        }\r\n\r\n        var fr = new FileReader();\r\n\r\n        fr.onload = function(e)\r\n        {\r\n            var buffer = e.target.result;\r\n            var block = new Uint8Array(buffer);\r\n\r\n            this.handle_read(offset, len, block);\r\n            fn(block);\r\n        }.bind(this);\r\n\r\n        fr.readAsArrayBuffer(this.file.slice(offset, offset + len));\r\n    };\r\n    AsyncFileBuffer.prototype.get_from_cache = AsyncXHRBuffer.prototype.get_from_cache;\r\n    AsyncFileBuffer.prototype.set = AsyncXHRBuffer.prototype.set;\r\n    AsyncFileBuffer.prototype.handle_read = AsyncXHRBuffer.prototype.handle_read;\r\n\r\n    AsyncFileBuffer.prototype.get_buffer = function(fn)\r\n    {\r\n        // We must load all parts, unlikely a good idea for big files\r\n        fn();\r\n    };\r\n\r\n    AsyncFileBuffer.prototype.get_as_file = function(name)\r\n    {\r\n        var parts = [];\r\n        var existing_blocks = Object.keys(this.loaded_blocks)\r\n                                .map(Number)\r\n                                .sort(function(x, y) { return x - y; });\r\n\r\n        var current_offset = 0;\r\n\r\n        for(var i = 0; i < existing_blocks.length; i++)\r\n        {\r\n            var block_index = existing_blocks[i];\r\n            var block = this.loaded_blocks[block_index];\r\n            var start = block_index * this.block_size;\r\n            console.assert(start >= current_offset);\r\n\r\n            if(start !== current_offset)\r\n            {\r\n                parts.push(this.file.slice(current_offset, start));\r\n                current_offset = start;\r\n            }\r\n\r\n            parts.push(block);\r\n            current_offset += block.length;\r\n        }\r\n\r\n        if(current_offset !== this.file.size)\r\n        {\r\n            parts.push(this.file.slice(current_offset));\r\n        }\r\n\r\n        var file = new File(parts, name);\r\n        console.assert(file.size === this.file.size);\r\n\r\n        return file;\r\n    };\r\n\r\n})();\r\n","\"use strict\";\r\n\r\n/**\r\n * @constructor\r\n *\r\n * @param {BusConnector} bus\r\n */\r\nfunction DummyScreenAdapter(bus)\r\n{\r\n    var\r\n        graphic_image_data,\r\n        graphic_buffer,\r\n        graphic_buffer32,\r\n\r\n        /** @type {number} */\r\n        cursor_row,\r\n\r\n        /** @type {number} */\r\n        cursor_col,\r\n\r\n        graphical_mode_width,\r\n        graphical_mode_height,\r\n\r\n        // are we in graphical mode now?\r\n        is_graphical = false,\r\n\r\n        // Index 0: ASCII code\r\n        // Index 1: Background color\r\n        // Index 2: Foreground color\r\n        text_mode_data,\r\n\r\n        // number of columns\r\n        text_mode_width,\r\n\r\n        // number of rows\r\n        text_mode_height;\r\n\r\n    this.bus = bus;\r\n\r\n    bus.register(\"screen-set-mode\", function(data)\r\n    {\r\n        this.set_mode(data);\r\n    }, this);\r\n\r\n    bus.register(\"screen-fill-buffer-end\", function(data)\r\n    {\r\n        var min = data[0];\r\n        var max = data[1];\r\n\r\n        this.update_buffer(min, max);\r\n    }, this);\r\n\r\n    bus.register(\"screen-put-char\", function(data)\r\n    {\r\n        //console.log(data);\r\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\r\n    }, this);\r\n\r\n    bus.register(\"screen-text-scroll\", function(rows)\r\n    {\r\n        console.log(\"scroll\", rows);\r\n    }, this);\r\n\r\n    bus.register(\"screen-update-cursor\", function(data)\r\n    {\r\n        this.update_cursor(data[0], data[1]);\r\n    }, this);\r\n    bus.register(\"screen-update-cursor-scanline\", function(data)\r\n    {\r\n        this.update_cursor_scanline(data[0], data[1]);\r\n    }, this);\r\n\r\n    bus.register(\"screen-set-size-text\", function(data)\r\n    {\r\n        this.set_size_text(data[0], data[1]);\r\n    }, this);\r\n    bus.register(\"screen-set-size-graphical\", function(data)\r\n    {\r\n        this.set_size_graphical(data[0], data[1]);\r\n    }, this);\r\n\r\n    this.put_char = function(row, col, chr, bg_color, fg_color)\r\n    {\r\n        if(row < text_mode_height && col < text_mode_width)\r\n        {\r\n            var p = 3 * (row * text_mode_width + col);\r\n\r\n            text_mode_data[p] = chr;\r\n            text_mode_data[p + 1] = bg_color;\r\n            text_mode_data[p + 2] = fg_color;\r\n        }\r\n    };\r\n\r\n    this.destroy = function()\r\n    {\r\n    };\r\n\r\n    this.set_mode = function(graphical)\r\n    {\r\n        is_graphical = graphical;\r\n    };\r\n\r\n    this.clear_screen = function()\r\n    {\r\n    };\r\n\r\n    /**\r\n     * @param {number} cols\r\n     * @param {number} rows\r\n     */\r\n    this.set_size_text = function(cols, rows)\r\n    {\r\n        if(cols === text_mode_width && rows === text_mode_height)\r\n        {\r\n            return;\r\n        }\r\n\r\n        text_mode_data = new Int32Array(cols * rows * 3);\r\n\r\n        text_mode_width = cols;\r\n        text_mode_height = rows;\r\n    };\r\n\r\n    this.set_size_graphical = function(width, height)\r\n    {\r\n        graphic_buffer = new Uint8Array(4 * width * height);\r\n        graphic_buffer32 = new Int32Array(graphic_buffer.buffer);\r\n\r\n        graphical_mode_width = width;\r\n        graphical_mode_height = height;\r\n\r\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\r\n    };\r\n\r\n    this.set_scale = function(s_x, s_y)\r\n    {\r\n    };\r\n\r\n    this.update_cursor_scanline = function(start, end)\r\n    {\r\n    };\r\n\r\n    this.update_cursor = function(row, col)\r\n    {\r\n        if(row !== cursor_row || col !== cursor_col)\r\n        {\r\n            cursor_row = row;\r\n            cursor_col = col;\r\n        }\r\n    };\r\n\r\n    this.update_buffer = function(min, max)\r\n    {\r\n        if(max < min)\r\n        {\r\n            return;\r\n        }\r\n\r\n        var min_y = min / graphical_mode_width | 0;\r\n        var max_y = max / graphical_mode_width | 0;\r\n    };\r\n\r\n    this.get_text_screen = function()\r\n    {\r\n        var screen = [];\r\n\r\n        for(var i = 0; i < text_mode_height; i++)\r\n        {\r\n            screen.push(this.get_text_row(i));\r\n        }\r\n\r\n        return screen;\r\n    };\r\n\r\n    this.get_text_row = function(i)\r\n    {\r\n        var row = \"\";\r\n        var offset = 3 * i * text_mode_width;\r\n\r\n        for(var j = 0; j < text_mode_width; j++)\r\n        {\r\n            row += String.fromCharCode(text_mode_data[offset + 3 * j]);\r\n        }\r\n\r\n        return row;\r\n    };\r\n}\r\n"],
"names":["$jscomp.arrayIteratorImpl","$jscomp.defineProperty","$jscomp.global","$jscomp.polyfill","$jscomp.checkStringArgs","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SymbolClass","$jscomp.SYMBOL_PREFIX","$jscomp.iteratorPrototype","$jscomp.initSymbolIterator","$jscomp.iteratorFromArray","$jscomp.makeIterator","$jscomp.owns","$jscomp.objectCreate","$jscomp.construct","$jscomp.setPrototypeOf","Virtio9p","filesystem","bus","fs","SendReply","this.SendReply","deviceid","hostfeature","configspace","Uint8Array","VERSION","msize","BLOCKSIZE","replybuffer","replybuffersize","fids","prototype","get_state","Virtio9p.prototype.get_state","state","map","f","inodeid","type","uid","set_state","Virtio9p.prototype.set_state","Virtio9p.prototype.BuildReply","id","tag","payloadsize","marshall.Marshall","Virtio9p.prototype.SendError","errorcode","size","BuildReply","Virtio9p.prototype.ReceiveRequest","index","GetByte","header","marshall.Unmarshall2","used_size","req","Math","floor","total_size","inodes","length","fid","mode","idx","inode","GetInode","ret","OpenInode","AddEvent","qid","bind","dfid","name","CreateInode","inodetarget","targetdata","inodedata","symlink","data","i","parentid","PushInode","gid","CreateSymlink","symgt","major","minor","CreateNode","CreateDirectory","S_IFDIR","CreateFile","FID_INODE","status","STATUS_UNLINKED","SendError","ENOENT","nlinks","atime","mtime","ctime","P9_SETATTR_MODE","P9_SETATTR_UID","P9_SETATTR_GID","P9_SETATTR_ATIME","getTime","Date","P9_SETATTR_MTIME","P9_SETATTR_CTIME","P9_SETATTR_ATIME_SET","P9_SETATTR_MTIME_SET","P9_SETATTR_SIZE","ChangeSize","offset","count","FID_XATTR","caps","file","send","Write","Rename","olddirfid","oldname","newdirfid","newname","dirfd","Search","Unlink","ENOTEMPTY","version","nwfid","nwname","wnames","push","walk","nwidx","CloseInode","FID_NONE","newfid","PrepareCAPs","window","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","ScreenAdapter","screen_container","number_as_color","n","toString","repeat","elem_set_scale","elem","scale_x","scale_y","use_scale","style","width","height","transform","rectangle","getBoundingClientRect","scale_str","graphic_screen","imageRendering","device_pixel_ratio","devicePixelRatio","console","assert","getElementsByTagName","graphic_context","getContext","alpha","text_screen","cursor_element","document","createElement","graphic_image_data","graphic_buffer32","cursor_row","cursor_col","changed_rows","is_graphical","text_mode_data","text_mode_width","text_mode_height","stopped","screen","charmap_high","Uint16Array","charmap_low","charmap","chr","String","fromCharCode","imageSmoothingEnabled","position","backgroundColor","display","register","set_mode","update_buffer","put_char","update_cursor","update_cursor_scanline","clear_screen","set_size_text","set_size_graphical","init","this.init","timer","make_screenshot","this.make_screenshot","image","Image","src","toDataURL","char_size","canvas","context","font","getComputedStyle","textBaseline","x","y","fillStyle","fillRect","fillText","parseInt","marginTop","open","w","write","outerHTML","e","this.put_char","row","col","bg_color","fg_color","p","this.timer","update_graphical","update_text","text_update_row","destroy","this.destroy","this.set_mode","graphical","this.clear_screen","this.set_size_text","cols","rows","Int8Array","Int32Array","childNodes","removeChild","firstChild","appendChild","this.set_size_graphical","buffer_width","buffer_height","createImageData","buffer","set_scale","this.set_scale","s_x","s_y","this.update_cursor_scanline","start","end","min","this.update_cursor","this.text_update_row","text","row_element","fragment","color_element","color","ascii","textContent","parentNode","replaceChild","this.update_buffer","layers","forEach","layer","putImageData","screen_x","buffer_x","screen_y","buffer_y","get_query_arguments","query","location","search","substr","split","parameters","param","decodeURIComponent","chr_repeat","result","$","getElementById","el","onload","start_profile","infos","title","settings","initial_state","fda","cdrom","hda","multiboot","memory_size","vga_memory_size","undefined","boot_order","description","innerHTML","start_emulation","done","emulator","query_args","setTimeout","keyboard_send_text","XMLHttpRequest","onclick","set_profile","floppy_file","files","last_file","cd_file","hda_file","hdb_file","hdb","multiboot_file","oses","HOST","ON_LOCALHOST","profile","use_bochs_bios","element","blur","alert","MB","value","biosfile","vgabiosfile","bios","BIOSPATH","vga_bios","V86Starter","add_listener","init_ui","file_index","file_count","loaded","total","line","per100","max","per50","progress_ticks","file_name","update_info","now","instruction_counter","get_instruction_counter","last_ips","last_instr_counter","delta_time","last_tick","running_time","time","v86util.pad0","add_image_download_button","obj","elem.onclick","disk_images","filename","get_as_file","download","get_buffer","b","dump_file","ctrl_w_rescue","ctrlKey","onbeforeunload","window.onbeforeunload","init_filesystem_panel","cpu_is_running","stop","run","href","pathname","mouse_is_enabled","lock_mouse","mouse_adapter","emu_enabled","interval","os_uses_mouse","setInterval","clearInterval","args","read","read_sectors","write_sectors","bytes_received","bytes_transmitted","is_enabled","restart","fdb","v86","cpu","mem8","save_state","error","log","stack","click","onchange","was_running","filereader","FileReader","filereader.onload","restore_state","target","err","readAsArrayBuffer","keyboard_send_scancodes","parseFloat","screen_set_scale","screen_go_fullscreen","getSelection","isCollapsed","phone_keyboard","getElementsByClassName","top","body","scrollTop","left","scrollLeft","focus","setAttribute","tabIndex","addEventListener","screen_make_screenshot","Array","call","loader","v86util.SyncFileBuffer","loader.onload","create_file","load","onkeypress","which","disabled","read_file","uint8array","replace","onpopstate","reload","prof","history","pushState","hostname","endsWith","readyState","IO","ports","create_empty_entry","MMAP_BLOCK_BITS","memory_map_read8","memory_map_write8","memory_map_read32","memory_map_write32","mmap_register","IO.prototype.create_empty_entry","read8","empty_port_read8","read16","empty_port_read16","read32","empty_port_read32","write8","empty_port_write","write16","write32","device","IO.prototype","IO.prototype.empty_port_read8","IO.prototype.empty_port_read16","IO.prototype.empty_port_read32","IO.prototype.empty_port_write","IO.prototype.register_read","port_addr","r8","r16","r32","IO.prototype.register_write","w8","w16","w32","register_read_consecutive","IO.prototype.register_read_consecutive","r8_1","r8_2","r8_3","r8_4","r16_1","r16_2","register_read","register_write_consecutive","IO.prototype.register_write_consecutive","w8_1","w8_2","w8_3","w8_4","w16_1","w16_2","register_write","IO.prototype.in_mmap_range","in_mapped_range","MMAP_BLOCK_SIZE","mmap_read32_shim","IO.prototype.mmap_read32_shim","addr","fn","mmap_write32_shim","IO.prototype.mmap_write32_shim","IO.prototype.mmap_register","read_func8","write_func8","read_func32","write_func32","aligned_addr","IO.prototype.port_write8","entry","IO.prototype.port_write16","IO.prototype.port_write32","IO.prototype.port_read8","IO.prototype.port_read16","IO.prototype.port_read32","running","CPU","register_tick","v86.prototype","v86.prototype.run","fast_next_tick","v86.prototype.do_tick","in_hlt","v86.microtick","hlt_loop","devices","pit","rtc","handle_irqs","t","TIME_PER_FRAME","run_hardware_timers","do_run","do_many_cycles","do_many_cycles_unsafe","k","LOOP_COUNTER","cycle_internal","exception_cleanup","dt","next_tick","v86.prototype.stop","v86.prototype.destroy","unregister_tick","v86.prototype.restart","reset","load_bios","v86.prototype.init","setImmediate","do_tick","postMessage","MAGIC_POST_MESSAGE","tick","source","removeEventListener","hidden","v86.prototype.save_state","v86.prototype.restore_state","performance","str","len","h","toUpperCase","crypto","getRandomValues","rand_data","v86util.has_rand_int","v86util.get_rand_int","SyncBuffer","byteLength","SyncBuffer.prototype.load","get","SyncBuffer.prototype.get","set","SyncBuffer.prototype.set","slice","SyncBuffer.prototype.get_buffer","clz32","v86util.int_log2_byte","v86util.int_log2","int_log2_table","tt","v86util.imul_low","v86util.mul_low","imul","a","v86util.mul_high","ByteQueue","this.push","item","shift","this.shift","clear","this.clear","FloatQueue","DSP_DACSIZE","Float32Array","FloatQueue.prototype.push","FloatQueue.prototype.shift","FloatQueue.prototype.shift_block","slice_end","partial","subarray","FloatQueue.prototype.clear","ab","blob","Blob","file_or_blob","URL","createObjectURL","dataset","join","createEvent","ev","initMouseEvent","dispatchEvent","revokeObjectURL","FPU","st","Float64Array","float32","float32_int","float64","float64_byte","float64_int","st8","stack_empty","stack_ptr","control_word","fpu_dp_selector","fpu_dp","fpu_opcode","fpu_ip_selector","fpu_ip","status_word","indefinite_nan","NaN","constants","LN2","LOG2E","PI","LN10","FPU.prototype","FPU.prototype.get_state","FPU.prototype.set_state","FPU.prototype.fpu_unimpl","trigger_ud","invalid_arithmatic","FPU.prototype.invalid_arithmatic","FPU_EX_I","FPU.prototype.fcom","get_st0","FPU_C0","FPU_C3","FPU.prototype.fcomi","flags_changed","flags","flag_zero","FPU.prototype.finit","FPU.prototype.load_status_word","FPU.prototype.fstenv","is_osize_32","writable_or_pagefault","safe_write16","load_status_word","tag_word","load_tag_word","isFinite","safe_write32","fpu_unimpl","FPU.prototype.fldenv","safe_read16","set_status_word","sw","set_tag_word","safe_read32s","integer_round","FPU.prototype.integer_round","FPU.prototype.truncate","ceil","FPU.prototype.push","FPU_C1","stack_fault","pop","FPU.prototype.pop","FPU.prototype.get_sti","FPU.prototype.get_st0","FPU.prototype.load_m80","exponent","low","high","sign","mantissa","pow","FPU.prototype.store_m80","FPU.prototype.load_m64","FPU.prototype.store_m64","get_sti","FPU.prototype.load_m32","FPU.prototype.sign","IDEDevice","master_buffer","slave_buffer","is_cd","nr","master","IDEInterface","slave","current_interface","ata_port","irq","pci_id","ata_port_high","master_port","pci_space","pci_bars","device_control","io","device_lower_irq","read_status","write_control","read_data","bytecount","sector","cylinder_low","cylinder_high","drive_head","write_data_port","lba_count","is_lba","head","dma_command","dma_status","prdt_addr","current_command","data_pointer","data_end","data_length","device_reset","push_irq","last_sector","sector_count","ata_read_sectors","is_lba48","get_count","ata_write_sectors","lba","get_lba","is_single","byte_count","sector_size","data_allocate_noclear","sectors_per_drq","write_dest","is_atapi","data_allocate","create_identify_packet","ata_read_sectors_dma","ata_write_sectors_dma","dma_read_addr","dma_set_addr","dma_read_command8","dma_read_command","dma_write_command8","dma_write_command","dma_read_status","dma_write_status","register_device","pci","IDEDevice.prototype","IDEDevice.prototype.read_status","IDEDevice.prototype.write_control","IDEDevice.prototype.dma_read_addr","IDEDevice.prototype.dma_set_addr","IDEDevice.prototype.dma_read_status","IDEDevice.prototype.dma_write_status","IDEDevice.prototype.dma_read_command","IDEDevice.prototype.dma_read_command8","IDEDevice.prototype.dma_write_command","IDEDevice.prototype.dma_write_command8","old_command","do_ata_read_sectors_dma","do_ata_write_sectors_dma","do_atapi_dma","IDEDevice.prototype.push_irq","device_raise_irq","IDEDevice.prototype.get_state","IDEDevice.prototype.set_state","device_nr","CDROM_SECTOR_SIZE","HD_SECTOR_SIZE","cylinder_count","sectors_per_track","head_count","cmos_data","CMOS_BIOS_DISKTRANSFLAG","CMOS_DISK_DATA","stats","sectors_read","sectors_written","bytes_read","bytes_written","loading","data16","data32","current_atapi_command","Object","seal","IDEInterface.prototype.device_reset","IDEInterface.prototype.push_irq","do_write","IDEInterface.prototype.do_write","ata_advance","report_write","IDEInterface.prototype.atapi_read","cmd","req_length","report_read_start","data_set","report_read_end","IDEInterface.prototype.atapi_read_dma","IDEInterface.prototype.do_atapi_dma","prdt_start","read32s","IDEInterface.prototype.read_data","read_end","IDEInterface.prototype.write_data_port","write_end","atapi_read_dma","atapi_read","format","page_code","IDEInterface.prototype.ata_advance","sectors","new_sector","get_lba48","get_lba28","get_chs","c","IDEInterface.prototype.ata_read_sectors","IDEInterface.prototype.do_ata_read_sectors_dma","prd_addr","prd_count","IDEInterface.prototype.do_ata_write_sectors_dma","prdt_count","prdt_write_count","IDEInterface.prototype.get_chs","IDEInterface.prototype.get_lba28","IDEInterface.prototype.get_lba48","IDEInterface.prototype.get_lba","IDEInterface.prototype.get_count","IDEInterface.prototype.create_identify_packet","IDEInterface.prototype.data_allocate","IDEInterface.prototype.data_allocate_noclear","IDEInterface.prototype.data_set","IDEInterface.prototype.report_read_start","IDEInterface.prototype.report_read_end","IDEInterface.prototype.report_write","IDEInterface.prototype.get_state","IDEInterface.prototype.set_state","PCI","pci_addr","pci_value","pci_response","pci_status","pci_addr32","pci_response32","pci_status32","device_spaces","PCI_CONFIG_DATA","pci_write8","pci_write16","bdf","address","space","pci_write32","bar","space_addr","written","original_bar","set_io_bars","pci_rom_size","pci_rom_address","PCI_CONFIG_ADDRESS","out_byte","MAGIC_CPU_EXCEPTION","pci_query","host_bridge","PAM0","isa_bridge","isa_bridge_space","isa_bridge_space8","PCI.prototype.get_state","PCI.prototype.set_state","bar_nr","PCI.prototype.pci_write8","PCI.prototype.pci_write16","PCI.prototype.register_device","device_id","bar_space","bar_base","entries","j","port","PCI.prototype.set_io_bars","from","to","raise_irq","PCI.prototype.raise_irq","lower_irq","PCI.prototype.lower_irq","FloppyController","fda_image","dma","bytes_expecting","receiving_command","receiving_index","next_command","response_data","floppy_size","response_length","response_index","last_head","last_cylinder","drive","status_reg2","status_reg1","status_reg0","dor","number_of_cylinders","floppy_type","floppy_types","tracks","heads","CMOS_FLOPPY_DRIVE_TYPE","number_of_heads","port3F0_read","port3F2_read","port3F4_read","port3F5_read","port3F7_read","port3F2_write","port3F5_write","FloppyController.prototype","FloppyController.prototype.get_state","FloppyController.prototype.set_state","FloppyController.prototype.port3F0_read","FloppyController.prototype.port3F4_read","return_byte","FloppyController.prototype.port3F7_read","FloppyController.prototype.port3F5_read","FloppyController.prototype.port3F5_write","reg_byte","fix_drive_data","check_drive_status","this.next_command","do_sector","calibrate","check_interrupt_status","read_sector_id","seek","FloppyController.prototype.port3F2_read","FloppyController.prototype.port3F2_write","FloppyController.prototype.check_drive_status","FloppyController_prototype$seek","FloppyController.prototype.seek","FloppyController.prototype.calibrate","FloppyController.prototype.do_sector","is_write","cylinder","read_count","read_offset","do_read","FloppyController.prototype.done","FloppyController.prototype.fix_drive_data","FloppyController.prototype.read_sector_id","FloppyController.prototype.raise_irq","CPU.prototype.mmap_read16","CPU.prototype.mmap_write16","CPU.prototype.in_mapped_range","CPU.prototype","CPU.prototype.read8","mmap_read8","CPU.prototype.read16","mmap_read16","CPU.prototype.read_aligned16","mem16","CPU.prototype.read32s","mmap_read32","CPU.prototype.read_aligned32","CPU.prototype.write8","mmap_write8","CPU.prototype.write16","mmap_write16","CPU.prototype.write_aligned16","CPU.prototype.write32","mmap_write32","CPU.prototype.write_aligned32","mem32s","DMA","channel_page","channel_pagehi","channel_addr","channel_addr_init","channel_count","channel_count_init","channel_mask","channel_mode","unmask_listeners","lsb_msb_flipflop","port_addr_write","port_count_write","port_addr_read","port_count_read","port_page_write","port_page_read","port_pagehi_write","port_pagehi_read","port_singlemask_write","port_multimask_write","port_multimask_read","port_mode_write","portC_write","DMA.prototype","DMA.prototype.get_state","DMA.prototype.set_state","DMA.prototype.port_count_write","channel","data_byte","flipflop_get","DMA.prototype.port_count_read","flipflop_read","DMA.prototype.port_addr_write","DMA.prototype.port_addr_read","DMA.prototype.port_pagehi_write","DMA.prototype.port_pagehi_read","DMA.prototype.port_page_write","DMA.prototype.port_page_read","DMA.prototype.port_singlemask_write","channel_offset","update_mask","DMA.prototype.port_multimask_write","DMA.prototype.port_multimask_read","DMA.prototype.port_mode_write","DMA.prototype.portC_write","DMA.prototype.update_mask","this_value","DMA.prototype.do_read","count_get_8bit","address_get_8bit","DMA.prototype.do_write","bytes_per_count","read_bytes","unfinished","want_more","autoinit","DMA.prototype.address_get_8bit","DMA.prototype.flipflop_get","old_dword","new_byte","continuing","DMA.prototype.flipflop_read","dword","PIT","counter_start_time","counter_start_value","counter_next_low","counter_enabled","counter_mode","counter_read_mode","counter_latch","counter_latch_value","counter_reload","ref_toggle","counter2_out","did_rollover","counter_read","counter_write","port43_write","PIT.prototype.get_state","PIT.prototype.set_state","PIT.prototype.timer","no_irq","get_counter_value","PIT.prototype.get_counter_value","diff_in_ticks","OSCILLATOR_FREQ","PIT.prototype.did_rollover","diff","PIT.prototype.counter_read","latch","next_low","PIT.prototype.counter_write","PIT.prototype.port43_write","read_mode","VGA_HOST_MEMORY_SPACE_START","Uint32Array","VGA_HOST_MEMORY_SPACE_SIZE","VGAScreen","cursor_address","cursor_scanline_start","cursor_scanline_end","max_cols","max_rows","virtual_height","virtual_width","screen_height","screen_width","start_address_latched","start_address","crtc","line_compare","offset_register","preset_row_scan","underline_location_register","vertical_blank_start","vertical_display_enable_end","horizontal_blank_start","horizontal_display_enable_end","crtc_mode","graphical_mode_is_linear","graphical_mode","vga256_palette","svga_height","svga_width","latch_dword","svga_enabled","svga_bpp","svga_offset","svga_bank_offset","res_x","res_y","bpp","dac_state","dac_color_index_read","dac_color_index_write","index_crtc","dac_mask","dac_map","attribute_controller_index","palette_source","color_select","horizontal_panning","color_plane_enable","attribute_mode","sequencer_index","plane_write_bm","clocking_mode","sequencer_memory_mode","graphics_index","planar_rotate_reg","planar_mode","plane_read","planar_bitmap","max_scan_line","color_dont_care","color_compare","miscellaneous_graphics_register","planar_setreset_enable","planar_setreset","port_3DA_value","miscellaneous_output_register","port3C0_write","port3C0_read","port3C0_read16","port3C1_read","port3C2_write","port3C4_write","port3C5_write","port3C4_read","port3C5_read","port3CE_write","port3CF_write","port3CE_read","port3CF_read","port3C6_read","port3C6_write","port3C7_write","port3C7_read","port3C8_write","port3C8_read","port3C9_write","port3C9_read","port3CC_read","port3D4_write","port3D5_write","port3D4_read","port3D5_read","port3DA_read","dispi_index","dispi_enable_value","port1CE_write","port1CF_write","port1CF_read","VGA_MIN_MEMORY_SIZE","svga_memory","diff_addr_min","diff_addr_max","diff_plot_min","diff_plot_max","dest_buffer","screen_fill_buffer","start_pixel","end_pixel","svga_memory32","red","green","blue","word","svga_memory16","min_y","addr_shift","vga_addr_shift_count","addr_substitution","shift_mode","pel_width","pixel_addr","byte0","plane0","byte1","plane1","byte2","plane2","byte3","plane3","shift_loads","pixel_buffer","mask","colorset","color256","update_vertical_retrace","vga_memory","VGA_BANK_SIZE","VGA_PIXEL_BUFFER_START","VGA_PIXEL_BUFFER_SIZE","me","vga_memory_read","memory_space_select","bitmask","apply_feed","setreset_dword","apply_expand","setreset_enable_dword","plane_dword","apply_logical","plane_select","vga_addr_to_pixel","memory_start","VGA_LFB_ADDRESS","VGAScreen.prototype","VGAScreen.prototype.get_state","VGAScreen.prototype.set_state","update_layers","update_vga_size","complete_replot","complete_redraw","VGAScreen.prototype.vga_memory_read","reading","plane","VGAScreen.prototype.apply_feed","VGAScreen.prototype.apply_expand","VGAScreen.prototype.apply_logical","data_dword","VGAScreen.prototype.text_mode_redraw","VGAScreen.prototype.update_cursor","VGAScreen.prototype.complete_redraw","text_mode_redraw","VGAScreen.prototype.complete_replot","VGAScreen.prototype.destroy","VGAScreen.prototype.vga_addr_shift_count","shift_count","VGAScreen.prototype.vga_addr_to_pixel","VGAScreen.prototype.scan_line_to_screen_row","scan_line","VGAScreen.prototype.set_size_text","cols_count","rows_count","VGAScreen.prototype.set_size_graphical","VGAScreen.prototype.update_vga_size","horizontal_characters","vertical_scans","bytes_per_line","vga_bytes_per_line","scan_line_to_screen_row","available_bytes","VGAScreen.prototype.update_layers","start_addr","pixel_panning","byte_panning","pixel_addr_start","start_buffer_row","start_buffer_col","split_screen_row","split_buffer_height","start_split_col","VGAScreen.prototype.update_vertical_retrace","VGAScreen.prototype.update_cursor_scanline","VGAScreen.prototype.port3C0_write","previous_mode","VGAScreen.prototype.port3C0_read","VGAScreen.prototype.port3C0_read16","VGAScreen.prototype.port3C1_read","VGAScreen.prototype.port3C2_write","VGAScreen.prototype.port3C4_write","VGAScreen.prototype.port3C4_read","VGAScreen.prototype.port3C5_write","previous_clocking_mode","VGAScreen.prototype.port3C5_read","VGAScreen.prototype.port3C6_write","VGAScreen.prototype.port3C6_read","VGAScreen.prototype.port3C7_write","VGAScreen.prototype.port3C7_read","VGAScreen.prototype.port3C8_write","VGAScreen.prototype.port3C8_read","VGAScreen.prototype.port3C9_write","color_byte","VGAScreen.prototype.port3C9_read","color8","VGAScreen.prototype.port3CC_read","VGAScreen.prototype.port3CE_write","VGAScreen.prototype.port3CE_read","VGAScreen.prototype.port3CF_write","previous_planar_mode","VGAScreen.prototype.port3CF_read","VGAScreen.prototype.port3D4_write","VGAScreen.prototype.port3D4_read","VGAScreen.prototype.port3D5_write","previous_vertical_display_enable_end","previous_vertical_blank_start","previous_underline","VGAScreen.prototype.port3D5_read","VGAScreen.prototype.port3DA_read","VGAScreen.prototype.port1CE_write","VGAScreen.prototype.port1CF_write","MAX_XRES","MAX_YRES","svga_bytes_per_line","bits","VGAScreen.prototype.port1CF_read","svga_register_read","VGAScreen.prototype.svga_register_read","MAX_BPP","PS2","use_mouse","enable_mouse_stream","have_mouse","mouse_clicks","mouse_delta_y","mouse_delta_x","have_keyboard","next_read_resolution","next_read_rate","next_handle_scan_code_set","next_read_led","next_read_sample","next_is_mouse_command","enable_keyboard_stream","kbd_buffer","last_port60_byte","sample_rate","mouse_id","mouse_detect_state","mouse_reset_workaround","wheel_movement","resolution","scaling2","mouse_buffer","next_byte_is_aux","next_byte_is_ready","code","kbd_send_code","mouse_send_click","right","middle","send_mouse_packet","mouse_send_delta","factor","delta_x","delta_y","change_x","change_y","command_register","controller_output_port","read_controller_output_port","read_command_register","read_output_register","port60_read","port64_read","port60_write","port64_write","PS2.prototype","PS2.prototype.get_state","PS2.prototype.set_state","PS2.prototype.raise_irq","kbd_irq","mouse_irq","PS2.prototype.mouse_irq","PS2.prototype.kbd_irq","PS2.prototype.send_mouse_packet","dx","dy","PS2.prototype.port60_read","PS2.prototype.port64_read","status_byte","PS2.prototype.port60_write","write_byte","PS2.prototype.port64_write","PIC","irq_value","irr","isr","irq_map","irq_mask","requested_irq","is_master","expect_icw4","read_isr","auto_eoi","elcr","special_mask_mode","check_irqs","this.check_irqs","enabled_irr","special_mask","irq_number","acknowledge_irq","this.acknowledge_irq","pic_call_irq","set_irq","io_base","iobase_high","port20_write","port20_read","port21_write","port21_read","port4D0_write","port4D0_read","this.set_irq","clear_irq","this.clear_irq","PIC.prototype","PIC.prototype.get_state","PIC.prototype.set_state","PIC.prototype.port20_write","eoi_type","PIC.prototype.port20_read","PIC.prototype.port21_write","PIC.prototype.port21_read","PIC.prototype.port4D0_read","PIC.prototype.port4D0_write","RTC","cmos_index","last_update","rtc_time","next_interrupt_alarm","next_interrupt","periodic_interrupt","periodic_interrupt_time","cmos_a","cmos_b","nmi_disabled","cmos_c","cmos_port_write","cmos_port_read","RTC.prototype","RTC.prototype.get_state","RTC.prototype.set_state","RTC.prototype.timer","RTC.prototype.encode_time","digit","RTC.prototype.decode_time","RTC.prototype.cmos_port_read","CMOS_RTC_SECONDS","encode_time","getUTCSeconds","CMOS_RTC_MINUTES","getUTCMinutes","CMOS_RTC_HOURS","getUTCHours","CMOS_RTC_DAY_MONTH","getUTCDate","CMOS_RTC_MONTH","getUTCMonth","CMOS_RTC_YEAR","getUTCFullYear","CMOS_STATUS_A","CMOS_STATUS_B","CMOS_STATUS_C","CMOS_STATUS_D","CMOS_CENTURY","RTC.prototype.cmos_port_write","seconds","decode_time","CMOS_RTC_SECONDS_ALARM","minutes","CMOS_RTC_MINUTES_ALARM","hours","CMOS_RTC_HOURS_ALARM","alarm_date","UTC","cmos_write","UART","ints","line_control","baud_rate","lsr","ier","fifo_control","iir","UART_IIR_NO_INT","scratch_register","modem_status","modem_control","input","current_line","com","data_received","UART_LSR_DATA_READY","CheckInterrupt","write_data","out_word","DLAB","ClearInterrupt","UART_IIR_THRI","UART.prototype.get_state","UART.prototype.set_state","UART.prototype.CheckInterrupt","UART_IER_RDI","UART_IIR_CTI","UART_IER_THRI","UART_IER_MSI","UART_IIR_MSI","UART.prototype.write_data","ThrowInterrupt","char","apply","StateLoadError","msg","message","Error","save_object","saved_buffers","BYTES_PER_ELEMENT","byteOffset","constructor","restore_object","base","buffers","current","table","Int16Array","info","full","buf","CPU.prototype.save_state","buffer_infos","total_buffer_size","info_object","JSON","stringify","buffer_block_start","STATE_INFO_BLOCK_START","ArrayBuffer","header_block","info_block","buffer_block","STATE_INDEX_MAGIC","STATE_MAGIC","STATE_INDEX_VERSION","STATE_VERSION","STATE_INDEX_TOTAL_LEN","STATE_INDEX_INFO_LEN","charCodeAt","CPU.prototype.restore_state","info_block_len","info_block_str_len","info_block_buffer","info_block_obj","parse","state_object","Ne2k","preserve_mac_from_state_image","receive","cr","rxcr","mac","curpg","total_length","packet_length","data_start","next","boundary","available","pstop","pstart","cut","memory","fill","ENRSR_RXOK","do_interrupt","ENISR_RX","imr","tpsr","tcnt","rcnt","dcfg","txcr","tsr","random","rsar","START_PAGE","STOP_PAGE","START_RX_PAGE","E8390_CMD","ENISR_RDC","ENISR_TX","EN0_COUNTER0","EN0_COUNTER1","EN0_COUNTER2","NE_RESET","get_page","pg","ENISR_RESET","EN0_STARTPG","EN0_STOPPG","EN0_ISR","update_irq","EN0_TXCR","EN0_DCFG","EN0_RCNTLO","EN0_RCNTHI","EN0_RSARLO","EN0_RSARHI","EN0_IMR","EN0_BOUNDARY","EN0_TSR","EN0_TPSR","EN0_TCNTLO","EN0_TCNTHI","EN0_RSR","EN0_RXCR","data_port_read8","data_port_read16","data_port_read32","data_port_write16","data_port_write32","Ne2k.prototype","Ne2k.prototype.get_state","Ne2k.prototype.set_state","Ne2k.prototype.do_interrupt","ir_mask","Ne2k.prototype.update_irq","Ne2k.prototype.data_port_write","Ne2k.prototype.data_port_write16","data_port_write","Ne2k.prototype.data_port_write32","Ne2k.prototype.data_port_read","Ne2k.prototype.data_port_read8","Ne2k.prototype.data_port_read16","data_port_read","Ne2k.prototype.data_port_read32","Ne2k.prototype.get_page","DSP_COMMAND_SIZES","DSP_COMMAND_HANDLERS","MIXER_READ_HANDLERS","MIXER_WRITE_HANDLERS","MIXER_REGISTER_IS_LEGACY","FM_HANDLERS","SB16","write_buffer","DSP_BUFSIZE","read_buffer","mixer_current_address","command_size","command","read_buffer_lastvalue","mixer_registers","mixer_reset","dummy_speaker_enabled","test_register","dsp_signed","dsp_16bit","dsp_stereo","dsp_highspeed","dac_buffers","dma_channel","dma_irq","dma_bytes_block","dma_bytes_left","dma_bytes_count","dma_sample_count","dma_channel_8bit","SB_DMA1","dma_channel_16bit","SB_DMA5","dma_autoinit","dma_buffer","SB_DMA_BUFSIZE","dma_buffer_int8","dma_buffer_uint8","dma_buffer_int16","dma_buffer_uint16","dma_syncbuffer","dma_paused","dma_waiting_transfer","sampling_rate","bytes_per_sample","e2_value","e2_count","asp_registers","mpu_read_buffer","fm_current_address1","fm_current_address0","mpu_read_buffer_lastvalue","fm_waveform_select_enable","SB_IRQ5","irq_triggered","port2x0_read","port2x1_read","port2x2_read","port2x3_read","port2x4_read","port2x5_read","port2x6_read","port2x7_read","port2x8_read","port2x9_read","port2xA_read","port2xB_read","port2xC_read","port2xD_read","port2xE_read","port2xF_read","port2x0_write","port2x1_write","port2x2_write","port2x3_write","port2x4_write","port2x5_write","port2x6_write","port2x7_write","port2x8_write","port2x9_write","port2xA_write","port2xB_write","port2xC_write","port2xD_write","port2xE_write","port2xF_write","port3x0_read","port3x1_read","port3x0_write","port3x1_write","dma_on_unmask","dac_handle_request","dac_send","dma_transfer_next","dsp_reset","SB16.prototype.dsp_reset","DSP_NO_COMMAND","SB_IRQ_8BIT","SB16.prototype","SB16.prototype.get_state","mpu_read_buffer_last_value","SB16.prototype.set_state","mixer_full_update","SB16.prototype.port2x0_read","SB16.prototype.port2x1_read","SB16.prototype.port2x2_read","SB16.prototype.port2x3_read","SB16.prototype.port2x4_read","SB16.prototype.port2x5_read","handler","mixer_read","SB16.prototype.port2x6_read","SB16.prototype.port2x7_read","SB16.prototype.port2x8_read","SB16.prototype.port2x9_read","SB16.prototype.port2xA_read","SB16.prototype.port2xB_read","SB16.prototype.port2xC_read","SB16.prototype.port2xD_read","SB16.prototype.port2xE_read","SB16.prototype.port2xF_read","SB_IRQ_16BIT","SB16.prototype.port2x0_write","SB16.prototype.port2x1_write","fm_default_write","SB16.prototype.port2x2_write","SB16.prototype.port2x3_write","SB16.prototype.port2x4_write","SB16.prototype.port2x5_write","mixer_write","SB16.prototype.port2x6_write","yesplease","SB16.prototype.port2x7_write","SB16.prototype.port2x8_write","SB16.prototype.port2x9_write","SB16.prototype.port2xA_write","SB16.prototype.port2xB_write","SB16.prototype.port2xC_write","command_do","dsp_default_handler","SB16.prototype.port2xD_write","SB16.prototype.port2xE_write","SB16.prototype.port2xF_write","SB16.prototype.port3x0_read","SB16.prototype.port3x0_write","SB16.prototype.port3x1_read","SB16.prototype.port3x1_write","SB16.prototype.dsp_default_handler","register_dsp_command","commands","any_first_digit","audio_clip","amplitude","dma_transfer_size_set","dma_transfer_start","sampling_rate_change","get_channel_count","DSP_COPYRIGHT","SB_F9","SB16.prototype.mixer_write","mixer_default_read","SB16.prototype.mixer_default_read","mixer_default_write","SB16.prototype.mixer_default_write","SB16.prototype.mixer_reset","SB16.prototype.mixer_full_update","register_mixer_read","register_mixer_write","register_mixer_legacy","address_old","address_new_left","address_new_right","prev_right","prev_left","register_mixer_volume","mixer_source","MIXER_SRC_MASTER","MIXER_CHANNEL_LEFT","MIXER_CHANNEL_RIGHT","MIXER_SRC_DAC","MIXER_SRC_PCSPEAKER","MIXER_CHANNEL_BOTH","SB_IRQ2","SB_IRQ7","SB_IRQ10","SB_DMA0","SB_DMA3","SB_DMA6","SB_DMA7","SB16.prototype.fm_default_write","register_fm_write","addresses","between","SB_FM_OPERATORS_BY_OFFSET","SB16.prototype.sampling_rate_change","rate","SB16.prototype.dma_transfer_size_set","SB16.prototype.dma_transfer_start","SB_DMA_BLOCK_SAMPLES","max_bytes_block","SB16.prototype.dma_on_unmask","SB16.prototype.dma_transfer_next","samples","dma_to_dac","repeats","sample","SB16.prototype.dac_send","out0","shift_block","out1","SB16.prototype.raise_irq","SB16.prototype.lower_irq","VirtIO","queue_select","queue_size","queue_address","device_status","ring_start","ring_desc_start","last_idx","desc_idx","handle_descriptor","device_reply","VirtIO.prototype.get_state","VirtIO.prototype.set_state","VirtIO.prototype.reset","VirtIO.prototype.handle_descriptor","desc_start","buffer_idx","VRING_DESC_F_WRITE","addr_low","addr_high","VRING_DESC_F_NEXT","buffer_len","pointer","ReceiveRequest","VirtIO.prototype.device_reply","queueidx","result_length","used_desc_start","used_idx","used_desc_offset","BusConnector","listeners","pair","BusConnector.prototype.register","unregister","BusConnector.prototype.unregister","filter","l","BusConnector.prototype.send","listener","Bus.create","c0","c1","a20_enabled","segment_is_null","segment_limits","segment_offsets","tlb_data","tlb_info","tlb_info_global","protected_mode","gdtr_offset","gdtr_size","idtr_offset","idtr_size","page_fault","tss_size_32","page_size_extensions","cpl","stack_size_32","is_32","last_result","last_add_result","last_op_size","last_op2","last_op1","prefixes","sysenter_eip","sysenter_esp","sysenter_cs","esp_phys","last_virt_esp","eip_phys","last_virt_eip","div32_result","phys_addr_high","phys_addr","modrm_byte","tsc_offset","paging","previous_ip","instruction_pointer","apic_enabled","timestamp_counter","reg32s","reg32","reg16s","reg16","reg8s","reg8","reg_mmxs","reg_mmx8s","reg_mmx8","reg_xmm32s","mxcsr","sreg","dreg","main","vga","fw_value","fpu","update_operand_size","debug_init","CPU.prototype.get_state","virtio","apic","acpi","hpet","ps2","uart0","fdc","net","pic","sb16","ioapic","uart1","uart2","uart3","CPU.prototype.set_state","full_clear_tlb","CPU.prototype.exception_cleanup","clear_prefixes","CPU.prototype.reset","flags_default","switch_cs_real_mode","switch_seg","reg_ss","reg_sp","create_memory","CPU.prototype.create_memory","goog.exportProperty","CPU.prototype.init","device_bus","a20_byte","FW_CFG_SIGNATURE","FW_CFG_RAM_SIZE","FW_CFG_NB_CPUS","load_devices","fill_cmos","ide_device_count","enable_ne2k","fs9p","load_multiboot","CPU.prototype.load_multiboot","MULTIBOOT_SEARCH_BYTES","buf32","MAGIC","checksum","reg_eax","reg_ebx","multiboot_info_addr","update_cs_size","MULTIBOOT_HEADER_ADDRESS","load_addr","load_end_addr","entry_addr","header_addr","write_blob","get_seg","reg_cs","ELF_MAGIC","elf","read_elf","program_headers","program","filesz","paddr","CPU.prototype.fill_cmos","CMOS_BIOS_BOOTFLAG1","CMOS_BIOS_BOOTFLAG2","CMOS_MEM_BASE_LOW","CMOS_MEM_BASE_HIGH","memory_above_1m","CMOS_MEM_OLD_EXT_LOW","CMOS_MEM_OLD_EXT_HIGH","CMOS_MEM_EXTMEM_LOW","CMOS_MEM_EXTMEM_HIGH","memory_above_16m","CMOS_MEM_EXTMEM2_LOW","CMOS_MEM_EXTMEM2_HIGH","CMOS_MEM_HIGHMEM_LOW","CMOS_MEM_HIGHMEM_MID","CMOS_MEM_HIGHMEM_HIGH","CMOS_EQUIPMENT_INFO","CMOS_BIOS_SMP_COUNT","fastboot","CPU.prototype.load_bios","vga_bios8","CPU.prototype.cycle_internal","opcode","read_imm8","cycle","CPU.prototype.cycle","CPU.prototype.segment_prefix_op","run_prefix_instruction","CPU.prototype.run_prefix_instruction","table32","table16","CPU.prototype.set_cr0","cr0","CR0_PG","debug","unimpl","CR0_EM","CR0_ET","new_paging","CR0_PE","CPU.prototype.cpl_changed","CPU.prototype.read_imm8","translate_address_read","data8","read_imm8s","CPU.prototype.read_imm8s","read_imm16","CPU.prototype.read_imm16","read_imm32s","CPU.prototype.read_imm32s","CPU.prototype.create_atom64s","CPU.prototype.create_atom128s","d0","d1","d2","d3","CPU.prototype.read_modrm_byte","read_op0F","read_sib","read_op8","read_op8s","read_op16","read_op32s","read_disp8","read_disp8s","read_disp16","read_disp32s","CPU.prototype.modrm_resolve","is_asize_32","modrm_table32","modrm_table16","CPU.prototype.sib_resolve","mod","sib_table","CPU.prototype.virt_boundary_write32","CPU.prototype.safe_read8","CPU.prototype.safe_read16","safe_read8","CPU.prototype.safe_read32s","CPU.prototype.safe_read64s","create_atom64s","CPU.prototype.safe_write8","translate_address_write","CPU.prototype.safe_write16","phys_low","virt_boundary_write16","CPU.prototype.safe_write32","virt_boundary_write32","CPU.prototype.safe_write64","CPU.prototype.safe_write128","CPU.prototype.read_moffs","get_seg_prefix","reg_ds","CPU.prototype.getiopl","CPU.prototype.vm86_mode","flag_vm","CPU.prototype.get_eflags","getcf","getpf","getaf","getzf","getsf","getof","CPU.prototype.update_eflags","new_flags","dont_update","flag_iopl","getiopl","flag_interrupt","CPU.prototype.get_stack_reg","reg_esp","CPU.prototype.set_stack_reg","CPU.prototype.adjust_stack_reg","CPU.prototype.get_stack_pointer","CPU.prototype.get_real_eip","CPU.prototype.call_interrupt_vector","interrupt_nr","is_software_int","error_code","vm86_mode","CR4_VME","trigger_gp","translate_address_system_read","selector","access","descriptor","lookup_segment_selector","do_task_switch","tss_is_16","tss_is_busy","is_valid","is_null","from_gdt","is_present","effective_limit","tsr_offset","reg_tr","old_eflags","get_eflags","TSR_EIP","get_real_eip","TSR_EFLAGS","TSR_EAX","TSR_ECX","reg_ecx","TSR_EDX","reg_edx","TSR_EBX","TSR_ESP","TSR_EBP","reg_ebp","TSR_ESI","reg_esi","TSR_EDI","reg_edi","TSR_ES","reg_es","TSR_CS","TSR_SS","TSR_DS","TSR_FS","reg_fs","TSR_GS","reg_gs","table_offset","new_tsr_offset","TSR_BACKLINK","new_cr3","TSR_CR3","new_eip","new_cs","is_system","is_executable","dc_bit","dpl","rpl","cpl_changed","new_eflags","flag_nt","update_eflags","new_ldt","TSR_LDT","load_ldt","clear_tlb","CR0_TS","push16","push32","is_trap","is_16","trigger_np","old_flags","tss_stack_addr","get_tss_stack_addr","new_esp","new_ss","ss_info","rw_bit","old_esp","old_ss","stack_space","translate_address_system_write","set_stack_reg","get_stack_pointer","new_ip","CPU.prototype.iret","adjust_stack_reg","temp_esp","temp_ss","new_es","new_ds","new_fs","new_gs","new_cpl","is_writable","trigger_ss","call_interrupt_vector","CPU.prototype.switch_cs_real_mode","CPU.prototype.far_return","eip","stack_adjust","CPU.prototype.far_jump","is_call","cs_selector","raw0","cs_info","parameter_count","raw1","old_stack_pointer","parameter","types","CPU.prototype.get_tss_stack_addr","CPU.prototype.trigger_de","raise_exception","CPU.prototype.trigger_ud","CPU.prototype.trigger_nm","CPU.prototype.trigger_gp","raise_exception_with_code","CPU.prototype.trigger_np","CPU.prototype.task_switch_test","trigger_nm","CPU.prototype.task_switch_test_mmx","CPU.prototype.get_seg_prefix_ds","CPU.prototype.get_seg_prefix_ss","CPU.prototype.get_seg_prefix","default_segment","prefix","PREFIX_MASK_SEGMENT","SEG_PREFIX_ZERO","CPU.prototype.get_seg","segment","CPU.prototype.read_e8","modrm_resolve","CPU.prototype.read_e16","CPU.prototype.read_e32s","CPU.prototype.read_mmx_mem32s","CPU.prototype.read_mmx_mem64s","safe_read64s","CPU.prototype.read_xmm_mem64s","CPU.prototype.read_xmm_mem128s","phys","safe_read128s_aligned","create_atom128s","CPU.prototype.set_e8","safe_write8","CPU.prototype.set_e16","CPU.prototype.set_e32","CPU.prototype.read_write_e8","virt_addr","CPU.prototype.write_e8","CPU.prototype.read_write_e16","virt_boundary_read16","CPU.prototype.write_e16","CPU.prototype.read_write_e32","virt_boundary_read32s","mid","CPU.prototype.write_e32","CPU.prototype.read_reg_e16","CPU.prototype.write_reg_e16","CPU.prototype.read_reg_e32s","CPU.prototype.write_reg_e32","CPU.prototype.read_g8","CPU.prototype.write_g8","CPU.prototype.read_g16","CPU.prototype.read_g16s","CPU.prototype.write_g16","CPU.prototype.read_g32s","CPU.prototype.write_g32","CPU.prototype.read_xmm64s","CPU.prototype.read_xmm128s","CPU.prototype.read_mmx64s","CPU.prototype.write_mmx64s","CPU.prototype.write_xmm64","CPU.prototype.write_xmm128s","CPU.prototype.pic_call_irq","int","CPU.prototype.handle_irqs","CPU.prototype.device_raise_irq","CPU.prototype.device_lower_irq","CPU.prototype.test_privileges_for_io","tsr_size","iomap_base","port_info","CPU.prototype.update_cs_size","new_size","CPU.prototype.update_operand_size","CPU.prototype.lookup_segment_selector","is_gdt","selector_offset","is_conforming_executable","is_readable","table_limit","reg_ldtr","limit","CPU.prototype.switch_seg","reg","CPU.prototype.load_ldt","CPU.prototype.lar","original","dpl_bad","LAR_INVALID_TYPE","CPU.prototype.lsl","LSL_INVALID_TYPE","CPU.prototype.clear_tlb","CPU.prototype.full_clear_tlb","CPU.prototype.translate_address_read","TLB_USER_READ","do_page_translation","CPU.prototype.translate_address_write","TLB_USER_WRITE","CPU.prototype.translate_address_system_write","TLB_SYSTEM_WRITE","CPU.prototype.translate_address_system_read","TLB_SYSTEM_READ","CPU.prototype.do_page_translation","for_writing","user","page","page_dir_addr","page_dir_entry","can_write","allow_user","trigger_pagefault","CR0_WP","page_table_addr","page_table_entry","write_aligned32","global","allowed_flag","CR4_PGE","CPU.prototype.writable_or_pagefault","CPU.prototype.trigger_pagefault","present","CPU.prototype.is_osize_32","PREFIX_MASK_OPSIZE","CPU.prototype.is_asize_32","PREFIX_MASK_ADDRSIZE","CPU.prototype.get_reg_asize","r","CPU.prototype.set_ecx_asize","reg_cx","CPU.prototype.add_reg_asize","CPU.prototype.decr_ecx_asize","CPU.prototype.invalid_arithmatic","CPU_EX_I","CPU.prototype.is_SNaN32","module","exports","importScripts","self","get_seg_prefix_ds","reg_bx","reg_si","reg_di","get_seg_prefix_ss","reg_bp","sib_resolve","string_get_cycle_count","string_get_cycle_count2","addr1","addr2","CPU.prototype.add8","dest","add","OPSIZE_8","CPU.prototype.add16","OPSIZE_16","CPU.prototype.add32","OPSIZE_32","CPU.prototype.adc8","adc","CPU.prototype.adc16","CPU.prototype.adc32","CPU.prototype.sub8","sub","CPU.prototype.sub16","CPU.prototype.sub32","CPU.prototype.sbb8","sbb","CPU.prototype.sbb16","CPU.prototype.sbb32","CPU.prototype.add","dest_operand","source_operand","op_size","flags_all","CPU.prototype.adc","cf","CPU.prototype.sub","CPU.prototype.sbb","CPU.prototype.inc","CPU.prototype.dec","CPU.prototype.neg","CPU.prototype.imul_reg16","operand1","operand2","CPU.prototype.imul_reg32","lo","hi","CPU.prototype.do_div32","div_low","div_high","quot","trigger_de","q","div","CPU.prototype.and8","and","CPU.prototype.and16","CPU.prototype.and32","CPU.prototype.or8","or","CPU.prototype.or16","CPU.prototype.or32","CPU.prototype.xor8","xor","CPU.prototype.xor16","CPU.prototype.xor32","CPU.prototype.and","CPU.prototype.or","CPU.prototype.xor","CPU.prototype.rol8","flag_overflow","CPU.prototype.rol16","CPU.prototype.rol32","CPU.prototype.rcl8","CPU.prototype.rcl16","CPU.prototype.rcl32","CPU.prototype.ror8","CPU.prototype.ror16","CPU.prototype.ror32","CPU.prototype.rcr8","CPU.prototype.rcr16","CPU.prototype.rcr32","CPU.prototype.shl8","CPU.prototype.shl16","CPU.prototype.shl32","CPU.prototype.shr8","CPU.prototype.shr16","CPU.prototype.shr32","CPU.prototype.sar8","CPU.prototype.sar16","CPU.prototype.sar32","CPU.prototype.shrd16","CPU.prototype.shrd32","CPU.prototype.shld16","CPU.prototype.shld32","CPU.prototype.bt_reg","bit_base","bit_offset","CPU.prototype.btc_reg","CPU.prototype.bts_reg","CPU.prototype.btr_reg","CPU.prototype.bt_mem","CPU.prototype.btc_mem","CPU.prototype.btr_mem","CPU.prototype.bts_mem","CPU.prototype.popcnt","v","CPU.prototype.saturate_sw_to_ub","CPU.prototype.saturate_sw_to_sb","CPU.prototype.saturate_sd_to_sw","CPU.prototype.saturate_sd_to_sb","CPU.prototype.saturate_sd_to_ub","CPU.prototype.saturate_ud_to_ub","CPU.prototype.saturate_uw","CPU.prototype.integer_round","rc","rounded","round","CPU.prototype.jmpcc8","condition","imm8","CPU.prototype.jmp_rel16","rel16","current_cs","CPU.prototype.jmpcc16","imm16","jmp_rel16","CPU.prototype.jmpcc32","imm32s","CPU.prototype.cmovcc16","read_e16","write_g16","CPU.prototype.cmovcc32","read_e32s","write_g32","CPU.prototype.setcc","set_e8","loop","CPU.prototype.loop","imm8s","decr_ecx_asize","CPU.prototype.getcf","CPU.prototype.getpf","flag_parity","CPU.prototype.getaf","flag_adjust","CPU.prototype.getzf","CPU.prototype.getsf","flag_sign","CPU.prototype.getof","test_o","test_b","test_z","test_s","test_p","CPU.prototype.test_be","CPU.prototype.test_l","CPU.prototype.test_le","CPU.prototype.push16","sp","CPU.prototype.push32","imm32","CPU.prototype.pop16","get_stack_reg","CPU.prototype.pop32s","CPU.prototype.xchg16r","operand","temp","reg_ax","CPU.prototype.xchg32r","CPU.prototype.lss16","seg","new_reg","new_seg","CPU.prototype.lss32","CPU.prototype.bswap","t16","t32","read_modrm_byte","write_e8","add8","read_write_e8","read_g8","write_e16","add16","read_write_e16","read_g16","write_e32","add32","read_write_e32","read_g32s","write_g8","read_e8","reg_al","or8","or16","or32","table0F_16","table0F_32","adc8","adc16","adc32","sbb8","sbb16","sbb32","and8","and16","and32","segment_prefix_op","old_al","old_cf","old_af","sub8","sub16","sub32","xor8","xor16","xor32","reg_ah","inc","reg_dx","dec","pop16","pop32s","imul_reg16","imul_reg32","test_privileges_for_io","get_reg_asize","flag_direction","PREFIX_MASK_REP","start_count","cycle_counter","MAX_COUNT_PER_CYCLE","phys_dest","port_read8","cont","add_reg_asize","set_ecx_asize","port_read16","single_size","write_aligned16","port_read32","phys_src","port_write8","port_write16","read_aligned16","port_write32","read_aligned32","jmpcc8","test_be","test_l","test_le","tmp","set_e16","set_e32","write_reg_e16","write_reg_e32","xchg16r","xchg32r","far_jump","flag_trap","flags_mask","read_moffs","ds","es","align_mask","in_mmap_range","is_repz","PREFIX_REPZ","data_dest","data_src","reg_cl","reg_dl","reg_bl","reg_ch","reg_dh","reg_bh","op1","op2","rol8","ror8","rcl8","rcr8","shl8","shr8","sar8","rol16","ror16","rcl16","rcr16","shl16","shr16","sar16","rol32","ror32","rcl32","rcr32","shl32","shr32","sar32","ip","lss16","lss32","nesting_level","frame_temp","tmp_ebp","old_vbp","new_bp","new_ebp","cs","far_return","iret","task_switch_test","m32","load_m32","st0","fcom","sti","store_m32","fldenv","fstenv","abs","ftst","isNaN","fxam","Infinity","FPU_C2","tan","atan2","fxtract","st1","fprem_quotient","trunc","sqrt","sin","cos","truncate","fucom","int32","load_m80","store_m80","finit","fcomi","fucomi","m64","load_m64","low_ptr","store_m64","frstor","fsave","m16","TWO_POW_63","st0_low","st0_high","PREFIX_REPNZ","neg","target_operand","high_result","result_mod","do_div32","dest_operand_low","dest_operand_high","is_neg","div_is_neg","flag_carry","set_cr0","lar","lsl","task_switch_test_mmx","read_xmm_mem64s","write_xmm64","read_xmm64s","safe_write64","CR4_DE","read_reg_e32s","cr4","CR4_PSE","PSE_ENABLED","CR4_PAE","read_xmm_mem128s","write_xmm128s","PREFIX_66","read_xmm128s","safe_write128","read_mmx_mem64s","res32","res0","res1","write_mmx64s","source1","source2","is_SNaN32","IA32_SYSENTER_CS","IA32_SYSENTER_EIP","IA32_SYSENTER_ESP","IA32_APIC_BASE_MSR","IA32_APIC_BASE_EN","IA32_TIME_STAMP_COUNTER","TSC_RATE","CR4_TSD","MSR_EBC_FREQUENCY_ID","cmovcc16","cmovcc32","destination","source8","destination8","read_mmx_mem32s","destination_low","source16","destination16","destination_high","saturate_sw_to_sb","source64s","source8s","reg_offset","destination8s","byte4","byte5","byte6","byte7","word0","word1","word2","word3","source16s","destination16s","result8","saturate_sw_to_ub","saturate_sd_to_sw","PREFIX_F3","order","PREFIX_F2","word0_shift","word1_shift","word2_shift","word3_shift","destination128","read_mmx64s","jmpcc16","jmpcc32","setcc","eax","ecx","edx","ebx","bt_mem","read_g16s","bt_reg","read_reg_e16","shld16","shld32","bts_mem","bts_reg","shrd16","shrd32","MXCSR_MASK","new_mxcsr","btr_mem","btr_reg","popcnt","btc_mem","btc_reg","old","m64_low","m64_high","rand","has_rand","bswap","saturate_sd_to_ub","saturate_ud_to_ub","saturate_uw","saturate_sd_to_sb","s","d","CPU.prototype.debug_init","step_mode","ops","all_ops","trace_all","show","debug.show","debug.init","get_regs_short","r32_names","line1","line2","dump_regs","dump_regs_short","dump_instructions","get_instructions","vm","iopl","cs_eip","ss_esp","if_","flag_names","flag_string","dump_state","dump_stack","dump_page_directory","dump_gdt_ldt","dump_idt","get_memory_dump","memory_hex_dump","used_memory_dump","step","run_until","debug.unimpl","logop","debug.logop","debug_interrupt","debug.debug_interrupt","DataView","U8","getUint8","setUint8","U16","getUint16","setUint16","U32","getUint32","setUint32","Header","create_struct","magic","class","version0","osabi","abiversion","pad0","pad","machine","version1","phoff","shoff","ehsize","phentsize","phnum","shentsize","shnum","shstrndx","reduce","ProgramHeader","vaddr","memsz","align","SectionHeader","link","addralign","entsize","struct","keys","view","read_struct","read_structs","sections_headers","Struct","LITTLE_ENDIAN","FS","baseurl","events","filesinloadingqueue","qidnumber","OnLoaded","this.OnLoaded","FS.prototype.AddEvent","OnEvent","STATUS_OK","FS.prototype.HandleEvent","newevents","FS.prototype.OnJSONLoaded","fsdata","JSONFS_VERSION","fsroot","LoadRecursive","me.OnLoaded","FS.prototype.LoadRecursive","JSONFS_IDX_NAME","JSONFS_IDX_SIZE","JSONFS_IDX_MTIME","JSONFS_IDX_MODE","JSONFS_IDX_UID","JSONFS_IDX_GID","ifmt","S_IFMT","JSONFS_IDX_TARGET","updatedir","LoadDir","children","S_IFREG","STATUS_ON_SERVER","S_IFLNK","FS.prototype.LoadFile","STATUS_LOADING","LoadBinaryResource","GetFullPath","HandleEvent","FS.prototype.PushInode","parent_node","nextid","firstid","Inode","path","FS.prototype.CreateInode","FS.prototype.CreateDirectory","FS.prototype.CreateFile","FS.prototype.CreateNode","FS.prototype.CreateSymlink","FS.prototype.CreateBinaryFile","FS.prototype.OpenInode","FillDirectory","UTF8.UTF8Length","LoadFile","FS.prototype.CloseInode","STATUS_INVALID","FS.prototype.Rename","olddirid","newdirid","oldid","newid","FindPreviousID","FS.prototype.Write","FS.prototype.Search","FS.prototype.GetFullPath","substring","FS.prototype.FindPreviousID","FS.prototype.Unlink","FS.prototype.GetInode","FS.prototype.ChangeSize","newsize","FS.prototype.SearchPath","FS.prototype.PrepareCAPs","url","OnSuccess","OnError","responseType","onreadystatechange","req.onreadystatechange","arrayBuffer","response","require","typelist","lengthoffset","UnicodeToUTF8Stream","utf8","output","val","utf8converter","UTF8StreamToUnicode","Put","stream","ofs","this.Put","key","KeyboardAdapter","keyup_handler","altKey","keys_pressed","handle_code","keydown_handler","blur_handler","keydown","keyboard","shiftKey","keyCode","classList","contains","nodeName","codemap","preventDefault","send_to_controller","asciimap","asciimap_shift","simulate_press","this.simulate_press","simulate_char","this.simulate_char","SHIFT_SCAN_CODE","MouseAdapter","may_handle","mouse","enabled","parent","pointerLockElement","child","touch_start_handler","touches","touch","last_x","clientX","last_y","clientY","touch_end_handler","left_down","middle_down","right_down","mousemove_handler","SPEED_FACTOR","pageX","offsetLeft","pageY","offsetTop","offsetWidth","offsetHeight","mousedown_handler","click_event","mouseup_handler","down","mousewheel_handler","wheelDelta","detail","passive","SpeakerAdapter","AudioContext","SpeakerDAC","AudioWorklet","SpeakerWorkletDAC","SpeakerBufferSourceDAC","audio_context","mixer","SpeakerMixer","pcspeaker","PCSpeaker","suspend","resume","warn","create_gain_handler","audio_node","decibels","gain","setValueAtTime","currentTime","sources","Map","gain_right","gain_left","volume_right","volume_left","volume_both","node_treble_left","createBiquadFilter","node_treble_right","frequency","node_bass_left","node_bass_right","node_gain_left","createGain","node_gain_right","node_merger","createChannelMerger","input_left","input_right","connect","connect_source","source_id","disconnect_source","disconnect","set_volume","update","SpeakerMixer.prototype.add_source","source_node","SpeakerMixerSource","has","SpeakerMixer.prototype.set_volume","SpeakerMixer.prototype.update","net_gain_right","destination_left","destination_right","connected_right","connected_left","gain_hidden","node_splitter","createChannelSplitter","SpeakerMixerSource.prototype.update","SpeakerMixerSource.prototype.connect","both","SpeakerMixerSource.prototype.disconnect","SpeakerMixerSource.prototype.set_volume","node_oscillator","createOscillator","mixer_connection","add_source","maxValue","PCSpeaker.prototype.start","worklet_string","worklet","sinc","DACProcessor","Reflect","construct","AudioWorkletProcessor","kernel_size","queue_data","queue_start","queue_end","queue_length","queued_samples","source_buffer_previous","EMPTY_BUFFER","source_buffer_current","source_samples_per_destination","source_block_start","source_time","source_offset","onmessage","self.port.onmessage","event","queue_push","sampleRate","MINIMUM_BUFFER_SIZE","setPrototypeOf","DACProcessor.prototype.process","inputs","outputs","sum0","sum1","convolute_index","get_sample","kernel","samples_needed_per_block","ensure_enough_data","DACProcessor.prototype.kernel","DACProcessor.prototype.get_sample","DACProcessor.prototype.ensure_enough_data","needed","current_length","prepare_next_buffer","DACProcessor.prototype.prepare_next_buffer","queue_shift","sample_count","queue_pos","buffer_count","new_big_buffer_size","new_big_buffer","new_big_buffer_pos","small_buffer","pump","DACProcessor.prototype.pump","QUEUE_RESERVE","DACProcessor.prototype.queue_push","DACProcessor.prototype.queue_shift","registerProcessor","worklet_url","worklet_blob","worklet_code","indexOf","lastIndexOf","worklet_code_end","node_processor","node_output","audioWorklet","addModule","then","AudioWorkletNode","this.node_processor.port.onmessage","queue","SpeakerWorkletDAC.prototype.queue","SpeakerWorkletDAC.prototype.pump","buffered_time","rate_ratio","node_lowpass","AUDIOBUFFER_MINIMUM_SAMPLING_RATE","SpeakerBufferSourceDAC.prototype.queue","block_duration","createBuffer","buffer_data0","getChannelData","buffer_data1","buffer_index","copyToChannel","createBufferSource","current_time","current_silence_duration","target_silence_duration","DAC_QUEUE_RESERVE","SpeakerBufferSourceDAC.prototype.pump","SerialAdapter","keypress_handler","serial","send_char","paste_handler","clipboardData","getData","window_click_handler","text_new_line","show_char","this.show_char","this.update","delta","update_timer","render","clearTimeout","this.render","this.send_char","chr_code","NetworkAdapter","socket","send_queue","last_connect_attempt","reconnect_interval","NetworkAdapter.prototype","handle_message","NetworkAdapter.prototype.handle_message","handle_close","NetworkAdapter.prototype.handle_close","handle_open","NetworkAdapter.prototype.handle_open","handle_error","NetworkAdapter.prototype.handle_error","NetworkAdapter.prototype.destroy","close","NetworkAdapter.prototype.connect","WebSocket","binaryType","onopen","onclose","onerror","NetworkAdapter.prototype.send","load_file","options","http","method","as_text","headers","header_names","setRequestHeader","range","http.onload","progress","onprogress","http.onprogress","load_file_nodejs","fd","o","encoding","AsyncXHRBuffer","block_size","loaded_blocks","SyncFileBuffer","AsyncFileBuffer","v86util.load_file","v86util.AsyncXHRBuffer","v86util.AsyncFileBuffer","determine_size","cb","getResponseHeader","match","Range","AsyncXHRBuffer.prototype.load","get_from_cache","AsyncXHRBuffer.prototype.get_from_cache","number_of_blocks","block_index","block","AsyncXHRBuffer.prototype.get","handle_read","AsyncXHRBuffer.prototype.set","start_block","block_count","data_slice","AsyncXHRBuffer.prototype.handle_read","written_block","AsyncXHRBuffer.prototype.get_buffer","SyncFileBuffer.prototype.load","load_next","SyncFileBuffer.prototype.load_next","PART_SIZE","SyncFileBuffer.prototype.get","SyncFileBuffer.prototype.set","SyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.load","AsyncFileBuffer.prototype.get","fr","AsyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.get_as_file","parts","existing_blocks","Number","sort","current_offset","File","put_on_settings","fs9p_json","add_file","files_to_load","loadable","async","OnJSONLoaded","adapter_bus","emulator_bus","network_adapter","keyboard_adapter","screen_adapter","DummyScreenAdapter","serial_adapter","image_names","fs_url","base_url","starter","lengthComputable","request","V86Starter.prototype.run","V86Starter.prototype.stop","V86Starter.prototype.destroy","V86Starter.prototype.restart","V86Starter.prototype.add_listener","remove_listener","V86Starter.prototype.remove_listener","V86Starter.prototype.restore_state","V86Starter.prototype.save_state","callback","get_statistics","V86Starter.prototype.get_statistics","V86Starter.prototype.get_instruction_counter","is_running","V86Starter.prototype.is_running","V86Starter.prototype.keyboard_send_scancodes","codes","keyboard_send_keys","V86Starter.prototype.keyboard_send_keys","V86Starter.prototype.keyboard_send_text","string","V86Starter.prototype.screen_make_screenshot","V86Starter.prototype.screen_set_scale","sx","sy","V86Starter.prototype.screen_go_fullscreen","focus_element","V86Starter.prototype.lock_mouse","keyboard_set_status","V86Starter.prototype.keyboard_set_status","serial0_send","V86Starter.prototype.serial0_send","serial_send_bytes","V86Starter.prototype.serial_send_bytes","V86Starter.prototype.create_file","parent_id","SearchPath","path_infos","not_found","CreateBinaryFile","FileNotFoundError","V86Starter.prototype.read_file","graphic_buffer"]
}
